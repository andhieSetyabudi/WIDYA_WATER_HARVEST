
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d28  08008d28  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d30  08008d30  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08008d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  2000022c  08008f64  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f68  08008f64  00021f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcd5  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a1  00000000  00000000  0003ff31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  000444d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  00045a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be7a  00000000  00000000  00046e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aed3  00000000  00000000  00062c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a491  00000000  00000000  0007db6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00117ffe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc4  00000000  00000000  00118054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c38 	.word	0x08008c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	08008c38 	.word	0x08008c38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <digitalToggle>:
//	__NOP();
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	463b      	mov	r3, r7
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fca5 	bl	8001eea <HAL_GPIO_TogglePin>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b0a3      	sub	sp, #140	; 0x8c
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f001 f93f 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f88b 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9ab 	bl	8000910 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f97f 	bl	80008bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80005be:	f000 f92d 	bl	800081c <MX_TIM1_Init>
  MX_RTC_Init();
 80005c2:	f000 f905 	bl	80007d0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80005c6:	f007 f8b1 	bl	800772c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 80005ca:	4a38      	ldr	r2, [pc, #224]	; (80006ac <main+0x104>)
 80005cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 80005da:	4a35      	ldr	r2, [pc, #212]	; (80006b0 <main+0x108>)
 80005dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e4:	6018      	str	r0, [r3, #0]
 80005e6:	3304      	adds	r3, #4
 80005e8:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 80005ea:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <main+0x10c>)
 80005ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f4:	6018      	str	r0, [r3, #0]
 80005f6:	3304      	adds	r3, #4
 80005f8:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  USBSerial.begin();
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <main+0x110>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4798      	blx	r3
  delay_microsInit();
 8000600:	f000 fb5e 	bl	8000cc0 <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <main+0x114>)
 8000606:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <main+0x118>)
 8000608:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <main+0x114>)
 800060c:	685c      	ldr	r4, [r3, #4]
 800060e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000612:	2319      	movs	r3, #25
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800061a:	f8ad 3000 	strh.w	r3, [sp]
 800061e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000620:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000624:	ca06      	ldmia	r2, {r1, r2}
 8000626:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);
  char txt[20]="halloooo \n";
 8000628:	4a26      	ldr	r2, [pc, #152]	; (80006c4 <main+0x11c>)
 800062a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800062e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000630:	c303      	stmia	r3!, {r0, r1}
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	3302      	adds	r3, #2
 8000636:	0c12      	lsrs	r2, r2, #16
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( USBSerial.peek() >= USB_OTG_FS_MAX_PACKET_SIZE )
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <main+0x110>)
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064a:	4798      	blx	r3
 800064c:	4603      	mov	r3, r0
 800064e:	2b3f      	cmp	r3, #63	; 0x3f
 8000650:	d902      	bls.n	8000658 <main+0xb0>
	  	  USBSerial.flush();
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0x110>)
 8000654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000656:	4798      	blx	r3
//	  USBSerial.puts((uint8_t*)txt,strlen(txt));
	  int press_adc = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
	  if ( HX710B.read(&pressure_sensor1,&press_adc, 1000) == HX710B_OK )
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <main+0x114>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4639      	mov	r1, r7
 8000662:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800066a:	4798      	blx	r3
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d110      	bne.n	8000694 <main+0xec>
	  {
//		  uint32_t press_offset = 7240000;
		  sprintf(tmp,"value sensor = %i \n\r",press_adc);
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4914      	ldr	r1, [pc, #80]	; (80006c8 <main+0x120>)
 8000678:	4618      	mov	r0, r3
 800067a:	f007 febd 	bl	80083f8 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0x110>)
 8000680:	691c      	ldr	r4, [r3, #16]
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdab 	bl	80001e0 <strlen>
 800068a:	4602      	mov	r2, r0
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	47a0      	blx	r4
//		  float scale = press_adc * (-0.000018);
//		  sprintf(tmp,"voltage = %i \n\r",scale*1E+6);
//		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }

	  HAL_Delay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f001 f93c 	bl	8001914 <HAL_Delay>
	  digitalToggle(LED_pin_);
 800069c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80006a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006a4:	f7ff ff70 	bl	8000588 <digitalToggle>
  {
 80006a8:	e7cd      	b.n	8000646 <main+0x9e>
 80006aa:	bf00      	nop
 80006ac:	08008c68 	.word	0x08008c68
 80006b0:	08008c70 	.word	0x08008c70
 80006b4:	08008c78 	.word	0x08008c78
 80006b8:	20000018 	.word	0x20000018
 80006bc:	20000004 	.word	0x20000004
 80006c0:	08000d15 	.word	0x08000d15
 80006c4:	08008c80 	.word	0x08008c80
 80006c8:	08008c50 	.word	0x08008c50

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09a      	sub	sp, #104	; 0x68
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f007 fe84 	bl	80083e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <SystemClock_Config+0xfc>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <SystemClock_Config+0xfc>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <SystemClock_Config+0xfc>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0x100>)
 8000728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0x100>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800073a:	2305      	movs	r3, #5
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000750:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000752:	230f      	movs	r3, #15
 8000754:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000756:	2390      	movs	r3, #144	; 0x90
 8000758:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800075a:	2304      	movs	r3, #4
 800075c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fd5c 	bl	8003224 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 f951 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	2101      	movs	r1, #1
 8000792:	4618      	mov	r0, r3
 8000794:	f002 ffbe 	bl	8003714 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800079e:	f000 f93b 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 f97f 	bl	8003ab4 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007bc:	f000 f92c 	bl	8000a18 <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3768      	adds	r7, #104	; 0x68
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_RTC_Init+0x44>)
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <MX_RTC_Init+0x48>)
 80007d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_RTC_Init+0x44>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_RTC_Init+0x44>)
 80007e2:	227f      	movs	r2, #127	; 0x7f
 80007e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_RTC_Init+0x44>)
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_RTC_Init+0x44>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_RTC_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_RTC_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_RTC_Init+0x44>)
 8000800:	f003 fa48 	bl	8003c94 <HAL_RTC_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800080a:	f000 f905 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200004c4 	.word	0x200004c4
 8000818:	40002800 	.word	0x40002800

0800081c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_TIM1_Init+0x98>)
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <MX_TIM1_Init+0x9c>)
 800083c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000840:	2247      	movs	r2, #71	; 0x47
 8000842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM1_Init+0x98>)
 800084c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_TIM1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000866:	f003 fafa 	bl	8003e5e <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 f8d2 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_TIM1_Init+0x98>)
 8000882:	f003 fb3b 	bl	8003efc <HAL_TIM_ConfigClockSource>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800088c:	f000 f8c4 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_TIM1_Init+0x98>)
 800089e:	f003 fd0b 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f000 f8b6 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200004e4 	.word	0x200004e4
 80008b8:	40010000 	.word	0x40010000

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART1_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f003 fd4e 	bl	8004394 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f88b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000480 	.word	0x20000480
 800090c:	40011000 	.word	0x40011000

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <MX_GPIO_Init+0xfc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a37      	ldr	r2, [pc, #220]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a30      	ldr	r2, [pc, #192]	; (8000a0c <MX_GPIO_Init+0xfc>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xfc>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_GPIO_Init+0xfc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0x100>)
 800099e:	f001 fa8b 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_GPIO_Init+0x104>)
 80009aa:	f001 fa85 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <MX_GPIO_Init+0x100>)
 80009c8:	f001 f8da 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	480b      	ldr	r0, [pc, #44]	; (8000a14 <MX_GPIO_Init+0x104>)
 80009e6:	f001 f8cb 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_GPIO_Init+0x104>)
 8000a00:	f001 f8be 	bl	8001b80 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020400 	.word	0x40020400

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_RTC_MspInit+0x24>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d102      	bne.n	8000a8c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_RTC_MspInit+0x28>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40002800 	.word	0x40002800
 8000a9c:	42470e3c 	.word	0x42470e3c

08000aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_TIM_Base_MspInit+0x3c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10d      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_TIM_Base_MspInit+0x40>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x40>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_TIM_Base_MspInit+0x40>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12c      	bne.n	8000b60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b50:	2307      	movs	r3, #7
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_UART_MspInit+0x8c>)
 8000b5c:	f001 f810 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 fe88 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <OTG_FS_IRQHandler+0x10>)
 8000bce:	f001 faf6 	bl	80021be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20001b50 	.word	0x20001b50

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f007 fbb4 	bl	8008378 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000248 	.word	0x20000248
 8000c44:	20001f68 	.word	0x20001f68

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ffd7 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f007 fb73 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc83 	bl	80005a8 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8000cb0:	08008d38 	.word	0x08008d38
  ldr r2, =_sbss
 8000cb4:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8000cb8:	20001f68 	.word	0x20001f68

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <delay_microsInit+0x4c>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10e      	bne.n	8000cee <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <delay_microsInit+0x4c>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <delay_microsInit+0x4c>)
 8000cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cda:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <delay_microsInit+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <delay_microsInit+0x50>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <delay_microsInit+0x50>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 8000cee:	bf00      	nop
	 __NOP();
 8000cf0:	bf00      	nop
	 __NOP();
 8000cf2:	bf00      	nop
	 if(DWT->CYCCNT)
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <delay_microsInit+0x50>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e000      	b.n	8000d02 <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 8000d00:	2301      	movs	r3, #1
	 }
};
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000edf0 	.word	0xe000edf0
 8000d10:	e0001000 	.word	0xe0001000

08000d14 <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <delay_microSeconds+0x60>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <delay_microSeconds+0x60>)
 8000d24:	685c      	ldr	r4, [r3, #4]
 8000d26:	f002 fe91 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <delay_microSeconds+0x64>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	4423      	add	r3, r4
 8000d3c:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d906      	bls.n	8000d54 <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 8000d46:	bf00      	nop
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <delay_microSeconds+0x60>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d8fa      	bhi.n	8000d48 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 8000d52:	e00a      	b.n	8000d6a <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8000d54:	bf00      	nop
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <delay_microSeconds+0x60>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3fa      	bcc.n	8000d56 <delay_microSeconds+0x42>
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <delay_microSeconds+0x60>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8f5      	bhi.n	8000d56 <delay_microSeconds+0x42>
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e0001000 	.word	0xe0001000
 8000d78:	431bde83 	.word	0x431bde83

08000d7c <digitalWrite>:
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	e883 0003 	stmia.w	r3, {r0, r1}
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	89b9      	ldrh	r1, [r7, #12]
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f88f 	bl	8001eb8 <HAL_GPIO_WritePin>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <digitalRead>:
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	463b      	mov	r3, r7
 8000daa:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	88ba      	ldrh	r2, [r7, #4]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 f867 	bl	8001e88 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
static HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 8000dce:	f000 fd95 	bl	80018fc <HAL_GetTick>
 8000dd2:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 8000dd4:	e023      	b.n	8000e1e <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 8000dd6:	f000 fd91 	bl	80018fc <HAL_GetTick>
 8000dda:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d206      	bcs.n	8000df2 <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bfb8      	it	lt
 8000dee:	425b      	neglt	r3, r3
 8000df0:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 8000df2:	f000 fd83 	bl	80018fc <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d801      	bhi.n	8000e06 <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e01f      	b.n	8000e46 <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HX710BIsReady+0x8c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HX710BIsReady+0x8c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	200a      	movs	r0, #10
 8000e14:	4798      	blx	r3
 8000e16:	e002      	b.n	8000e1e <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f000 fd7b 	bl	8001914 <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4611      	mov	r1, r2
 8000e28:	7a9a      	ldrb	r2, [r3, #10]
 8000e2a:	7adb      	ldrb	r3, [r3, #11]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	2300      	movs	r3, #0
 8000e32:	f362 030f 	bfi	r3, r2, #0, #16
 8000e36:	4608      	mov	r0, r1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff ffb2 	bl	8000da2 <digitalRead>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1c8      	bne.n	8000dd6 <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000004 	.word	0x20000004

08000e54 <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
static HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2100      	movs	r1, #0
 8000e66:	4611      	mov	r1, r2
 8000e68:	791a      	ldrb	r2, [r3, #4]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	f362 030f 	bfi	r3, r2, #0, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff ff7e 	bl	8000d7c <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff ff9e 	bl	8000dc4 <HX710BIsReady>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d169      	bne.n	8000f62 <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
 8000e9a:	e045      	b.n	8000f28 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	791a      	ldrb	r2, [r3, #4]
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f362 030f 	bfi	r3, r2, #0, #16
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4611      	mov	r1, r2
 8000ed0:	791a      	ldrb	r2, [r3, #4]
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f362 030f 	bfi	r3, r2, #0, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff ff4a 	bl	8000d7c <digitalWrite>
			if ( i < 24)
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b17      	cmp	r3, #23
 8000eec:	d819      	bhi.n	8000f22 <HX710BRead+0xce>
			{
				raw = raw << 1;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8000efa:	2100      	movs	r1, #0
 8000efc:	4611      	mov	r1, r2
 8000efe:	7a9a      	ldrb	r2, [r3, #10]
 8000f00:	7adb      	ldrb	r3, [r3, #11]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	431a      	orrs	r2, r3
 8000f06:	2300      	movs	r3, #0
 8000f08:	f362 030f 	bfi	r3, r2, #0, #16
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff ff47 	bl	8000da2 <digitalRead>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d103      	bne.n	8000f22 <HX710BRead+0xce>
						raw= raw | 0x01;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	3301      	adds	r3, #1
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	7b1b      	ldrb	r3, [r3, #12]
 8000f2c:	7dfa      	ldrb	r2, [r7, #23]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3b4      	bcc.n	8000e9c <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	2100      	movs	r1, #0
 8000f38:	4611      	mov	r1, r2
 8000f3a:	791a      	ldrb	r2, [r3, #4]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	431a      	orrs	r2, r3
 8000f42:	2300      	movs	r3, #0
 8000f44:	f362 030f 	bfi	r3, r2, #0, #16
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff ff15 	bl	8000d7c <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HX710BSetMode>:


static HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 8000f7c:	78bb      	ldrb	r3, [r7, #2]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff66 	bl	8000e54 <HX710BRead>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HX710BInit>:


static HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 8000f92:	b082      	sub	sp, #8
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	1d38      	adds	r0, r7, #4
 8000f9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fa2:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	f107 021c 	add.w	r2, r7, #28
 8000fac:	6810      	ldr	r0, [r2, #0]
 8000fae:	6018      	str	r0, [r3, #0]
 8000fb0:	8892      	ldrh	r2, [r2, #4]
 8000fb2:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	6010      	str	r0, [r2, #0]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
 8000fc0:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fc8:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8000fca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fce:	22f4      	movs	r2, #244	; 0xf4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff ffca 	bl	8000f6c <HX710BSetMode>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	4770      	bx	lr

08000fe8 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  CDC_init();
 8000fec:	f006 fd8a 	bl	8007b04 <CDC_init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SerialUSB_end>:

static void SerialUSB_end(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  CDC_DeInit();
 8000ff8:	f006 fd8b 	bl	8007b12 <CDC_DeInit>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <SerialUSB_availableForWrite+0x10>)
 8001006:	f000 f905 	bl	8001214 <CDC_TransmitQueue_WriteSize>
 800100a:	4603      	mov	r3, r0
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000800 	.word	0x20000800

08001014 <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	2101      	movs	r1, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f806 	bl	8001034 <SerialUSB_puts>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 8001042:	e01c      	b.n	800107e <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8001044:	4815      	ldr	r0, [pc, #84]	; (800109c <SerialUSB_puts+0x68>)
 8001046:	f000 f8e5 	bl	8001214 <CDC_TransmitQueue_WriteSize>
 800104a:	4603      	mov	r3, r0
 800104c:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d201      	bcs.n	800105a <SerialUSB_puts+0x26>
        portion = rest;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <SerialUSB_puts+0x68>)
 8001066:	f000 f90c 	bl	8001282 <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	60fb      	str	r3, [r7, #12]
        buf += portion;
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 800107a:	f006 fceb 	bl	8007a54 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <SerialUSB_puts+0x5a>
 8001084:	f006 fcba 	bl	80079fc <CDC_connected>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1da      	bne.n	8001044 <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000800 	.word	0x20000800

080010a0 <SerialUSB_available>:

static int SerialUSB_available(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <SerialUSB_available+0x10>)
 80010a6:	f000 fa1c 	bl	80014e2 <CDC_ReceiveQueue_ReadSize>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20001888 	.word	0x20001888

080010b4 <SerialUSB_read>:

static int SerialUSB_read(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <SerialUSB_read+0x1c>)
 80010bc:	f000 fa41 	bl	8001542 <CDC_ReceiveQueue_Dequeue>
 80010c0:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 80010c2:	f006 fcf5 	bl	8007ab0 <CDC_resume_receive>
  return ch;
 80010c6:	687b      	ldr	r3, [r7, #4]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20001888 	.word	0x20001888

080010d4 <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 80010e4:	f000 fc0a 	bl	80018fc <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <SerialUSB_readbytes+0x64>)
 80010f4:	f000 fa9c 	bl	8001630 <CDC_ReceiveQueue_Read>
 80010f8:	4603      	mov	r3, r0
 80010fa:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 80010fc:	f006 fcd8 	bl	8007ab0 <CDC_resume_receive>
      rest -= read;
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
      buffer += read;
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <SerialUSB_readbytes+0x46>
        return length;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	e009      	b.n	800112e <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 800111a:	f000 fbef 	bl	80018fc <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b31      	cmp	r3, #49	; 0x31
 8001126:	d9e0      	bls.n	80010ea <SerialUSB_readbytes+0x16>
    return length - rest;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	1ad3      	subs	r3, r2, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20001888 	.word	0x20001888

0800113c <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af02      	add	r7, sp, #8
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	b29b      	uxth	r3, r3
 800114e:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 8001150:	f000 fbd4 	bl	80018fc <HAL_GetTick>
 8001154:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	b29a      	uxth	r2, r3
 800115a:	7bf9      	ldrb	r1, [r7, #15]
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	4815      	ldr	r0, [pc, #84]	; (80011bc <SerialUSB_readBytesUntil+0x80>)
 8001168:	f000 fac5 	bl	80016f6 <CDC_ReceiveQueue_ReadUntil>
 800116c:	4603      	mov	r3, r0
 800116e:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 8001170:	f006 fc9e 	bl	8007ab0 <CDC_resume_receive>
      rest -= read;
 8001174:	8abb      	ldrh	r3, [r7, #20]
 8001176:	461a      	mov	r2, r3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	61fb      	str	r3, [r7, #28]
      buffer += read;
 800117e:	8abb      	ldrh	r3, [r7, #20]
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
      if (found) {
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	e00e      	b.n	80011b4 <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <SerialUSB_readBytesUntil+0x64>
        return length;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	e009      	b.n	80011b4 <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 80011a0:	f000 fbac 	bl	80018fc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b31      	cmp	r3, #49	; 0x31
 80011ac:	d9d3      	bls.n	8001156 <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	1ad3      	subs	r3, r2, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20001888 	.word	0x20001888

080011c0 <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <SerialUSB_peek+0x10>)
 80011c6:	f000 fa01 	bl	80015cc <CDC_ReceiveQueue_Peek>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20001888 	.word	0x20001888

080011d4 <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 80011d8:	bf00      	nop
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <SerialUSB_flush+0x18>)
 80011dc:	f000 f836 	bl	800124c <CDC_TransmitQueue_ReadSize>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dcf9      	bgt.n	80011da <SerialUSB_flush+0x6>
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000800 	.word	0x20000800

080011f0 <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001222:	b29b      	uxth	r3, r3
 8001224:	3380      	adds	r3, #128	; 0x80
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 800122c:	b292      	uxth	r2, r2
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8001232:	425a      	negs	r2, r3
 8001234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800123c:	bf58      	it	pl
 800123e:	4253      	negpl	r3, r2
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800125a:	b29b      	uxth	r3, r3
 800125c:	3380      	adds	r3, #128	; 0x80
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8001264:	b292      	uxth	r2, r2
 8001266:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8001268:	425a      	negs	r2, r3
 800126a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800126e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001272:	bf58      	it	pl
 8001274:	4253      	negpl	r3, r2
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001294:	b29b      	uxth	r3, r3
 8001296:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800129a:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d90c      	bls.n	80012be <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4413      	add	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f007 f888 	bl	80083cc <memcpy>
 80012bc:	e015      	b.n	80012ea <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f007 f87b 	bl	80083cc <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	18d1      	adds	r1, r2, r3
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f007 f871 	bl	80083cc <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001326:	b29b      	uxth	r3, r3
 8001328:	429a      	cmp	r2, r3
 800132a:	d30c      	bcc.n	8001346 <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800133a:	b29b      	uxth	r3, r3
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	801a      	strh	r2, [r3, #0]
 8001344:	e008      	b.n	8001358 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800134c:	b29b      	uxth	r3, r3
 800134e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001352:	b29a      	uxth	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001392:	b29b      	uxth	r3, r3
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	22c0      	movs	r2, #192	; 0xc0
 80013cc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80013ee:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	89ba      	ldrh	r2, [r7, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d82c      	bhi.n	8001458 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001404:	b29b      	uxth	r3, r3
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	429a      	cmp	r2, r3
 800140a:	d809      	bhi.n	8001420 <CDC_ReceiveQueue_ReserveBlock+0x44>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001412:	b29b      	uxth	r3, r3
 8001414:	89fa      	ldrh	r2, [r7, #14]
 8001416:	429a      	cmp	r2, r3
 8001418:	d109      	bne.n	800142e <CDC_ReceiveQueue_ReserveBlock+0x52>
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001428:	b292      	uxth	r2, r2
 800142a:	4413      	add	r3, r2
 800142c:	e025      	b.n	800147a <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 800142e:	89bb      	ldrh	r3, [r7, #12]
 8001430:	2b40      	cmp	r3, #64	; 0x40
 8001432:	d921      	bls.n	8001478 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001452:	b292      	uxth	r2, r2
 8001454:	4413      	add	r3, r2
 8001456:	e010      	b.n	800147a <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800145e:	b29b      	uxth	r3, r3
 8001460:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	429a      	cmp	r2, r3
 8001468:	d206      	bcs.n	8001478 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001472:	b292      	uxth	r2, r2
 8001474:	4413      	add	r3, r2
 8001476:	e000      	b.n	800147a <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001498:	b29a      	uxth	r2, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	4413      	add	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d303      	bcc.n	80014c2 <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	22c0      	movs	r2, #192	; 0xc0
 80014be:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2bbf      	cmp	r3, #191	; 0xbf
 80014cc:	d903      	bls.n	80014d6 <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001504:	b29a      	uxth	r2, r3
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	b29b      	uxth	r3, r3
 800150a:	429a      	cmp	r2, r3
 800150c:	d808      	bhi.n	8001520 <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800151a:	b29b      	uxth	r3, r3
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	e00a      	b.n	8001536 <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 8001520:	89bb      	ldrh	r3, [r7, #12]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 8001532:	b292      	uxth	r2, r2
 8001534:	1a9b      	subs	r3, r3, r2
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001550:	b29b      	uxth	r3, r3
 8001552:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800155a:	b29b      	uxth	r3, r3
 800155c:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001564:	b29a      	uxth	r2, r3
 8001566:	897b      	ldrh	r3, [r7, #10]
 8001568:	b29b      	uxth	r3, r3
 800156a:	429a      	cmp	r2, r3
 800156c:	d103      	bne.n	8001576 <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800157c:	b29a      	uxth	r2, r3
 800157e:	89bb      	ldrh	r3, [r7, #12]
 8001580:	b29b      	uxth	r3, r3
 8001582:	429a      	cmp	r2, r3
 8001584:	d102      	bne.n	800158c <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e019      	b.n	80015c0 <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001592:	b29b      	uxth	r3, r3
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	b291      	uxth	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	5c9b      	ldrb	r3, [r3, r2]
 80015a4:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d303      	bcc.n	80015be <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80015da:	b29b      	uxth	r3, r3
 80015dc:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	89bb      	ldrh	r3, [r7, #12]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d303      	bcc.n	8001600 <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001606:	b29a      	uxth	r2, r3
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	b29b      	uxth	r3, r3
 800160c:	429a      	cmp	r2, r3
 800160e:	d102      	bne.n	8001616 <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	e006      	b.n	8001624 <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	5c9b      	ldrb	r3, [r3, r2]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001644:	b29b      	uxth	r3, r3
 8001646:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800164e:	b29b      	uxth	r3, r3
 8001650:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001658:	b29a      	uxth	r2, r3
 800165a:	8a7b      	ldrh	r3, [r7, #18]
 800165c:	b29b      	uxth	r3, r3
 800165e:	429a      	cmp	r2, r3
 8001660:	d303      	bcc.n	800166a <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001670:	b29a      	uxth	r2, r3
 8001672:	8abb      	ldrh	r3, [r7, #20]
 8001674:	b29b      	uxth	r3, r3
 8001676:	429a      	cmp	r2, r3
 8001678:	d808      	bhi.n	800168c <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 800167a:	8abb      	ldrh	r3, [r7, #20]
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001684:	b29b      	uxth	r3, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	82fb      	strh	r3, [r7, #22]
 800168a:	e007      	b.n	800169c <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 800168c:	8a7b      	ldrh	r3, [r7, #18]
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 800169c:	8afa      	ldrh	r2, [r7, #22]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d201      	bcs.n	80016a8 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 80016a4:	8afb      	ldrh	r3, [r7, #22]
 80016a6:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	4619      	mov	r1, r3
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f006 fe86 	bl	80083cc <memcpy>
  queue->read = queue->read + size;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	8a7b      	ldrh	r3, [r7, #18]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d303      	bcc.n	80016ec <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b089      	sub	sp, #36	; 0x24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	461a      	mov	r2, r3
 8001702:	460b      	mov	r3, r1
 8001704:	72fb      	strb	r3, [r7, #11]
 8001706:	4613      	mov	r3, r2
 8001708:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001710:	b29b      	uxth	r3, r3
 8001712:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800171a:	b29b      	uxth	r3, r3
 800171c:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001724:	b29a      	uxth	r2, r3
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	b29b      	uxth	r3, r3
 800172a:	429a      	cmp	r2, r3
 800172c:	d303      	bcc.n	8001736 <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800173c:	b29a      	uxth	r2, r3
 800173e:	8abb      	ldrh	r3, [r7, #20]
 8001740:	b29b      	uxth	r3, r3
 8001742:	429a      	cmp	r2, r3
 8001744:	d808      	bhi.n	8001758 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 8001746:	8abb      	ldrh	r3, [r7, #20]
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001750:	b29b      	uxth	r3, r3
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	83fb      	strh	r3, [r7, #30]
 8001756:	e007      	b.n	8001768 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 8001758:	8a7b      	ldrh	r3, [r7, #18]
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001762:	b29b      	uxth	r3, r3
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 8001768:	8bfa      	ldrh	r2, [r7, #30]
 800176a:	893b      	ldrh	r3, [r7, #8]
 800176c:	429a      	cmp	r2, r3
 800176e:	d201      	bcs.n	8001774 <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 8001770:	8bfb      	ldrh	r3, [r7, #30]
 8001772:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 8001784:	2300      	movs	r3, #0
 8001786:	83bb      	strh	r3, [r7, #28]
 8001788:	e02d      	b.n	80017e6 <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 800178a:	8bbb      	ldrh	r3, [r7, #28]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 8001794:	7dfa      	ldrb	r2, [r7, #23]
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	429a      	cmp	r2, r3
 800179a:	d11c      	bne.n	80017d6 <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	8bbb      	ldrh	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	8a7b      	ldrh	r3, [r7, #18]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d303      	bcc.n	80017cc <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	8bba      	ldrh	r2, [r7, #28]
 80017d0:	801a      	strh	r2, [r3, #0]
      return true;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e025      	b.n	8001822 <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	7dfa      	ldrb	r2, [r7, #23]
 80017de:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 80017e0:	8bbb      	ldrh	r3, [r7, #28]
 80017e2:	3301      	adds	r3, #1
 80017e4:	83bb      	strh	r3, [r7, #28]
 80017e6:	8bba      	ldrh	r2, [r7, #28]
 80017e8:	893b      	ldrh	r3, [r7, #8]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d3cd      	bcc.n	800178a <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	893a      	ldrh	r2, [r7, #8]
 80017f2:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	893b      	ldrh	r3, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800180e:	b29a      	uxth	r2, r3
 8001810:	8a7b      	ldrh	r3, [r7, #18]
 8001812:	b29b      	uxth	r3, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	d303      	bcc.n	8001820 <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f94f 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff f8de 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f967 	bl	8001b66 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f92f 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000048 	.word	0x20000048
 80018d0:	20000044 	.word	0x20000044

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000048 	.word	0x20000048
 80018f8:	2000052c 	.word	0x2000052c

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000052c 	.word	0x2000052c

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000048 	.word	0x20000048

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff3e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa2 	bl	8001ab8 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e159      	b.n	8001e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8148 	bne.w	8001e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d005      	beq.n	8001bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d130      	bne.n	8001c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d017      	beq.n	8001c70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d123      	bne.n	8001cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a2 	beq.w	8001e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d22:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x202>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x2f4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x1fe>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_GPIO_Init+0x2f8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_GPIO_Init+0x2fc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x1f6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x1f2>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d72:	2307      	movs	r3, #7
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d82:	2300      	movs	r3, #0
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d94:	4935      	ldr	r1, [pc, #212]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	f67f aea2 	bls.w	8001b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec8:	787b      	ldrb	r3, [r7, #1]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ece:	887a      	ldrh	r2, [r7, #2]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed4:	e003      	b.n	8001ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	041a      	lsls	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	041a      	lsls	r2, r3, #16
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f20:	b08f      	sub	sp, #60	; 0x3c
 8001f22:	af0a      	add	r7, sp, #40	; 0x28
 8001f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e10f      	b.n	8002150 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f005 ff0a 	bl	8007d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2203      	movs	r2, #3
 8001f54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 fd3b 	bl	80049ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	687e      	ldr	r6, [r7, #4]
 8001f7c:	466d      	mov	r5, sp
 8001f7e:	f106 0410 	add.w	r4, r6, #16
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f92:	1d33      	adds	r3, r6, #4
 8001f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f002 fc12 	bl	80047c0 <USB_CoreInit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0d0      	b.n	8002150 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fd29 	bl	8004a0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	e04a      	b.n	8002056 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	333d      	adds	r3, #61	; 0x3d
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	333c      	adds	r3, #60	; 0x3c
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	b298      	uxth	r0, r3
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3342      	adds	r3, #66	; 0x42
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	333f      	adds	r3, #63	; 0x3f
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	; 0x44
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3350      	adds	r3, #80	; 0x50
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	3301      	adds	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3af      	bcc.n	8001fc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e044      	b.n	80020f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3b5      	bcc.n	8002066 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	687e      	ldr	r6, [r7, #4]
 8002102:	466d      	mov	r5, sp
 8002104:	f106 0410 	add.w	r4, r6, #16
 8002108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002114:	e885 0003 	stmia.w	r5, {r0, r1}
 8002118:	1d33      	adds	r3, r6, #4
 800211a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211c:	6838      	ldr	r0, [r7, #0]
 800211e:	f002 fc9f 	bl	8004a60 <USB_DevInit>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00d      	b.n	8002150 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fce7 	bl	8005b1c <USB_DevDisconnect>

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002158 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_Start+0x1c>
 8002170:	2302      	movs	r3, #2
 8002172:	e020      	b.n	80021b6 <HAL_PCD_Start+0x5e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	2b01      	cmp	r3, #1
 8002182:	d109      	bne.n	8002198 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fc13 	bl	80049c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fc97 	bl	8005ada <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021be:	b590      	push	{r4, r7, lr}
 80021c0:	b08d      	sub	sp, #52	; 0x34
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fd55 	bl	8005c84 <USB_GetMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 839d 	bne.w	800291c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fcb9 	bl	8005b5e <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8393 	beq.w	800291a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fcb0 	bl	8005b5e <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d107      	bne.n	8002218 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f002 0202 	and.w	r2, r2, #2
 8002216:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fc9e 	bl	8005b5e <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b10      	cmp	r3, #16
 800222a:	d161      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0210 	bic.w	r2, r2, #16
 800223a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f003 020f 	and.w	r2, r3, #15
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	0c5b      	lsrs	r3, r3, #17
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	2b02      	cmp	r3, #2
 8002266:	d124      	bne.n	80022b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d035      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002282:	b29b      	uxth	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	6a38      	ldr	r0, [r7, #32]
 8002288:	f003 fb04 	bl	8005894 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002298:	441a      	add	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022aa:	441a      	add	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	619a      	str	r2, [r3, #24]
 80022b0:	e016      	b.n	80022e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	0c5b      	lsrs	r3, r3, #17
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d110      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022c4:	2208      	movs	r2, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	6a38      	ldr	r0, [r7, #32]
 80022ca:	f003 fae3 	bl	8005894 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022da:	441a      	add	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0210 	orr.w	r2, r2, #16
 80022ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fc32 	bl	8005b5e <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002300:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002304:	d16e      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fc38 	bl	8005b84 <USB_ReadDevAllOutEpInterrupt>
 8002314:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002316:	e062      	b.n	80023de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d057      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fc5d 	bl	8005bec <USB_ReadDevOutEPInterrupt>
 8002332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fdb0 	bl	8002eb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2308      	movs	r3, #8
 8002372:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 feaa 	bl	80030d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	2310      	movs	r3, #16
 8002396:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	2320      	movs	r3, #32
 80023b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ca:	461a      	mov	r2, r3
 80023cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d199      	bne.n	8002318 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fbb8 	bl	8005b5e <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f8:	f040 80c0 	bne.w	800257c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fbd9 	bl	8005bb8 <USB_ReadDevAllInEpInterrupt>
 8002406:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800240c:	e0b2      	b.n	8002574 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a7 	beq.w	8002568 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fbff 	bl	8005c28 <USB_ReadDevInEPInterrupt>
 800242a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d057      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	2201      	movs	r2, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	69f9      	ldr	r1, [r7, #28]
 8002452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002456:	4013      	ands	r3, r2
 8002458:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002466:	461a      	mov	r2, r3
 8002468:	2301      	movs	r3, #1
 800246a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d132      	bne.n	80024da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3348      	adds	r3, #72	; 0x48
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4403      	add	r3, r0
 8002494:	3344      	adds	r3, #68	; 0x44
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4419      	add	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	3348      	adds	r3, #72	; 0x48
 80024aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <HAL_PCD_IRQHandler+0x31c>
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3350      	adds	r3, #80	; 0x50
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d2:	461a      	mov	r2, r3
 80024d4:	2101      	movs	r1, #1
 80024d6:	f003 fc07 	bl	8005ce8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f005 fcc0 	bl	8007e66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fc:	461a      	mov	r2, r3
 80024fe:	2308      	movs	r3, #8
 8002500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002518:	461a      	mov	r2, r3
 800251a:	2310      	movs	r3, #16
 800251c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002534:	461a      	mov	r2, r3
 8002536:	2340      	movs	r3, #64	; 0x40
 8002538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002550:	461a      	mov	r2, r3
 8002552:	2302      	movs	r3, #2
 8002554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fc1b 	bl	8002d9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f af49 	bne.w	800240e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 faec 	bl	8005b5e <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800258c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002590:	d122      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fe26 	bl	800320c <HAL_PCDEx_LPM_Callback>
 80025c0:	e002      	b.n	80025c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f005 fcbc 	bl	8007f40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fabe 	bl	8005b5e <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d112      	bne.n	8002614 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f005 fc78 	bl	8007ef4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002612:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 faa0 	bl	8005b5e <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002628:	f040 80c7 	bne.w	80027ba <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2110      	movs	r1, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f002 fb6e 	bl	8004d28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002650:	e056      	b.n	8002700 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265e:	461a      	mov	r2, r3
 8002660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002664:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	440a      	add	r2, r1
 800267c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002684:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	440a      	add	r2, r1
 800269c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	461a      	mov	r2, r3
 80026b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ea:	0151      	lsls	r1, r2, #5
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	440a      	add	r2, r1
 80026f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	3301      	adds	r3, #1
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002706:	429a      	cmp	r2, r3
 8002708:	d3a3      	bcc.n	8002652 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002718:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800271c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002736:	f043 030b 	orr.w	r3, r3, #11
 800273a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800274c:	f043 030b 	orr.w	r3, r3, #11
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	e015      	b.n	8002780 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002766:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800276a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800277a:	f043 030b 	orr.w	r3, r3, #11
 800277e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002792:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a4:	461a      	mov	r2, r3
 80027a6:	f003 fa9f 	bl	8005ce8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 f9cd 	bl	8005b5e <USB_ReadInterrupts>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	d124      	bne.n	800281a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 fa63 	bl	8005ca0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fb03 	bl	8004dea <USB_GetDevSpeed>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681c      	ldr	r4, [r3, #0]
 80027f0:	f001 f92c 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 80027f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4620      	mov	r0, r4
 8002800:	f002 f840 	bl	8004884 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f005 fb56 	bl	8007eb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002818:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f99d 	bl	8005b5e <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b08      	cmp	r3, #8
 800282c:	d10a      	bne.n	8002844 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f005 fb33 	bl	8007e9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f002 0208 	and.w	r2, r2, #8
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f988 	bl	8005b5e <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002858:	d10f      	bne.n	800287a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 fb8b 	bl	8007f80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f96d 	bl	8005b5e <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800288e:	d10f      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f005 fb5e 	bl	8007f5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f952 	bl	8005b5e <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d10a      	bne.n	80028dc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f005 fb6c 	bl	8007fa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 f93c 	bl	8005b5e <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d115      	bne.n	800291c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f005 fb5c 	bl	8007fc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	e000      	b.n	800291c <HAL_PCD_IRQHandler+0x75e>
      return;
 800291a:	bf00      	nop
    }
  }
}
 800291c:	3734      	adds	r7, #52	; 0x34
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}

08002922 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_PCD_SetAddress+0x1a>
 8002938:	2302      	movs	r3, #2
 800293a:	e013      	b.n	8002964 <HAL_PCD_SetAddress+0x42>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f003 f89a 	bl	8005a8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	70fb      	strb	r3, [r7, #3]
 800297e:	460b      	mov	r3, r1
 8002980:	803b      	strh	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	da0f      	bge.n	80029b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3338      	adds	r3, #56	; 0x38
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
 80029b0:	e00f      	b.n	80029d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 020f 	and.w	r2, r3, #15
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029de:	883a      	ldrh	r2, [r7, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	78ba      	ldrb	r2, [r7, #2]
 80029e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029fc:	78bb      	ldrb	r3, [r7, #2]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d102      	bne.n	8002a08 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_EP_Open+0xaa>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e00e      	b.n	8002a34 <HAL_PCD_EP_Open+0xc8>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fa05 	bl	8004e34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a32:	7afb      	ldrb	r3, [r7, #11]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da0f      	bge.n	8002a70 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3338      	adds	r3, #56	; 0x38
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	705a      	strb	r2, [r3, #1]
 8002a6e:	e00f      	b.n	8002a90 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_EP_Close+0x6e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_Close+0x8c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 fa43 	bl	8004f44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	460b      	mov	r3, r1
 8002ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b12:	7afb      	ldrb	r3, [r7, #11]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	f002 fd1e 	bl	8005584 <USB_EP0StartXfer>
 8002b48:	e008      	b.n	8002b5c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	f002 fad0 	bl	80050fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b88:	681b      	ldr	r3, [r3, #0]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d102      	bne.n	8002bf0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	f002 fcbc 	bl	8005584 <USB_EP0StartXfer>
 8002c0c:	e008      	b.n	8002c20 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	f002 fa6e 	bl	80050fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d901      	bls.n	8002c48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e050      	b.n	8002cea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da0f      	bge.n	8002c70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	705a      	strb	r2, [r3, #1]
 8002c6e:	e00d      	b.n	8002c8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_SetStall+0x82>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e01e      	b.n	8002cea <HAL_PCD_EP_SetStall+0xc0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fe13 	bl	80058e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	b2d9      	uxtb	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f003 f804 	bl	8005ce8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 020f 	and.w	r2, r3, #15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d901      	bls.n	8002d10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e042      	b.n	8002d96 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0f      	bge.n	8002d38 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 020f 	and.w	r2, r3, #15
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3338      	adds	r3, #56	; 0x38
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	705a      	strb	r2, [r3, #1]
 8002d36:	e00f      	b.n	8002d58 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_PCD_EP_ClrStall+0x86>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e00e      	b.n	8002d96 <HAL_PCD_EP_ClrStall+0xa4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fe1b 	bl	80059c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b08a      	sub	sp, #40	; 0x28
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3338      	adds	r3, #56	; 0x38
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d901      	bls.n	8002dd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06c      	b.n	8002eb0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d902      	bls.n	8002df2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3303      	adds	r3, #3
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfa:	e02b      	b.n	8002e54 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d902      	bls.n	8002e18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	3303      	adds	r3, #3
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f002 fcf7 	bl	800582a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	441a      	add	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d809      	bhi.n	8002e7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d203      	bcs.n	8002e7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1be      	bne.n	8002dfc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d811      	bhi.n	8002eae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	6939      	ldr	r1, [r7, #16]
 8002ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eaa:	4013      	ands	r3, r2
 8002eac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f040 80a0 	bne.w	8003030 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	f240 80dd 	bls.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80d7 	beq.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	6093      	str	r3, [r2, #8]
 8002f24:	e0cb      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2320      	movs	r3, #32
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e0bc      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 80b7 	bne.w	80030be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d90f      	bls.n	8002f78 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f74:	6093      	str	r3, [r2, #8]
 8002f76:	e0a2      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f8a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	0159      	lsls	r1, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f9e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4403      	add	r3, r0
 8002fae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fb2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4403      	add	r3, r0
 8002fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4419      	add	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4403      	add	r3, r0
 8002fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ff0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d114      	bne.n	8003022 <PCD_EP_OutXfrComplete_int+0x16a>
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d108      	bne.n	8003022 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800301a:	461a      	mov	r2, r3
 800301c:	2101      	movs	r1, #1
 800301e:	f002 fe63 	bl	8005ce8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f004 ff01 	bl	8007e30 <HAL_PCD_DataOutStageCallback>
 800302e:	e046      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a26      	ldr	r2, [pc, #152]	; (80030cc <PCD_EP_OutXfrComplete_int+0x214>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d124      	bne.n	8003082 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	e032      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2320      	movs	r3, #32
 8003072:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f004 fed8 	bl	8007e30 <HAL_PCD_DataOutStageCallback>
 8003080:	e01d      	b.n	80030be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d114      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d108      	bne.n	80030b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030aa:	461a      	mov	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f002 fe1b 	bl	8005ce8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f004 feb9 	bl	8007e30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	4f54300a 	.word	0x4f54300a
 80030cc:	4f54310a 	.word	0x4f54310a

080030d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	333c      	adds	r3, #60	; 0x3c
 80030e8:	3304      	adds	r3, #4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <PCD_EP_OutSetupPacket_int+0x88>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d90e      	bls.n	8003124 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f004 fe71 	bl	8007e0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <PCD_EP_OutSetupPacket_int+0x88>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d90c      	bls.n	800314c <PCD_EP_OutSetupPacket_int+0x7c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d108      	bne.n	800314c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003144:	461a      	mov	r2, r3
 8003146:	2101      	movs	r1, #1
 8003148:	f002 fdce 	bl	8005ce8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	4f54300a 	.word	0x4f54300a

0800315c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
 8003168:	4613      	mov	r3, r2
 800316a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800317a:	883b      	ldrh	r3, [r7, #0]
 800317c:	0419      	lsls	r1, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	430a      	orrs	r2, r1
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
 8003188:	e028      	b.n	80031dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4413      	add	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e00d      	b.n	80031ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3340      	adds	r3, #64	; 0x40
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	3b01      	subs	r3, #1
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3ec      	bcc.n	800319e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031c4:	883b      	ldrh	r3, [r7, #0]
 80031c6:	0418      	lsls	r0, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4302      	orrs	r2, r0
 80031d4:	3340      	adds	r3, #64	; 0x40
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e264      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d075      	beq.n	800332e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003242:	4ba3      	ldr	r3, [pc, #652]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b04      	cmp	r3, #4
 800324c:	d00c      	beq.n	8003268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324e:	4ba0      	ldr	r3, [pc, #640]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d112      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b9d      	ldr	r3, [pc, #628]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d10b      	bne.n	8003280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	4b99      	ldr	r3, [pc, #612]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d05b      	beq.n	800332c <HAL_RCC_OscConfig+0x108>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d157      	bne.n	800332c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e23f      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x74>
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a90      	ldr	r2, [pc, #576]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e01d      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b8b      	ldr	r3, [pc, #556]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a8a      	ldr	r2, [pc, #552]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a87      	ldr	r2, [pc, #540]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e00b      	b.n	80032d4 <HAL_RCC_OscConfig+0xb0>
 80032bc:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a83      	ldr	r2, [pc, #524]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b81      	ldr	r3, [pc, #516]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe fb0e 	bl	80018fc <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032e4:	f7fe fb0a 	bl	80018fc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e204      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0xc0>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fafa 	bl	80018fc <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe faf6 	bl	80018fc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1f0      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0xe8>
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d063      	beq.n	8003402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	4b65      	ldr	r3, [pc, #404]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11c      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d116      	bne.n	800338c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335e:	4b5c      	ldr	r3, [pc, #368]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1c4      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4952      	ldr	r1, [pc, #328]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	e03a      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003394:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <HAL_RCC_OscConfig+0x2b0>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe faaf 	bl	80018fc <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a2:	f7fe faab 	bl	80018fc <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1a5      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b43      	ldr	r3, [pc, #268]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4940      	ldr	r1, [pc, #256]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	e015      	b.n	8003402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_RCC_OscConfig+0x2b0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fa8e 	bl	80018fc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fa8a 	bl	80018fc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e184      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d030      	beq.n	8003470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x2b4>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe fa6e 	bl	80018fc <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fa6a 	bl	80018fc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e164      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x200>
 8003442:	e015      	b.n	8003470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x2b4>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344a:	f7fe fa57 	bl	80018fc <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003452:	f7fe fa53 	bl	80018fc <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e14d      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a0 	beq.w	80035be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <HAL_RCC_OscConfig+0x2b8>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c6:	f7fe fa19 	bl	80018fc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	e011      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470000 	.word	0x42470000
 80034d8:	42470e80 	.word	0x42470e80
 80034dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fe fa0c 	bl	80018fc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e106      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b85      	ldr	r3, [pc, #532]	; (8003708 <HAL_RCC_OscConfig+0x4e4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x2f0>
 8003506:	4b81      	ldr	r3, [pc, #516]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a80      	ldr	r2, [pc, #512]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e01c      	b.n	800354e <HAL_RCC_OscConfig+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d10c      	bne.n	8003536 <HAL_RCC_OscConfig+0x312>
 800351c:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a77      	ldr	r2, [pc, #476]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x32a>
 8003536:	4b75      	ldr	r3, [pc, #468]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a74      	ldr	r2, [pc, #464]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d015      	beq.n	8003582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003556:	f7fe f9d1 	bl	80018fc <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f9cd 	bl	80018fc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0c5      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ee      	beq.n	800355e <HAL_RCC_OscConfig+0x33a>
 8003580:	e014      	b.n	80035ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7fe f9bb 	bl	80018fc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe f9b7 	bl	80018fc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0af      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ee      	bne.n	800358a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 809b 	beq.w	80036fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d05c      	beq.n	800368e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d141      	bne.n	8003660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe f98b 	bl	80018fc <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe f987 	bl	80018fc <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e081      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	4937      	ldr	r1, [pc, #220]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fe f960 	bl	80018fc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f95c 	bl	80018fc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e056      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x41c>
 800365e:	e04e      	b.n	80036fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_OscConfig+0x4ec>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f949 	bl	80018fc <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe f945 	bl	80018fc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e03f      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003680:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0x44a>
 800368c:	e037      	b.n	80036fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e032      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_OscConfig+0x4e8>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d028      	beq.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d121      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d11a      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40007000 	.word	0x40007000
 800370c:	40023800 	.word	0x40023800
 8003710:	42470060 	.word	0x42470060

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cc      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d90c      	bls.n	8003750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a52      	ldr	r2, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800378a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e067      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe f87a 	bl	80018fc <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe f876 	bl	80018fc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20c      	bcs.n	800385c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389a:	f000 f821 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd ffda 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08008cdc 	.word	0x08008cdc
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000044 	.word	0x20000044

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038e6:	2100      	movs	r1, #0
 80038e8:	6079      	str	r1, [r7, #4]
 80038ea:	2100      	movs	r1, #0
 80038ec:	60f9      	str	r1, [r7, #12]
 80038ee:	2100      	movs	r1, #0
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038f2:	2100      	movs	r1, #0
 80038f4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f6:	4952      	ldr	r1, [pc, #328]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 80038f8:	6889      	ldr	r1, [r1, #8]
 80038fa:	f001 010c 	and.w	r1, r1, #12
 80038fe:	2908      	cmp	r1, #8
 8003900:	d00d      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3e>
 8003902:	2908      	cmp	r1, #8
 8003904:	f200 8094 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x150>
 8003908:	2900      	cmp	r1, #0
 800390a:	d002      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x32>
 800390c:	2904      	cmp	r1, #4
 800390e:	d003      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x38>
 8003910:	e08e      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003912:	4b4c      	ldr	r3, [pc, #304]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003914:	60bb      	str	r3, [r7, #8]
       break;
 8003916:	e08e      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b4b      	ldr	r3, [pc, #300]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 800391a:	60bb      	str	r3, [r7, #8]
      break;
 800391c:	e08b      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800391e:	4948      	ldr	r1, [pc, #288]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003920:	6849      	ldr	r1, [r1, #4]
 8003922:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003926:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003928:	4945      	ldr	r1, [pc, #276]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 800392a:	6849      	ldr	r1, [r1, #4]
 800392c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003930:	2900      	cmp	r1, #0
 8003932:	d024      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003934:	4942      	ldr	r1, [pc, #264]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003936:	6849      	ldr	r1, [r1, #4]
 8003938:	0989      	lsrs	r1, r1, #6
 800393a:	4608      	mov	r0, r1
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003944:	f04f 0500 	mov.w	r5, #0
 8003948:	ea00 0204 	and.w	r2, r0, r4
 800394c:	ea01 0305 	and.w	r3, r1, r5
 8003950:	493d      	ldr	r1, [pc, #244]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003952:	fb01 f003 	mul.w	r0, r1, r3
 8003956:	2100      	movs	r1, #0
 8003958:	fb01 f102 	mul.w	r1, r1, r2
 800395c:	1844      	adds	r4, r0, r1
 800395e:	493a      	ldr	r1, [pc, #232]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003960:	fba2 0101 	umull	r0, r1, r2, r1
 8003964:	1863      	adds	r3, r4, r1
 8003966:	4619      	mov	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f7fc fc8e 	bl	8000290 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e04a      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	461a      	mov	r2, r3
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	ea02 0400 	and.w	r4, r2, r0
 8003996:	ea03 0501 	and.w	r5, r3, r1
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	014b      	lsls	r3, r1, #5
 80039a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039ac:	0142      	lsls	r2, r0, #5
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	1b00      	subs	r0, r0, r4
 80039b4:	eb61 0105 	sbc.w	r1, r1, r5
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	018b      	lsls	r3, r1, #6
 80039c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039c6:	0182      	lsls	r2, r0, #6
 80039c8:	1a12      	subs	r2, r2, r0
 80039ca:	eb63 0301 	sbc.w	r3, r3, r1
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	00d9      	lsls	r1, r3, #3
 80039d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039dc:	00d0      	lsls	r0, r2, #3
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	1912      	adds	r2, r2, r4
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	0299      	lsls	r1, r3, #10
 80039f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039f6:	0290      	lsls	r0, r2, #10
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f7fc fc42 	bl	8000290 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	60bb      	str	r3, [r7, #8]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a32:	60bb      	str	r3, [r7, #8]
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	68bb      	ldr	r3, [r7, #8]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	017d7840 	.word	0x017d7840

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08008cec 	.word	0x08008cec

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a90:	f7ff ffdc 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0b5b      	lsrs	r3, r3, #13
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	08008cec 	.word	0x08008cec

08003ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d038      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae2:	f7fd ff0b 	bl	80018fc <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aea:	f7fd ff07 	bl	80018fc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0bd      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afc:	4b61      	ldr	r3, [pc, #388]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	071b      	lsls	r3, r3, #28
 8003b1a:	495a      	ldr	r1, [pc, #360]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fd fee8 	bl	80018fc <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b30:	f7fd fee4 	bl	80018fc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e09a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b42:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8083 	beq.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	4a47      	ldr	r2, [pc, #284]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6c:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b78:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b82:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b84:	f7fd feba 	bl	80018fc <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fd feb6 	bl	80018fc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e06c      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02f      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d114      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fe84 	bl	80018fc <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fe80 	bl	80018fc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e034      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3c:	4911      	ldr	r1, [pc, #68]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
 8003c42:	e005      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c4e:	6093      	str	r3, [r2, #8]
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	4909      	ldr	r1, [pc, #36]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7d1a      	ldrb	r2, [r3, #20]
 8003c72:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003c74:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	42470068 	.word	0x42470068
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42470e40 	.word	0x42470e40
 8003c90:	424711e0 	.word	0x424711e0

08003c94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e083      	b.n	8003dae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7f5b      	ldrb	r3, [r3, #29]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fc fedc 	bl	8000a74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	22ca      	movs	r2, #202	; 0xca
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2253      	movs	r2, #83	; 0x53
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f897 	bl	8003e06 <RTC_EnterInitMode>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e05e      	b.n	8003dae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	041a      	lsls	r2, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10e      	bne.n	8003d7c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f829 	bl	8003db6 <HAL_RTC_WaitForSynchro>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	22ff      	movs	r2, #255	; 0xff
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2204      	movs	r2, #4
 8003d76:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e018      	b.n	8003dae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	22ff      	movs	r2, #255	; 0xff
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fd93 	bl	80018fc <HAL_GetTick>
 8003dd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003dd8:	e009      	b.n	8003dee <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003dda:	f7fd fd8f 	bl	80018fc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de8:	d901      	bls.n	8003dee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e007      	b.n	8003dfe <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ee      	beq.n	8003dda <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d119      	bne.n	8003e54 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e2a:	f7fd fd67 	bl	80018fc <HAL_GetTick>
 8003e2e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e30:	e009      	b.n	8003e46 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e32:	f7fd fd63 	bl	80018fc <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e40:	d901      	bls.n	8003e46 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e007      	b.n	8003e56 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e041      	b.n	8003ef4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc fe0b 	bl	8000aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 f8f1 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_ConfigClockSource+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0b3      	b.n	800407c <HAL_TIM_ConfigClockSource+0x180>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4c:	d03e      	beq.n	8003fcc <HAL_TIM_ConfigClockSource+0xd0>
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f52:	f200 8087 	bhi.w	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	f000 8085 	beq.w	8004068 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	d87f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f64:	2b70      	cmp	r3, #112	; 0x70
 8003f66:	d01a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xa2>
 8003f68:	2b70      	cmp	r3, #112	; 0x70
 8003f6a:	d87b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f6c:	2b60      	cmp	r3, #96	; 0x60
 8003f6e:	d050      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x116>
 8003f70:	2b60      	cmp	r3, #96	; 0x60
 8003f72:	d877      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f74:	2b50      	cmp	r3, #80	; 0x50
 8003f76:	d03c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xf6>
 8003f78:	2b50      	cmp	r3, #80	; 0x50
 8003f7a:	d873      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d058      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x136>
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d86f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f84:	2b30      	cmp	r3, #48	; 0x30
 8003f86:	d064      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x156>
 8003f88:	2b30      	cmp	r3, #48	; 0x30
 8003f8a:	d86b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d060      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x156>
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d867      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05c      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x156>
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d05a      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f9c:	e062      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f000 f963 	bl	8004278 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
      break;
 8003fca:	e04e      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6899      	ldr	r1, [r3, #8]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f000 f94c 	bl	8004278 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fee:	609a      	str	r2, [r3, #8]
      break;
 8003ff0:	e03b      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f000 f8c0 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2150      	movs	r1, #80	; 0x50
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f919 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8004010:	e02b      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	461a      	mov	r2, r3
 8004020:	f000 f8df 	bl	80041e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2160      	movs	r1, #96	; 0x60
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f909 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8004030:	e01b      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	f000 f8a0 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2140      	movs	r1, #64	; 0x40
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f8f9 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8004050:	e00b      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f000 f8f0 	bl	8004242 <TIM_ITRx_SetConfig>
        break;
 8004062:	e002      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004064:	bf00      	nop
 8004066:	e000      	b.n	800406a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a34      	ldr	r2, [pc, #208]	; (8004168 <TIM_Base_SetConfig+0xe4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a31      	ldr	r2, [pc, #196]	; (800416c <TIM_Base_SetConfig+0xe8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a30      	ldr	r2, [pc, #192]	; (8004170 <TIM_Base_SetConfig+0xec>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <TIM_Base_SetConfig+0xf0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a25      	ldr	r2, [pc, #148]	; (8004168 <TIM_Base_SetConfig+0xe4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d017      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <TIM_Base_SetConfig+0xe8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a21      	ldr	r2, [pc, #132]	; (8004170 <TIM_Base_SetConfig+0xec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00f      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <TIM_Base_SetConfig+0xf0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <TIM_Base_SetConfig+0xf4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <TIM_Base_SetConfig+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <TIM_Base_SetConfig+0xfc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d108      	bne.n	8004120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <TIM_Base_SetConfig+0xe4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800

08004184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f023 0210 	bic.w	r2, r3, #16
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800420c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	f043 0307 	orr.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e050      	b.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d013      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a15      	ldr	r2, [pc, #84]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10c      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40014000 	.word	0x40014000

08004394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e03f      	b.n	8004426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc fb92 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f829 	bl	8004430 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800440c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	b09f      	sub	sp, #124	; 0x7c
 8004436:	af00      	add	r7, sp, #0
 8004438:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	68d9      	ldr	r1, [r3, #12]
 8004448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	ea40 0301 	orr.w	r3, r0, r1
 8004450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	431a      	orrs	r2, r3
 8004462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4313      	orrs	r3, r2
 8004468:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800446a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004474:	f021 010c 	bic.w	r1, r1, #12
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800447e:	430b      	orrs	r3, r1
 8004480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	ea40 0301 	orr.w	r3, r0, r1
 8004498:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4bc5      	ldr	r3, [pc, #788]	; (80047b4 <UART_SetConfig+0x384>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d004      	beq.n	80044ae <UART_SetConfig+0x7e>
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4bc3      	ldr	r3, [pc, #780]	; (80047b8 <UART_SetConfig+0x388>)
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d103      	bne.n	80044b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044ae:	f7ff faed 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 80044b2:	6778      	str	r0, [r7, #116]	; 0x74
 80044b4:	e002      	b.n	80044bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b6:	f7ff fad5 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 80044ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c4:	f040 80b6 	bne.w	8004634 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ca:	461c      	mov	r4, r3
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	6439      	str	r1, [r7, #64]	; 0x40
 80044d8:	415b      	adcs	r3, r3
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
 80044dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044e0:	1912      	adds	r2, r2, r4
 80044e2:	eb45 0303 	adc.w	r3, r5, r3
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	00d9      	lsls	r1, r3, #3
 80044f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f4:	00d0      	lsls	r0, r2, #3
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	1911      	adds	r1, r2, r4
 80044fc:	6639      	str	r1, [r7, #96]	; 0x60
 80044fe:	416b      	adcs	r3, r5
 8004500:	667b      	str	r3, [r7, #100]	; 0x64
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	1891      	adds	r1, r2, r2
 800450e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004510:	415b      	adcs	r3, r3
 8004512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004518:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800451c:	f7fb feb8 	bl	8000290 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4ba5      	ldr	r3, [pc, #660]	; (80047bc <UART_SetConfig+0x38c>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	011e      	lsls	r6, r3, #4
 800452e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004530:	461c      	mov	r4, r3
 8004532:	f04f 0500 	mov.w	r5, #0
 8004536:	4622      	mov	r2, r4
 8004538:	462b      	mov	r3, r5
 800453a:	1891      	adds	r1, r2, r2
 800453c:	6339      	str	r1, [r7, #48]	; 0x30
 800453e:	415b      	adcs	r3, r3
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
 8004542:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004546:	1912      	adds	r2, r2, r4
 8004548:	eb45 0303 	adc.w	r3, r5, r3
 800454c:	f04f 0000 	mov.w	r0, #0
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	00d9      	lsls	r1, r3, #3
 8004556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800455a:	00d0      	lsls	r0, r2, #3
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	1911      	adds	r1, r2, r4
 8004562:	65b9      	str	r1, [r7, #88]	; 0x58
 8004564:	416b      	adcs	r3, r5
 8004566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	461a      	mov	r2, r3
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	1891      	adds	r1, r2, r2
 8004574:	62b9      	str	r1, [r7, #40]	; 0x28
 8004576:	415b      	adcs	r3, r3
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800457e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004582:	f7fb fe85 	bl	8000290 <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <UART_SetConfig+0x38c>)
 800458c:	fba3 1302 	umull	r1, r3, r3, r2
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	2164      	movs	r1, #100	; 0x64
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	3332      	adds	r3, #50	; 0x32
 800459e:	4a87      	ldr	r2, [pc, #540]	; (80047bc <UART_SetConfig+0x38c>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045ac:	441e      	add	r6, r3
 80045ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b0:	4618      	mov	r0, r3
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	1894      	adds	r4, r2, r2
 80045bc:	623c      	str	r4, [r7, #32]
 80045be:	415b      	adcs	r3, r3
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045c6:	1812      	adds	r2, r2, r0
 80045c8:	eb41 0303 	adc.w	r3, r1, r3
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	f04f 0500 	mov.w	r5, #0
 80045d4:	00dd      	lsls	r5, r3, #3
 80045d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045da:	00d4      	lsls	r4, r2, #3
 80045dc:	4622      	mov	r2, r4
 80045de:	462b      	mov	r3, r5
 80045e0:	1814      	adds	r4, r2, r0
 80045e2:	653c      	str	r4, [r7, #80]	; 0x50
 80045e4:	414b      	adcs	r3, r1
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
 80045e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	61b9      	str	r1, [r7, #24]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004602:	f7fb fe45 	bl	8000290 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <UART_SetConfig+0x38c>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a67      	ldr	r2, [pc, #412]	; (80047bc <UART_SetConfig+0x38c>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 0207 	and.w	r2, r3, #7
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4432      	add	r2, r6
 8004630:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004632:	e0b9      	b.n	80047a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	461c      	mov	r4, r3
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	1891      	adds	r1, r2, r2
 8004642:	6139      	str	r1, [r7, #16]
 8004644:	415b      	adcs	r3, r3
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464c:	1912      	adds	r2, r2, r4
 800464e:	eb45 0303 	adc.w	r3, r5, r3
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	00d9      	lsls	r1, r3, #3
 800465c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004660:	00d0      	lsls	r0, r2, #3
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	eb12 0804 	adds.w	r8, r2, r4
 800466a:	eb43 0905 	adc.w	r9, r3, r5
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4618      	mov	r0, r3
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004686:	0082      	lsls	r2, r0, #2
 8004688:	4640      	mov	r0, r8
 800468a:	4649      	mov	r1, r9
 800468c:	f7fb fe00 	bl	8000290 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4b49      	ldr	r3, [pc, #292]	; (80047bc <UART_SetConfig+0x38c>)
 8004696:	fba3 2302 	umull	r2, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	011e      	lsls	r6, r3, #4
 800469e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a0:	4618      	mov	r0, r3
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	1894      	adds	r4, r2, r2
 80046ac:	60bc      	str	r4, [r7, #8]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b6:	1812      	adds	r2, r2, r0
 80046b8:	eb41 0303 	adc.w	r3, r1, r3
 80046bc:	f04f 0400 	mov.w	r4, #0
 80046c0:	f04f 0500 	mov.w	r5, #0
 80046c4:	00dd      	lsls	r5, r3, #3
 80046c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ca:	00d4      	lsls	r4, r2, #3
 80046cc:	4622      	mov	r2, r4
 80046ce:	462b      	mov	r3, r5
 80046d0:	1814      	adds	r4, r2, r0
 80046d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80046d4:	414b      	adcs	r3, r1
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046f0:	0082      	lsls	r2, r0, #2
 80046f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046f6:	f7fb fdcb 	bl	8000290 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <UART_SetConfig+0x38c>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <UART_SetConfig+0x38c>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471e:	441e      	add	r6, r3
 8004720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004722:	4618      	mov	r0, r3
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	1894      	adds	r4, r2, r2
 800472e:	603c      	str	r4, [r7, #0]
 8004730:	415b      	adcs	r3, r3
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004738:	1812      	adds	r2, r2, r0
 800473a:	eb41 0303 	adc.w	r3, r1, r3
 800473e:	f04f 0400 	mov.w	r4, #0
 8004742:	f04f 0500 	mov.w	r5, #0
 8004746:	00dd      	lsls	r5, r3, #3
 8004748:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800474c:	00d4      	lsls	r4, r2, #3
 800474e:	4622      	mov	r2, r4
 8004750:	462b      	mov	r3, r5
 8004752:	eb12 0a00 	adds.w	sl, r2, r0
 8004756:	eb43 0b01 	adc.w	fp, r3, r1
 800475a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4618      	mov	r0, r3
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	008b      	lsls	r3, r1, #2
 800476e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004772:	0082      	lsls	r2, r0, #2
 8004774:	4650      	mov	r0, sl
 8004776:	4659      	mov	r1, fp
 8004778:	f7fb fd8a 	bl	8000290 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <UART_SetConfig+0x38c>)
 8004782:	fba3 1302 	umull	r1, r3, r3, r2
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2164      	movs	r1, #100	; 0x64
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	3332      	adds	r3, #50	; 0x32
 8004794:	4a09      	ldr	r2, [pc, #36]	; (80047bc <UART_SetConfig+0x38c>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	f003 020f 	and.w	r2, r3, #15
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4432      	add	r2, r6
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	377c      	adds	r7, #124	; 0x7c
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	51eb851f 	.word	0x51eb851f

080047c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c0:	b084      	sub	sp, #16
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	f107 001c 	add.w	r0, r7, #28
 80047ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d122      	bne.n	800481e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f001 fac6 	bl	8005da4 <USB_CoreReset>
 8004818:	4603      	mov	r3, r0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e01a      	b.n	8004854 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 faba 	bl	8005da4 <USB_CoreReset>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
 8004846:	e005      	b.n	8004854 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10b      	bne.n	8004872 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f043 0206 	orr.w	r2, r3, #6
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800487e:	b004      	add	sp, #16
 8004880:	4770      	bx	lr
	...

08004884 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d165      	bne.n	8004964 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <USB_SetTurnaroundTime+0x11c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d906      	bls.n	80048ae <USB_SetTurnaroundTime+0x2a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <USB_SetTurnaroundTime+0x120>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d202      	bcs.n	80048ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048a8:	230f      	movs	r3, #15
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e062      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <USB_SetTurnaroundTime+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d306      	bcc.n	80048c4 <USB_SetTurnaroundTime+0x40>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a3b      	ldr	r2, [pc, #236]	; (80049a8 <USB_SetTurnaroundTime+0x124>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d202      	bcs.n	80048c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048be:	230e      	movs	r3, #14
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e057      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a38      	ldr	r2, [pc, #224]	; (80049a8 <USB_SetTurnaroundTime+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d306      	bcc.n	80048da <USB_SetTurnaroundTime+0x56>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a37      	ldr	r2, [pc, #220]	; (80049ac <USB_SetTurnaroundTime+0x128>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048d4:	230d      	movs	r3, #13
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e04c      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <USB_SetTurnaroundTime+0x128>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d306      	bcc.n	80048f0 <USB_SetTurnaroundTime+0x6c>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <USB_SetTurnaroundTime+0x12c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d802      	bhi.n	80048f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048ea:	230c      	movs	r3, #12
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e041      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <USB_SetTurnaroundTime+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d906      	bls.n	8004906 <USB_SetTurnaroundTime+0x82>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <USB_SetTurnaroundTime+0x130>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d802      	bhi.n	8004906 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004900:	230b      	movs	r3, #11
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e036      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <USB_SetTurnaroundTime+0x130>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d906      	bls.n	800491c <USB_SetTurnaroundTime+0x98>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <USB_SetTurnaroundTime+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d802      	bhi.n	800491c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004916:	230a      	movs	r3, #10
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e02b      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <USB_SetTurnaroundTime+0x134>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d906      	bls.n	8004932 <USB_SetTurnaroundTime+0xae>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a25      	ldr	r2, [pc, #148]	; (80049bc <USB_SetTurnaroundTime+0x138>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d202      	bcs.n	8004932 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800492c:	2309      	movs	r3, #9
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e020      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <USB_SetTurnaroundTime+0x138>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d306      	bcc.n	8004948 <USB_SetTurnaroundTime+0xc4>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <USB_SetTurnaroundTime+0x13c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d802      	bhi.n	8004948 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004942:	2308      	movs	r3, #8
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	e015      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <USB_SetTurnaroundTime+0x13c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d906      	bls.n	800495e <USB_SetTurnaroundTime+0xda>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <USB_SetTurnaroundTime+0x140>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d202      	bcs.n	800495e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004958:	2307      	movs	r3, #7
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e00a      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800495e:	2306      	movs	r3, #6
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e007      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800496a:	2309      	movs	r3, #9
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e001      	b.n	8004974 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004970:	2309      	movs	r3, #9
 8004972:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	00d8acbf 	.word	0x00d8acbf
 80049a4:	00e4e1c0 	.word	0x00e4e1c0
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	01067380 	.word	0x01067380
 80049b0:	011a499f 	.word	0x011a499f
 80049b4:	01312cff 	.word	0x01312cff
 80049b8:	014ca43f 	.word	0x014ca43f
 80049bc:	016e3600 	.word	0x016e3600
 80049c0:	01a6ab1f 	.word	0x01a6ab1f
 80049c4:	01e84800 	.word	0x01e84800

080049c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d106      	bne.n	8004a38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e00b      	b.n	8004a50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	e001      	b.n	8004a50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e003      	b.n	8004a58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a50:	2032      	movs	r0, #50	; 0x32
 8004a52:	f7fc ff5f 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a60:	b084      	sub	sp, #16
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e009      	b.n	8004a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3340      	adds	r3, #64	; 0x40
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3301      	adds	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0e      	cmp	r3, #14
 8004a98:	d9f2      	bls.n	8004a80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11c      	bne.n	8004ada <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ad8:	e00b      	b.n	8004af2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	4619      	mov	r1, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d10c      	bne.n	8004b32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f949 	bl	8004db8 <USB_SetDevSpeed>
 8004b26:	e008      	b.n	8004b3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f944 	bl	8004db8 <USB_SetDevSpeed>
 8004b30:	e003      	b.n	8004b3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b32:	2103      	movs	r1, #3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f93f 	bl	8004db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8f3 	bl	8004d28 <USB_FlushTxFifo>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f911 	bl	8004d74 <USB_FlushRxFifo>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	461a      	mov	r2, r3
 8004b64:	2300      	movs	r3, #0
 8004b66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e043      	b.n	8004c0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b9c:	d118      	bne.n	8004bd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e013      	b.n	8004be2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e008      	b.n	8004be2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3b7      	bcc.n	8004b86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e043      	b.n	8004ca4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c32:	d118      	bne.n	8004c66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e013      	b.n	8004c78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e008      	b.n	8004c78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	461a      	mov	r2, r3
 8004c74:	2300      	movs	r3, #0
 8004c76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d3b7      	bcc.n	8004c1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ccc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f043 0210 	orr.w	r2, r3, #16
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <USB_DevInit+0x2c4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f043 0208 	orr.w	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d20:	b004      	add	sp, #16
 8004d22:	4770      	bx	lr
 8004d24:	803c3800 	.word	0x803c3800

08004d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <USB_FlushTxFifo+0x48>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d0f0      	beq.n	8004d42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	00030d40 	.word	0x00030d40

08004d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2210      	movs	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <USB_FlushRxFifo+0x40>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d0f0      	beq.n	8004d86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	00030d40 	.word	0x00030d40

08004db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0306 	and.w	r3, r3, #6
 8004e02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
 8004e0e:	e00a      	b.n	8004e26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d002      	beq.n	8004e1c <USB_GetDevSpeed+0x32>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b06      	cmp	r3, #6
 8004e1a:	d102      	bne.n	8004e22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	75fb      	strb	r3, [r7, #23]
 8004e20:	e001      	b.n	8004e26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e22:	230f      	movs	r3, #15
 8004e24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d13a      	bne.n	8004ec6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d155      	bne.n	8004f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	78db      	ldrb	r3, [r3, #3]
 8004ea2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ea4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	059b      	lsls	r3, r3, #22
 8004eaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004eac:	4313      	orrs	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e036      	b.n	8004f34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11a      	bne.n	8004f34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d161      	bne.n	8005024 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f76:	d11f      	bne.n	8004fb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fd8:	4013      	ands	r3, r2
 8004fda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	0159      	lsls	r1, r3, #5
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	440b      	add	r3, r1
 8005016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501a:	4619      	mov	r1, r3
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <USB_DeactivateEndpoint+0x1b0>)
 800501e:	4013      	ands	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	e060      	b.n	80050e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503a:	d11f      	bne.n	800507c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800505a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800507a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2101      	movs	r1, #1
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	43db      	mvns	r3, r3
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509c:	4013      	ands	r3, r2
 800509e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2101      	movs	r1, #1
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	43db      	mvns	r3, r3
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c0:	4013      	ands	r3, r2
 80050c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	0159      	lsls	r1, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	440b      	add	r3, r1
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	4619      	mov	r1, r3
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <USB_DeactivateEndpoint+0x1b4>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	ec337800 	.word	0xec337800
 80050f8:	eff37800 	.word	0xeff37800

080050fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 815c 	bne.w	80053d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d132      	bne.n	800518c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	0cdb      	lsrs	r3, r3, #19
 8005186:	04db      	lsls	r3, r3, #19
 8005188:	6113      	str	r3, [r2, #16]
 800518a:	e074      	b.n	8005276 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	0cdb      	lsrs	r3, r3, #19
 80051a8:	04db      	lsls	r3, r3, #19
 80051aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6959      	ldr	r1, [r3, #20]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	440b      	add	r3, r1
 80051e8:	1e59      	subs	r1, r3, #1
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	4b9d      	ldr	r3, [pc, #628]	; (800546c <USB_EPStartXfer+0x370>)
 80051f6:	400b      	ands	r3, r1
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	0148      	lsls	r0, r1, #5
 80051fc:	69f9      	ldr	r1, [r7, #28]
 80051fe:	4401      	add	r1, r0
 8005200:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005204:	4313      	orrs	r3, r2
 8005206:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	0148      	lsls	r0, r1, #5
 8005222:	69f9      	ldr	r1, [r7, #28]
 8005224:	4401      	add	r1, r0
 8005226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800522a:	4313      	orrs	r3, r2
 800522c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	78db      	ldrb	r3, [r3, #3]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d11f      	bne.n	8005276 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005250:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005254:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005274:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d14b      	bne.n	8005314 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d128      	bne.n	80052f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d110      	bne.n	80052d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	e00f      	b.n	80052f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e12f      	b.n	8005574 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005332:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	78db      	ldrb	r3, [r3, #3]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d015      	beq.n	8005368 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8117 	beq.w	8005574 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	2101      	movs	r1, #1
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	69f9      	ldr	r1, [r7, #28]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	634b      	str	r3, [r1, #52]	; 0x34
 8005366:	e105      	b.n	8005574 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d110      	bne.n	800539a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e00f      	b.n	80053ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	68d9      	ldr	r1, [r3, #12]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	b298      	uxth	r0, r3
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	4603      	mov	r3, r0
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fa2b 	bl	800582a <USB_WritePacket>
 80053d4:	e0ce      	b.n	8005574 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f0:	0cdb      	lsrs	r3, r3, #19
 80053f2:	04db      	lsls	r3, r3, #19
 80053f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005414:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005418:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d126      	bne.n	8005470 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	0148      	lsls	r0, r1, #5
 800543c:	69f9      	ldr	r1, [r7, #28]
 800543e:	4401      	add	r1, r0
 8005440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005444:	4313      	orrs	r3, r2
 8005446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005466:	6113      	str	r3, [r2, #16]
 8005468:	e036      	b.n	80054d8 <USB_EPStartXfer+0x3dc>
 800546a:	bf00      	nop
 800546c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4413      	add	r3, r2
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	8afb      	ldrh	r3, [r7, #22]
 8005496:	04d9      	lsls	r1, r3, #19
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <USB_EPStartXfer+0x484>)
 800549a:	400b      	ands	r3, r1
 800549c:	69b9      	ldr	r1, [r7, #24]
 800549e:	0148      	lsls	r0, r1, #5
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	4401      	add	r1, r0
 80054a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054a8:	4313      	orrs	r3, r2
 80054aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	8af9      	ldrh	r1, [r7, #22]
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c8:	69b9      	ldr	r1, [r7, #24]
 80054ca:	0148      	lsls	r0, r1, #5
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	4401      	add	r1, r0
 80054d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d10d      	bne.n	80054fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	68d9      	ldr	r1, [r3, #12]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	460a      	mov	r2, r1
 80054f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	78db      	ldrb	r3, [r3, #3]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d128      	bne.n	8005554 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d110      	bne.n	8005534 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e00f      	b.n	8005554 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005552:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005572:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	1ff80000 	.word	0x1ff80000

08005584 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f040 80cd 	bne.w	8005740 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d132      	bne.n	8005614 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	0cdb      	lsrs	r3, r3, #19
 800560e:	04db      	lsls	r3, r3, #19
 8005610:	6113      	str	r3, [r2, #16]
 8005612:	e04e      	b.n	80056b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562e:	0cdb      	lsrs	r3, r3, #19
 8005630:	04db      	lsls	r3, r3, #19
 8005632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005652:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005656:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a2:	6939      	ldr	r1, [r7, #16]
 80056a4:	0148      	lsls	r0, r1, #5
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	4401      	add	r1, r0
 80056aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056ae:	4313      	orrs	r3, r2
 80056b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d11e      	bne.n	80056f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e092      	b.n	800581c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005714:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d07e      	beq.n	800581c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	6979      	ldr	r1, [r7, #20]
 8005736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800573a:	4313      	orrs	r3, r2
 800573c:	634b      	str	r3, [r1, #52]	; 0x34
 800573e:	e06d      	b.n	800581c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	0cdb      	lsrs	r3, r3, #19
 800575c:	04db      	lsls	r3, r3, #19
 800575e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005782:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ca:	6939      	ldr	r1, [r7, #16]
 80057cc:	0148      	lsls	r0, r1, #5
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	4401      	add	r1, r0
 80057d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057d6:	4313      	orrs	r3, r2
 80057d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10d      	bne.n	80057fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	68d9      	ldr	r1, [r3, #12]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	460a      	mov	r2, r1
 80057fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800581a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800582a:	b480      	push	{r7}
 800582c:	b089      	sub	sp, #36	; 0x24
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	4611      	mov	r1, r2
 8005836:	461a      	mov	r2, r3
 8005838:	460b      	mov	r3, r1
 800583a:	71fb      	strb	r3, [r7, #7]
 800583c:	4613      	mov	r3, r2
 800583e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005848:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800584c:	2b00      	cmp	r3, #0
 800584e:	d11a      	bne.n	8005886 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005850:	88bb      	ldrh	r3, [r7, #4]
 8005852:	3303      	adds	r3, #3
 8005854:	089b      	lsrs	r3, r3, #2
 8005856:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e00f      	b.n	800587e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	031a      	lsls	r2, r3, #12
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	461a      	mov	r2, r3
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3304      	adds	r3, #4
 8005876:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3301      	adds	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3eb      	bcc.n	800585e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3724      	adds	r7, #36	; 0x24
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	3303      	adds	r3, #3
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e00b      	b.n	80058d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3304      	adds	r3, #4
 80058c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3301      	adds	r3, #1
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3ef      	bcc.n	80058b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80058d8:	69fb      	ldr	r3, [r7, #28]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3724      	adds	r7, #36	; 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d12c      	bne.n	800595c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db12      	blt.n	800593a <USB_EPSetStall+0x54>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00f      	beq.n	800593a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005938:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e02b      	b.n	80059b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	db12      	blt.n	8005994 <USB_EPSetStall+0xae>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00f      	beq.n	8005994 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	440a      	add	r2, r1
 800598a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005992:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d128      	bne.n	8005a30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	78db      	ldrb	r3, [r3, #3]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d003      	beq.n	8005a0e <USB_EPClearStall+0x4c>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d138      	bne.n	8005a80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e027      	b.n	8005a80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d003      	beq.n	8005a60 <USB_EPClearStall+0x9e>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	78db      	ldrb	r3, [r3, #3]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d10f      	bne.n	8005a80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ab0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b08:	f023 0302 	bic.w	r3, r3, #2
 8005b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4013      	ands	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b76:	68fb      	ldr	r3, [r7, #12]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	0c1b      	lsrs	r3, r3, #16
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	b29b      	uxth	r3, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
 8005c58:	01db      	lsls	r3, r3, #7
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c76:	68bb      	ldr	r3, [r7, #8]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	f003 0301 	and.w	r3, r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	333c      	adds	r3, #60	; 0x3c
 8005cfe:	3304      	adds	r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <USB_EP0_OutStart+0xb8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d90a      	bls.n	8005d22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1c:	d101      	bne.n	8005d22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e037      	b.n	8005d92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d50:	f043 0318 	orr.w	r3, r3, #24
 8005d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10f      	bne.n	8005d90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	4f54300a 	.word	0x4f54300a

08005da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <USB_CoreReset+0x64>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e01b      	b.n	8005dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	daf2      	bge.n	8005db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <USB_CoreReset+0x64>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d901      	bls.n	8005dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e006      	b.n	8005dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d0f0      	beq.n	8005dda <USB_CoreReset+0x36>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	00030d40 	.word	0x00030d40

08005e0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e1c:	f002 fa68 	bl	80082f0 <USBD_static_malloc>
 8005e20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e066      	b.n	8005f02 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7c1b      	ldrb	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d119      	bne.n	8005e78 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e48:	2202      	movs	r2, #2
 8005e4a:	2181      	movs	r1, #129	; 0x81
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f002 f92c 	bl	80080aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	2101      	movs	r1, #1
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f002 f922 	bl	80080aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2210      	movs	r2, #16
 8005e72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e76:	e016      	b.n	8005ea6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	2181      	movs	r1, #129	; 0x81
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f002 f913 	bl	80080aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e8a:	2340      	movs	r3, #64	; 0x40
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	2101      	movs	r1, #1
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 f90a 	bl	80080aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	2182      	movs	r1, #130	; 0x82
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f002 f8fc 	bl	80080aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	7c1b      	ldrb	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f002 f9cd 	bl	8008288 <USBD_LL_PrepareReceive>
 8005eee:	e007      	b.n	8005f00 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	2101      	movs	r1, #1
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f002 f9c4 	bl	8008288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f16:	2181      	movs	r1, #129	; 0x81
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 f8ec 	bl	80080f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f24:	2101      	movs	r1, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f002 f8e5 	bl	80080f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f34:	2182      	movs	r1, #130	; 0x82
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f002 f8dd 	bl	80080f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 f9d0 	bl	800830c <USBD_static_free>
    pdev->pClassData = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0af      	b.n	8006108 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d03f      	beq.n	8006034 <USBD_CDC_Setup+0xb4>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	f040 809f 	bne.w	80060f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d02e      	beq.n	8006020 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da16      	bge.n	8005ffa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005fd8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	88d2      	ldrh	r2, [r2, #6]
 8005fde:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	88db      	ldrh	r3, [r3, #6]
 8005fe4:	2b07      	cmp	r3, #7
 8005fe6:	bf28      	it	cs
 8005fe8:	2307      	movcs	r3, #7
 8005fea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	89fa      	ldrh	r2, [r7, #14]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fb19 	bl	800762a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005ff8:	e085      	b.n	8006106 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785a      	ldrb	r2, [r3, #1]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	88db      	ldrh	r3, [r3, #6]
 8006008:	b2da      	uxtb	r2, r3
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006010:	6939      	ldr	r1, [r7, #16]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	461a      	mov	r2, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fb32 	bl	8007682 <USBD_CtlPrepareRx>
      break;
 800601e:	e072      	b.n	8006106 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	7850      	ldrb	r0, [r2, #1]
 800602c:	2200      	movs	r2, #0
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	4798      	blx	r3
      break;
 8006032:	e068      	b.n	8006106 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b0b      	cmp	r3, #11
 800603a:	d852      	bhi.n	80060e2 <USBD_CDC_Setup+0x162>
 800603c:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USBD_CDC_Setup+0xc4>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006075 	.word	0x08006075
 8006048:	080060f1 	.word	0x080060f1
 800604c:	080060e3 	.word	0x080060e3
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060e3 	.word	0x080060e3
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060e3 	.word	0x080060e3
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060e3 	.word	0x080060e3
 800606c:	0800609f 	.word	0x0800609f
 8006070:	080060c9 	.word	0x080060c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b03      	cmp	r3, #3
 800607e:	d107      	bne.n	8006090 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006080:	f107 030a 	add.w	r3, r7, #10
 8006084:	2202      	movs	r2, #2
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 face 	bl	800762a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800608e:	e032      	b.n	80060f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fa58 	bl	8007548 <USBD_CtlError>
            ret = USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	75fb      	strb	r3, [r7, #23]
          break;
 800609c:	e02b      	b.n	80060f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d107      	bne.n	80060ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060aa:	f107 030d 	add.w	r3, r7, #13
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fab9 	bl	800762a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b8:	e01d      	b.n	80060f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fa43 	bl	8007548 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	75fb      	strb	r3, [r7, #23]
          break;
 80060c6:	e016      	b.n	80060f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d00f      	beq.n	80060f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fa36 	bl	8007548 <USBD_CtlError>
            ret = USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060e0:	e008      	b.n	80060f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fa2f 	bl	8007548 <USBD_CtlError>
          ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          break;
 80060ee:	e002      	b.n	80060f6 <USBD_CDC_Setup+0x176>
          break;
 80060f0:	bf00      	nop
 80060f2:	e008      	b.n	8006106 <USBD_CDC_Setup+0x186>
          break;
 80060f4:	bf00      	nop
      }
      break;
 80060f6:	e006      	b.n	8006106 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fa24 	bl	8007548 <USBD_CtlError>
      ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	bf00      	nop
  }

  return (uint8_t)ret;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800612e:	2303      	movs	r3, #3
 8006130:	e04f      	b.n	80061d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006138:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	3318      	adds	r3, #24
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d029      	beq.n	80061a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3318      	adds	r3, #24
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	78f9      	ldrb	r1, [r7, #3]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	460b      	mov	r3, r1
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	1a5b      	subs	r3, r3, r1
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4403      	add	r3, r0
 8006170:	3344      	adds	r3, #68	; 0x44
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	fbb2 f1f3 	udiv	r1, r2, r3
 8006178:	fb03 f301 	mul.w	r3, r3, r1
 800617c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800617e:	2b00      	cmp	r3, #0
 8006180:	d110      	bne.n	80061a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	3318      	adds	r3, #24
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006196:	78f9      	ldrb	r1, [r7, #3]
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f002 f852 	bl	8008246 <USBD_LL_Transmit>
 80061a2:	e015      	b.n	80061d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e015      	b.n	8006228 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f002 f862 	bl	80082ca <USBD_LL_GetRxDataSize>
 8006206:	4602      	mov	r2, r0
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006222:	4611      	mov	r1, r2
 8006224:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800623e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006246:	2303      	movs	r3, #3
 8006248:	e01b      	b.n	8006282 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d015      	beq.n	8006280 <USBD_CDC_EP0_RxReady+0x50>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800625a:	2bff      	cmp	r3, #255	; 0xff
 800625c:	d010      	beq.n	8006280 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800626c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006274:	b292      	uxth	r2, r2
 8006276:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	22ff      	movs	r2, #255	; 0xff
 800627c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2243      	movs	r2, #67	; 0x43
 8006298:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800629a:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	200000d4 	.word	0x200000d4

080062ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2243      	movs	r2, #67	; 0x43
 80062b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80062ba:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000090 	.word	0x20000090

080062cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2243      	movs	r2, #67	; 0x43
 80062d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80062da:	4b03      	ldr	r3, [pc, #12]	; (80062e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	20000118 	.word	0x20000118

080062ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	220a      	movs	r2, #10
 80062f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80062fa:	4b03      	ldr	r3, [pc, #12]	; (8006308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	2000004c 	.word	0x2000004c

0800630c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	e004      	b.n	800632a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006348:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006350:	2303      	movs	r3, #3
 8006352:	e008      	b.n	8006366 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006382:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	e004      	b.n	8006398 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e01a      	b.n	80063fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d114      	bne.n	80063fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063ee:	2181      	movs	r1, #129	; 0x81
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 ff28 	bl	8008246 <USBD_LL_Transmit>

    ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800641e:	2303      	movs	r3, #3
 8006420:	e016      	b.n	8006450 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7c1b      	ldrb	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006434:	2101      	movs	r1, #1
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 ff26 	bl	8008288 <USBD_LL_PrepareReceive>
 800643c:	e007      	b.n	800644e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2101      	movs	r1, #1
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 ff1d 	bl	8008288 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	e01f      	b.n	80064b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	79fa      	ldrb	r2, [r7, #7]
 80064a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 fd99 	bl	8007fdc <USBD_LL_Init>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e016      	b.n	80064fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f107 020e 	add.w	r2, r7, #14
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
 80064f4:	4602      	mov	r2, r0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fdb0 	bl	8008074 <USBD_LL_Start>
 8006514:	4603      	mov	r3, r0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	4611      	mov	r1, r2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
  }

  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 ff90 	bl	80074d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d01a      	beq.n	800660e <USBD_LL_SetupStage+0x72>
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d822      	bhi.n	8006622 <USBD_LL_SetupStage+0x86>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <USBD_LL_SetupStage+0x4a>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d00a      	beq.n	80065fa <USBD_LL_SetupStage+0x5e>
 80065e4:	e01d      	b.n	8006622 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa62 	bl	8006ab8 <USBD_StdDevReq>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
      break;
 80065f8:	e020      	b.n	800663c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fac6 	bl	8006b94 <USBD_StdItfReq>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e016      	b.n	800663c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb05 	bl	8006c26 <USBD_StdEPReq>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      break;
 8006620:	e00c      	b.n	800663c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006628:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800662c:	b2db      	uxtb	r3, r3
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fd7f 	bl	8008134 <USBD_LL_StallEP>
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
      break;
 800663a:	bf00      	nop
  }

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	460b      	mov	r3, r1
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d138      	bne.n	80066cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006660:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006668:	2b03      	cmp	r3, #3
 800666a:	d14a      	bne.n	8006702 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d913      	bls.n	80066a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4293      	cmp	r3, r2
 8006690:	bf28      	it	cs
 8006692:	4613      	movcs	r3, r2
 8006694:	461a      	mov	r2, r3
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 f80f 	bl	80076bc <USBD_CtlContinueRx>
 800669e:	e030      	b.n	8006702 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d10b      	bne.n	80066c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 f80a 	bl	80076de <USBD_CtlSendStatus>
 80066ca:	e01a      	b.n	8006702 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d114      	bne.n	8006702 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	7afa      	ldrb	r2, [r7, #11]
 80066ee:	4611      	mov	r1, r2
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	4798      	blx	r3
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
 8006700:	e000      	b.n	8006704 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	460b      	mov	r3, r1
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d16b      	bne.n	80067f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3314      	adds	r3, #20
 8006724:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800672c:	2b02      	cmp	r3, #2
 800672e:	d156      	bne.n	80067de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d914      	bls.n	8006766 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	461a      	mov	r2, r3
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 ff84 	bl	8007660 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006758:	2300      	movs	r3, #0
 800675a:	2200      	movs	r2, #0
 800675c:	2100      	movs	r1, #0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 fd92 	bl	8008288 <USBD_LL_PrepareReceive>
 8006764:	e03b      	b.n	80067de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d11c      	bne.n	80067ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800677a:	429a      	cmp	r2, r3
 800677c:	d316      	bcc.n	80067ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006788:	429a      	cmp	r2, r3
 800678a:	d20f      	bcs.n	80067ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 ff65 	bl	8007660 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800679e:	2300      	movs	r3, #0
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 fd6f 	bl	8008288 <USBD_LL_PrepareReceive>
 80067aa:	e018      	b.n	80067de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d10b      	bne.n	80067d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067d0:	2180      	movs	r1, #128	; 0x80
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f001 fcae 	bl	8008134 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 ff93 	bl	8007704 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d122      	bne.n	800682e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fe98 	bl	800651e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067f6:	e01a      	b.n	800682e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b03      	cmp	r3, #3
 8006802:	d114      	bne.n	800682e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	4611      	mov	r1, r2
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	e000      	b.n	8006830 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e02f      	b.n	80068cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6852      	ldr	r2, [r2, #4]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	4611      	mov	r1, r2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006896:	2340      	movs	r3, #64	; 0x40
 8006898:	2200      	movs	r2, #0
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fc04 	bl	80080aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2240      	movs	r2, #64	; 0x40
 80068ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	2200      	movs	r2, #0
 80068b6:	2180      	movs	r1, #128	; 0x80
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fbf6 	bl	80080aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2240      	movs	r2, #64	; 0x40
 80068c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006902:	b2da      	uxtb	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2204      	movs	r2, #4
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b04      	cmp	r3, #4
 8006932:	d106      	bne.n	8006942 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800693a:	b2da      	uxtb	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006962:	2303      	movs	r3, #3
 8006964:	e012      	b.n	800698c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d10b      	bne.n	800698a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e014      	b.n	80069d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d10d      	bne.n	80069d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	4611      	mov	r1, r2
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e014      	b.n	8006a24 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d10d      	bne.n	8006a22 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6852      	ldr	r2, [r2, #4]
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a98:	8a3b      	ldrh	r3, [r7, #16]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	b21a      	sxth	r2, r3
 8006a9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b21b      	sxth	r3, r3
 8006aa6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d005      	beq.n	8006ade <USBD_StdDevReq+0x26>
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d853      	bhi.n	8006b7e <USBD_StdDevReq+0xc6>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <USBD_StdDevReq+0x3a>
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d14f      	bne.n	8006b7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e04a      	b.n	8006b88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d83b      	bhi.n	8006b72 <USBD_StdDevReq+0xba>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBD_StdDevReq+0x48>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006b69 	.word	0x08006b69
 8006b08:	08006b73 	.word	0x08006b73
 8006b0c:	08006b5f 	.word	0x08006b5f
 8006b10:	08006b73 	.word	0x08006b73
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b73 	.word	0x08006b73
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b3d 	.word	0x08006b3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9de 	bl	8006eec <USBD_GetDescriptor>
          break;
 8006b30:	e024      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fb43 	bl	80071c0 <USBD_SetAddress>
          break;
 8006b3a:	e01f      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb82 	bl	8007248 <USBD_SetConfig>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]
          break;
 8006b48:	e018      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc21 	bl	8007394 <USBD_GetConfig>
          break;
 8006b52:	e013      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fc52 	bl	8007400 <USBD_GetStatus>
          break;
 8006b5c:	e00e      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc81 	bl	8007468 <USBD_SetFeature>
          break;
 8006b66:	e009      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fc90 	bl	8007490 <USBD_ClrFeature>
          break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fce7 	bl	8007548 <USBD_CtlError>
          break;
 8006b7a:	bf00      	nop
      }
      break;
 8006b7c:	e004      	b.n	8006b88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fce1 	bl	8007548 <USBD_CtlError>
      break;
 8006b86:	bf00      	nop
  }

  return ret;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop

08006b94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d005      	beq.n	8006bba <USBD_StdItfReq+0x26>
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d82f      	bhi.n	8006c12 <USBD_StdItfReq+0x7e>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <USBD_StdItfReq+0x26>
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	d12b      	bne.n	8006c12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d81d      	bhi.n	8006c04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	889b      	ldrh	r3, [r3, #4]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d813      	bhi.n	8006bfa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	88db      	ldrh	r3, [r3, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d110      	bne.n	8006c0e <USBD_StdItfReq+0x7a>
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fd73 	bl	80076de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bf8:	e009      	b.n	8006c0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fca3 	bl	8007548 <USBD_CtlError>
          break;
 8006c02:	e004      	b.n	8006c0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fc9e 	bl	8007548 <USBD_CtlError>
          break;
 8006c0c:	e000      	b.n	8006c10 <USBD_StdItfReq+0x7c>
          break;
 8006c0e:	bf00      	nop
      }
      break;
 8006c10:	e004      	b.n	8006c1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fc97 	bl	8007548 <USBD_CtlError>
      break;
 8006c1a:	bf00      	nop
  }

  return ret;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	889b      	ldrh	r3, [r3, #4]
 8006c38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d007      	beq.n	8006c56 <USBD_StdEPReq+0x30>
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	f200 8145 	bhi.w	8006ed6 <USBD_StdEPReq+0x2b0>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <USBD_StdEPReq+0x44>
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	f040 8140 	bne.w	8006ed6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]
      break;
 8006c68:	e13a      	b.n	8006ee0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d007      	beq.n	8006c82 <USBD_StdEPReq+0x5c>
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	f300 8129 	bgt.w	8006eca <USBD_StdEPReq+0x2a4>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d07f      	beq.n	8006d7c <USBD_StdEPReq+0x156>
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d03c      	beq.n	8006cfa <USBD_StdEPReq+0xd4>
 8006c80:	e123      	b.n	8006eca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d002      	beq.n	8006c94 <USBD_StdEPReq+0x6e>
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d016      	beq.n	8006cc0 <USBD_StdEPReq+0x9a>
 8006c92:	e02c      	b.n	8006cee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <USBD_StdEPReq+0x90>
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d00a      	beq.n	8006cb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fa45 	bl	8008134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fa41 	bl	8008134 <USBD_LL_StallEP>
 8006cb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cb4:	e020      	b.n	8006cf8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc45 	bl	8007548 <USBD_CtlError>
              break;
 8006cbe:	e01b      	b.n	8006cf8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10e      	bne.n	8006ce6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <USBD_StdEPReq+0xc0>
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d008      	beq.n	8006ce6 <USBD_StdEPReq+0xc0>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	88db      	ldrh	r3, [r3, #6]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fa27 	bl	8008134 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fcf9 	bl	80076de <USBD_CtlSendStatus>

              break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc29 	bl	8007548 <USBD_CtlError>
              break;
 8006cf6:	bf00      	nop
          }
          break;
 8006cf8:	e0ec      	b.n	8006ed4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d002      	beq.n	8006d0c <USBD_StdEPReq+0xe6>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d016      	beq.n	8006d38 <USBD_StdEPReq+0x112>
 8006d0a:	e030      	b.n	8006d6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <USBD_StdEPReq+0x108>
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d00a      	beq.n	8006d2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fa09 	bl	8008134 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fa05 	bl	8008134 <USBD_LL_StallEP>
 8006d2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d2c:	e025      	b.n	8006d7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fc09 	bl	8007548 <USBD_CtlError>
              break;
 8006d36:	e020      	b.n	8006d7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11b      	bne.n	8006d78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa0f 	bl	8008172 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fcc2 	bl	80076de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbe9 	bl	8007548 <USBD_CtlError>
              break;
 8006d76:	e000      	b.n	8006d7a <USBD_StdEPReq+0x154>
              break;
 8006d78:	bf00      	nop
          }
          break;
 8006d7a:	e0ab      	b.n	8006ed4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d002      	beq.n	8006d8e <USBD_StdEPReq+0x168>
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d032      	beq.n	8006df2 <USBD_StdEPReq+0x1cc>
 8006d8c:	e097      	b.n	8006ebe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <USBD_StdEPReq+0x17e>
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d004      	beq.n	8006da4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fbd3 	bl	8007548 <USBD_CtlError>
                break;
 8006da2:	e091      	b.n	8006ec8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	da0b      	bge.n	8006dc4 <USBD_StdEPReq+0x19e>
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	3310      	adds	r3, #16
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	e00b      	b.n	8006ddc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3304      	adds	r3, #4
 8006ddc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2202      	movs	r2, #2
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc1d 	bl	800762a <USBD_CtlSendData>
              break;
 8006df0:	e06a      	b.n	8006ec8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da11      	bge.n	8006e1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	f003 020f 	and.w	r2, r3, #15
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	3324      	adds	r3, #36	; 0x24
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d117      	bne.n	8006e44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fb96 	bl	8007548 <USBD_CtlError>
                  break;
 8006e1c:	e054      	b.n	8006ec8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	f003 020f 	and.w	r2, r3, #15
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb83 	bl	8007548 <USBD_CtlError>
                  break;
 8006e42:	e041      	b.n	8006ec8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da0b      	bge.n	8006e64 <USBD_StdEPReq+0x23e>
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	3310      	adds	r3, #16
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3304      	adds	r3, #4
 8006e62:	e00b      	b.n	8006e7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <USBD_StdEPReq+0x264>
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	d103      	bne.n	8006e92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e00e      	b.n	8006eb0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f98a 	bl	80081b0 <USBD_LL_IsStallEP>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e002      	b.n	8006eb0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fbb7 	bl	800762a <USBD_CtlSendData>
              break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fb41 	bl	8007548 <USBD_CtlError>
              break;
 8006ec6:	bf00      	nop
          }
          break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fb3b 	bl	8007548 <USBD_CtlError>
          break;
 8006ed2:	bf00      	nop
      }
      break;
 8006ed4:	e004      	b.n	8006ee0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb35 	bl	8007548 <USBD_CtlError>
      break;
 8006ede:	bf00      	nop
  }

  return ret;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	f200 8128 	bhi.w	8007162 <USBD_GetDescriptor+0x276>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <USBD_GetDescriptor+0x2c>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f8d 	.word	0x08006f8d
 8006f24:	08007163 	.word	0x08007163
 8006f28:	08007163 	.word	0x08007163
 8006f2c:	08007103 	.word	0x08007103
 8006f30:	0800712f 	.word	0x0800712f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7c12      	ldrb	r2, [r2, #16]
 8006f40:	f107 0108 	add.w	r1, r7, #8
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
 8006f48:	60f8      	str	r0, [r7, #12]
      break;
 8006f4a:	e112      	b.n	8007172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7c1b      	ldrb	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f107 0208 	add.w	r2, r7, #8
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
 8006f64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f6e:	e100      	b.n	8007172 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f107 0208 	add.w	r2, r7, #8
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e0f2      	b.n	8007172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	885b      	ldrh	r3, [r3, #2]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	f200 80ac 	bhi.w	80070f0 <USBD_GetDescriptor+0x204>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_GetDescriptor+0xb4>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fed 	.word	0x08006fed
 8006fa8:	08007021 	.word	0x08007021
 8006fac:	08007055 	.word	0x08007055
 8006fb0:	08007089 	.word	0x08007089
 8006fb4:	080070bd 	.word	0x080070bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	f107 0108 	add.w	r1, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fda:	e091      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fab2 	bl	8007548 <USBD_CtlError>
            err++;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fea:	e089      	b.n	8007100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700e:	e077      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa98 	bl	8007548 <USBD_CtlError>
            err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
          break;
 800701e:	e06f      	b.n	8007100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007042:	e05d      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa7e 	bl	8007548 <USBD_CtlError>
            err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
          break;
 8007052:	e055      	b.n	8007100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007076:	e043      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa64 	bl	8007548 <USBD_CtlError>
            err++;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	3301      	adds	r3, #1
 8007084:	72fb      	strb	r3, [r7, #11]
          break;
 8007086:	e03b      	b.n	8007100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070aa:	e029      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa4a 	bl	8007548 <USBD_CtlError>
            err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ba:	e021      	b.n	8007100 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7c12      	ldrb	r2, [r2, #16]
 80070d4:	f107 0108 	add.w	r1, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070de:	e00f      	b.n	8007100 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa30 	bl	8007548 <USBD_CtlError>
            err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
          break;
 80070ee:	e007      	b.n	8007100 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa28 	bl	8007548 <USBD_CtlError>
          err++;
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	3301      	adds	r3, #1
 80070fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80070fe:	bf00      	nop
      }
      break;
 8007100:	e037      	b.n	8007172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7c1b      	ldrb	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	f107 0208 	add.w	r2, r7, #8
 8007116:	4610      	mov	r0, r2
 8007118:	4798      	blx	r3
 800711a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800711c:	e029      	b.n	8007172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa11 	bl	8007548 <USBD_CtlError>
        err++;
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	3301      	adds	r3, #1
 800712a:	72fb      	strb	r3, [r7, #11]
      break;
 800712c:	e021      	b.n	8007172 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7c1b      	ldrb	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10d      	bne.n	8007152 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	f107 0208 	add.w	r2, r7, #8
 8007142:	4610      	mov	r0, r2
 8007144:	4798      	blx	r3
 8007146:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	2207      	movs	r2, #7
 800714e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007150:	e00f      	b.n	8007172 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f9f7 	bl	8007548 <USBD_CtlError>
        err++;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	3301      	adds	r3, #1
 800715e:	72fb      	strb	r3, [r7, #11]
      break;
 8007160:	e007      	b.n	8007172 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f9ef 	bl	8007548 <USBD_CtlError>
      err++;
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	3301      	adds	r3, #1
 800716e:	72fb      	strb	r3, [r7, #11]
      break;
 8007170:	bf00      	nop
  }

  if (err != 0U)
 8007172:	7afb      	ldrb	r3, [r7, #11]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11e      	bne.n	80071b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	88db      	ldrh	r3, [r3, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d016      	beq.n	80071ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007180:	893b      	ldrh	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00e      	beq.n	80071a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	88da      	ldrh	r2, [r3, #6]
 800718a:	893b      	ldrh	r3, [r7, #8]
 800718c:	4293      	cmp	r3, r2
 800718e:	bf28      	it	cs
 8007190:	4613      	movcs	r3, r2
 8007192:	b29b      	uxth	r3, r3
 8007194:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007196:	893b      	ldrh	r3, [r7, #8]
 8007198:	461a      	mov	r2, r3
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa44 	bl	800762a <USBD_CtlSendData>
 80071a2:	e009      	b.n	80071b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9ce 	bl	8007548 <USBD_CtlError>
 80071ac:	e004      	b.n	80071b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa95 	bl	80076de <USBD_CtlSendStatus>
 80071b4:	e000      	b.n	80071b8 <USBD_GetDescriptor+0x2cc>
    return;
 80071b6:	bf00      	nop
  }
}
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop

080071c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	889b      	ldrh	r3, [r3, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d131      	bne.n	8007236 <USBD_SetAddress+0x76>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	88db      	ldrh	r3, [r3, #6]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d12d      	bne.n	8007236 <USBD_SetAddress+0x76>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	2b7f      	cmp	r3, #127	; 0x7f
 80071e0:	d829      	bhi.n	8007236 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d104      	bne.n	8007204 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f9a3 	bl	8007548 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007202:	e01d      	b.n	8007240 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	7bfa      	ldrb	r2, [r7, #15]
 8007208:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fff9 	bl	8008208 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa61 	bl	80076de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722a:	e009      	b.n	8007240 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007234:	e004      	b.n	8007240 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f985 	bl	8007548 <USBD_CtlError>
  }
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	4b4c      	ldr	r3, [pc, #304]	; (8007390 <USBD_SetConfig+0x148>)
 800725e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007260:	4b4b      	ldr	r3, [pc, #300]	; (8007390 <USBD_SetConfig+0x148>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d905      	bls.n	8007274 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f96c 	bl	8007548 <USBD_CtlError>
    return USBD_FAIL;
 8007270:	2303      	movs	r3, #3
 8007272:	e088      	b.n	8007386 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d002      	beq.n	8007286 <USBD_SetConfig+0x3e>
 8007280:	2b03      	cmp	r3, #3
 8007282:	d025      	beq.n	80072d0 <USBD_SetConfig+0x88>
 8007284:	e071      	b.n	800736a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007286:	4b42      	ldr	r3, [pc, #264]	; (8007390 <USBD_SetConfig+0x148>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01c      	beq.n	80072c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800728e:	4b40      	ldr	r3, [pc, #256]	; (8007390 <USBD_SetConfig+0x148>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007298:	4b3d      	ldr	r3, [pc, #244]	; (8007390 <USBD_SetConfig+0x148>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff f948 	bl	8006534 <USBD_SetClassConfig>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f949 	bl	8007548 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072b6:	e065      	b.n	8007384 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa10 	bl	80076de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2203      	movs	r2, #3
 80072c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072c6:	e05d      	b.n	8007384 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa08 	bl	80076de <USBD_CtlSendStatus>
      break;
 80072ce:	e059      	b.n	8007384 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072d0:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <USBD_SetConfig+0x148>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d112      	bne.n	80072fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072e0:	4b2b      	ldr	r3, [pc, #172]	; (8007390 <USBD_SetConfig+0x148>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ea:	4b29      	ldr	r3, [pc, #164]	; (8007390 <USBD_SetConfig+0x148>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff f93b 	bl	800656c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9f1 	bl	80076de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072fc:	e042      	b.n	8007384 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80072fe:	4b24      	ldr	r3, [pc, #144]	; (8007390 <USBD_SetConfig+0x148>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d02a      	beq.n	8007362 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff f929 	bl	800656c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <USBD_SetConfig+0x148>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007324:	4b1a      	ldr	r3, [pc, #104]	; (8007390 <USBD_SetConfig+0x148>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff f902 	bl	8006534 <USBD_SetClassConfig>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00f      	beq.n	800735a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f903 	bl	8007548 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff f90e 	bl	800656c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007358:	e014      	b.n	8007384 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9bf 	bl	80076de <USBD_CtlSendStatus>
      break;
 8007360:	e010      	b.n	8007384 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9bb 	bl	80076de <USBD_CtlSendStatus>
      break;
 8007368:	e00c      	b.n	8007384 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8eb 	bl	8007548 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <USBD_SetConfig+0x148>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff f8f7 	bl	800656c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800737e:	2303      	movs	r3, #3
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	bf00      	nop
  }

  return ret;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	2000024c 	.word	0x2000024c

08007394 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d004      	beq.n	80073b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8cd 	bl	8007548 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073ae:	e023      	b.n	80073f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	dc02      	bgt.n	80073c2 <USBD_GetConfig+0x2e>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dc03      	bgt.n	80073c8 <USBD_GetConfig+0x34>
 80073c0:	e015      	b.n	80073ee <USBD_GetConfig+0x5a>
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d00b      	beq.n	80073de <USBD_GetConfig+0x4a>
 80073c6:	e012      	b.n	80073ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3308      	adds	r3, #8
 80073d2:	2201      	movs	r2, #1
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f927 	bl	800762a <USBD_CtlSendData>
        break;
 80073dc:	e00c      	b.n	80073f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2201      	movs	r2, #1
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f91f 	bl	800762a <USBD_CtlSendData>
        break;
 80073ec:	e004      	b.n	80073f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8a9 	bl	8007548 <USBD_CtlError>
        break;
 80073f6:	bf00      	nop
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	2b02      	cmp	r3, #2
 8007416:	d81e      	bhi.n	8007456 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	88db      	ldrh	r3, [r3, #6]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d004      	beq.n	800742a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f890 	bl	8007548 <USBD_CtlError>
        break;
 8007428:	e01a      	b.n	8007460 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f043 0202 	orr.w	r2, r3, #2
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	330c      	adds	r3, #12
 800744a:	2202      	movs	r2, #2
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8eb 	bl	800762a <USBD_CtlSendData>
      break;
 8007454:	e004      	b.n	8007460 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f875 	bl	8007548 <USBD_CtlError>
      break;
 800745e:	bf00      	nop
  }
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	885b      	ldrh	r3, [r3, #2]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d106      	bne.n	8007488 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f92b 	bl	80076de <USBD_CtlSendStatus>
  }
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d80b      	bhi.n	80074c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	885b      	ldrh	r3, [r3, #2]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10c      	bne.n	80074ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f910 	bl	80076de <USBD_CtlSendStatus>
      }
      break;
 80074be:	e004      	b.n	80074ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f840 	bl	8007548 <USBD_CtlError>
      break;
 80074c8:	e000      	b.n	80074cc <USBD_ClrFeature+0x3c>
      break;
 80074ca:	bf00      	nop
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7ff fabb 	bl	8006a7a <SWAPBYTE>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff faae 	bl	8006a7a <SWAPBYTE>
 800751e:	4603      	mov	r3, r0
 8007520:	461a      	mov	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff faa1 	bl	8006a7a <SWAPBYTE>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	80da      	strh	r2, [r3, #6]
}
 8007540:	bf00      	nop
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fded 	bl	8008134 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800755a:	2100      	movs	r1, #0
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fde9 	bl	8008134 <USBD_LL_StallEP>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d036      	beq.n	80075ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007584:	6938      	ldr	r0, [r7, #16]
 8007586:	f000 f836 	bl	80075f6 <USBD_GetLen>
 800758a:	4603      	mov	r3, r0
 800758c:	3301      	adds	r3, #1
 800758e:	b29b      	uxth	r3, r3
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	7812      	ldrb	r2, [r2, #0]
 80075a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	3301      	adds	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4413      	add	r3, r2
 80075b0:	2203      	movs	r2, #3
 80075b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	3301      	adds	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075ba:	e013      	b.n	80075e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	7812      	ldrb	r2, [r2, #0]
 80075c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3301      	adds	r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
    idx++;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	3301      	adds	r3, #1
 80075d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	3301      	adds	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e7      	bne.n	80075bc <USBD_GetString+0x52>
 80075ec:	e000      	b.n	80075f0 <USBD_GetString+0x86>
    return;
 80075ee:	bf00      	nop
  }
}
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007606:	e005      	b.n	8007614 <USBD_GetLen+0x1e>
  {
    len++;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	3301      	adds	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	3301      	adds	r3, #1
 8007612:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f5      	bne.n	8007608 <USBD_GetLen+0x12>
  }

  return len;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2202      	movs	r2, #2
 800763a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fdf8 	bl	8008246 <USBD_LL_Transmit>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	2100      	movs	r1, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fde7 	bl	8008246 <USBD_LL_Transmit>

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2203      	movs	r2, #3
 8007692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fdeb 	bl	8008288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fdda 	bl	8008288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2204      	movs	r2, #4
 80076ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fda6 	bl	8008246 <USBD_LL_Transmit>

  return USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2205      	movs	r2, #5
 8007710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fdb4 	bl	8008288 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007730:	2200      	movs	r2, #0
 8007732:	4912      	ldr	r1, [pc, #72]	; (800777c <MX_USB_DEVICE_Init+0x50>)
 8007734:	4812      	ldr	r0, [pc, #72]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 8007736:	f7fe fe8f 	bl	8006458 <USBD_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007740:	f7f9 f96a 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007744:	490f      	ldr	r1, [pc, #60]	; (8007784 <MX_USB_DEVICE_Init+0x58>)
 8007746:	480e      	ldr	r0, [pc, #56]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 8007748:	f7fe feb6 	bl	80064b8 <USBD_RegisterClass>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007752:	f7f9 f961 	bl	8000a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007756:	490c      	ldr	r1, [pc, #48]	; (8007788 <MX_USB_DEVICE_Init+0x5c>)
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 800775a:	f7fe fdd7 	bl	800630c <USBD_CDC_RegisterInterface>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007764:	f7f9 f958 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007768:	4805      	ldr	r0, [pc, #20]	; (8007780 <MX_USB_DEVICE_Init+0x54>)
 800776a:	f7fe fecc 	bl	8006506 <USBD_Start>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007774:	f7f9 f950 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000178 	.word	0x20000178
 8007780:	20000530 	.word	0x20000530
 8007784:	20000058 	.word	0x20000058
 8007788:	20000164 	.word	0x20000164

0800778c <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800779e:	2300      	movs	r3, #0
 80077a0:	2200      	movs	r2, #0
 80077a2:	2101      	movs	r1, #1
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd6f 	bl	8008288 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e000      	b.n	80077b0 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 80077bc:	480e      	ldr	r0, [pc, #56]	; (80077f8 <CDC_Init_FS+0x40>)
 80077be:	f7f9 fd17 	bl	80011f0 <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 80077c2:	480e      	ldr	r0, [pc, #56]	; (80077fc <CDC_Init_FS+0x44>)
 80077c4:	f7f9 fdf4 	bl	80013b0 <CDC_ReceiveQueue_Init>
  receivePended = true;
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <CDC_Init_FS+0x48>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 80077ce:	480b      	ldr	r0, [pc, #44]	; (80077fc <CDC_Init_FS+0x44>)
 80077d0:	f7f9 fe04 	bl	80013dc <CDC_ReceiveQueue_ReserveBlock>
 80077d4:	4603      	mov	r3, r0
 80077d6:	4619      	mov	r1, r3
 80077d8:	480a      	ldr	r0, [pc, #40]	; (8007804 <CDC_Init_FS+0x4c>)
 80077da:	f7fe fdca 	bl	8006372 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077de:	2200      	movs	r2, #0
 80077e0:	4909      	ldr	r1, [pc, #36]	; (8007808 <CDC_Init_FS+0x50>)
 80077e2:	4808      	ldr	r0, [pc, #32]	; (8007804 <CDC_Init_FS+0x4c>)
 80077e4:	f7fe fda7 	bl	8006336 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077e8:	4908      	ldr	r1, [pc, #32]	; (800780c <CDC_Init_FS+0x54>)
 80077ea:	4806      	ldr	r0, [pc, #24]	; (8007804 <CDC_Init_FS+0x4c>)
 80077ec:	f7fe fdc1 	bl	8006372 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077f0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000800 	.word	0x20000800
 80077fc:	20001888 	.word	0x20001888
 8007800:	2000015b 	.word	0x2000015b
 8007804:	20000530 	.word	0x20000530
 8007808:	20001088 	.word	0x20001088
 800780c:	20000888 	.word	0x20000888

08007810 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007814:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007816:	4618      	mov	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
 800782c:	4613      	mov	r3, r2
 800782e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	2b23      	cmp	r3, #35	; 0x23
 8007834:	f200 80ac 	bhi.w	8007990 <CDC_Control_FS+0x170>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <CDC_Control_FS+0x20>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007991 	.word	0x08007991
 8007844:	08007991 	.word	0x08007991
 8007848:	08007991 	.word	0x08007991
 800784c:	08007991 	.word	0x08007991
 8007850:	08007991 	.word	0x08007991
 8007854:	08007991 	.word	0x08007991
 8007858:	08007991 	.word	0x08007991
 800785c:	08007991 	.word	0x08007991
 8007860:	08007991 	.word	0x08007991
 8007864:	08007991 	.word	0x08007991
 8007868:	08007991 	.word	0x08007991
 800786c:	08007991 	.word	0x08007991
 8007870:	08007991 	.word	0x08007991
 8007874:	08007991 	.word	0x08007991
 8007878:	08007991 	.word	0x08007991
 800787c:	08007991 	.word	0x08007991
 8007880:	08007991 	.word	0x08007991
 8007884:	08007991 	.word	0x08007991
 8007888:	08007991 	.word	0x08007991
 800788c:	08007991 	.word	0x08007991
 8007890:	08007991 	.word	0x08007991
 8007894:	08007991 	.word	0x08007991
 8007898:	08007991 	.word	0x08007991
 800789c:	08007991 	.word	0x08007991
 80078a0:	08007991 	.word	0x08007991
 80078a4:	08007991 	.word	0x08007991
 80078a8:	08007991 	.word	0x08007991
 80078ac:	08007991 	.word	0x08007991
 80078b0:	08007991 	.word	0x08007991
 80078b4:	08007991 	.word	0x08007991
 80078b8:	08007991 	.word	0x08007991
 80078bc:	08007991 	.word	0x08007991
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007969 	.word	0x08007969
 80078cc:	08007991 	.word	0x08007991
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	3302      	adds	r3, #2
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80078e8:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	3303      	adds	r3, #3
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80078f4:	461a      	mov	r2, r3
 80078f6:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <CDC_Control_FS+0x184>)
 80078f8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	791a      	ldrb	r2, [r3, #4]
 80078fe:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <CDC_Control_FS+0x184>)
 8007900:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	795a      	ldrb	r2, [r3, #5]
 8007906:	4b27      	ldr	r3, [pc, #156]	; (80079a4 <CDC_Control_FS+0x184>)
 8007908:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	799a      	ldrb	r2, [r3, #6]
 800790e:	4b25      	ldr	r3, [pc, #148]	; (80079a4 <CDC_Control_FS+0x184>)
 8007910:	719a      	strb	r2, [r3, #6]
    break;
 8007912:	e040      	b.n	8007996 <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007914:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <CDC_Control_FS+0x184>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800791e:	4b21      	ldr	r3, [pc, #132]	; (80079a4 <CDC_Control_FS+0x184>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	0a1a      	lsrs	r2, r3, #8
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <CDC_Control_FS+0x184>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	0c1a      	lsrs	r2, r3, #16
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	3302      	adds	r3, #2
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <CDC_Control_FS+0x184>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	0e1a      	lsrs	r2, r3, #24
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	3303      	adds	r3, #3
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3304      	adds	r3, #4
 800794c:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <CDC_Control_FS+0x184>)
 800794e:	7912      	ldrb	r2, [r2, #4]
 8007950:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3305      	adds	r3, #5
 8007956:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <CDC_Control_FS+0x184>)
 8007958:	7952      	ldrb	r2, [r2, #5]
 800795a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	3306      	adds	r3, #6
 8007960:	4a10      	ldr	r2, [pc, #64]	; (80079a4 <CDC_Control_FS+0x184>)
 8007962:	7992      	ldrb	r2, [r2, #6]
 8007964:	701a      	strb	r2, [r3, #0]
    break;
 8007966:	e016      	b.n	8007996 <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	885b      	ldrh	r3, [r3, #2]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
      lineState =
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <CDC_Control_FS+0x188>)
 800797e:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <CDC_Control_FS+0x188>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <CDC_Control_FS+0x174>
              transmitStart = 0;
 8007988:	4b08      	ldr	r3, [pc, #32]	; (80079ac <CDC_Control_FS+0x18c>)
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800798e:	e001      	b.n	8007994 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <CDC_Control_FS+0x176>
    break;
 8007994:	bf00      	nop
  }

  return (USBD_OK);
 8007996:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	2000015c 	.word	0x2000015c
 80079a8:	20000250 	.word	0x20000250
 80079ac:	20000254 	.word	0x20000254

080079b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	480b      	ldr	r0, [pc, #44]	; (80079f0 <CDC_Receive_FS+0x40>)
 80079c4:	f7f9 fd5f 	bl	8001486 <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 80079c8:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <CDC_Receive_FS+0x44>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 80079ce:	f000 f86f 	bl	8007ab0 <CDC_resume_receive>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f083 0301 	eor.w	r3, r3, #1
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 80079de:	4806      	ldr	r0, [pc, #24]	; (80079f8 <CDC_Receive_FS+0x48>)
 80079e0:	f7ff fed4 	bl	800778c <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 80079e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20001888 	.word	0x20001888
 80079f4:	2000015b 	.word	0x2000015b
 80079f8:	20000530 	.word	0x20000530

080079fc <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <CDC_connected+0x4c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 8007a0e:	f7f9 ff75 	bl	80018fc <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <CDC_connected+0x50>)
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d108      	bne.n	8007a38 <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d805      	bhi.n	8007a38 <CDC_connected+0x3c>
         && lineState;
 8007a2c:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <CDC_connected+0x54>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <CDC_connected+0x3c>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <CDC_connected+0x3e>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000254 	.word	0x20000254
 8007a4c:	20000530 	.word	0x20000530
 8007a50:	20000250 	.word	0x20000250

08007a54 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <CDC_continue_transmit+0x50>)
 8007a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a60:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d116      	bne.n	8007a9a <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	4619      	mov	r1, r3
 8007a70:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <CDC_continue_transmit+0x54>)
 8007a72:	f7f9 fc4c 	bl	800130e <CDC_TransmitQueue_ReadBlock>
 8007a76:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00d      	beq.n	8007a9a <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 8007a7e:	f7f9 ff3d 	bl	80018fc <HAL_GetTick>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4a09      	ldr	r2, [pc, #36]	; (8007aac <CDC_continue_transmit+0x58>)
 8007a86:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <CDC_continue_transmit+0x50>)
 8007a90:	f7fe fc51 	bl	8006336 <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a94:	4803      	ldr	r0, [pc, #12]	; (8007aa4 <CDC_continue_transmit+0x50>)
 8007a96:	f7fe fc85 	bl	80063a4 <USBD_CDC_TransmitPacket>
    }
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000530 	.word	0x20000530
 8007aa8:	20000800 	.word	0x20000800
 8007aac:	20000254 	.word	0x20000254

08007ab0 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <CDC_resume_receive+0x48>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f083 0301 	eor.w	r3, r3, #1
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d012      	beq.n	8007aec <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 8007ac6:	480d      	ldr	r0, [pc, #52]	; (8007afc <CDC_resume_receive+0x4c>)
 8007ac8:	f7f9 fc88 	bl	80013dc <CDC_ReceiveQueue_ReserveBlock>
 8007acc:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <CDC_resume_receive+0x3c>
      receivePended = true;
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <CDC_resume_receive+0x48>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4808      	ldr	r0, [pc, #32]	; (8007b00 <CDC_resume_receive+0x50>)
 8007ade:	f7fe fc48 	bl	8006372 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ae2:	4807      	ldr	r0, [pc, #28]	; (8007b00 <CDC_resume_receive+0x50>)
 8007ae4:	f7fe fc8e 	bl	8006404 <USBD_CDC_ReceivePacket>
      return true;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <CDC_resume_receive+0x3e>
    }
  }
  return false;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	2000015b 	.word	0x2000015b
 8007afc:	20001888 	.word	0x20001888
 8007b00:	20000530 	.word	0x20000530

08007b04 <CDC_init>:

int8_t CDC_init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 8007b08:	f7ff fe56 	bl	80077b8 <CDC_Init_FS>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 8007b16:	f7ff fe7b 	bl	8007810 <CDC_DeInit_FS>
 8007b1a:	4603      	mov	r3, r0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  transmitStart = 0;
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <USBD_CDC_Transferred+0x1c>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 8007b2a:	4805      	ldr	r0, [pc, #20]	; (8007b40 <USBD_CDC_Transferred+0x20>)
 8007b2c:	f7f9 fc26 	bl	800137c <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 8007b30:	f7ff ff90 	bl	8007a54 <CDC_continue_transmit>
  return (USBD_OK);
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000254 	.word	0x20000254
 8007b40:	20000800 	.word	0x20000800

08007b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2212      	movs	r2, #18
 8007b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b56:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	20000194 	.word	0x20000194

08007b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2204      	movs	r2, #4
 8007b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b7a:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	200001a8 	.word	0x200001a8

08007b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4907      	ldr	r1, [pc, #28]	; (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ba2:	4808      	ldr	r0, [pc, #32]	; (8007bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ba4:	f7ff fce1 	bl	800756a <USBD_GetString>
 8007ba8:	e004      	b.n	8007bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4904      	ldr	r1, [pc, #16]	; (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bae:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bb0:	f7ff fcdb 	bl	800756a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20001950 	.word	0x20001950
 8007bc4:	08008c94 	.word	0x08008c94

08007bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4904      	ldr	r1, [pc, #16]	; (8007be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bd8:	4804      	ldr	r0, [pc, #16]	; (8007bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bda:	f7ff fcc6 	bl	800756a <USBD_GetString>
  return USBD_StrDesc;
 8007bde:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20001950 	.word	0x20001950
 8007bec:	08008cac 	.word	0x08008cac

08007bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	221a      	movs	r2, #26
 8007c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c02:	f000 f843 	bl	8007c8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c06:	4b02      	ldr	r3, [pc, #8]	; (8007c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	200001ac 	.word	0x200001ac

08007c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4907      	ldr	r1, [pc, #28]	; (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2a:	4808      	ldr	r0, [pc, #32]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c2c:	f7ff fc9d 	bl	800756a <USBD_GetString>
 8007c30:	e004      	b.n	8007c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	4904      	ldr	r1, [pc, #16]	; (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c36:	4805      	ldr	r0, [pc, #20]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c38:	f7ff fc97 	bl	800756a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20001950 	.word	0x20001950
 8007c4c:	08008cc0 	.word	0x08008cc0

08007c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4907      	ldr	r1, [pc, #28]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c66:	4808      	ldr	r0, [pc, #32]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c68:	f7ff fc7f 	bl	800756a <USBD_GetString>
 8007c6c:	e004      	b.n	8007c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4904      	ldr	r1, [pc, #16]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c72:	4805      	ldr	r0, [pc, #20]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c74:	f7ff fc79 	bl	800756a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20001950 	.word	0x20001950
 8007c88:	08008ccc 	.word	0x08008ccc

08007c8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c92:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <Get_SerialNum+0x44>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <Get_SerialNum+0x48>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c9e:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <Get_SerialNum+0x4c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4413      	add	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d009      	beq.n	8007cc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	4909      	ldr	r1, [pc, #36]	; (8007cdc <Get_SerialNum+0x50>)
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f814 	bl	8007ce4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	4908      	ldr	r1, [pc, #32]	; (8007ce0 <Get_SerialNum+0x54>)
 8007cc0:	68b8      	ldr	r0, [r7, #8]
 8007cc2:	f000 f80f 	bl	8007ce4 <IntToUnicode>
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	1fff7a10 	.word	0x1fff7a10
 8007cd4:	1fff7a14 	.word	0x1fff7a14
 8007cd8:	1fff7a18 	.word	0x1fff7a18
 8007cdc:	200001ae 	.word	0x200001ae
 8007ce0:	200001be 	.word	0x200001be

08007ce4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
 8007cfa:	e027      	b.n	8007d4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	0f1b      	lsrs	r3, r3, #28
 8007d00:	2b09      	cmp	r3, #9
 8007d02:	d80b      	bhi.n	8007d1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	0f1b      	lsrs	r3, r3, #28
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	440b      	add	r3, r1
 8007d14:	3230      	adds	r2, #48	; 0x30
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e00a      	b.n	8007d32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3237      	adds	r2, #55	; 0x37
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	4413      	add	r3, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
 8007d4c:	7dfa      	ldrb	r2, [r7, #23]
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d3d3      	bcc.n	8007cfc <IntToUnicode+0x18>
  }
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
	...

08007d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	; 0x28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	605a      	str	r2, [r3, #4]
 8007d76:	609a      	str	r2, [r3, #8]
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d84:	d13a      	bne.n	8007dfc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	4b1e      	ldr	r3, [pc, #120]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007d90:	f043 0301 	orr.w	r3, r3, #1
 8007d94:	6313      	str	r3, [r2, #48]	; 0x30
 8007d96:	4b1b      	ldr	r3, [pc, #108]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007da2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da8:	2302      	movs	r3, #2
 8007daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db0:	2303      	movs	r3, #3
 8007db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007db4:	230a      	movs	r3, #10
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4812      	ldr	r0, [pc, #72]	; (8007e08 <HAL_PCD_MspInit+0xa4>)
 8007dc0:	f7f9 fede 	bl	8001b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	4a0e      	ldr	r2, [pc, #56]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dce:	6353      	str	r3, [r2, #52]	; 0x34
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd8:	4a0a      	ldr	r2, [pc, #40]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dde:	6453      	str	r3, [r2, #68]	; 0x44
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <HAL_PCD_MspInit+0xa0>)
 8007de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dec:	2200      	movs	r2, #0
 8007dee:	2100      	movs	r1, #0
 8007df0:	2043      	movs	r0, #67	; 0x43
 8007df2:	f7f9 fe8e 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007df6:	2043      	movs	r0, #67	; 0x43
 8007df8:	f7f9 fea7 	bl	8001b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3728      	adds	r7, #40	; 0x28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40023800 	.word	0x40023800
 8007e08:	40020000 	.word	0x40020000

08007e0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe fbba 	bl	800659c <USBD_LL_SetupStage>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f7fe fbf4 	bl	8006646 <USBD_LL_DataOutStage>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	3348      	adds	r3, #72	; 0x48
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f7fe fc3d 	bl	800670c <USBD_LL_DataInStage>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fd51 	bl	8006950 <USBD_LL_SOF>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d001      	beq.n	8007ece <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007eca:	f7f8 fda5 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ed4:	7bfa      	ldrb	r2, [r7, #15]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fcfb 	bl	80068d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe fca7 	bl	8006838 <USBD_LL_Reset>
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fcf6 	bl	80068f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	4a03      	ldr	r2, [pc, #12]	; (8007f3c <HAL_PCD_SuspendCallback+0x48>)
 8007f2e:	f043 0306 	orr.w	r3, r3, #6
 8007f32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fce6 	bl	8006920 <USBD_LL_Resume>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f6e:	78fa      	ldrb	r2, [r7, #3]
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fd34 	bl	80069e0 <USBD_LL_IsoOUTIncomplete>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	4611      	mov	r1, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fcfc 	bl	8006994 <USBD_LL_IsoINIncomplete>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fd3a 	bl	8006a2c <USBD_LL_DevConnected>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fd37 	bl	8006a42 <USBD_LL_DevDisconnected>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d13c      	bne.n	8008066 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007fec:	4a20      	ldr	r2, [pc, #128]	; (8008070 <USBD_LL_Init+0x94>)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <USBD_LL_Init+0x94>)
 8007ff8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <USBD_LL_Init+0x94>)
 8007ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <USBD_LL_Init+0x94>)
 8008006:	2204      	movs	r2, #4
 8008008:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800800a:	4b19      	ldr	r3, [pc, #100]	; (8008070 <USBD_LL_Init+0x94>)
 800800c:	2202      	movs	r2, #2
 800800e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008010:	4b17      	ldr	r3, [pc, #92]	; (8008070 <USBD_LL_Init+0x94>)
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <USBD_LL_Init+0x94>)
 8008018:	2202      	movs	r2, #2
 800801a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <USBD_LL_Init+0x94>)
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <USBD_LL_Init+0x94>)
 8008024:	2200      	movs	r2, #0
 8008026:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <USBD_LL_Init+0x94>)
 800802a:	2200      	movs	r2, #0
 800802c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <USBD_LL_Init+0x94>)
 8008030:	2200      	movs	r2, #0
 8008032:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008034:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <USBD_LL_Init+0x94>)
 8008036:	2200      	movs	r2, #0
 8008038:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800803a:	480d      	ldr	r0, [pc, #52]	; (8008070 <USBD_LL_Init+0x94>)
 800803c:	f7f9 ff6f 	bl	8001f1e <HAL_PCD_Init>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008046:	f7f8 fce7 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800804a:	2180      	movs	r1, #128	; 0x80
 800804c:	4808      	ldr	r0, [pc, #32]	; (8008070 <USBD_LL_Init+0x94>)
 800804e:	f7fb f8cc 	bl	80031ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008052:	2240      	movs	r2, #64	; 0x40
 8008054:	2100      	movs	r1, #0
 8008056:	4806      	ldr	r0, [pc, #24]	; (8008070 <USBD_LL_Init+0x94>)
 8008058:	f7fb f880 	bl	800315c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800805c:	2280      	movs	r2, #128	; 0x80
 800805e:	2101      	movs	r1, #1
 8008060:	4803      	ldr	r0, [pc, #12]	; (8008070 <USBD_LL_Init+0x94>)
 8008062:	f7fb f87b 	bl	800315c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20001b50 	.word	0x20001b50

08008074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800808a:	4618      	mov	r0, r3
 800808c:	f7fa f864 	bl	8002158 <HAL_PCD_Start>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f942 	bl	8008320 <USBD_Get_USB_Status>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	461a      	mov	r2, r3
 80080b8:	4603      	mov	r3, r0
 80080ba:	70fb      	strb	r3, [r7, #3]
 80080bc:	460b      	mov	r3, r1
 80080be:	70bb      	strb	r3, [r7, #2]
 80080c0:	4613      	mov	r3, r2
 80080c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080d2:	78bb      	ldrb	r3, [r7, #2]
 80080d4:	883a      	ldrh	r2, [r7, #0]
 80080d6:	78f9      	ldrb	r1, [r7, #3]
 80080d8:	f7fa fc48 	bl	800296c <HAL_PCD_EP_Open>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f91c 	bl	8008320 <USBD_Get_USB_Status>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f7fa fc91 	bl	8002a3c <HAL_PCD_EP_Close>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 f8fd 	bl	8008320 <USBD_Get_USB_Status>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812a:	7bbb      	ldrb	r3, [r7, #14]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7fa fd69 	bl	8002c2a <HAL_PCD_EP_SetStall>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 f8de 	bl	8008320 <USBD_Get_USB_Status>
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800818c:	78fa      	ldrb	r2, [r7, #3]
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f7fa fdae 	bl	8002cf2 <HAL_PCD_EP_ClrStall>
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	4618      	mov	r0, r3
 800819e:	f000 f8bf 	bl	8008320 <USBD_Get_USB_Status>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da0b      	bge.n	80081e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	333e      	adds	r3, #62	; 0x3e
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	e00b      	b.n	80081fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	4613      	mov	r3, r2
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7fa fb7b 	bl	8002922 <HAL_PCD_SetAddress>
 800822c:	4603      	mov	r3, r0
 800822e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f874 	bl	8008320 <USBD_Get_USB_Status>
 8008238:	4603      	mov	r3, r0
 800823a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823c:	7bbb      	ldrb	r3, [r7, #14]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b086      	sub	sp, #24
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	460b      	mov	r3, r1
 8008254:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008264:	7af9      	ldrb	r1, [r7, #11]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	f7fa fc94 	bl	8002b96 <HAL_PCD_EP_Transmit>
 800826e:	4603      	mov	r3, r0
 8008270:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f853 	bl	8008320 <USBD_Get_USB_Status>
 800827a:	4603      	mov	r3, r0
 800827c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800827e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	460b      	mov	r3, r1
 8008296:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082a6:	7af9      	ldrb	r1, [r7, #11]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	f7fa fc10 	bl	8002ad0 <HAL_PCD_EP_Receive>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 f832 	bl	8008320 <USBD_Get_USB_Status>
 80082bc:	4603      	mov	r3, r0
 80082be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	4611      	mov	r1, r2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fa fc40 	bl	8002b66 <HAL_PCD_EP_GetRxCount>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082f8:	4b03      	ldr	r3, [pc, #12]	; (8008308 <USBD_static_malloc+0x18>)
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000258 	.word	0x20000258

0800830c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d817      	bhi.n	8008364 <USBD_Get_USB_Status+0x44>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USBD_Get_USB_Status+0x1c>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	0800834d 	.word	0x0800834d
 8008340:	08008353 	.word	0x08008353
 8008344:	08008359 	.word	0x08008359
 8008348:	0800835f 	.word	0x0800835f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	e00b      	b.n	800836a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008352:	2303      	movs	r3, #3
 8008354:	73fb      	strb	r3, [r7, #15]
    break;
 8008356:	e008      	b.n	800836a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	e005      	b.n	800836a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800835e:	2303      	movs	r3, #3
 8008360:	73fb      	strb	r3, [r7, #15]
    break;
 8008362:	e002      	b.n	800836a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008364:	2303      	movs	r3, #3
 8008366:	73fb      	strb	r3, [r7, #15]
    break;
 8008368:	bf00      	nop
  }
  return usb_status;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	; (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	200001c8 	.word	0x200001c8

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4d0d      	ldr	r5, [pc, #52]	; (80083bc <__libc_init_array+0x38>)
 8008388:	4c0d      	ldr	r4, [pc, #52]	; (80083c0 <__libc_init_array+0x3c>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	2600      	movs	r6, #0
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	4d0b      	ldr	r5, [pc, #44]	; (80083c4 <__libc_init_array+0x40>)
 8008396:	4c0c      	ldr	r4, [pc, #48]	; (80083c8 <__libc_init_array+0x44>)
 8008398:	f000 fc4e 	bl	8008c38 <_init>
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	2600      	movs	r6, #0
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	08008d30 	.word	0x08008d30
 80083c0:	08008d30 	.word	0x08008d30
 80083c4:	08008d30 	.word	0x08008d30
 80083c8:	08008d34 	.word	0x08008d34

080083cc <memcpy>:
 80083cc:	440a      	add	r2, r1
 80083ce:	4291      	cmp	r1, r2
 80083d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d4:	d100      	bne.n	80083d8 <memcpy+0xc>
 80083d6:	4770      	bx	lr
 80083d8:	b510      	push	{r4, lr}
 80083da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e2:	4291      	cmp	r1, r2
 80083e4:	d1f9      	bne.n	80083da <memcpy+0xe>
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <memset>:
 80083e8:	4402      	add	r2, r0
 80083ea:	4603      	mov	r3, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <siprintf>:
 80083f8:	b40e      	push	{r1, r2, r3}
 80083fa:	b500      	push	{lr}
 80083fc:	b09c      	sub	sp, #112	; 0x70
 80083fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008400:	9002      	str	r0, [sp, #8]
 8008402:	9006      	str	r0, [sp, #24]
 8008404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008408:	4809      	ldr	r0, [pc, #36]	; (8008430 <siprintf+0x38>)
 800840a:	9107      	str	r1, [sp, #28]
 800840c:	9104      	str	r1, [sp, #16]
 800840e:	4909      	ldr	r1, [pc, #36]	; (8008434 <siprintf+0x3c>)
 8008410:	f853 2b04 	ldr.w	r2, [r3], #4
 8008414:	9105      	str	r1, [sp, #20]
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	a902      	add	r1, sp, #8
 800841c:	f000 f868 	bl	80084f0 <_svfiprintf_r>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	b01c      	add	sp, #112	; 0x70
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b003      	add	sp, #12
 800842e:	4770      	bx	lr
 8008430:	200001c8 	.word	0x200001c8
 8008434:	ffff0208 	.word	0xffff0208

08008438 <__ssputs_r>:
 8008438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	688e      	ldr	r6, [r1, #8]
 800843e:	429e      	cmp	r6, r3
 8008440:	4682      	mov	sl, r0
 8008442:	460c      	mov	r4, r1
 8008444:	4690      	mov	r8, r2
 8008446:	461f      	mov	r7, r3
 8008448:	d838      	bhi.n	80084bc <__ssputs_r+0x84>
 800844a:	898a      	ldrh	r2, [r1, #12]
 800844c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008450:	d032      	beq.n	80084b8 <__ssputs_r+0x80>
 8008452:	6825      	ldr	r5, [r4, #0]
 8008454:	6909      	ldr	r1, [r1, #16]
 8008456:	eba5 0901 	sub.w	r9, r5, r1
 800845a:	6965      	ldr	r5, [r4, #20]
 800845c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008460:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008464:	3301      	adds	r3, #1
 8008466:	444b      	add	r3, r9
 8008468:	106d      	asrs	r5, r5, #1
 800846a:	429d      	cmp	r5, r3
 800846c:	bf38      	it	cc
 800846e:	461d      	movcc	r5, r3
 8008470:	0553      	lsls	r3, r2, #21
 8008472:	d531      	bpl.n	80084d8 <__ssputs_r+0xa0>
 8008474:	4629      	mov	r1, r5
 8008476:	f000 fb39 	bl	8008aec <_malloc_r>
 800847a:	4606      	mov	r6, r0
 800847c:	b950      	cbnz	r0, 8008494 <__ssputs_r+0x5c>
 800847e:	230c      	movs	r3, #12
 8008480:	f8ca 3000 	str.w	r3, [sl]
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008494:	6921      	ldr	r1, [r4, #16]
 8008496:	464a      	mov	r2, r9
 8008498:	f7ff ff98 	bl	80083cc <memcpy>
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	6126      	str	r6, [r4, #16]
 80084aa:	6165      	str	r5, [r4, #20]
 80084ac:	444e      	add	r6, r9
 80084ae:	eba5 0509 	sub.w	r5, r5, r9
 80084b2:	6026      	str	r6, [r4, #0]
 80084b4:	60a5      	str	r5, [r4, #8]
 80084b6:	463e      	mov	r6, r7
 80084b8:	42be      	cmp	r6, r7
 80084ba:	d900      	bls.n	80084be <__ssputs_r+0x86>
 80084bc:	463e      	mov	r6, r7
 80084be:	4632      	mov	r2, r6
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	4641      	mov	r1, r8
 80084c4:	f000 faa8 	bl	8008a18 <memmove>
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	1b9b      	subs	r3, r3, r6
 80084ce:	4432      	add	r2, r6
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6022      	str	r2, [r4, #0]
 80084d4:	2000      	movs	r0, #0
 80084d6:	e7db      	b.n	8008490 <__ssputs_r+0x58>
 80084d8:	462a      	mov	r2, r5
 80084da:	f000 fb61 	bl	8008ba0 <_realloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1e1      	bne.n	80084a8 <__ssputs_r+0x70>
 80084e4:	6921      	ldr	r1, [r4, #16]
 80084e6:	4650      	mov	r0, sl
 80084e8:	f000 fab0 	bl	8008a4c <_free_r>
 80084ec:	e7c7      	b.n	800847e <__ssputs_r+0x46>
	...

080084f0 <_svfiprintf_r>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	4698      	mov	r8, r3
 80084f6:	898b      	ldrh	r3, [r1, #12]
 80084f8:	061b      	lsls	r3, r3, #24
 80084fa:	b09d      	sub	sp, #116	; 0x74
 80084fc:	4607      	mov	r7, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	4614      	mov	r4, r2
 8008502:	d50e      	bpl.n	8008522 <_svfiprintf_r+0x32>
 8008504:	690b      	ldr	r3, [r1, #16]
 8008506:	b963      	cbnz	r3, 8008522 <_svfiprintf_r+0x32>
 8008508:	2140      	movs	r1, #64	; 0x40
 800850a:	f000 faef 	bl	8008aec <_malloc_r>
 800850e:	6028      	str	r0, [r5, #0]
 8008510:	6128      	str	r0, [r5, #16]
 8008512:	b920      	cbnz	r0, 800851e <_svfiprintf_r+0x2e>
 8008514:	230c      	movs	r3, #12
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	e0d1      	b.n	80086c2 <_svfiprintf_r+0x1d2>
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	616b      	str	r3, [r5, #20]
 8008522:	2300      	movs	r3, #0
 8008524:	9309      	str	r3, [sp, #36]	; 0x24
 8008526:	2320      	movs	r3, #32
 8008528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008530:	2330      	movs	r3, #48	; 0x30
 8008532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086dc <_svfiprintf_r+0x1ec>
 8008536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800853a:	f04f 0901 	mov.w	r9, #1
 800853e:	4623      	mov	r3, r4
 8008540:	469a      	mov	sl, r3
 8008542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008546:	b10a      	cbz	r2, 800854c <_svfiprintf_r+0x5c>
 8008548:	2a25      	cmp	r2, #37	; 0x25
 800854a:	d1f9      	bne.n	8008540 <_svfiprintf_r+0x50>
 800854c:	ebba 0b04 	subs.w	fp, sl, r4
 8008550:	d00b      	beq.n	800856a <_svfiprintf_r+0x7a>
 8008552:	465b      	mov	r3, fp
 8008554:	4622      	mov	r2, r4
 8008556:	4629      	mov	r1, r5
 8008558:	4638      	mov	r0, r7
 800855a:	f7ff ff6d 	bl	8008438 <__ssputs_r>
 800855e:	3001      	adds	r0, #1
 8008560:	f000 80aa 	beq.w	80086b8 <_svfiprintf_r+0x1c8>
 8008564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008566:	445a      	add	r2, fp
 8008568:	9209      	str	r2, [sp, #36]	; 0x24
 800856a:	f89a 3000 	ldrb.w	r3, [sl]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 80a2 	beq.w	80086b8 <_svfiprintf_r+0x1c8>
 8008574:	2300      	movs	r3, #0
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857e:	f10a 0a01 	add.w	sl, sl, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	9307      	str	r3, [sp, #28]
 8008586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800858a:	931a      	str	r3, [sp, #104]	; 0x68
 800858c:	4654      	mov	r4, sl
 800858e:	2205      	movs	r2, #5
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	4851      	ldr	r0, [pc, #324]	; (80086dc <_svfiprintf_r+0x1ec>)
 8008596:	f7f7 fe2b 	bl	80001f0 <memchr>
 800859a:	9a04      	ldr	r2, [sp, #16]
 800859c:	b9d8      	cbnz	r0, 80085d6 <_svfiprintf_r+0xe6>
 800859e:	06d0      	lsls	r0, r2, #27
 80085a0:	bf44      	itt	mi
 80085a2:	2320      	movmi	r3, #32
 80085a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a8:	0711      	lsls	r1, r2, #28
 80085aa:	bf44      	itt	mi
 80085ac:	232b      	movmi	r3, #43	; 0x2b
 80085ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b2:	f89a 3000 	ldrb.w	r3, [sl]
 80085b6:	2b2a      	cmp	r3, #42	; 0x2a
 80085b8:	d015      	beq.n	80085e6 <_svfiprintf_r+0xf6>
 80085ba:	9a07      	ldr	r2, [sp, #28]
 80085bc:	4654      	mov	r4, sl
 80085be:	2000      	movs	r0, #0
 80085c0:	f04f 0c0a 	mov.w	ip, #10
 80085c4:	4621      	mov	r1, r4
 80085c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ca:	3b30      	subs	r3, #48	; 0x30
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d94e      	bls.n	800866e <_svfiprintf_r+0x17e>
 80085d0:	b1b0      	cbz	r0, 8008600 <_svfiprintf_r+0x110>
 80085d2:	9207      	str	r2, [sp, #28]
 80085d4:	e014      	b.n	8008600 <_svfiprintf_r+0x110>
 80085d6:	eba0 0308 	sub.w	r3, r0, r8
 80085da:	fa09 f303 	lsl.w	r3, r9, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	46a2      	mov	sl, r4
 80085e4:	e7d2      	b.n	800858c <_svfiprintf_r+0x9c>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	1d19      	adds	r1, r3, #4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	9103      	str	r1, [sp, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfbb      	ittet	lt
 80085f2:	425b      	neglt	r3, r3
 80085f4:	f042 0202 	orrlt.w	r2, r2, #2
 80085f8:	9307      	strge	r3, [sp, #28]
 80085fa:	9307      	strlt	r3, [sp, #28]
 80085fc:	bfb8      	it	lt
 80085fe:	9204      	strlt	r2, [sp, #16]
 8008600:	7823      	ldrb	r3, [r4, #0]
 8008602:	2b2e      	cmp	r3, #46	; 0x2e
 8008604:	d10c      	bne.n	8008620 <_svfiprintf_r+0x130>
 8008606:	7863      	ldrb	r3, [r4, #1]
 8008608:	2b2a      	cmp	r3, #42	; 0x2a
 800860a:	d135      	bne.n	8008678 <_svfiprintf_r+0x188>
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	9203      	str	r2, [sp, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb8      	it	lt
 8008618:	f04f 33ff 	movlt.w	r3, #4294967295
 800861c:	3402      	adds	r4, #2
 800861e:	9305      	str	r3, [sp, #20]
 8008620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086ec <_svfiprintf_r+0x1fc>
 8008624:	7821      	ldrb	r1, [r4, #0]
 8008626:	2203      	movs	r2, #3
 8008628:	4650      	mov	r0, sl
 800862a:	f7f7 fde1 	bl	80001f0 <memchr>
 800862e:	b140      	cbz	r0, 8008642 <_svfiprintf_r+0x152>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	eba0 000a 	sub.w	r0, r0, sl
 8008636:	fa03 f000 	lsl.w	r0, r3, r0
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	4303      	orrs	r3, r0
 800863e:	3401      	adds	r4, #1
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008646:	4826      	ldr	r0, [pc, #152]	; (80086e0 <_svfiprintf_r+0x1f0>)
 8008648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864c:	2206      	movs	r2, #6
 800864e:	f7f7 fdcf 	bl	80001f0 <memchr>
 8008652:	2800      	cmp	r0, #0
 8008654:	d038      	beq.n	80086c8 <_svfiprintf_r+0x1d8>
 8008656:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <_svfiprintf_r+0x1f4>)
 8008658:	bb1b      	cbnz	r3, 80086a2 <_svfiprintf_r+0x1b2>
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	3307      	adds	r3, #7
 800865e:	f023 0307 	bic.w	r3, r3, #7
 8008662:	3308      	adds	r3, #8
 8008664:	9303      	str	r3, [sp, #12]
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	4433      	add	r3, r6
 800866a:	9309      	str	r3, [sp, #36]	; 0x24
 800866c:	e767      	b.n	800853e <_svfiprintf_r+0x4e>
 800866e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008672:	460c      	mov	r4, r1
 8008674:	2001      	movs	r0, #1
 8008676:	e7a5      	b.n	80085c4 <_svfiprintf_r+0xd4>
 8008678:	2300      	movs	r3, #0
 800867a:	3401      	adds	r4, #1
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	4619      	mov	r1, r3
 8008680:	f04f 0c0a 	mov.w	ip, #10
 8008684:	4620      	mov	r0, r4
 8008686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800868a:	3a30      	subs	r2, #48	; 0x30
 800868c:	2a09      	cmp	r2, #9
 800868e:	d903      	bls.n	8008698 <_svfiprintf_r+0x1a8>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0c5      	beq.n	8008620 <_svfiprintf_r+0x130>
 8008694:	9105      	str	r1, [sp, #20]
 8008696:	e7c3      	b.n	8008620 <_svfiprintf_r+0x130>
 8008698:	fb0c 2101 	mla	r1, ip, r1, r2
 800869c:	4604      	mov	r4, r0
 800869e:	2301      	movs	r3, #1
 80086a0:	e7f0      	b.n	8008684 <_svfiprintf_r+0x194>
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	462a      	mov	r2, r5
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <_svfiprintf_r+0x1f8>)
 80086aa:	a904      	add	r1, sp, #16
 80086ac:	4638      	mov	r0, r7
 80086ae:	f3af 8000 	nop.w
 80086b2:	1c42      	adds	r2, r0, #1
 80086b4:	4606      	mov	r6, r0
 80086b6:	d1d6      	bne.n	8008666 <_svfiprintf_r+0x176>
 80086b8:	89ab      	ldrh	r3, [r5, #12]
 80086ba:	065b      	lsls	r3, r3, #25
 80086bc:	f53f af2c 	bmi.w	8008518 <_svfiprintf_r+0x28>
 80086c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086c2:	b01d      	add	sp, #116	; 0x74
 80086c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c8:	ab03      	add	r3, sp, #12
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <_svfiprintf_r+0x1f8>)
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4638      	mov	r0, r7
 80086d4:	f000 f87a 	bl	80087cc <_printf_i>
 80086d8:	e7eb      	b.n	80086b2 <_svfiprintf_r+0x1c2>
 80086da:	bf00      	nop
 80086dc:	08008cf4 	.word	0x08008cf4
 80086e0:	08008cfe 	.word	0x08008cfe
 80086e4:	00000000 	.word	0x00000000
 80086e8:	08008439 	.word	0x08008439
 80086ec:	08008cfa 	.word	0x08008cfa

080086f0 <_printf_common>:
 80086f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	4616      	mov	r6, r2
 80086f6:	4699      	mov	r9, r3
 80086f8:	688a      	ldr	r2, [r1, #8]
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008700:	4293      	cmp	r3, r2
 8008702:	bfb8      	it	lt
 8008704:	4613      	movlt	r3, r2
 8008706:	6033      	str	r3, [r6, #0]
 8008708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800870c:	4607      	mov	r7, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b10a      	cbz	r2, 8008716 <_printf_common+0x26>
 8008712:	3301      	adds	r3, #1
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	0699      	lsls	r1, r3, #26
 800871a:	bf42      	ittt	mi
 800871c:	6833      	ldrmi	r3, [r6, #0]
 800871e:	3302      	addmi	r3, #2
 8008720:	6033      	strmi	r3, [r6, #0]
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	f015 0506 	ands.w	r5, r5, #6
 8008728:	d106      	bne.n	8008738 <_printf_common+0x48>
 800872a:	f104 0a19 	add.w	sl, r4, #25
 800872e:	68e3      	ldr	r3, [r4, #12]
 8008730:	6832      	ldr	r2, [r6, #0]
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	42ab      	cmp	r3, r5
 8008736:	dc26      	bgt.n	8008786 <_printf_common+0x96>
 8008738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800873c:	1e13      	subs	r3, r2, #0
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	bf18      	it	ne
 8008742:	2301      	movne	r3, #1
 8008744:	0692      	lsls	r2, r2, #26
 8008746:	d42b      	bmi.n	80087a0 <_printf_common+0xb0>
 8008748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800874c:	4649      	mov	r1, r9
 800874e:	4638      	mov	r0, r7
 8008750:	47c0      	blx	r8
 8008752:	3001      	adds	r0, #1
 8008754:	d01e      	beq.n	8008794 <_printf_common+0xa4>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	68e5      	ldr	r5, [r4, #12]
 800875a:	6832      	ldr	r2, [r6, #0]
 800875c:	f003 0306 	and.w	r3, r3, #6
 8008760:	2b04      	cmp	r3, #4
 8008762:	bf08      	it	eq
 8008764:	1aad      	subeq	r5, r5, r2
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	6922      	ldr	r2, [r4, #16]
 800876a:	bf0c      	ite	eq
 800876c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008770:	2500      	movne	r5, #0
 8008772:	4293      	cmp	r3, r2
 8008774:	bfc4      	itt	gt
 8008776:	1a9b      	subgt	r3, r3, r2
 8008778:	18ed      	addgt	r5, r5, r3
 800877a:	2600      	movs	r6, #0
 800877c:	341a      	adds	r4, #26
 800877e:	42b5      	cmp	r5, r6
 8008780:	d11a      	bne.n	80087b8 <_printf_common+0xc8>
 8008782:	2000      	movs	r0, #0
 8008784:	e008      	b.n	8008798 <_printf_common+0xa8>
 8008786:	2301      	movs	r3, #1
 8008788:	4652      	mov	r2, sl
 800878a:	4649      	mov	r1, r9
 800878c:	4638      	mov	r0, r7
 800878e:	47c0      	blx	r8
 8008790:	3001      	adds	r0, #1
 8008792:	d103      	bne.n	800879c <_printf_common+0xac>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	3501      	adds	r5, #1
 800879e:	e7c6      	b.n	800872e <_printf_common+0x3e>
 80087a0:	18e1      	adds	r1, r4, r3
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	2030      	movs	r0, #48	; 0x30
 80087a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087aa:	4422      	add	r2, r4
 80087ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087b4:	3302      	adds	r3, #2
 80087b6:	e7c7      	b.n	8008748 <_printf_common+0x58>
 80087b8:	2301      	movs	r3, #1
 80087ba:	4622      	mov	r2, r4
 80087bc:	4649      	mov	r1, r9
 80087be:	4638      	mov	r0, r7
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d0e6      	beq.n	8008794 <_printf_common+0xa4>
 80087c6:	3601      	adds	r6, #1
 80087c8:	e7d9      	b.n	800877e <_printf_common+0x8e>
	...

080087cc <_printf_i>:
 80087cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	4691      	mov	r9, r2
 80087d4:	7e27      	ldrb	r7, [r4, #24]
 80087d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087d8:	2f78      	cmp	r7, #120	; 0x78
 80087da:	4680      	mov	r8, r0
 80087dc:	469a      	mov	sl, r3
 80087de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e2:	d807      	bhi.n	80087f4 <_printf_i+0x28>
 80087e4:	2f62      	cmp	r7, #98	; 0x62
 80087e6:	d80a      	bhi.n	80087fe <_printf_i+0x32>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	f000 80d8 	beq.w	800899e <_printf_i+0x1d2>
 80087ee:	2f58      	cmp	r7, #88	; 0x58
 80087f0:	f000 80a3 	beq.w	800893a <_printf_i+0x16e>
 80087f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087fc:	e03a      	b.n	8008874 <_printf_i+0xa8>
 80087fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008802:	2b15      	cmp	r3, #21
 8008804:	d8f6      	bhi.n	80087f4 <_printf_i+0x28>
 8008806:	a001      	add	r0, pc, #4	; (adr r0, 800880c <_printf_i+0x40>)
 8008808:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800880c:	08008865 	.word	0x08008865
 8008810:	08008879 	.word	0x08008879
 8008814:	080087f5 	.word	0x080087f5
 8008818:	080087f5 	.word	0x080087f5
 800881c:	080087f5 	.word	0x080087f5
 8008820:	080087f5 	.word	0x080087f5
 8008824:	08008879 	.word	0x08008879
 8008828:	080087f5 	.word	0x080087f5
 800882c:	080087f5 	.word	0x080087f5
 8008830:	080087f5 	.word	0x080087f5
 8008834:	080087f5 	.word	0x080087f5
 8008838:	08008985 	.word	0x08008985
 800883c:	080088a9 	.word	0x080088a9
 8008840:	08008967 	.word	0x08008967
 8008844:	080087f5 	.word	0x080087f5
 8008848:	080087f5 	.word	0x080087f5
 800884c:	080089a7 	.word	0x080089a7
 8008850:	080087f5 	.word	0x080087f5
 8008854:	080088a9 	.word	0x080088a9
 8008858:	080087f5 	.word	0x080087f5
 800885c:	080087f5 	.word	0x080087f5
 8008860:	0800896f 	.word	0x0800896f
 8008864:	680b      	ldr	r3, [r1, #0]
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	600a      	str	r2, [r1, #0]
 800886c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008874:	2301      	movs	r3, #1
 8008876:	e0a3      	b.n	80089c0 <_printf_i+0x1f4>
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	6808      	ldr	r0, [r1, #0]
 800887c:	062e      	lsls	r6, r5, #24
 800887e:	f100 0304 	add.w	r3, r0, #4
 8008882:	d50a      	bpl.n	800889a <_printf_i+0xce>
 8008884:	6805      	ldr	r5, [r0, #0]
 8008886:	600b      	str	r3, [r1, #0]
 8008888:	2d00      	cmp	r5, #0
 800888a:	da03      	bge.n	8008894 <_printf_i+0xc8>
 800888c:	232d      	movs	r3, #45	; 0x2d
 800888e:	426d      	negs	r5, r5
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	485e      	ldr	r0, [pc, #376]	; (8008a10 <_printf_i+0x244>)
 8008896:	230a      	movs	r3, #10
 8008898:	e019      	b.n	80088ce <_printf_i+0x102>
 800889a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800889e:	6805      	ldr	r5, [r0, #0]
 80088a0:	600b      	str	r3, [r1, #0]
 80088a2:	bf18      	it	ne
 80088a4:	b22d      	sxthne	r5, r5
 80088a6:	e7ef      	b.n	8008888 <_printf_i+0xbc>
 80088a8:	680b      	ldr	r3, [r1, #0]
 80088aa:	6825      	ldr	r5, [r4, #0]
 80088ac:	1d18      	adds	r0, r3, #4
 80088ae:	6008      	str	r0, [r1, #0]
 80088b0:	0628      	lsls	r0, r5, #24
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0xec>
 80088b4:	681d      	ldr	r5, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0xf2>
 80088b8:	0669      	lsls	r1, r5, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0xe8>
 80088bc:	881d      	ldrh	r5, [r3, #0]
 80088be:	4854      	ldr	r0, [pc, #336]	; (8008a10 <_printf_i+0x244>)
 80088c0:	2f6f      	cmp	r7, #111	; 0x6f
 80088c2:	bf0c      	ite	eq
 80088c4:	2308      	moveq	r3, #8
 80088c6:	230a      	movne	r3, #10
 80088c8:	2100      	movs	r1, #0
 80088ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ce:	6866      	ldr	r6, [r4, #4]
 80088d0:	60a6      	str	r6, [r4, #8]
 80088d2:	2e00      	cmp	r6, #0
 80088d4:	bfa2      	ittt	ge
 80088d6:	6821      	ldrge	r1, [r4, #0]
 80088d8:	f021 0104 	bicge.w	r1, r1, #4
 80088dc:	6021      	strge	r1, [r4, #0]
 80088de:	b90d      	cbnz	r5, 80088e4 <_printf_i+0x118>
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	d04d      	beq.n	8008980 <_printf_i+0x1b4>
 80088e4:	4616      	mov	r6, r2
 80088e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ea:	fb03 5711 	mls	r7, r3, r1, r5
 80088ee:	5dc7      	ldrb	r7, [r0, r7]
 80088f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088f4:	462f      	mov	r7, r5
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	460d      	mov	r5, r1
 80088fa:	d9f4      	bls.n	80088e6 <_printf_i+0x11a>
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10b      	bne.n	8008918 <_printf_i+0x14c>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	07df      	lsls	r7, r3, #31
 8008904:	d508      	bpl.n	8008918 <_printf_i+0x14c>
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	6861      	ldr	r1, [r4, #4]
 800890a:	4299      	cmp	r1, r3
 800890c:	bfde      	ittt	le
 800890e:	2330      	movle	r3, #48	; 0x30
 8008910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008918:	1b92      	subs	r2, r2, r6
 800891a:	6122      	str	r2, [r4, #16]
 800891c:	f8cd a000 	str.w	sl, [sp]
 8008920:	464b      	mov	r3, r9
 8008922:	aa03      	add	r2, sp, #12
 8008924:	4621      	mov	r1, r4
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fee2 	bl	80086f0 <_printf_common>
 800892c:	3001      	adds	r0, #1
 800892e:	d14c      	bne.n	80089ca <_printf_i+0x1fe>
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	b004      	add	sp, #16
 8008936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893a:	4835      	ldr	r0, [pc, #212]	; (8008a10 <_printf_i+0x244>)
 800893c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	680e      	ldr	r6, [r1, #0]
 8008944:	061f      	lsls	r7, r3, #24
 8008946:	f856 5b04 	ldr.w	r5, [r6], #4
 800894a:	600e      	str	r6, [r1, #0]
 800894c:	d514      	bpl.n	8008978 <_printf_i+0x1ac>
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	bf44      	itt	mi
 8008952:	f043 0320 	orrmi.w	r3, r3, #32
 8008956:	6023      	strmi	r3, [r4, #0]
 8008958:	b91d      	cbnz	r5, 8008962 <_printf_i+0x196>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f023 0320 	bic.w	r3, r3, #32
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	2310      	movs	r3, #16
 8008964:	e7b0      	b.n	80088c8 <_printf_i+0xfc>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	f043 0320 	orr.w	r3, r3, #32
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2378      	movs	r3, #120	; 0x78
 8008970:	4828      	ldr	r0, [pc, #160]	; (8008a14 <_printf_i+0x248>)
 8008972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008976:	e7e3      	b.n	8008940 <_printf_i+0x174>
 8008978:	065e      	lsls	r6, r3, #25
 800897a:	bf48      	it	mi
 800897c:	b2ad      	uxthmi	r5, r5
 800897e:	e7e6      	b.n	800894e <_printf_i+0x182>
 8008980:	4616      	mov	r6, r2
 8008982:	e7bb      	b.n	80088fc <_printf_i+0x130>
 8008984:	680b      	ldr	r3, [r1, #0]
 8008986:	6826      	ldr	r6, [r4, #0]
 8008988:	6960      	ldr	r0, [r4, #20]
 800898a:	1d1d      	adds	r5, r3, #4
 800898c:	600d      	str	r5, [r1, #0]
 800898e:	0635      	lsls	r5, r6, #24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	d501      	bpl.n	8008998 <_printf_i+0x1cc>
 8008994:	6018      	str	r0, [r3, #0]
 8008996:	e002      	b.n	800899e <_printf_i+0x1d2>
 8008998:	0671      	lsls	r1, r6, #25
 800899a:	d5fb      	bpl.n	8008994 <_printf_i+0x1c8>
 800899c:	8018      	strh	r0, [r3, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	4616      	mov	r6, r2
 80089a4:	e7ba      	b.n	800891c <_printf_i+0x150>
 80089a6:	680b      	ldr	r3, [r1, #0]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	600a      	str	r2, [r1, #0]
 80089ac:	681e      	ldr	r6, [r3, #0]
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7f7 fc1c 	bl	80001f0 <memchr>
 80089b8:	b108      	cbz	r0, 80089be <_printf_i+0x1f2>
 80089ba:	1b80      	subs	r0, r0, r6
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	2300      	movs	r3, #0
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	e7a8      	b.n	800891c <_printf_i+0x150>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	4632      	mov	r2, r6
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d0ab      	beq.n	8008930 <_printf_i+0x164>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	d413      	bmi.n	8008a06 <_printf_i+0x23a>
 80089de:	68e0      	ldr	r0, [r4, #12]
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	4298      	cmp	r0, r3
 80089e4:	bfb8      	it	lt
 80089e6:	4618      	movlt	r0, r3
 80089e8:	e7a4      	b.n	8008934 <_printf_i+0x168>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d09b      	beq.n	8008930 <_printf_i+0x164>
 80089f8:	3501      	adds	r5, #1
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	9903      	ldr	r1, [sp, #12]
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dcf2      	bgt.n	80089ea <_printf_i+0x21e>
 8008a04:	e7eb      	b.n	80089de <_printf_i+0x212>
 8008a06:	2500      	movs	r5, #0
 8008a08:	f104 0619 	add.w	r6, r4, #25
 8008a0c:	e7f5      	b.n	80089fa <_printf_i+0x22e>
 8008a0e:	bf00      	nop
 8008a10:	08008d05 	.word	0x08008d05
 8008a14:	08008d16 	.word	0x08008d16

08008a18 <memmove>:
 8008a18:	4288      	cmp	r0, r1
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	eb01 0402 	add.w	r4, r1, r2
 8008a20:	d902      	bls.n	8008a28 <memmove+0x10>
 8008a22:	4284      	cmp	r4, r0
 8008a24:	4623      	mov	r3, r4
 8008a26:	d807      	bhi.n	8008a38 <memmove+0x20>
 8008a28:	1e43      	subs	r3, r0, #1
 8008a2a:	42a1      	cmp	r1, r4
 8008a2c:	d008      	beq.n	8008a40 <memmove+0x28>
 8008a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a36:	e7f8      	b.n	8008a2a <memmove+0x12>
 8008a38:	4402      	add	r2, r0
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	428a      	cmp	r2, r1
 8008a3e:	d100      	bne.n	8008a42 <memmove+0x2a>
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a4a:	e7f7      	b.n	8008a3c <memmove+0x24>

08008a4c <_free_r>:
 8008a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d048      	beq.n	8008ae4 <_free_r+0x98>
 8008a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a56:	9001      	str	r0, [sp, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a5e:	bfb8      	it	lt
 8008a60:	18e4      	addlt	r4, r4, r3
 8008a62:	f000 f8d3 	bl	8008c0c <__malloc_lock>
 8008a66:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <_free_r+0x9c>)
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	b933      	cbnz	r3, 8008a7e <_free_r+0x32>
 8008a70:	6063      	str	r3, [r4, #4]
 8008a72:	6014      	str	r4, [r2, #0]
 8008a74:	b003      	add	sp, #12
 8008a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a7a:	f000 b8cd 	b.w	8008c18 <__malloc_unlock>
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	d90b      	bls.n	8008a9a <_free_r+0x4e>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	1862      	adds	r2, r4, r1
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bf04      	itt	eq
 8008a8a:	681a      	ldreq	r2, [r3, #0]
 8008a8c:	685b      	ldreq	r3, [r3, #4]
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	bf04      	itt	eq
 8008a92:	1852      	addeq	r2, r2, r1
 8008a94:	6022      	streq	r2, [r4, #0]
 8008a96:	602c      	str	r4, [r5, #0]
 8008a98:	e7ec      	b.n	8008a74 <_free_r+0x28>
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	b10b      	cbz	r3, 8008aa4 <_free_r+0x58>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d9fa      	bls.n	8008a9a <_free_r+0x4e>
 8008aa4:	6811      	ldr	r1, [r2, #0]
 8008aa6:	1855      	adds	r5, r2, r1
 8008aa8:	42a5      	cmp	r5, r4
 8008aaa:	d10b      	bne.n	8008ac4 <_free_r+0x78>
 8008aac:	6824      	ldr	r4, [r4, #0]
 8008aae:	4421      	add	r1, r4
 8008ab0:	1854      	adds	r4, r2, r1
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	6011      	str	r1, [r2, #0]
 8008ab6:	d1dd      	bne.n	8008a74 <_free_r+0x28>
 8008ab8:	681c      	ldr	r4, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	6053      	str	r3, [r2, #4]
 8008abe:	4421      	add	r1, r4
 8008ac0:	6011      	str	r1, [r2, #0]
 8008ac2:	e7d7      	b.n	8008a74 <_free_r+0x28>
 8008ac4:	d902      	bls.n	8008acc <_free_r+0x80>
 8008ac6:	230c      	movs	r3, #12
 8008ac8:	6003      	str	r3, [r0, #0]
 8008aca:	e7d3      	b.n	8008a74 <_free_r+0x28>
 8008acc:	6825      	ldr	r5, [r4, #0]
 8008ace:	1961      	adds	r1, r4, r5
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf04      	itt	eq
 8008ad4:	6819      	ldreq	r1, [r3, #0]
 8008ad6:	685b      	ldreq	r3, [r3, #4]
 8008ad8:	6063      	str	r3, [r4, #4]
 8008ada:	bf04      	itt	eq
 8008adc:	1949      	addeq	r1, r1, r5
 8008ade:	6021      	streq	r1, [r4, #0]
 8008ae0:	6054      	str	r4, [r2, #4]
 8008ae2:	e7c7      	b.n	8008a74 <_free_r+0x28>
 8008ae4:	b003      	add	sp, #12
 8008ae6:	bd30      	pop	{r4, r5, pc}
 8008ae8:	20000478 	.word	0x20000478

08008aec <_malloc_r>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	1ccd      	adds	r5, r1, #3
 8008af0:	f025 0503 	bic.w	r5, r5, #3
 8008af4:	3508      	adds	r5, #8
 8008af6:	2d0c      	cmp	r5, #12
 8008af8:	bf38      	it	cc
 8008afa:	250c      	movcc	r5, #12
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	4606      	mov	r6, r0
 8008b00:	db01      	blt.n	8008b06 <_malloc_r+0x1a>
 8008b02:	42a9      	cmp	r1, r5
 8008b04:	d903      	bls.n	8008b0e <_malloc_r+0x22>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0e:	f000 f87d 	bl	8008c0c <__malloc_lock>
 8008b12:	4921      	ldr	r1, [pc, #132]	; (8008b98 <_malloc_r+0xac>)
 8008b14:	680a      	ldr	r2, [r1, #0]
 8008b16:	4614      	mov	r4, r2
 8008b18:	b99c      	cbnz	r4, 8008b42 <_malloc_r+0x56>
 8008b1a:	4f20      	ldr	r7, [pc, #128]	; (8008b9c <_malloc_r+0xb0>)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	b923      	cbnz	r3, 8008b2a <_malloc_r+0x3e>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 f862 	bl	8008bec <_sbrk_r>
 8008b28:	6038      	str	r0, [r7, #0]
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f000 f85d 	bl	8008bec <_sbrk_r>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	d123      	bne.n	8008b7e <_malloc_r+0x92>
 8008b36:	230c      	movs	r3, #12
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f86c 	bl	8008c18 <__malloc_unlock>
 8008b40:	e7e3      	b.n	8008b0a <_malloc_r+0x1e>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	1b5b      	subs	r3, r3, r5
 8008b46:	d417      	bmi.n	8008b78 <_malloc_r+0x8c>
 8008b48:	2b0b      	cmp	r3, #11
 8008b4a:	d903      	bls.n	8008b54 <_malloc_r+0x68>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	441c      	add	r4, r3
 8008b50:	6025      	str	r5, [r4, #0]
 8008b52:	e004      	b.n	8008b5e <_malloc_r+0x72>
 8008b54:	6863      	ldr	r3, [r4, #4]
 8008b56:	42a2      	cmp	r2, r4
 8008b58:	bf0c      	ite	eq
 8008b5a:	600b      	streq	r3, [r1, #0]
 8008b5c:	6053      	strne	r3, [r2, #4]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f85a 	bl	8008c18 <__malloc_unlock>
 8008b64:	f104 000b 	add.w	r0, r4, #11
 8008b68:	1d23      	adds	r3, r4, #4
 8008b6a:	f020 0007 	bic.w	r0, r0, #7
 8008b6e:	1ac2      	subs	r2, r0, r3
 8008b70:	d0cc      	beq.n	8008b0c <_malloc_r+0x20>
 8008b72:	1a1b      	subs	r3, r3, r0
 8008b74:	50a3      	str	r3, [r4, r2]
 8008b76:	e7c9      	b.n	8008b0c <_malloc_r+0x20>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	6864      	ldr	r4, [r4, #4]
 8008b7c:	e7cc      	b.n	8008b18 <_malloc_r+0x2c>
 8008b7e:	1cc4      	adds	r4, r0, #3
 8008b80:	f024 0403 	bic.w	r4, r4, #3
 8008b84:	42a0      	cmp	r0, r4
 8008b86:	d0e3      	beq.n	8008b50 <_malloc_r+0x64>
 8008b88:	1a21      	subs	r1, r4, r0
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 f82e 	bl	8008bec <_sbrk_r>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1dd      	bne.n	8008b50 <_malloc_r+0x64>
 8008b94:	e7cf      	b.n	8008b36 <_malloc_r+0x4a>
 8008b96:	bf00      	nop
 8008b98:	20000478 	.word	0x20000478
 8008b9c:	2000047c 	.word	0x2000047c

08008ba0 <_realloc_r>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	460e      	mov	r6, r1
 8008ba8:	b921      	cbnz	r1, 8008bb4 <_realloc_r+0x14>
 8008baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bae:	4611      	mov	r1, r2
 8008bb0:	f7ff bf9c 	b.w	8008aec <_malloc_r>
 8008bb4:	b922      	cbnz	r2, 8008bc0 <_realloc_r+0x20>
 8008bb6:	f7ff ff49 	bl	8008a4c <_free_r>
 8008bba:	4625      	mov	r5, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc0:	f000 f830 	bl	8008c24 <_malloc_usable_size_r>
 8008bc4:	42a0      	cmp	r0, r4
 8008bc6:	d20f      	bcs.n	8008be8 <_realloc_r+0x48>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff8e 	bl	8008aec <_malloc_r>
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d0f2      	beq.n	8008bbc <_realloc_r+0x1c>
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	4622      	mov	r2, r4
 8008bda:	f7ff fbf7 	bl	80083cc <memcpy>
 8008bde:	4631      	mov	r1, r6
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff33 	bl	8008a4c <_free_r>
 8008be6:	e7e9      	b.n	8008bbc <_realloc_r+0x1c>
 8008be8:	4635      	mov	r5, r6
 8008bea:	e7e7      	b.n	8008bbc <_realloc_r+0x1c>

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	; (8008c08 <_sbrk_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f7 fff0 	bl	8000bdc <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	20001f58 	.word	0x20001f58

08008c0c <__malloc_lock>:
 8008c0c:	4801      	ldr	r0, [pc, #4]	; (8008c14 <__malloc_lock+0x8>)
 8008c0e:	f000 b811 	b.w	8008c34 <__retarget_lock_acquire_recursive>
 8008c12:	bf00      	nop
 8008c14:	20001f60 	.word	0x20001f60

08008c18 <__malloc_unlock>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__malloc_unlock+0x8>)
 8008c1a:	f000 b80c 	b.w	8008c36 <__retarget_lock_release_recursive>
 8008c1e:	bf00      	nop
 8008c20:	20001f60 	.word	0x20001f60

08008c24 <_malloc_usable_size_r>:
 8008c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c28:	1f18      	subs	r0, r3, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bfbc      	itt	lt
 8008c2e:	580b      	ldrlt	r3, [r1, r0]
 8008c30:	18c0      	addlt	r0, r0, r3
 8008c32:	4770      	bx	lr

08008c34 <__retarget_lock_acquire_recursive>:
 8008c34:	4770      	bx	lr

08008c36 <__retarget_lock_release_recursive>:
 8008c36:	4770      	bx	lr

08008c38 <_init>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	bf00      	nop
 8008c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3e:	bc08      	pop	{r3}
 8008c40:	469e      	mov	lr, r3
 8008c42:	4770      	bx	lr

08008c44 <_fini>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr
