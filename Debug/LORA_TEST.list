
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebe4  0800ebe4  00020580  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebe4  0800ebe4  0001ebe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebec  0800ebec  00020580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebec  0800ebec  0001ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebf0  0800ebf0  0001ebf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0800ebf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001edc  20000580  0800f174  00020580  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000245c  0800f174  0002245c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003240f  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006530  00000000  00000000  000529bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00058ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  0005add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5ab  00000000  00000000  0005cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027562  00000000  00000000  0007c05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a01c0  00000000  00000000  000a35bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014377d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087bc  00000000  00000000  001437d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000580 	.word	0x20000580
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e808 	.word	0x0800e808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000584 	.word	0x20000584
 80001dc:	0800e808 	.word	0x0800e808

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <digitalToggle>:
{
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	463b      	mov	r3, r7
 8000948:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa27 	bl	8004da6 <HAL_GPIO_TogglePin>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <b0PopCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void b0PopCallback(void *ptr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	char buffer[100] = {0};
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2260      	movs	r2, #96	; 0x60
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00d f9ff 	bl	800dd78 <memset>
    uint16_t len;
    uint16_t number;
    NexObject_var *btn = (NexObject_var *)ptr;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	677b      	str	r3, [r7, #116]	; 0x74
    memset(buffer, 0, sizeof(buffer));
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2264      	movs	r2, #100	; 0x64
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00d f9f6 	bl	800dd78 <memset>

    /* Get the text value of button component [the value is string type]. */
    NexButton.getText(btn, buffer, 100);
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <b0PopCallback+0x9c>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000998:	4798      	blx	r3
    USBSerial.print(buffer);
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <b0PopCallback+0xa0>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f107 020c 	add.w	r2, r7, #12
 80009a2:	4610      	mov	r0, r2
 80009a4:	4798      	blx	r3
//    btn->getText(buffer, sizeof(buffer));?

    number = atoi(buffer);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00d f97e 	bl	800dcac <atoi>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    number += 1;
 80009b6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    memset(buffer, 0, sizeof(buffer));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00d f9d5 	bl	800dd78 <memset>
    itoa(number, buffer, 10);
 80009ce:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	220a      	movs	r2, #10
 80009d8:	4618      	mov	r0, r3
 80009da:	f00d f9ad 	bl	800dd38 <itoa>

    /* Set the text value of button component [the value is string type]. */
    NexButton.setText(btn,buffer);
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <b0PopCallback+0x9c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	4611      	mov	r1, r2
 80009e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80009ea:	4798      	blx	r3
    HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f003 fd46 	bl	8004480 <HAL_Delay>
//    btn->setText(buffer);
}
 80009f4:	bf00      	nop
 80009f6:	3778      	adds	r7, #120	; 0x78
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000040 	.word	0x20000040
 8000a00:	2000034c 	.word	0x2000034c

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b0d9      	sub	sp, #356	; 0x164
 8000a08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f003 fcc7 	bl	800439c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f8e7 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 fa5f 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a16:	f000 fa09 	bl	8000e2c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a1a:	f000 f9b7 	bl	8000d8c <MX_TIM1_Init>
  MX_RTC_Init();
 8000a1e:	f000 f98f 	bl	8000d40 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000a22:	f00c fb1d 	bl	800d060 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000a26:	f000 f95d 	bl	8000ce4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a2a:	f000 fa29 	bl	8000e80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 8000a2e:	4a57      	ldr	r2, [pc, #348]	; (8000b8c <main+0x188>)
 8000a30:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a38:	6018      	str	r0, [r3, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <main+0x18c>)
 8000a40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a48:	6018      	str	r0, [r3, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <main+0x190>)
 8000a50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a58:	6018      	str	r0, [r3, #0]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  SGP40_var VOC_sensor;
  SGP40.halt = HAL_Delay;
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <main+0x194>)
 8000a60:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <main+0x198>)
 8000a62:	601a      	str	r2, [r3, #0]

  USBSerial.begin();
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <main+0x19c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4798      	blx	r3
  Serial1.begin(9600);
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <main+0x1a0>)
 8000a6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000a70:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000a74:	4798      	blx	r3
  delay_microsInit();
 8000a76:	f000 ff2b 	bl	80018d0 <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <main+0x1a4>)
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <main+0x1a8>)
 8000a7e:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 8000a80:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <main+0x1a4>)
 8000a82:	685c      	ldr	r4, [r3, #4]
 8000a84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8000a88:	2319      	movs	r3, #25
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8000a90:	f8ad 3000 	strh.w	r3, [sp]
 8000a94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000a98:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000a9c:	ca06      	ldmia	r2, {r1, r2}
 8000a9e:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);

  AHT10.halt = HAL_Delay;
 8000aa0:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <main+0x1ac>)
 8000aa2:	4a3e      	ldr	r2, [pc, #248]	; (8000b9c <main+0x198>)
 8000aa4:	601a      	str	r2, [r3, #0]
  AHT10.getTick = HAL_GetTick;
 8000aa6:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <main+0x1ac>)
 8000aa8:	4a42      	ldr	r2, [pc, #264]	; (8000bb4 <main+0x1b0>)
 8000aaa:	605a      	str	r2, [r3, #4]
  AHT10_var AHT1;
  AHT10.begin(&AHT1, &hi2c1,0x38);
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <main+0x1ac>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000ab4:	2238      	movs	r2, #56	; 0x38
 8000ab6:	4940      	ldr	r1, [pc, #256]	; (8000bb8 <main+0x1b4>)
 8000ab8:	4798      	blx	r3

  SGP40.begin(&VOC_sensor, &hi2c1,DFRobot_SGP40_ICC_ADDR, 10000UL);
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <main+0x194>)
 8000abc:	685c      	ldr	r4, [r3, #4]
 8000abe:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000ac2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ac6:	2259      	movs	r2, #89	; 0x59
 8000ac8:	493b      	ldr	r1, [pc, #236]	; (8000bb8 <main+0x1b4>)
 8000aca:	47a0      	blx	r4
  char txt[20]="halloooo \n";
 8000acc:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <main+0x1b8>)
 8000ace:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad4:	c303      	stmia	r3!, {r0, r1}
 8000ad6:	801a      	strh	r2, [r3, #0]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	0c12      	lsrs	r2, r2, #16
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	721a      	strb	r2, [r3, #8]
  char tmp[64];

  NexObject_var button_nextion;
  NexHardware.nex_serial = &Serial1;
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <main+0x1bc>)
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <main+0x1a0>)
 8000aee:	601a      	str	r2, [r3, #0]
  NexHardware.delay = HAL_Delay;
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <main+0x1bc>)
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <main+0x198>)
 8000af4:	605a      	str	r2, [r3, #4]
  NexVariable.create(&button_nextion, 0, 1, "b0");
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <main+0x1c0>)
 8000af8:	681c      	ldr	r4, [r3, #0]
 8000afa:	f107 0018 	add.w	r0, r7, #24
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <main+0x1c4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	2100      	movs	r1, #0
 8000b04:	47a0      	blx	r4
  NexObject_var *nex_listen_list[] =
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	f107 0218 	add.w	r2, r7, #24
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  {
      &button_nextion,
      NULL
  };
  NexHardware.init();
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <main+0x1bc>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4798      	blx	r3
//  NexButton.setText(&button_nextion, (const char*)"1");
  NexObject.attachPop(&button_nextion,b0PopCallback, &button_nextion);
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <main+0x1c8>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f107 0218 	add.w	r2, r7, #24
 8000b26:	f107 0018 	add.w	r0, r7, #24
 8000b2a:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <main+0x1cc>)
 8000b2c:	4798      	blx	r3
  uint8_t num=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NexHardware.loop(nex_listen_list);
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <main+0x1bc>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4798      	blx	r3
	  char num_val[10];
	  sprintf(num_val, "nilai %d", num);
 8000b40:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <main+0x1d0>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00d f9d7 	bl	800defc <siprintf>
	  if(NexButton.setText(&button_nextion, (const char*)num_val) )
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <main+0x1d4>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	1d39      	adds	r1, r7, #4
 8000b54:	f107 0218 	add.w	r2, r7, #24
 8000b58:	4610      	mov	r0, r2
 8000b5a:	4798      	blx	r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <main+0x166>
		  USBSerial.print((const char*)"success\r\n");
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <main+0x19c>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	481d      	ldr	r0, [pc, #116]	; (8000bdc <main+0x1d8>)
 8000b68:	4798      	blx	r3
	  num++;
 8000b6a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	  {
		  sprintf(tmp, "VOC = %i \n\r", voc_index);
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }
*/
	  HAL_Delay(5000);
 8000b74:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b78:	f003 fc82 	bl	8004480 <HAL_Delay>
	  digitalToggle(LED_pin_);
 8000b7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000b80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b84:	f7ff fedc 	bl	8000940 <digitalToggle>
  {
 8000b88:	e7d4      	b.n	8000b34 <main+0x130>
 8000b8a:	bf00      	nop
 8000b8c:	0800e858 	.word	0x0800e858
 8000b90:	0800e860 	.word	0x0800e860
 8000b94:	0800e868 	.word	0x0800e868
 8000b98:	20000384 	.word	0x20000384
 8000b9c:	08004481 	.word	0x08004481
 8000ba0:	2000034c 	.word	0x2000034c
 8000ba4:	200000f0 	.word	0x200000f0
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	08001925 	.word	0x08001925
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	08004469 	.word	0x08004469
 8000bb8:	200007dc 	.word	0x200007dc
 8000bbc:	0800e870 	.word	0x0800e870
 8000bc0:	200000a4 	.word	0x200000a4
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	0800e83c 	.word	0x0800e83c
 8000bcc:	200000c4 	.word	0x200000c4
 8000bd0:	08000961 	.word	0x08000961
 8000bd4:	0800e840 	.word	0x0800e840
 8000bd8:	20000040 	.word	0x20000040
 8000bdc:	0800e84c 	.word	0x0800e84c

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09a      	sub	sp, #104	; 0x68
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bea:	2230      	movs	r2, #48	; 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00d f8c2 	bl	800dd78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <SystemClock_Config+0xfc>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <SystemClock_Config+0x100>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c66:	230f      	movs	r3, #15
 8000c68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c6a:	2390      	movs	r3, #144	; 0x90
 8000c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c72:	2305      	movs	r3, #5
 8000c74:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 faf4 	bl	8007268 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c86:	f000 f9a9 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f006 fd56 	bl	8007758 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cb2:	f000 f993 	bl	8000fdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f006 ff17 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000cd0:	f000 f984 	bl	8000fdc <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3768      	adds	r7, #104	; 0x68
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <MX_I2C1_Init+0x54>)
 8000cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x58>)
 8000cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_I2C1_Init+0x50>)
 8000d22:	f004 f85b 	bl	8004ddc <HAL_I2C_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d2c:	f000 f956 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200007dc 	.word	0x200007dc
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	000186a0 	.word	0x000186a0

08000d40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <MX_RTC_Init+0x48>)
 8000d48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d52:	227f      	movs	r2, #127	; 0x7f
 8000d54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_RTC_Init+0x44>)
 8000d70:	f006 ffb2 	bl	8007cd8 <HAL_RTC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d7a:	f000 f92f 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000874 	.word	0x20000874
 8000d88:	40002800 	.word	0x40002800

08000d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <MX_TIM1_Init+0x9c>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000db0:	2247      	movs	r2, #71	; 0x47
 8000db2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000dbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000dd6:	f007 f864 	bl	8007ea2 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f8fc 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000df2:	f007 f8a5 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000dfc:	f000 f8ee 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_TIM1_Init+0x98>)
 8000e0e:	f007 fa75 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 f8e0 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000894 	.word	0x20000894
 8000e28:	40010000 	.word	0x40010000

08000e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f007 fab8 	bl	80083d8 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f000 f8b5 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000830 	.word	0x20000830
 8000e7c:	40011000 	.word	0x40011000

08000e80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART2_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f007 fa8e 	bl	80083d8 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f88b 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200008dc 	.word	0x200008dc
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_GPIO_Init+0xfc>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0x100>)
 8000f62:	f003 ff07 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f6e:	f003 ff01 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <MX_GPIO_Init+0x100>)
 8000f8c:	f003 fc72 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 8000f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000faa:	f003 fc63 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000fc4:	f003 fc56 	bl	8004874 <HAL_GPIO_Init>

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020400 	.word	0x40020400

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_I2C_MspInit+0x84>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12b      	bne.n	80010b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001086:	2304      	movs	r3, #4
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <HAL_I2C_MspInit+0x8c>)
 8001092:	f003 fbef 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_I2C_MspInit+0x88>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020400 	.word	0x40020400

080010c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_RTC_MspInit+0x24>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d102      	bne.n	80010e0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_RTC_MspInit+0x28>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40002800 	.word	0x40002800
 80010f0:	42470e3c 	.word	0x42470e3c

080010f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_TIM_Base_MspInit+0x3c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10d      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_TIM_Base_MspInit+0x40>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_TIM_Base_MspInit+0x40>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_TIM_Base_MspInit+0x40>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40010000 	.word	0x40010000
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <HAL_UART_MspInit+0x108>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d135      	bne.n	80011c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_UART_MspInit+0x10c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <HAL_UART_MspInit+0x10c>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_UART_MspInit+0x10c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_UART_MspInit+0x10c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_UART_MspInit+0x10c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_UART_MspInit+0x10c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4826      	ldr	r0, [pc, #152]	; (8001248 <HAL_UART_MspInit+0x110>)
 80011b0:	f003 fb60 	bl	8004874 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2025      	movs	r0, #37	; 0x25
 80011ba:	f003 fa84 	bl	80046c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011be:	2025      	movs	r0, #37	; 0x25
 80011c0:	f003 fa9d 	bl	80046fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c4:	e038      	b.n	8001238 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a20      	ldr	r2, [pc, #128]	; (800124c <HAL_UART_MspInit+0x114>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d133      	bne.n	8001238 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_MspInit+0x10c>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001208:	230c      	movs	r3, #12
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001218:	2307      	movs	r3, #7
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_UART_MspInit+0x110>)
 8001224:	f003 fb26 	bl	8004874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f003 fa4a 	bl	80046c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001232:	2026      	movs	r0, #38	; 0x26
 8001234:	f003 fa63 	bl	80046fe <HAL_NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40011000 	.word	0x40011000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40004400 	.word	0x40004400

08001250 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_UART_MspDeInit+0x5c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10e      	bne.n	8001280 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_UART_MspDeInit+0x60>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <HAL_UART_MspDeInit+0x60>)
 8001268:	f023 0310 	bic.w	r3, r3, #16
 800126c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800126e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001272:	4810      	ldr	r0, [pc, #64]	; (80012b4 <HAL_UART_MspDeInit+0x64>)
 8001274:	f003 fc82 	bl	8004b7c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001278:	2025      	movs	r0, #37	; 0x25
 800127a:	f003 fa4e 	bl	800471a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800127e:	e011      	b.n	80012a4 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_UART_MspDeInit+0x68>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10c      	bne.n	80012a4 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_UART_MspDeInit+0x60>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_UART_MspDeInit+0x60>)
 8001290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001296:	210c      	movs	r1, #12
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_UART_MspDeInit+0x64>)
 800129a:	f003 fc6f 	bl	8004b7c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800129e:	2026      	movs	r0, #38	; 0x26
 80012a0:	f003 fa3b 	bl	800471a <HAL_NVIC_DisableIRQ>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40004400 	.word	0x40004400

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f003 f89a 	bl	8004440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <USART1_IRQHandler+0x10>)
 8001316:	f007 f951 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000830 	.word	0x20000830

08001324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART2_IRQHandler+0x10>)
 800132a:	f007 f947 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200008dc 	.word	0x200008dc

08001338 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <OTG_FS_IRQHandler+0x10>)
 800133e:	f004 ff60 	bl	8006202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20002044 	.word	0x20002044

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f00c fc9a 	bl	800dcb4 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20020000 	.word	0x20020000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	2000059c 	.word	0x2000059c
 80013b4:	20002460 	.word	0x20002460

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SystemInit+0x20>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemInit+0x20>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001406:	f7ff ffd7 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f00c fc59 	bl	800dcc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140e:	f7ff faf9 	bl	8000a04 <main>
  bx  lr    
 8001412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8001420:	0800ebf4 	.word	0x0800ebf4
  ldr r2, =_sbss
 8001424:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8001428:	2000245c 	.word	0x2000245c

0800142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC_IRQHandler>
	...

08001430 <AHT10_delay>:


#include "AHT10.h"

static void AHT10_delay(uint32_t time_)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if(AHT10.halt != NULL)
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <AHT10_delay+0x28>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <AHT10_delay+0x1a>
		AHT10.halt(time_);
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <AHT10_delay+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
	else
		HAL_Delay(time_);
}
 8001448:	e002      	b.n	8001450 <AHT10_delay+0x20>
		HAL_Delay(time_);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f003 f818 	bl	8004480 <HAL_Delay>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000010 	.word	0x20000010

0800145c <AHT10_getTick>:

static uint32_t AHT10_getTick(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if(AHT10.getTick != NULL)
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <AHT10_getTick+0x20>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <AHT10_getTick+0x16>
		return AHT10.getTick();
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <AHT10_getTick+0x20>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	e002      	b.n	8001478 <AHT10_getTick+0x1c>
	else
		return HAL_GetTick();
 8001472:	f002 fff9 	bl	8004468 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000010 	.word	0x20000010

08001480 <AHT10_read>:

static AHT10_status AHT10_read(AHT10_var* var, uint8_t *buffer, size_t len, uint32_t timeout_)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
    if (len > _maxBufferSize)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b20      	cmp	r3, #32
 8001492:	d901      	bls.n	8001498 <AHT10_read+0x18>
        return AHT10_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e00d      	b.n	80014b4 <AHT10_read+0x34>
//    HAL_I2C
    return HAL_I2C_Master_Receive(var->i2c, var->address, buffer, len, timeout_);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	7b1b      	ldrb	r3, [r3, #12]
 80014a0:	b299      	uxth	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	f003 fed7 	bl	8005260 <HAL_I2C_Master_Receive>
 80014b2:	4603      	mov	r3, r0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <AHT10_write>:

static AHT10_status AHT10_write(AHT10_var* var, const uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
	 if ( len > _maxBufferSize )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	d901      	bls.n	80014d4 <AHT10_write+0x18>
	        return AHT10_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e00d      	b.n	80014f0 <AHT10_write+0x34>
	 return HAL_I2C_Master_Transmit(var->i2c, var->address, buffer, len, timeout_);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	b299      	uxth	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	f003 fdbb 	bl	8005064 <HAL_I2C_Master_Transmit>
 80014ee:	4603      	mov	r3, r0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <AHT10_detect>:

static AHT10_status AHT10_detect(AHT10_var* var)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	if( var->i2c == NULL )
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <AHT10_detect+0x14>
		return false;
 8001508:	2300      	movs	r3, #0
 800150a:	e00b      	b.n	8001524 <AHT10_detect+0x2c>
	uint8_t ret =  HAL_I2C_IsDeviceReady(var->i2c, var->address, 5, 100);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	b299      	uxth	r1, r3
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	2205      	movs	r2, #5
 800151a:	f004 f8c7 	bl	80056ac <HAL_I2C_IsDeviceReady>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	return (AHT10_status)ret;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <AHT10_begin>:

static AHT10_status AHT10_begin(AHT10_var* var, I2C_HandleTypeDef *i2c_, uint8_t address)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	4613      	mov	r3, r2
 8001538:	71fb      	strb	r3, [r7, #7]
	var->i2c 			= i2c_;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	601a      	str	r2, [r3, #0]
	var->address 		= address<<1;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	731a      	strb	r2, [r3, #12]
	var->temperature 	= 0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
	var->humidity 		= 0;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
	uint8_t ret = AHT10_detect(var);
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff ffcc 	bl	80014f8 <AHT10_detect>
 8001560:	4603      	mov	r3, r0
 8001562:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <AHT10_begin+0x42>
		return ret;
 800156a:	7ffb      	ldrb	r3, [r7, #31]
 800156c:	e063      	b.n	8001636 <AHT10_begin+0x10a>
	uint8_t *cmd = malloc(3 * sizeof(*cmd));
 800156e:	2003      	movs	r0, #3
 8001570:	f00c fbe4 	bl	800dd3c <malloc>
 8001574:	4603      	mov	r3, r0
 8001576:	61bb      	str	r3, [r7, #24]
	if ( cmd != NULL )
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <AHT10_begin+0x5c>
		memset(cmd,0,3);
 800157e:	2203      	movs	r2, #3
 8001580:	2100      	movs	r1, #0
 8001582:	69b8      	ldr	r0, [r7, #24]
 8001584:	f00c fbf8 	bl	800dd78 <memset>
	cmd[0] = AHTX0_CMD_SOFTRESET;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	22ba      	movs	r2, #186	; 0xba
 800158c:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var,cmd,1);
 800158e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001592:	2201      	movs	r2, #1
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff ff90 	bl	80014bc <AHT10_write>
 800159c:	4603      	mov	r3, r0
 800159e:	77fb      	strb	r3, [r7, #31]
	if( ret != AHT10_OK )
 80015a0:	7ffb      	ldrb	r3, [r7, #31]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <AHT10_begin+0x7e>
		return ret;
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	e045      	b.n	8001636 <AHT10_begin+0x10a>
	AHT10_delay(20);	// time for module to warming up
 80015aa:	2014      	movs	r0, #20
 80015ac:	f7ff ff40 	bl	8001430 <AHT10_delay>

	cmd[0] = AHTX0_CMD_CALIBRATE;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	22e1      	movs	r2, #225	; 0xe1
 80015b4:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x08;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	3301      	adds	r3, #1
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x00;
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	3302      	adds	r3, #2
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var, cmd, 3);
 80015c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ca:	2203      	movs	r2, #3
 80015cc:	69b9      	ldr	r1, [r7, #24]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff ff74 	bl	80014bc <AHT10_write>
 80015d4:	4603      	mov	r3, r0
 80015d6:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <AHT10_begin+0xb6>
		return ret;
 80015de:	7ffb      	ldrb	r3, [r7, #31]
 80015e0:	e029      	b.n	8001636 <AHT10_begin+0x10a>
	uint32_t ts = AHT10_getTick();
 80015e2:	f7ff ff3b 	bl	800145c <AHT10_getTick>
 80015e6:	6178      	str	r0, [r7, #20]
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 80015e8:	e010      	b.n	800160c <AHT10_begin+0xe0>
	{
		AHT10_delay(5);
 80015ea:	2005      	movs	r0, #5
 80015ec:	f7ff ff20 	bl	8001430 <AHT10_delay>
		if( ts - AHT10_getTick() >= 5000 )
 80015f0:	f7ff ff34 	bl	800145c <AHT10_getTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	f241 3287 	movw	r2, #4999	; 0x1387
 80015fe:	4293      	cmp	r3, r2
 8001600:	d904      	bls.n	800160c <AHT10_begin+0xe0>
		{
			free(cmd);
 8001602:	69b8      	ldr	r0, [r7, #24]
 8001604:	f00c fba2 	bl	800dd4c <free>
			return AHT10_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e014      	b.n	8001636 <AHT10_begin+0x10a>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f92b 	bl	8001868 <AHT10_getStatus>
 8001612:	4603      	mov	r3, r0
 8001614:	b25b      	sxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	dbe7      	blt.n	80015ea <AHT10_begin+0xbe>
		}
	};
	free(cmd);
 800161a:	69b8      	ldr	r0, [r7, #24]
 800161c:	f00c fb96 	bl	800dd4c <free>
	// load last status to clearing buffer
	if (!(AHT10_getStatus(var) & AHTX0_STATUS_CALIBRATED))
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f921 	bl	8001868 <AHT10_getStatus>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <AHT10_begin+0x108>
		return AHT10_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <AHT10_begin+0x10a>
	else
		return AHT10_OK;
 8001634:	2300      	movs	r3, #0

}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <AHT10_getEvent>:

static AHT10_status AHT10_getEvent(AHT10_var* var, uint32_t timeout_)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	if (var->error_counter >= AHT10_MAX_TRIAL)   // didn't get reply yet from AHT10
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7b5b      	ldrb	r3, [r3, #13]
 800164e:	2b09      	cmp	r3, #9
 8001650:	d91b      	bls.n	800168a <AHT10_getEvent+0x4a>
	{
		// need to restart module
		uint8_t address_ = var->address>>1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7b1b      	ldrb	r3, [r3, #12]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		I2C_HandleTypeDef *i2c_ = var->i2c;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
		ret = AHT10_begin(var, i2c_, address_);
 8001662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001666:	461a      	mov	r2, r3
 8001668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff5e 	bl	800152c <AHT10_begin>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ( ret != AHT10_OK )
 8001676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <AHT10_getEvent+0x44>
			return ret;
 800167e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001682:	e0e3      	b.n	800184c <AHT10_getEvent+0x20c>
		var->error_counter = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	735a      	strb	r2, [r3, #13]
	}
	uint8_t cmd_TRIGGER[3] = {AHTX0_CMD_TRIGGER, 0x33, 0};
 800168a:	4a72      	ldr	r2, [pc, #456]	; (8001854 <AHT10_getEvent+0x214>)
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4611      	mov	r1, r2
 8001694:	8019      	strh	r1, [r3, #0]
 8001696:	3302      	adds	r3, #2
 8001698:	0c12      	lsrs	r2, r2, #16
 800169a:	701a      	strb	r2, [r3, #0]
	// read the data and store it!
	uint8_t *cmd_ptr = malloc(3 * sizeof(*cmd_ptr));
 800169c:	2003      	movs	r0, #3
 800169e:	f00c fb4d 	bl	800dd3c <malloc>
 80016a2:	4603      	mov	r3, r0
 80016a4:	61fb      	str	r3, [r7, #28]
	if (cmd_ptr != NULL)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d021      	beq.n	80016f0 <AHT10_getEvent+0xb0>
	{
		cmd_ptr[0] = AHTX0_CMD_TRIGGER;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	22ac      	movs	r2, #172	; 0xac
 80016b0:	701a      	strb	r2, [r3, #0]
		cmd_ptr[1] = 0x33;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3301      	adds	r3, #1
 80016b6:	2233      	movs	r2, #51	; 0x33
 80016b8:	701a      	strb	r2, [r3, #0]
		cmd_ptr[2] = 0;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3302      	adds	r3, #2
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
		ret = AHT10_write(var, cmd_ptr, 3);
 80016c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c6:	2203      	movs	r2, #3
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fef6 	bl	80014bc <AHT10_write>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != AHT10_OK )
 80016d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <AHT10_getEvent+0xb4>
		{
			var->error_counter++;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7b5b      	ldrb	r3, [r3, #13]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	735a      	strb	r2, [r3, #13]
			return ret;
 80016ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ee:	e0ad      	b.n	800184c <AHT10_getEvent+0x20c>
		}
	}
	else
		return AHT10_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0ab      	b.n	800184c <AHT10_getEvent+0x20c>
	free(cmd_ptr);
 80016f4:	69f8      	ldr	r0, [r7, #28]
 80016f6:	f00c fb29 	bl	800dd4c <free>
	unsigned long t = AHT10_getTick();
 80016fa:	f7ff feaf 	bl	800145c <AHT10_getTick>
 80016fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001700:	e01b      	b.n	800173a <AHT10_getEvent+0xfa>
	{
		AHT10_delay(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f7ff fe94 	bl	8001430 <AHT10_delay>
		uint32_t rollOver = AHT10_getTick();
 8001708:	f7ff fea8 	bl	800145c <AHT10_getTick>
 800170c:	60f8      	str	r0, [r7, #12]
		if (rollOver < t)
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	429a      	cmp	r2, r3
 8001714:	d201      	bcs.n	800171a <AHT10_getEvent+0xda>
			t = rollOver;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (AHT10_getTick() - t >= timeout_)
 800171a:	f7ff fe9f 	bl	800145c <AHT10_getTick>
 800171e:	4602      	mov	r2, r0
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d807      	bhi.n	800173a <AHT10_getEvent+0xfa>
		{
			var->error_counter++;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7b5b      	ldrb	r3, [r3, #13]
 800172e:	3301      	adds	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	735a      	strb	r2, [r3, #13]
			return AHT10_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e088      	b.n	800184c <AHT10_getEvent+0x20c>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f894 	bl	8001868 <AHT10_getStatus>
 8001740:	4603      	mov	r3, r0
 8001742:	b25b      	sxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	dbdc      	blt.n	8001702 <AHT10_getEvent+0xc2>
		};
	}

	uint8_t *data = malloc(6 * sizeof(*data));
 8001748:	2006      	movs	r0, #6
 800174a:	f00c faf7 	bl	800dd3c <malloc>
 800174e:	4603      	mov	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
	if (data != NULL)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <AHT10_getEvent+0x122>
	{
		// clear the data
		memset(data,0,6);
 8001758:	2206      	movs	r2, #6
 800175a:	2100      	movs	r1, #0
 800175c:	69b8      	ldr	r0, [r7, #24]
 800175e:	f00c fb0b 	bl	800dd78 <memset>
	}

	ret = AHT10_read(var, data, 6, timeout_);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2206      	movs	r2, #6
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fe89 	bl	8001480 <AHT10_read>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != AHT10_OK )
 8001774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <AHT10_getEvent+0x154>
	{
		var->error_counter++;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b5b      	ldrb	r3, [r3, #13]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	735a      	strb	r2, [r3, #13]
		free(data);
 8001788:	69b8      	ldr	r0, [r7, #24]
 800178a:	f00c fadf 	bl	800dd4c <free>
		return ret;
 800178e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001792:	e05b      	b.n	800184c <AHT10_getEvent+0x20c>
	}

	uint32_t h = data[1];
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	3301      	adds	r3, #1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	617b      	str	r3, [r7, #20]
	h <<= 8;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	617b      	str	r3, [r7, #20]
	h |= data[2];
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3302      	adds	r3, #2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
	h <<= 4;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
	h |= data[3] >> 4;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3303      	adds	r3, #3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
	var->humidity = ((float)h * 100) / 0x100000;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001858 <AHT10_getEvent+0x218>
 80017d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017da:	eddf 6a20 	vldr	s13, [pc, #128]	; 800185c <AHT10_getEvent+0x21c>
 80017de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a02 	vstr	s15, [r3, #8]

	uint32_t tdata = data[3] & 0x0F;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	3303      	adds	r3, #3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	613b      	str	r3, [r7, #16]
	tdata |= data[4];
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	3304      	adds	r3, #4
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	613b      	str	r3, [r7, #16]
	tdata |= data[5];
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	3305      	adds	r3, #5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
	var->temperature = ((float)tdata * 200 / 0x100000) - 50;
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001860 <AHT10_getEvent+0x220>
 800182a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800182e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800185c <AHT10_getEvent+0x21c>
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001864 <AHT10_getEvent+0x224>
 800183a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	edc3 7a01 	vstr	s15, [r3, #4]
	free(data);
 8001844:	69b8      	ldr	r0, [r7, #24]
 8001846:	f00c fa81 	bl	800dd4c <free>
	return AHT10_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800e884 	.word	0x0800e884
 8001858:	42c80000 	.word	0x42c80000
 800185c:	49800000 	.word	0x49800000
 8001860:	43480000 	.word	0x43480000
 8001864:	42480000 	.word	0x42480000

08001868 <AHT10_getStatus>:

static uint8_t AHT10_getStatus(AHT10_var* var)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	if ( AHT10_read(var, &ret, 1) != AHT10_OK )
 8001870:	f107 010f 	add.w	r1, r7, #15
 8001874:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001878:	2201      	movs	r2, #1
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fe00 	bl	8001480 <AHT10_read>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <AHT10_getStatus+0x22>
		return 0xFF;
 8001886:	23ff      	movs	r3, #255	; 0xff
 8001888:	e000      	b.n	800188c <AHT10_getStatus+0x24>
	else
		return ret;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <AHT10_getTemperature>:


// extract Temperature value from the struct
static float AHT10_getTemperature (AHT10_var* var)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	return var->temperature;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	ee07 3a90 	vmov	s15, r3
}
 80018a4:	eeb0 0a67 	vmov.f32	s0, s15
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <AHT10_getHumidity>:

// extract Humidity value from the struct
static float AHT10_getHumidity (AHT10_var* var)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	return var->humidity;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	ee07 3a90 	vmov	s15, r3
}
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <delay_microsInit+0x4c>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10e      	bne.n	80018fe <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <delay_microsInit+0x4c>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <delay_microsInit+0x4c>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <delay_microsInit+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <delay_microsInit+0x50>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <delay_microsInit+0x50>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 80018fe:	bf00      	nop
	 __NOP();
 8001900:	bf00      	nop
	 __NOP();
 8001902:	bf00      	nop
	 if(DWT->CYCCNT)
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <delay_microsInit+0x50>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 8001910:	2301      	movs	r3, #1
	 }
};
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000edf0 	.word	0xe000edf0
 8001920:	e0001000 	.word	0xe0001000

08001924 <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <delay_microSeconds+0x60>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <delay_microSeconds+0x60>)
 8001934:	685c      	ldr	r4, [r3, #4]
 8001936:	f006 f8ab 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 800193a:	4603      	mov	r3, r0
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <delay_microSeconds+0x64>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	4423      	add	r3, r4
 800194c:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	429a      	cmp	r2, r3
 8001954:	d906      	bls.n	8001964 <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 8001956:	bf00      	nop
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <delay_microSeconds+0x60>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	429a      	cmp	r2, r3
 8001960:	d8fa      	bhi.n	8001958 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 8001962:	e00a      	b.n	800197a <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8001964:	bf00      	nop
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <delay_microSeconds+0x60>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3fa      	bcc.n	8001966 <delay_microSeconds+0x42>
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <delay_microSeconds+0x60>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	429a      	cmp	r2, r3
 8001978:	d8f5      	bhi.n	8001966 <delay_microSeconds+0x42>
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	e0001000 	.word	0xe0001000
 8001988:	431bde83 	.word	0x431bde83

0800198c <digitalWrite>:
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	e883 0003 	stmia.w	r3, {r0, r1}
 800199a:	4613      	mov	r3, r2
 800199c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	89b9      	ldrh	r1, [r7, #12]
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 f9e5 	bl	8004d74 <HAL_GPIO_WritePin>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <digitalRead>:
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	463b      	mov	r3, r7
 80019ba:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f9bd 	bl	8004d44 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 80019de:	f002 fd43 	bl	8004468 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 80019e4:	e023      	b.n	8001a2e <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 80019e6:	f002 fd3f 	bl	8004468 <HAL_GetTick>
 80019ea:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d206      	bcs.n	8001a02 <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bfb8      	it	lt
 80019fe:	425b      	neglt	r3, r3
 8001a00:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 8001a02:	f002 fd31 	bl	8004468 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d801      	bhi.n	8001a16 <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e01f      	b.n	8001a56 <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HX710BIsReady+0x8c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <HX710BIsReady+0x8c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	200a      	movs	r0, #10
 8001a24:	4798      	blx	r3
 8001a26:	e002      	b.n	8001a2e <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8001a28:	2005      	movs	r0, #5
 8001a2a:	f002 fd29 	bl	8004480 <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001a34:	2100      	movs	r1, #0
 8001a36:	4611      	mov	r1, r2
 8001a38:	7a9a      	ldrb	r2, [r3, #10]
 8001a3a:	7adb      	ldrb	r3, [r3, #11]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	f362 030f 	bfi	r3, r2, #0, #16
 8001a46:	4608      	mov	r0, r1
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff ffb2 	bl	80019b2 <digitalRead>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1c8      	bne.n	80019e6 <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000002c 	.word	0x2000002c

08001a64 <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2100      	movs	r1, #0
 8001a76:	4611      	mov	r1, r2
 8001a78:	791a      	ldrb	r2, [r3, #4]
 8001a7a:	795b      	ldrb	r3, [r3, #5]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	2300      	movs	r3, #0
 8001a82:	f362 030f 	bfi	r3, r2, #0, #16
 8001a86:	2200      	movs	r2, #0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff ff7e 	bl	800198c <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff ff9e 	bl	80019d4 <HX710BIsReady>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d169      	bne.n	8001b72 <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
 8001aaa:	e045      	b.n	8001b38 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4611      	mov	r1, r2
 8001aba:	791a      	ldrb	r2, [r3, #4]
 8001abc:	795b      	ldrb	r3, [r3, #5]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f362 030f 	bfi	r3, r2, #0, #16
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4608      	mov	r0, r1
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff ff5d 	bl	800198c <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2100      	movs	r1, #0
 8001ade:	4611      	mov	r1, r2
 8001ae0:	791a      	ldrb	r2, [r3, #4]
 8001ae2:	795b      	ldrb	r3, [r3, #5]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f362 030f 	bfi	r3, r2, #0, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff ff4a 	bl	800198c <digitalWrite>
			if ( i < 24)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b17      	cmp	r3, #23
 8001afc:	d819      	bhi.n	8001b32 <HX710BRead+0xce>
			{
				raw = raw << 1;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	7a9a      	ldrb	r2, [r3, #10]
 8001b10:	7adb      	ldrb	r3, [r3, #11]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	431a      	orrs	r2, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	f362 030f 	bfi	r3, r2, #0, #16
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff ff47 	bl	80019b2 <digitalRead>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d103      	bne.n	8001b32 <HX710BRead+0xce>
						raw= raw | 0x01;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	3301      	adds	r3, #1
 8001b36:	75fb      	strb	r3, [r7, #23]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	7dfa      	ldrb	r2, [r7, #23]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3b4      	bcc.n	8001aac <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4611      	mov	r1, r2
 8001b4a:	791a      	ldrb	r2, [r3, #4]
 8001b4c:	795b      	ldrb	r3, [r3, #5]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	431a      	orrs	r2, r3
 8001b52:	2300      	movs	r3, #0
 8001b54:	f362 030f 	bfi	r3, r2, #0, #16
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff ff15 	bl	800198c <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HX710BSetMode>:


HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	2100      	movs	r1, #0
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff66 	bl	8001a64 <HX710BRead>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HX710BInit>:


HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	1d38      	adds	r0, r7, #4
 8001bae:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bb2:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	f107 021c 	add.w	r2, r7, #28
 8001bbc:	6810      	ldr	r0, [r2, #0]
 8001bbe:	6018      	str	r0, [r3, #0]
 8001bc0:	8892      	ldrh	r2, [r2, #4]
 8001bc2:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6010      	str	r0, [r2, #0]
 8001bce:	889b      	ldrh	r3, [r3, #4]
 8001bd0:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bd8:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8001bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bde:	22f4      	movs	r2, #244	; 0xf4
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff ffca 	bl	8001b7c <HX710BSetMode>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	4770      	bx	lr

08001bf8 <NexButton_create>:
#include "NexButton.h"
#include "string.h"
#include "stdlib.h"

void NexButton_create(NexObject_var *obj, uint8_t pid, uint8_t cid, const char *name)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]
 8001c06:	4613      	mov	r3, r2
 8001c08:	72bb      	strb	r3, [r7, #10]
	NexObject.create(obj, pid, cid, name);
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <NexButton_create+0x28>)
 8001c0c:	681c      	ldr	r4, [r3, #0]
 8001c0e:	7aba      	ldrb	r2, [r7, #10]
 8001c10:	7af9      	ldrb	r1, [r7, #11]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	47a0      	blx	r4
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	200000c4 	.word	0x200000c4

08001c24 <NexButton_getText>:


uint16_t NexButton_getText(NexObject_var *obj, char *buffer, uint16_t len)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
 8001c32:	466b      	mov	r3, sp
 8001c34:	461d      	mov	r5, r3
	size_t len_ = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
	len_ = strlen(obj->__name)+10;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe face 	bl	80001e0 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	330a      	adds	r3, #10
 8001c48:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001c4a:	69fc      	ldr	r4, [r7, #28]
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	4620      	mov	r0, r4
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	00cb      	lsls	r3, r1, #3
 8001c62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c66:	00c2      	lsls	r2, r0, #3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	00cb      	lsls	r3, r1, #3
 8001c78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c7c:	00c2      	lsls	r2, r0, #3
 8001c7e:	1de3      	adds	r3, r4, #7
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	ebad 0d03 	sub.w	sp, sp, r3
 8001c88:	466b      	mov	r3, sp
 8001c8a:	3300      	adds	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	sprintf(cmd,"get %s.txt", obj->__name);
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	461a      	mov	r2, r3
 8001c96:	490a      	ldr	r1, [pc, #40]	; (8001cc0 <NexButton_getText+0x9c>)
 8001c98:	f00c f930 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <NexButton_getText+0xa0>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4798      	blx	r3
	return NexHardware.recvRetString(buffer, len, 100UL);
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <NexButton_getText+0xa0>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	88f9      	ldrh	r1, [r7, #6]
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	68b8      	ldr	r0, [r7, #8]
 8001cb0:	4798      	blx	r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	46ad      	mov	sp, r5
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800e888 	.word	0x0800e888
 8001cc4:	200000a4 	.word	0x200000a4

08001cc8 <NexButton_setText>:

bool NexButton_setText(NexObject_var *obj, const char *buffer)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	466b      	mov	r3, sp
 8001cd4:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+(size_t)8+strlen(buffer);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fa80 	bl	80001e0 <strlen>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7fe fa7c 	bl	80001e0 <strlen>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4423      	add	r3, r4
 8001cec:	3308      	adds	r3, #8
 8001cee:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001cf0:	697c      	ldr	r4, [r7, #20]
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00cb      	lsls	r3, r1, #3
 8001d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d0c:	00c2      	lsls	r2, r0, #3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	00cb      	lsls	r3, r1, #3
 8001d1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d22:	00c2      	lsls	r2, r0, #3
 8001d24:	1de3      	adds	r3, r4, #7
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d2e:	466b      	mov	r3, sp
 8001d30:	3300      	adds	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
	sprintf(cmd,"%s.txt=\"%s\"", obj->__name, buffer);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	4909      	ldr	r1, [pc, #36]	; (8001d64 <NexButton_setText+0x9c>)
 8001d3e:	f00c f8dd 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <NexButton_setText+0xa0>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(1000UL);
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <NexButton_setText+0xa0>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d54:	4798      	blx	r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	46ad      	mov	sp, r5
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bdb0      	pop	{r4, r5, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	0800e894 	.word	0x0800e894
 8001d68:	200000a4 	.word	0x200000a4

08001d6c <NexButton_Get_background_color_bco>:

uint32_t NexButton_Get_background_color_bco(NexObject_var *obj, uint32_t *number)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	466b      	mov	r3, sp
 8001d78:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+10;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa2e 	bl	80001e0 <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	330a      	adds	r3, #10
 8001d88:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001d8a:	697c      	ldr	r4, [r7, #20]
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4620      	mov	r0, r4
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	00cb      	lsls	r3, r1, #3
 8001da2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001da6:	00c2      	lsls	r2, r0, #3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	00cb      	lsls	r3, r1, #3
 8001db8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001dbc:	00c2      	lsls	r2, r0, #3
 8001dbe:	1de3      	adds	r3, r4, #7
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc8:	466b      	mov	r3, sp
 8001dca:	3300      	adds	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
	sprintf(cmd,"get %s.bco", obj->__name);
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4909      	ldr	r1, [pc, #36]	; (8001dfc <NexButton_Get_background_color_bco+0x90>)
 8001dd8:	f00c f890 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <NexButton_Get_background_color_bco+0x94>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4610      	mov	r0, r2
 8001de4:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <NexButton_Get_background_color_bco+0x94>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2164      	movs	r1, #100	; 0x64
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
 8001df2:	46ad      	mov	sp, r5
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfc:	0800e8a0 	.word	0x0800e8a0
 8001e00:	200000a4 	.word	0x200000a4

08001e04 <NexButton_Set_background_color_bco>:

bool NexButton_Set_background_color_bco(NexObject_var *obj, uint32_t number)
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	466b      	mov	r3, sp
 8001e10:	461d      	mov	r5, r3
	char buf[10] = {0};
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe f9db 	bl	80001e0 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001e30:	69fc      	ldr	r4, [r7, #28]
 8001e32:	4623      	mov	r3, r4
 8001e34:	3b01      	subs	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	00cb      	lsls	r3, r1, #3
 8001e48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e4c:	00c2      	lsls	r2, r0, #3
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	00cb      	lsls	r3, r1, #3
 8001e5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e62:	00c2      	lsls	r2, r0, #3
 8001e64:	1de3      	adds	r3, r4, #7
 8001e66:	08db      	lsrs	r3, r3, #3
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6e:	466b      	mov	r3, sp
 8001e70:	3300      	adds	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
// create bco
	utoa(number, buf, 10);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	220a      	movs	r2, #10
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f00c f941 	bl	800e104 <utoa>
	sprintf(cmd, "%s.bco=%s", obj->__name, buf);
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	4911      	ldr	r1, [pc, #68]	; (8001ed4 <NexButton_Set_background_color_bco+0xd0>)
 8001e8e:	f00c f835 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <NexButton_Set_background_color_bco+0xd4>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4798      	blx	r3
	memset(cmd,'\0', len_);
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f00b ff68 	bl	800dd78 <memset>
// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8001ea8:	6978      	ldr	r0, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	490a      	ldr	r1, [pc, #40]	; (8001edc <NexButton_Set_background_color_bco+0xd8>)
 8001eb2:	f00c f823 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <NexButton_Set_background_color_bco+0xd4>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <NexButton_Set_background_color_bco+0xd4>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2064      	movs	r0, #100	; 0x64
 8001ec6:	4798      	blx	r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	46ad      	mov	sp, r5
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	0800e8ac 	.word	0x0800e8ac
 8001ed8:	200000a4 	.word	0x200000a4
 8001edc:	0800e8b8 	.word	0x0800e8b8

08001ee0 <NexButton_Get_press_background_color_bco2>:

uint32_t NexButton_Get_press_background_color_bco2(NexObject_var *obj, uint32_t *number)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	466b      	mov	r3, sp
 8001eec:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name) + 12;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe f974 	bl	80001e0 <strlen>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	330c      	adds	r3, #12
 8001efc:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001efe:	697c      	ldr	r4, [r7, #20]
 8001f00:	4623      	mov	r3, r4
 8001f02:	3b01      	subs	r3, #1
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4620      	mov	r0, r4
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	00cb      	lsls	r3, r1, #3
 8001f16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f1a:	00c2      	lsls	r2, r0, #3
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	00cb      	lsls	r3, r1, #3
 8001f2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f30:	00c2      	lsls	r2, r0, #3
 8001f32:	1de3      	adds	r3, r4, #7
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	ebad 0d03 	sub.w	sp, sp, r3
 8001f3c:	466b      	mov	r3, sp
 8001f3e:	3300      	adds	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.bco2", obj->__name);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4909      	ldr	r1, [pc, #36]	; (8001f70 <NexButton_Get_press_background_color_bco2+0x90>)
 8001f4c:	f00b ffd6 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <NexButton_Get_press_background_color_bco2+0x94>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4610      	mov	r0, r2
 8001f58:	4798      	blx	r3
	return NexHardware.recvRetNumber(number,100UL);
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <NexButton_Get_press_background_color_bco2+0x94>)
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	2164      	movs	r1, #100	; 0x64
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	4798      	blx	r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	46ad      	mov	sp, r5
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	0800e8c0 	.word	0x0800e8c0
 8001f74:	200000a4 	.word	0x200000a4

08001f78 <NexButton_Set_press_background_color_bco2>:

bool NexButton_Set_press_background_color_bco2(NexObject_var *obj, uint32_t number)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	466b      	mov	r3, sp
 8001f84:	461d      	mov	r5, r3
	char buf[10] = {0};
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f921 	bl	80001e0 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001fa4:	69fc      	ldr	r4, [r7, #28]
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	4620      	mov	r0, r4
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	00cb      	lsls	r3, r1, #3
 8001fbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fc0:	00c2      	lsls	r2, r0, #3
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	00cb      	lsls	r3, r1, #3
 8001fd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fd6:	00c2      	lsls	r2, r0, #3
 8001fd8:	1de3      	adds	r3, r4, #7
 8001fda:	08db      	lsrs	r3, r3, #3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	ebad 0d03 	sub.w	sp, sp, r3
 8001fe2:	466b      	mov	r3, sp
 8001fe4:	3300      	adds	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

	// create bco2
	utoa(number, buf, 10);
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	220a      	movs	r2, #10
 8001fee:	4619      	mov	r1, r3
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f00c f887 	bl	800e104 <utoa>
	sprintf(cmd,"%s.bco=%s", obj->__name, buf);
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4911      	ldr	r1, [pc, #68]	; (8002048 <NexButton_Set_press_background_color_bco2+0xd0>)
 8002002:	f00b ff7b 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <NexButton_Set_press_background_color_bco2+0xd4>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4610      	mov	r0, r2
 800200e:	4798      	blx	r3
	memset(cmd, '\0', len_);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f00b feae 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd,"ref %s", obj->__name);
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	461a      	mov	r2, r3
 8002024:	490a      	ldr	r1, [pc, #40]	; (8002050 <NexButton_Set_press_background_color_bco2+0xd8>)
 8002026:	f00b ff69 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <NexButton_Set_press_background_color_bco2+0xd4>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4610      	mov	r0, r2
 8002032:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <NexButton_Set_press_background_color_bco2+0xd4>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2064      	movs	r0, #100	; 0x64
 800203a:	4798      	blx	r3
 800203c:	4603      	mov	r3, r0
 800203e:	46ad      	mov	sp, r5
}
 8002040:	4618      	mov	r0, r3
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	0800e8ac 	.word	0x0800e8ac
 800204c:	200000a4 	.word	0x200000a4
 8002050:	0800e8b8 	.word	0x0800e8b8

08002054 <NexButton_Get_font_color_pco>:

uint32_t NexButton_Get_font_color_pco(NexObject_var *obj, uint32_t *number)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	466b      	mov	r3, sp
 8002060:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name) + 12;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f8ba 	bl	80001e0 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	330c      	adds	r3, #12
 8002070:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8002072:	697c      	ldr	r4, [r7, #20]
 8002074:	4623      	mov	r3, r4
 8002076:	3b01      	subs	r3, #1
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4620      	mov	r0, r4
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	00cb      	lsls	r3, r1, #3
 800208a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800208e:	00c2      	lsls	r2, r0, #3
 8002090:	4620      	mov	r0, r4
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	00cb      	lsls	r3, r1, #3
 80020a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020a4:	00c2      	lsls	r2, r0, #3
 80020a6:	1de3      	adds	r3, r4, #7
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	ebad 0d03 	sub.w	sp, sp, r3
 80020b0:	466b      	mov	r3, sp
 80020b2:	3300      	adds	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.pco", obj->__name);
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	461a      	mov	r2, r3
 80020be:	4909      	ldr	r1, [pc, #36]	; (80020e4 <NexButton_Get_font_color_pco+0x90>)
 80020c0:	f00b ff1c 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <NexButton_Get_font_color_pco+0x94>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4610      	mov	r0, r2
 80020cc:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <NexButton_Get_font_color_pco+0x94>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2164      	movs	r1, #100	; 0x64
 80020d4:	6838      	ldr	r0, [r7, #0]
 80020d6:	4798      	blx	r3
 80020d8:	4603      	mov	r3, r0
 80020da:	46ad      	mov	sp, r5
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}
 80020e4:	0800e8cc 	.word	0x0800e8cc
 80020e8:	200000a4 	.word	0x200000a4

080020ec <NexButton_Set_font_color_pco>:

bool NexButton_Set_font_color_pco(NexObject_var *obj, uint32_t number)
{
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	466b      	mov	r3, sp
 80020f8:	461d      	mov	r5, r3
	char buf[10] = {0};
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f867 	bl	80001e0 <strlen>
 8002112:	4603      	mov	r3, r0
 8002114:	3314      	adds	r3, #20
 8002116:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002118:	69fc      	ldr	r4, [r7, #28]
 800211a:	4623      	mov	r3, r4
 800211c:	3b01      	subs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	4620      	mov	r0, r4
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	00cb      	lsls	r3, r1, #3
 8002130:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002134:	00c2      	lsls	r2, r0, #3
 8002136:	4620      	mov	r0, r4
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	00cb      	lsls	r3, r1, #3
 8002146:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800214a:	00c2      	lsls	r2, r0, #3
 800214c:	1de3      	adds	r3, r4, #7
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	ebad 0d03 	sub.w	sp, sp, r3
 8002156:	466b      	mov	r3, sp
 8002158:	3300      	adds	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

	// create pco
	utoa(number, buf, 10);
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	220a      	movs	r2, #10
 8002162:	4619      	mov	r1, r3
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f00b ffcd 	bl	800e104 <utoa>
	sprintf(cmd, "%s.pco=%s", obj->__name, buf);
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4911      	ldr	r1, [pc, #68]	; (80021bc <NexButton_Set_font_color_pco+0xd0>)
 8002176:	f00b fec1 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <NexButton_Set_font_color_pco+0xd4>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
	memset(cmd, '\0', len_);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f00b fdf4 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s",obj->__name);
 8002190:	6978      	ldr	r0, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <NexButton_Set_font_color_pco+0xd8>)
 800219a:	f00b feaf 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <NexButton_Set_font_color_pco+0xd4>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4610      	mov	r0, r2
 80021a6:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <NexButton_Set_font_color_pco+0xd4>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2064      	movs	r0, #100	; 0x64
 80021ae:	4798      	blx	r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	46ad      	mov	sp, r5
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bdb0      	pop	{r4, r5, r7, pc}
 80021bc:	0800e8d8 	.word	0x0800e8d8
 80021c0:	200000a4 	.word	0x200000a4
 80021c4:	0800e8b8 	.word	0x0800e8b8

080021c8 <NexButton_Get_press_font_color_pco2>:

uint32_t NexButton_Get_press_font_color_pco2(NexObject_var *obj, uint32_t *number)
{
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	466b      	mov	r3, sp
 80021d4:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+12;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f800 	bl	80001e0 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	330c      	adds	r3, #12
 80021e4:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 80021e6:	697c      	ldr	r4, [r7, #20]
 80021e8:	4623      	mov	r3, r4
 80021ea:	3b01      	subs	r3, #1
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4620      	mov	r0, r4
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	00cb      	lsls	r3, r1, #3
 80021fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002202:	00c2      	lsls	r2, r0, #3
 8002204:	4620      	mov	r0, r4
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	00cb      	lsls	r3, r1, #3
 8002214:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002218:	00c2      	lsls	r2, r0, #3
 800221a:	1de3      	adds	r3, r4, #7
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	ebad 0d03 	sub.w	sp, sp, r3
 8002224:	466b      	mov	r3, sp
 8002226:	3300      	adds	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.pco2", obj->__name);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	4909      	ldr	r1, [pc, #36]	; (8002258 <NexButton_Get_press_font_color_pco2+0x90>)
 8002234:	f00b fe62 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <NexButton_Get_press_font_color_pco2+0x94>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4610      	mov	r0, r2
 8002240:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <NexButton_Get_press_font_color_pco2+0x94>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2164      	movs	r1, #100	; 0x64
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	4798      	blx	r3
 800224c:	4603      	mov	r3, r0
 800224e:	46ad      	mov	sp, r5
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	0800e8e4 	.word	0x0800e8e4
 800225c:	200000a4 	.word	0x200000a4

08002260 <NexButton_Set_press_font_color_pco2>:

bool NexButton_Set_press_font_color_pco2(NexObject_var *obj, uint32_t number)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	466b      	mov	r3, sp
 800226c:	461d      	mov	r5, r3
	char buf[10] = {0};
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fd ffad 	bl	80001e0 <strlen>
 8002286:	4603      	mov	r3, r0
 8002288:	3314      	adds	r3, #20
 800228a:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 800228c:	69fc      	ldr	r4, [r7, #28]
 800228e:	4623      	mov	r3, r4
 8002290:	3b01      	subs	r3, #1
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	4620      	mov	r0, r4
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	00cb      	lsls	r3, r1, #3
 80022a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022a8:	00c2      	lsls	r2, r0, #3
 80022aa:	4620      	mov	r0, r4
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	00cb      	lsls	r3, r1, #3
 80022ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022be:	00c2      	lsls	r2, r0, #3
 80022c0:	1de3      	adds	r3, r4, #7
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	ebad 0d03 	sub.w	sp, sp, r3
 80022ca:	466b      	mov	r3, sp
 80022cc:	3300      	adds	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
	// create pco2
	utoa(number, buf, 10);
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	220a      	movs	r2, #10
 80022d6:	4619      	mov	r1, r3
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f00b ff13 	bl	800e104 <utoa>
	sprintf(cmd,"%s.pco2=%s", obj->__name, buf);
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4911      	ldr	r1, [pc, #68]	; (8002330 <NexButton_Set_press_font_color_pco2+0xd0>)
 80022ea:	f00b fe07 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <NexButton_Set_press_font_color_pco2+0xd4>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4610      	mov	r0, r2
 80022f6:	4798      	blx	r3
	memset(cmd,'\0',len_);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f00b fd3a 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	490a      	ldr	r1, [pc, #40]	; (8002338 <NexButton_Set_press_font_color_pco2+0xd8>)
 800230e:	f00b fdf5 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <NexButton_Set_press_font_color_pco2+0xd4>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4610      	mov	r0, r2
 800231a:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <NexButton_Set_press_font_color_pco2+0xd4>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	4798      	blx	r3
 8002324:	4603      	mov	r3, r0
 8002326:	46ad      	mov	sp, r5
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	0800e8f0 	.word	0x0800e8f0
 8002334:	200000a4 	.word	0x200000a4
 8002338:	0800e8b8 	.word	0x0800e8b8

0800233c <NexButton_Get_place_xcen>:

uint32_t NexButton_Get_place_xcen(NexObject_var *obj, uint32_t *number)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	466b      	mov	r3, sp
 8002348:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ff46 	bl	80001e0 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	f103 040c 	add.w	r4, r3, #12
 800235a:	4623      	mov	r3, r4
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4620      	mov	r0, r4
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	00cb      	lsls	r3, r1, #3
 8002370:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002374:	00c2      	lsls	r2, r0, #3
 8002376:	4620      	mov	r0, r4
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	00cb      	lsls	r3, r1, #3
 8002386:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800238a:	00c2      	lsls	r2, r0, #3
 800238c:	1de3      	adds	r3, r4, #7
 800238e:	08db      	lsrs	r3, r3, #3
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	ebad 0d03 	sub.w	sp, sp, r3
 8002396:	466b      	mov	r3, sp
 8002398:	3300      	adds	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.xcen", obj->__name);
 800239c:	68b8      	ldr	r0, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4909      	ldr	r1, [pc, #36]	; (80023cc <NexButton_Get_place_xcen+0x90>)
 80023a6:	f00b fda9 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <NexButton_Get_place_xcen+0x94>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <NexButton_Get_place_xcen+0x94>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2164      	movs	r1, #100	; 0x64
 80023ba:	6838      	ldr	r0, [r7, #0]
 80023bc:	4798      	blx	r3
 80023be:	4603      	mov	r3, r0
 80023c0:	46ad      	mov	sp, r5
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	0800e8fc 	.word	0x0800e8fc
 80023d0:	200000a4 	.word	0x200000a4

080023d4 <NexButton_Set_place_xcen>:

bool NexButton_Set_place_xcen(NexObject_var *obj, uint32_t number)
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	466b      	mov	r3, sp
 80023e0:	461d      	mov	r5, r3
	char buf[10] = {0};
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd fef3 	bl	80001e0 <strlen>
 80023fa:	4603      	mov	r3, r0
 80023fc:	3314      	adds	r3, #20
 80023fe:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002400:	69fc      	ldr	r4, [r7, #28]
 8002402:	4623      	mov	r3, r4
 8002404:	3b01      	subs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	4620      	mov	r0, r4
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	00cb      	lsls	r3, r1, #3
 8002418:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800241c:	00c2      	lsls	r2, r0, #3
 800241e:	4620      	mov	r0, r4
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	00cb      	lsls	r3, r1, #3
 800242e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002432:	00c2      	lsls	r2, r0, #3
 8002434:	1de3      	adds	r3, r4, #7
 8002436:	08db      	lsrs	r3, r3, #3
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	ebad 0d03 	sub.w	sp, sp, r3
 800243e:	466b      	mov	r3, sp
 8002440:	3300      	adds	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
	// create xcen
	utoa(number, buf, 10);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	220a      	movs	r2, #10
 800244a:	4619      	mov	r1, r3
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f00b fe59 	bl	800e104 <utoa>
	sprintf(cmd, "%s.xcen=%s", obj->__name, buf);
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	4911      	ldr	r1, [pc, #68]	; (80024a4 <NexButton_Set_place_xcen+0xd0>)
 800245e:	f00b fd4d 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <NexButton_Set_place_xcen+0xd4>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4610      	mov	r0, r2
 800246a:	4798      	blx	r3
	memset(cmd, '\0',len_);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f00b fc80 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	490a      	ldr	r1, [pc, #40]	; (80024ac <NexButton_Set_place_xcen+0xd8>)
 8002482:	f00b fd3b 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <NexButton_Set_place_xcen+0xd4>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4610      	mov	r0, r2
 800248e:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <NexButton_Set_place_xcen+0xd4>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2064      	movs	r0, #100	; 0x64
 8002496:	4798      	blx	r3
 8002498:	4603      	mov	r3, r0
 800249a:	46ad      	mov	sp, r5
}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bdb0      	pop	{r4, r5, r7, pc}
 80024a4:	0800e908 	.word	0x0800e908
 80024a8:	200000a4 	.word	0x200000a4
 80024ac:	0800e8b8 	.word	0x0800e8b8

080024b0 <NexButton_Get_place_ycen>:

uint32_t NexButton_Get_place_ycen(NexObject_var *obj, uint32_t *number)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	466b      	mov	r3, sp
 80024bc:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd fe8c 	bl	80001e0 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f103 040c 	add.w	r4, r3, #12
 80024ce:	4623      	mov	r3, r4
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	4620      	mov	r0, r4
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	00cb      	lsls	r3, r1, #3
 80024e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024e8:	00c2      	lsls	r2, r0, #3
 80024ea:	4620      	mov	r0, r4
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	00cb      	lsls	r3, r1, #3
 80024fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024fe:	00c2      	lsls	r2, r0, #3
 8002500:	1de3      	adds	r3, r4, #7
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	ebad 0d03 	sub.w	sp, sp, r3
 800250a:	466b      	mov	r3, sp
 800250c:	3300      	adds	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.ycen", obj->__name);
 8002510:	68b8      	ldr	r0, [r7, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <NexButton_Get_place_ycen+0x90>)
 800251a:	f00b fcef 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <NexButton_Get_place_ycen+0x94>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4610      	mov	r0, r2
 8002526:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <NexButton_Get_place_ycen+0x94>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2164      	movs	r1, #100	; 0x64
 800252e:	6838      	ldr	r0, [r7, #0]
 8002530:	4798      	blx	r3
 8002532:	4603      	mov	r3, r0
 8002534:	46ad      	mov	sp, r5
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bdb0      	pop	{r4, r5, r7, pc}
 800253e:	bf00      	nop
 8002540:	0800e914 	.word	0x0800e914
 8002544:	200000a4 	.word	0x200000a4

08002548 <NexButton_Set_place_ycen>:

bool NexButton_Set_place_ycen(NexObject_var *obj, uint32_t number)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	466b      	mov	r3, sp
 8002554:	461d      	mov	r5, r3
	 char buf[10] = {0};
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	809a      	strh	r2, [r3, #4]
	 size_t len_ = strlen(obj->__name) + 20;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd fe39 	bl	80001e0 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	3314      	adds	r3, #20
 8002572:	61fb      	str	r3, [r7, #28]
	 char cmd[len_];
 8002574:	69fc      	ldr	r4, [r7, #28]
 8002576:	4623      	mov	r3, r4
 8002578:	3b01      	subs	r3, #1
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	4620      	mov	r0, r4
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002590:	00c2      	lsls	r2, r0, #3
 8002592:	4620      	mov	r0, r4
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00cb      	lsls	r3, r1, #3
 80025a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025a6:	00c2      	lsls	r2, r0, #3
 80025a8:	1de3      	adds	r3, r4, #7
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	ebad 0d03 	sub.w	sp, sp, r3
 80025b2:	466b      	mov	r3, sp
 80025b4:	3300      	adds	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
	 //create ycen
	 utoa(number, buf, 10);
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	220a      	movs	r2, #10
 80025be:	4619      	mov	r1, r3
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f00b fd9f 	bl	800e104 <utoa>
	 sprintf(cmd, "%s.ycen=%s", obj->__name,buf);
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	4911      	ldr	r1, [pc, #68]	; (8002618 <NexButton_Set_place_ycen+0xd0>)
 80025d2:	f00b fc93 	bl	800defc <siprintf>
	 NexHardware.sendCommand(cmd);
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <NexButton_Set_place_ycen+0xd4>)
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4610      	mov	r0, r2
 80025de:	4798      	blx	r3
	 memset(cmd, '\0', len_);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00b fbc6 	bl	800dd78 <memset>
	 //create ref
	 sprintf(cmd,"ref %s", obj->__name);
 80025ec:	6978      	ldr	r0, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	461a      	mov	r2, r3
 80025f4:	490a      	ldr	r1, [pc, #40]	; (8002620 <NexButton_Set_place_ycen+0xd8>)
 80025f6:	f00b fc81 	bl	800defc <siprintf>
	 NexHardware.sendCommand(cmd);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <NexButton_Set_place_ycen+0xd4>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4610      	mov	r0, r2
 8002602:	4798      	blx	r3
	 return NexHardware.recvRetCommandFinished(100UL);
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <NexButton_Set_place_ycen+0xd4>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2064      	movs	r0, #100	; 0x64
 800260a:	4798      	blx	r3
 800260c:	4603      	mov	r3, r0
 800260e:	46ad      	mov	sp, r5
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bdb0      	pop	{r4, r5, r7, pc}
 8002618:	0800e920 	.word	0x0800e920
 800261c:	200000a4 	.word	0x200000a4
 8002620:	0800e8b8 	.word	0x0800e8b8

08002624 <NexButton_getFont>:

uint32_t NexButton_getFont(NexObject_var *obj, uint32_t *number)
{
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	466b      	mov	r3, sp
 8002630:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd fdd2 	bl	80001e0 <strlen>
 800263c:	4603      	mov	r3, r0
 800263e:	f103 040c 	add.w	r4, r3, #12
 8002642:	4623      	mov	r3, r4
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4620      	mov	r0, r4
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800265c:	00c2      	lsls	r2, r0, #3
 800265e:	4620      	mov	r0, r4
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	00cb      	lsls	r3, r1, #3
 800266e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002672:	00c2      	lsls	r2, r0, #3
 8002674:	1de3      	adds	r3, r4, #7
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	ebad 0d03 	sub.w	sp, sp, r3
 800267e:	466b      	mov	r3, sp
 8002680:	3300      	adds	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.font", obj->__name);
 8002684:	68b8      	ldr	r0, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	4909      	ldr	r1, [pc, #36]	; (80026b4 <NexButton_getFont+0x90>)
 800268e:	f00b fc35 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <NexButton_getFont+0x94>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4610      	mov	r0, r2
 800269a:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <NexButton_getFont+0x94>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2164      	movs	r1, #100	; 0x64
 80026a2:	6838      	ldr	r0, [r7, #0]
 80026a4:	4798      	blx	r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	46ad      	mov	sp, r5
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	0800e92c 	.word	0x0800e92c
 80026b8:	200000a4 	.word	0x200000a4

080026bc <NexButton_setFont>:

bool NexButton_setFont(NexObject_var *obj, uint32_t number)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	466b      	mov	r3, sp
 80026c8:	461d      	mov	r5, r3
	char buf[10] = {0};
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fd7f 	bl	80001e0 <strlen>
 80026e2:	4603      	mov	r3, r0
 80026e4:	3314      	adds	r3, #20
 80026e6:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 80026e8:	69fc      	ldr	r4, [r7, #28]
 80026ea:	4623      	mov	r3, r4
 80026ec:	3b01      	subs	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002704:	00c2      	lsls	r2, r0, #3
 8002706:	4620      	mov	r0, r4
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	00cb      	lsls	r3, r1, #3
 8002716:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800271a:	00c2      	lsls	r2, r0, #3
 800271c:	1de3      	adds	r3, r4, #7
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	ebad 0d03 	sub.w	sp, sp, r3
 8002726:	466b      	mov	r3, sp
 8002728:	3300      	adds	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
	// create .font
	utoa(number, buf, 10);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	220a      	movs	r2, #10
 8002732:	4619      	mov	r1, r3
 8002734:	6838      	ldr	r0, [r7, #0]
 8002736:	f00b fce5 	bl	800e104 <utoa>
	sprintf(cmd,"%s.font=%s", obj->__name, buf);
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	4911      	ldr	r1, [pc, #68]	; (800278c <NexButton_setFont+0xd0>)
 8002746:	f00b fbd9 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <NexButton_setFont+0xd4>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4610      	mov	r0, r2
 8002752:	4798      	blx	r3
	memset(cmd,'\0', len_);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f00b fb0c 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	490a      	ldr	r1, [pc, #40]	; (8002794 <NexButton_setFont+0xd8>)
 800276a:	f00b fbc7 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <NexButton_setFont+0xd4>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4610      	mov	r0, r2
 8002776:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <NexButton_setFont+0xd4>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	4798      	blx	r3
 8002780:	4603      	mov	r3, r0
 8002782:	46ad      	mov	sp, r5
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	0800e938 	.word	0x0800e938
 8002790:	200000a4 	.word	0x200000a4
 8002794:	0800e8b8 	.word	0x0800e8b8

08002798 <NexButton_Get_background_crop_picc>:

uint32_t NexButton_Get_background_crop_picc(NexObject_var *obj, uint32_t *number)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	466b      	mov	r3, sp
 80027a4:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fd18 	bl	80001e0 <strlen>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f103 040c 	add.w	r4, r3, #12
 80027b6:	4623      	mov	r3, r4
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4620      	mov	r0, r4
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027d0:	00c2      	lsls	r2, r0, #3
 80027d2:	4620      	mov	r0, r4
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	00cb      	lsls	r3, r1, #3
 80027e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027e6:	00c2      	lsls	r2, r0, #3
 80027e8:	1de3      	adds	r3, r4, #7
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	ebad 0d03 	sub.w	sp, sp, r3
 80027f2:	466b      	mov	r3, sp
 80027f4:	3300      	adds	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.picc", obj->__name);
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	4909      	ldr	r1, [pc, #36]	; (8002828 <NexButton_Get_background_crop_picc+0x90>)
 8002802:	f00b fb7b 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <NexButton_Get_background_crop_picc+0x94>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4610      	mov	r0, r2
 800280e:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <NexButton_Get_background_crop_picc+0x94>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	46ad      	mov	sp, r5
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bdb0      	pop	{r4, r5, r7, pc}
 8002826:	bf00      	nop
 8002828:	0800e944 	.word	0x0800e944
 800282c:	200000a4 	.word	0x200000a4

08002830 <NexButton_Set_background_crop_picc>:

bool NexButton_Set_background_crop_picc(NexObject_var *obj, uint32_t number)
{
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	466b      	mov	r3, sp
 800283c:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+20;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fccc 	bl	80001e0 <strlen>
 8002848:	4603      	mov	r3, r0
 800284a:	3314      	adds	r3, #20
 800284c:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 800284e:	69fc      	ldr	r4, [r7, #28]
 8002850:	4623      	mov	r3, r4
 8002852:	3b01      	subs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	4620      	mov	r0, r4
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	00cb      	lsls	r3, r1, #3
 8002866:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800286a:	00c2      	lsls	r2, r0, #3
 800286c:	4620      	mov	r0, r4
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	00cb      	lsls	r3, r1, #3
 800287c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002880:	00c2      	lsls	r2, r0, #3
 8002882:	1de3      	adds	r3, r4, #7
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	ebad 0d03 	sub.w	sp, sp, r3
 800288c:	466b      	mov	r3, sp
 800288e:	3300      	adds	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
    char buf[10] = {0};
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	809a      	strh	r2, [r3, #4]
    // create .picc
    utoa(number, buf, 10);
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	220a      	movs	r2, #10
 80028a6:	4619      	mov	r1, r3
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f00b fc2b 	bl	800e104 <utoa>
    sprintf(cmd,"%s.picc=%s", obj->__name, buf);
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	4911      	ldr	r1, [pc, #68]	; (8002900 <NexButton_Set_background_crop_picc+0xd0>)
 80028ba:	f00b fb1f 	bl	800defc <siprintf>
    NexHardware.sendCommand(cmd);
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <NexButton_Set_background_crop_picc+0xd4>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4610      	mov	r0, r2
 80028c6:	4798      	blx	r3
    memset(cmd,'\0', len_);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00b fa52 	bl	800dd78 <memset>
    // create ref
    sprintf(cmd,"ref %s", obj->__name);
 80028d4:	6978      	ldr	r0, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	490a      	ldr	r1, [pc, #40]	; (8002908 <NexButton_Set_background_crop_picc+0xd8>)
 80028de:	f00b fb0d 	bl	800defc <siprintf>
    NexHardware.sendCommand(cmd);
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <NexButton_Set_background_crop_picc+0xd4>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4610      	mov	r0, r2
 80028ea:	4798      	blx	r3
    return NexHardware.recvRetCommandFinished(100UL);
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <NexButton_Set_background_crop_picc+0xd4>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	4798      	blx	r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	46ad      	mov	sp, r5
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	0800e950 	.word	0x0800e950
 8002904:	200000a4 	.word	0x200000a4
 8002908:	0800e8b8 	.word	0x0800e8b8

0800290c <NexButton_Get_press_background_crop_picc2>:

uint32_t NexButton_Get_press_background_crop_picc2(NexObject_var *obj, uint32_t *number)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	466b      	mov	r3, sp
 8002918:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fc5e 	bl	80001e0 <strlen>
 8002924:	4603      	mov	r3, r0
 8002926:	f103 040c 	add.w	r4, r3, #12
 800292a:	4623      	mov	r3, r4
 800292c:	3b01      	subs	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4620      	mov	r0, r4
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	00cb      	lsls	r3, r1, #3
 8002940:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002944:	00c2      	lsls	r2, r0, #3
 8002946:	4620      	mov	r0, r4
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	00cb      	lsls	r3, r1, #3
 8002956:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800295a:	00c2      	lsls	r2, r0, #3
 800295c:	1de3      	adds	r3, r4, #7
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	ebad 0d03 	sub.w	sp, sp, r3
 8002966:	466b      	mov	r3, sp
 8002968:	3300      	adds	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
	sprintf(cmd, "get %s.picc2", obj->__name);
 800296c:	68b8      	ldr	r0, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	4909      	ldr	r1, [pc, #36]	; (800299c <NexButton_Get_press_background_crop_picc2+0x90>)
 8002976:	f00b fac1 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <NexButton_Get_press_background_crop_picc2+0x94>)
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4610      	mov	r0, r2
 8002982:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <NexButton_Get_press_background_crop_picc2+0x94>)
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	4798      	blx	r3
 800298e:	4603      	mov	r3, r0
 8002990:	46ad      	mov	sp, r5
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bdb0      	pop	{r4, r5, r7, pc}
 800299a:	bf00      	nop
 800299c:	0800e95c 	.word	0x0800e95c
 80029a0:	200000a4 	.word	0x200000a4

080029a4 <NexButton_Set_press_background_crop_picc2>:

bool NexButton_Set_press_background_crop_picc2(NexObject_var *obj, uint32_t number)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	466b      	mov	r3, sp
 80029b0:	461d      	mov	r5, r3
	char buf[10] = {0};
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fc0b 	bl	80001e0 <strlen>
 80029ca:	4603      	mov	r3, r0
 80029cc:	3314      	adds	r3, #20
 80029ce:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 80029d0:	69fc      	ldr	r4, [r7, #28]
 80029d2:	4623      	mov	r3, r4
 80029d4:	3b01      	subs	r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	4620      	mov	r0, r4
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	00cb      	lsls	r3, r1, #3
 80029e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029ec:	00c2      	lsls	r2, r0, #3
 80029ee:	4620      	mov	r0, r4
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	00cb      	lsls	r3, r1, #3
 80029fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002a02:	00c2      	lsls	r2, r0, #3
 8002a04:	1de3      	adds	r3, r4, #7
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a0e:	466b      	mov	r3, sp
 8002a10:	3300      	adds	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
	// create .picc2
	utoa(number, buf, 10);
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	220a      	movs	r2, #10
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f00b fb71 	bl	800e104 <utoa>
	sprintf(cmd, "%s.picc2=%s", obj->__name, buf);
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	4911      	ldr	r1, [pc, #68]	; (8002a74 <NexButton_Set_press_background_crop_picc2+0xd0>)
 8002a2e:	f00b fa65 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4798      	blx	r3
	memset(cmd, '\0', len_);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00b f998 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	490a      	ldr	r1, [pc, #40]	; (8002a7c <NexButton_Set_press_background_crop_picc2+0xd8>)
 8002a52:	f00b fa53 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	4798      	blx	r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	46ad      	mov	sp, r5
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bdb0      	pop	{r4, r5, r7, pc}
 8002a74:	0800e96c 	.word	0x0800e96c
 8002a78:	200000a4 	.word	0x200000a4
 8002a7c:	0800e8b8 	.word	0x0800e8b8

08002a80 <NexButton_Get_background_image_pic>:

uint32_t NexButton_Get_background_image_pic(NexObject_var *obj, uint32_t *number)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	466b      	mov	r3, sp
 8002a8c:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fba4 	bl	80001e0 <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f103 040c 	add.w	r4, r3, #12
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	00cb      	lsls	r3, r1, #3
 8002ab4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ab8:	00c2      	lsls	r2, r0, #3
 8002aba:	4620      	mov	r0, r4
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00cb      	lsls	r3, r1, #3
 8002aca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ace:	00c2      	lsls	r2, r0, #3
 8002ad0:	1de3      	adds	r3, r4, #7
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	ebad 0d03 	sub.w	sp, sp, r3
 8002ada:	466b      	mov	r3, sp
 8002adc:	3300      	adds	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.pic", obj->__name);
 8002ae0:	68b8      	ldr	r0, [r7, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4909      	ldr	r1, [pc, #36]	; (8002b10 <NexButton_Get_background_image_pic+0x90>)
 8002aea:	f00b fa07 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <NexButton_Get_background_image_pic+0x94>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4610      	mov	r0, r2
 8002af6:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <NexButton_Get_background_image_pic+0x94>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2164      	movs	r1, #100	; 0x64
 8002afe:	6838      	ldr	r0, [r7, #0]
 8002b00:	4798      	blx	r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	46ad      	mov	sp, r5
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	0800e978 	.word	0x0800e978
 8002b14:	200000a4 	.word	0x200000a4

08002b18 <NexButton_Set_background_image_pic>:

bool NexButton_Set_background_image_pic(NexObject_var *obj, uint32_t number)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	466b      	mov	r3, sp
 8002b24:	461d      	mov	r5, r3
    char buf[10] = {0};
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	809a      	strh	r2, [r3, #4]
    size_t len_ = strlen(obj->__name)+20;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fb51 	bl	80001e0 <strlen>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	3314      	adds	r3, #20
 8002b42:	61fb      	str	r3, [r7, #28]
    char cmd[len_];
 8002b44:	69fc      	ldr	r4, [r7, #28]
 8002b46:	4623      	mov	r3, r4
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	00cb      	lsls	r3, r1, #3
 8002b5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b60:	00c2      	lsls	r2, r0, #3
 8002b62:	4620      	mov	r0, r4
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00cb      	lsls	r3, r1, #3
 8002b72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b76:	00c2      	lsls	r2, r0, #3
 8002b78:	1de3      	adds	r3, r4, #7
 8002b7a:	08db      	lsrs	r3, r3, #3
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	ebad 0d03 	sub.w	sp, sp, r3
 8002b82:	466b      	mov	r3, sp
 8002b84:	3300      	adds	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
    // create .pic
    utoa(number, buf, 10);
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	220a      	movs	r2, #10
 8002b8e:	4619      	mov	r1, r3
 8002b90:	6838      	ldr	r0, [r7, #0]
 8002b92:	f00b fab7 	bl	800e104 <utoa>
    sprintf(cmd, "%s.pic=%s", obj->__name, buf);
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	4911      	ldr	r1, [pc, #68]	; (8002be8 <NexButton_Set_background_image_pic+0xd0>)
 8002ba2:	f00b f9ab 	bl	800defc <siprintf>
    NexHardware.sendCommand(cmd);
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <NexButton_Set_background_image_pic+0xd4>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
    memset(cmd, '\0', len_);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00b f8de 	bl	800dd78 <memset>
    // create ref
    sprintf(cmd, "ref %s", obj->__name);
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <NexButton_Set_background_image_pic+0xd8>)
 8002bc6:	f00b f999 	bl	800defc <siprintf>
    NexHardware.sendCommand(cmd);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <NexButton_Set_background_image_pic+0xd4>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
    return NexHardware.recvRetCommandFinished(100UL);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <NexButton_Set_background_image_pic+0xd4>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	4798      	blx	r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	46ad      	mov	sp, r5
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdb0      	pop	{r4, r5, r7, pc}
 8002be8:	0800e984 	.word	0x0800e984
 8002bec:	200000a4 	.word	0x200000a4
 8002bf0:	0800e8b8 	.word	0x0800e8b8

08002bf4 <NexButton_Get_press_background_image_pic2>:

uint32_t NexButton_Get_press_background_image_pic2(NexObject_var *obj, uint32_t *number)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	466b      	mov	r3, sp
 8002c00:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd faea 	bl	80001e0 <strlen>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f103 040c 	add.w	r4, r3, #12
 8002c12:	4623      	mov	r3, r4
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	00cb      	lsls	r3, r1, #3
 8002c28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c2c:	00c2      	lsls	r2, r0, #3
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	00cb      	lsls	r3, r1, #3
 8002c3e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c42:	00c2      	lsls	r2, r0, #3
 8002c44:	1de3      	adds	r3, r4, #7
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c4e:	466b      	mov	r3, sp
 8002c50:	3300      	adds	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.pic2", obj->__name);
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4909      	ldr	r1, [pc, #36]	; (8002c84 <NexButton_Get_press_background_image_pic2+0x90>)
 8002c5e:	f00b f94d 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <NexButton_Get_press_background_image_pic2+0x94>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <NexButton_Get_press_background_image_pic2+0x94>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	4798      	blx	r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	46ad      	mov	sp, r5
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bdb0      	pop	{r4, r5, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	0800e990 	.word	0x0800e990
 8002c88:	200000a4 	.word	0x200000a4

08002c8c <NexButton_Set_press_background_image_pic2>:


bool NexButton_Set_press_background_image_pic2(NexObject_var *obj, uint32_t number)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	466b      	mov	r3, sp
 8002c98:	461d      	mov	r5, r3
	char buf[10] = {0};
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fa97 	bl	80001e0 <strlen>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002cb8:	69fc      	ldr	r4, [r7, #28]
 8002cba:	4623      	mov	r3, r4
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	00cb      	lsls	r3, r1, #3
 8002cd0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cd4:	00c2      	lsls	r2, r0, #3
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	00cb      	lsls	r3, r1, #3
 8002ce6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cea:	00c2      	lsls	r2, r0, #3
 8002cec:	1de3      	adds	r3, r4, #7
 8002cee:	08db      	lsrs	r3, r3, #3
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	ebad 0d03 	sub.w	sp, sp, r3
 8002cf6:	466b      	mov	r3, sp
 8002cf8:	3300      	adds	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
	// create .pic2
	utoa(number, buf, 10);
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	220a      	movs	r2, #10
 8002d02:	4619      	mov	r1, r3
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f00b f9fd 	bl	800e104 <utoa>
	sprintf(cmd,"%s.pic2=%s", obj->__name, buf);
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	4911      	ldr	r1, [pc, #68]	; (8002d5c <NexButton_Set_press_background_image_pic2+0xd0>)
 8002d16:	f00b f8f1 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4610      	mov	r0, r2
 8002d22:	4798      	blx	r3
	memset(cmd,'\0',len_);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f00b f824 	bl	800dd78 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	490a      	ldr	r1, [pc, #40]	; (8002d64 <NexButton_Set_press_background_image_pic2+0xd8>)
 8002d3a:	f00b f8df 	bl	800defc <siprintf>
	NexHardware.sendCommand(cmd);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4610      	mov	r0, r2
 8002d46:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2064      	movs	r0, #100	; 0x64
 8002d4e:	4798      	blx	r3
 8002d50:	4603      	mov	r3, r0
 8002d52:	46ad      	mov	sp, r5
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5c:	0800e99c 	.word	0x0800e99c
 8002d60:	200000a4 	.word	0x200000a4
 8002d64:	0800e8b8 	.word	0x0800e8b8

08002d68 <nex_halt>:
		.sendCommand	= 	nex_sendCommand,
		.recvRetCommandFinished = nex_recvRetCommandFinished,
};

void nex_halt(uint32_t t)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	if(NexHardware.delay == NULL)
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <nex_halt+0x28>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <nex_halt+0x18>
		HAL_Delay(t);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f001 fb81 	bl	8004480 <HAL_Delay>
	else
		NexHardware.delay(t);
}
 8002d7e:	e003      	b.n	8002d88 <nex_halt+0x20>
		NexHardware.delay(t);
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <nex_halt+0x28>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200000a4 	.word	0x200000a4

08002d94 <nex_recvRetNumber>:
 * @retval true - success.
 * @retval false - failed.
 *
 */
bool nex_recvRetNumber(uint32_t *number, uint32_t timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	if  ( NexHardware.nex_serial == NULL )
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <nex_recvRetNumber+0x90>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <nex_recvRetNumber+0x16>
		return false;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e037      	b.n	8002e1a <nex_recvRetNumber+0x86>
	uint8_t temp[8] = {0};
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
	if (!number)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <nex_recvRetNumber+0x28>
		return false;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e02e      	b.n	8002e1a <nex_recvRetNumber+0x86>
	NexHardware.nex_serial->setTimeout(timeout);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <nex_recvRetNumber+0x90>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8002dc4:	6838      	ldr	r0, [r7, #0]
 8002dc6:	4798      	blx	r3
	if (sizeof(temp) != NexHardware.nex_serial->readBytes((char *)temp, sizeof(temp)))
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <nex_recvRetNumber+0x90>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8002dd0:	f107 0208 	add.w	r2, r7, #8
 8002dd4:	2108      	movs	r1, #8
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4798      	blx	r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d001      	beq.n	8002de4 <nex_recvRetNumber+0x50>
		return false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e01a      	b.n	8002e1a <nex_recvRetNumber+0x86>

	if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5] == 0xFF && temp[6] == 0xFF && temp[7] == 0xFF)
 8002de4:	7a3b      	ldrb	r3, [r7, #8]
 8002de6:	2b71      	cmp	r3, #113	; 0x71
 8002de8:	d116      	bne.n	8002e18 <nex_recvRetNumber+0x84>
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2bff      	cmp	r3, #255	; 0xff
 8002dee:	d113      	bne.n	8002e18 <nex_recvRetNumber+0x84>
 8002df0:	7bbb      	ldrb	r3, [r7, #14]
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d110      	bne.n	8002e18 <nex_recvRetNumber+0x84>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2bff      	cmp	r3, #255	; 0xff
 8002dfa:	d10d      	bne.n	8002e18 <nex_recvRetNumber+0x84>
	{
		*number = ((uint32_t)temp[4] << 24) | ((uint32_t)temp[3] << 16) | (temp[2] << 8) | (temp[1]);
 8002dfc:	7b3b      	ldrb	r3, [r7, #12]
 8002dfe:	061a      	lsls	r2, r3, #24
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	4313      	orrs	r3, r2
 8002e06:	7aba      	ldrb	r2, [r7, #10]
 8002e08:	0212      	lsls	r2, r2, #8
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	7a7a      	ldrb	r2, [r7, #9]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
		return true;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <nex_recvRetNumber+0x86>
	}
    return false;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200000a4 	.word	0x200000a4

08002e28 <nex_recvRetString>:
 *
 * @return the length of string buffer.
 *
 */
uint16_t nex_recvRetString(char *buffer, uint16_t len, uint32_t timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b098      	sub	sp, #96	; 0x60
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	460b      	mov	r3, r1
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	817b      	strh	r3, [r7, #10]
	if  ( NexHardware.nex_serial == NULL )
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <nex_recvRetString+0x11c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <nex_recvRetString+0x1a>
		return 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e07b      	b.n	8002f3a <nex_recvRetString+0x112>
	if (!buffer || len == 0)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <nex_recvRetString+0x26>
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <nex_recvRetString+0x2a>
		return 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e073      	b.n	8002f3a <nex_recvRetString+0x112>
	uint16_t ret = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool str_start_flag = false;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t cnt_0xff = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	char temp[MAX_BUFF_COUNT];
	uint8_t c = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	long start;

	uint8_t id_tmp = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	start = HAL_GetTick();
 8002e70:	f001 fafa 	bl	8004468 <HAL_GetTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	657b      	str	r3, [r7, #84]	; 0x54
	while (HAL_GetTick() - start <= timeout)
 8002e78:	e03b      	b.n	8002ef2 <nex_recvRetString+0xca>
	{
		while (NexHardware.nex_serial->available())
		{
			c = NexHardware.nex_serial->read();
 8002e7a:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <nex_recvRetString+0x11c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002e82:	4798      	blx	r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			if (str_start_flag)
 8002e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01c      	beq.n	8002ecc <nex_recvRetString+0xa4>
			{
				if (0xFF == c)
 8002e92:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d109      	bne.n	8002eae <nex_recvRetString+0x86>
				{
					cnt_0xff++;
 8002e9a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					if (cnt_0xff >= 3)
 8002ea4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d916      	bls.n	8002eda <nex_recvRetString+0xb2>
					{
						break;
 8002eac:	e01d      	b.n	8002eea <nex_recvRetString+0xc2>
					}
				}
				else
				{
					temp[id_tmp] = (char) c;
 8002eae:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002eb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8002ebc:	f803 2c4c 	strb.w	r2, [r3, #-76]
					id_tmp++;
 8002ec0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002eca:	e006      	b.n	8002eda <nex_recvRetString+0xb2>
//					temp+=1;
//					temp += (char)c;
				}
			}
			else if (NEX_RET_STRING_HEAD == c)
 8002ecc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d102      	bne.n	8002eda <nex_recvRetString+0xb2>
			{
				str_start_flag = true;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (NexHardware.nex_serial->available())
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <nex_recvRetString+0x11c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002ee2:	4798      	blx	r3
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1c7      	bne.n	8002e7a <nex_recvRetString+0x52>
			}
		}

		if (cnt_0xff >= 3)
 8002eea:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d808      	bhi.n	8002f04 <nex_recvRetString+0xdc>
	while (HAL_GetTick() - start <= timeout)
 8002ef2:	f001 fab9 	bl	8004468 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d2eb      	bcs.n	8002eda <nex_recvRetString+0xb2>
 8002f02:	e000      	b.n	8002f06 <nex_recvRetString+0xde>
		{
			break;
 8002f04:	bf00      	nop
		}
	}

	ret = strlen(temp);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f968 	bl	80001e0 <strlen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	ret = ret > len ? len : ret;
 8002f16:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf28      	it	cs
 8002f20:	4613      	movcs	r3, r2
 8002f22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	strncpy(buffer, temp, ret);
 8002f26:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f00b f803 	bl	800df3c <strncpy>
	return ret;
 8002f36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3760      	adds	r7, #96	; 0x60
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200000a4 	.word	0x200000a4

08002f48 <nex_sendCommand>:
 * Send command to Nextion.
 *
 * @param cmd - the string of command.
 */
void nex_sendCommand(const char* cmd)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
//	if  ( NexHardware.nex_serial == NULL )
//		return;
	while (NexHardware.nex_serial->available())
 8002f50:	e004      	b.n	8002f5c <nex_sendCommand+0x14>
	{
		NexHardware.nex_serial->read();
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <nex_sendCommand+0x70>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002f5a:	4798      	blx	r3
	while (NexHardware.nex_serial->available())
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <nex_sendCommand+0x70>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002f64:	4798      	blx	r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f2      	bne.n	8002f52 <nex_sendCommand+0xa>
	}
	NexHardware.nex_serial->puts(cmd, strlen(cmd));
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <nex_sendCommand+0x70>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8d3 423c 	ldr.w	r4, [r3, #572]	; 0x23c
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd f933 	bl	80001e0 <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	47a0      	blx	r4
	USBSerial.print("%s\r\n",cmd);
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <nex_sendCommand+0x74>)
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <nex_sendCommand+0x78>)
 8002f8a:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <nex_sendCommand+0x70>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002f94:	20ff      	movs	r0, #255	; 0xff
 8002f96:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <nex_sendCommand+0x70>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002fa0:	20ff      	movs	r0, #255	; 0xff
 8002fa2:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <nex_sendCommand+0x70>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002fac:	20ff      	movs	r0, #255	; 0xff
 8002fae:	4798      	blx	r3
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}
 8002fb8:	200000a4 	.word	0x200000a4
 8002fbc:	2000034c 	.word	0x2000034c
 8002fc0:	0800e9a8 	.word	0x0800e9a8

08002fc4 <nex_recvRetCommandFinished>:
 * @retval true - success.
 * @retval false - failed.
 *
 */
bool nex_recvRetCommandFinished(uint32_t timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[4] = {0};
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]

	NexHardware.nex_serial->setTimeout(timeout);
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <nex_recvRetCommandFinished+0x6c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
	if (4 != NexHardware.nex_serial->readBytes(temp, sizeof(temp)))
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <nex_recvRetCommandFinished+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8002fe8:	f107 0208 	add.w	r2, r7, #8
 8002fec:	2104      	movs	r1, #4
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4798      	blx	r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d001      	beq.n	8002ffc <nex_recvRetCommandFinished+0x38>
		return false;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e015      	b.n	8003028 <nex_recvRetCommandFinished+0x64>
	USBSerial.puts(temp, sizeof(temp));
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <nex_recvRetCommandFinished+0x70>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f107 0208 	add.w	r2, r7, #8
 8003004:	2104      	movs	r1, #4
 8003006:	4610      	mov	r0, r2
 8003008:	4798      	blx	r3
	if (temp[0] == NEX_RET_CMD_FINISHED	&& temp[1] == 0xFF && temp[2] == 0xFF && temp[3] == 0xFF)
 800300a:	7a3b      	ldrb	r3, [r7, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10a      	bne.n	8003026 <nex_recvRetCommandFinished+0x62>
 8003010:	7a7b      	ldrb	r3, [r7, #9]
 8003012:	2bff      	cmp	r3, #255	; 0xff
 8003014:	d107      	bne.n	8003026 <nex_recvRetCommandFinished+0x62>
 8003016:	7abb      	ldrb	r3, [r7, #10]
 8003018:	2bff      	cmp	r3, #255	; 0xff
 800301a:	d104      	bne.n	8003026 <nex_recvRetCommandFinished+0x62>
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d101      	bne.n	8003026 <nex_recvRetCommandFinished+0x62>
		return true;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <nex_recvRetCommandFinished+0x64>
	return false;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200000a4 	.word	0x200000a4
 8003034:	2000034c 	.word	0x2000034c

08003038 <nex_HWInit>:

bool nex_HWInit(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
    bool ret1 = false;
 800303e:	2300      	movs	r3, #0
 8003040:	71fb      	strb	r3, [r7, #7]
    bool ret2 = false;
 8003042:	2300      	movs	r3, #0
 8003044:	71bb      	strb	r3, [r7, #6]
    nex_sendCommand("");
 8003046:	4811      	ldr	r0, [pc, #68]	; (800308c <nex_HWInit+0x54>)
 8003048:	f7ff ff7e 	bl	8002f48 <nex_sendCommand>
    nex_sendCommand("bkcmd=1");
 800304c:	4810      	ldr	r0, [pc, #64]	; (8003090 <nex_HWInit+0x58>)
 800304e:	f7ff ff7b 	bl	8002f48 <nex_sendCommand>
    ret1 = nex_recvRetCommandFinished(100UL);
 8003052:	2064      	movs	r0, #100	; 0x64
 8003054:	f7ff ffb6 	bl	8002fc4 <nex_recvRetCommandFinished>
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
    nex_sendCommand("page 0");
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <nex_HWInit+0x5c>)
 800305e:	f7ff ff73 	bl	8002f48 <nex_sendCommand>
    ret2 = nex_recvRetCommandFinished(100UL);
 8003062:	2064      	movs	r0, #100	; 0x64
 8003064:	f7ff ffae 	bl	8002fc4 <nex_recvRetCommandFinished>
 8003068:	4603      	mov	r3, r0
 800306a:	71bb      	strb	r3, [r7, #6]
    return ret1 && ret2;
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <nex_HWInit+0x44>
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <nex_HWInit+0x44>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <nex_HWInit+0x46>
 800307c:	2300      	movs	r3, #0
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	0800e9b0 	.word	0x0800e9b0
 8003090:	0800e9b4 	.word	0x0800e9b4
 8003094:	0800e9bc 	.word	0x0800e9bc

08003098 <nex_HWLoop>:


void nex_HWLoop(NexObject_var *nex_listen_list[])
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	static uint8_t __buffer[10];

	    uint16_t i;
	    uint8_t c;

	    while (NexHardware.nex_serial->available() > 0)
 80030a0:	e052      	b.n	8003148 <nex_HWLoop+0xb0>
	    {
	    	nex_halt(10);
 80030a2:	200a      	movs	r0, #10
 80030a4:	f7ff fe60 	bl	8002d68 <nex_halt>
	        c = NexHardware.nex_serial->read();
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <nex_HWLoop+0xcc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80030b0:	4798      	blx	r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	737b      	strb	r3, [r7, #13]
	        USBSerial.print("%02X",c);
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <nex_HWLoop+0xd0>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	7b7a      	ldrb	r2, [r7, #13]
 80030bc:	4611      	mov	r1, r2
 80030be:	482b      	ldr	r0, [pc, #172]	; (800316c <nex_HWLoop+0xd4>)
 80030c0:	4798      	blx	r3
	        if (NEX_RET_EVENT_TOUCH_HEAD == c)
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	2b65      	cmp	r3, #101	; 0x65
 80030c6:	d13f      	bne.n	8003148 <nex_HWLoop+0xb0>
	        {
	            if (NexHardware.nex_serial->available() >= 6)
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <nex_HWLoop+0xcc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80030d0:	4798      	blx	r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	dd37      	ble.n	8003148 <nex_HWLoop+0xb0>
	            {
	                __buffer[0] = c;
 80030d8:	4a25      	ldr	r2, [pc, #148]	; (8003170 <nex_HWLoop+0xd8>)
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	7013      	strb	r3, [r2, #0]
	                for (i = 1; i < 7; i++)
 80030de:	2301      	movs	r3, #1
 80030e0:	81fb      	strh	r3, [r7, #14]
 80030e2:	e014      	b.n	800310e <nex_HWLoop+0x76>
	                {
	                    __buffer[i] = NexHardware.nex_serial->read();
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <nex_HWLoop+0xcc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80030ec:	4798      	blx	r3
 80030ee:	4602      	mov	r2, r0
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	b2d1      	uxtb	r1, r2
 80030f4:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <nex_HWLoop+0xd8>)
 80030f6:	54d1      	strb	r1, [r2, r3]
	                    USBSerial.print("%02X",__buffer[i]);
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <nex_HWLoop+0xd0>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	89fa      	ldrh	r2, [r7, #14]
 80030fe:	491c      	ldr	r1, [pc, #112]	; (8003170 <nex_HWLoop+0xd8>)
 8003100:	5c8a      	ldrb	r2, [r1, r2]
 8003102:	4611      	mov	r1, r2
 8003104:	4819      	ldr	r0, [pc, #100]	; (800316c <nex_HWLoop+0xd4>)
 8003106:	4798      	blx	r3
	                for (i = 1; i < 7; i++)
 8003108:	89fb      	ldrh	r3, [r7, #14]
 800310a:	3301      	adds	r3, #1
 800310c:	81fb      	strh	r3, [r7, #14]
 800310e:	89fb      	ldrh	r3, [r7, #14]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d9e7      	bls.n	80030e4 <nex_HWLoop+0x4c>
	                }
	                __buffer[i] = 0x00;
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <nex_HWLoop+0xd8>)
 8003118:	2100      	movs	r1, #0
 800311a:	54d1      	strb	r1, [r2, r3]

	                if (0xFF == __buffer[4] && 0xFF == __buffer[5] && 0xFF == __buffer[6])
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <nex_HWLoop+0xd8>)
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	2bff      	cmp	r3, #255	; 0xff
 8003122:	d111      	bne.n	8003148 <nex_HWLoop+0xb0>
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <nex_HWLoop+0xd8>)
 8003126:	795b      	ldrb	r3, [r3, #5]
 8003128:	2bff      	cmp	r3, #255	; 0xff
 800312a:	d10d      	bne.n	8003148 <nex_HWLoop+0xb0>
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <nex_HWLoop+0xd8>)
 800312e:	799b      	ldrb	r3, [r3, #6]
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d109      	bne.n	8003148 <nex_HWLoop+0xb0>
	                {
	                	NexObject.iterate(nex_listen_list, __buffer[1], __buffer[2], (int32_t)__buffer[3]);
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <nex_HWLoop+0xdc>)
 8003136:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <nex_HWLoop+0xd8>)
 800313a:	7859      	ldrb	r1, [r3, #1]
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <nex_HWLoop+0xd8>)
 800313e:	789a      	ldrb	r2, [r3, #2]
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <nex_HWLoop+0xd8>)
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	47a0      	blx	r4
	    while (NexHardware.nex_serial->available() > 0)
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <nex_HWLoop+0xcc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003150:	4798      	blx	r3
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	dca4      	bgt.n	80030a2 <nex_HWLoop+0xa>
//				if (0xFF == __buffer[3] && 0xFF == __buffer[4] && 0xFF == __buffer[5])
//
//			};
//		};
//    };
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}
 8003162:	bf00      	nop
 8003164:	200000a4 	.word	0x200000a4
 8003168:	2000034c 	.word	0x2000034c
 800316c:	0800e9c4 	.word	0x0800e9c4
 8003170:	200005a0 	.word	0x200005a0
 8003174:	200000c4 	.word	0x200000c4

08003178 <nex_createObject>:
	void *__cbpop_ptr;
}NexObject_var;


static __inline__ void nex_createObject (NexObject_var * this, uint8_t pid, uint8_t cid, const char *name)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	72fb      	strb	r3, [r7, #11]
 8003186:	4613      	mov	r3, r2
 8003188:	72bb      	strb	r3, [r7, #10]
    this->__pid 	= pid;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	7afa      	ldrb	r2, [r7, #11]
 800318e:	701a      	strb	r2, [r3, #0]
    this->__cid 	= cid;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	7aba      	ldrb	r2, [r7, #10]
 8003194:	705a      	strb	r2, [r3, #1]
    this->__name 	= name;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	605a      	str	r2, [r3, #4]
    this->__cb_pop 	= NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
    this->__cb_push = NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
    this->__cbpop_ptr  = NULL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	615a      	str	r2, [r3, #20]
    this->__cbpush_ptr = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <nex_getObjPid>:

static __inline__ uint8_t nex_getObjPid(NexObject_var this)
{
 80031c0:	b084      	sub	sp, #16
 80031c2:	b490      	push	{r4, r7}
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	f107 0408 	add.w	r4, r7, #8
 80031ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__pid;
 80031ce:	7a3b      	ldrb	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc90      	pop	{r4, r7}
 80031d6:	b004      	add	sp, #16
 80031d8:	4770      	bx	lr

080031da <nex_getObjCid>:

static __inline__ uint8_t nex_getObjCid(NexObject_var this)
{
 80031da:	b084      	sub	sp, #16
 80031dc:	b490      	push	{r4, r7}
 80031de:	af00      	add	r7, sp, #0
 80031e0:	f107 0408 	add.w	r4, r7, #8
 80031e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__cid;
 80031e8:	7a7b      	ldrb	r3, [r7, #9]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc90      	pop	{r4, r7}
 80031f0:	b004      	add	sp, #16
 80031f2:	4770      	bx	lr

080031f4 <nex_getObjName>:

static __inline__ const char* nex_getObjName(NexObject_var this)
{
 80031f4:	b084      	sub	sp, #16
 80031f6:	b490      	push	{r4, r7}
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	f107 0408 	add.w	r4, r7, #8
 80031fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__name;
 8003202:	68fb      	ldr	r3, [r7, #12]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bc90      	pop	{r4, r7}
 800320a:	b004      	add	sp, #16
 800320c:	4770      	bx	lr

0800320e <nex_attachPush>:
#include "NexObject.h"



void nex_attachPush(NexObject_var * this, NexTouchEventCb push, void *ptr)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
    this->__cb_push = push;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
    this->__cbpush_ptr = ptr;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	60da      	str	r2, [r3, #12]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <nex_detachPush>:

void nex_detachPush(NexObject_var * this)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
    this->__cb_push = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
    this->__cbpush_ptr = NULL;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <nex_attachPop>:

void nex_attachPop(NexObject_var * this, NexTouchEventCb pop, void *ptr)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
    this->__cb_pop = pop;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	611a      	str	r2, [r3, #16]
    this->__cbpop_ptr = ptr;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	615a      	str	r2, [r3, #20]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <nex_detachPop>:

void nex_detachPop(NexObject_var * this)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
    this->__cb_pop = NULL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
    this->__cbpop_ptr = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <nex_push>:

void nex_push(NexObject_var * this)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
    if (this->__cb_push != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <nex_push+0x1c>
    {
        this->__cb_push(this->__cbpush_ptr);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	4610      	mov	r0, r2
 80032b0:	4798      	blx	r3
    }
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <nex_pop>:

void nex_pop(NexObject_var * this)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
    if (this->__cb_pop != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <nex_pop+0x1c>
    {
    	this->__cb_pop(this->__cbpop_ptr);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6952      	ldr	r2, [r2, #20]
 80032d2:	4610      	mov	r0, r2
 80032d4:	4798      	blx	r3
    }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <nex_iterate>:

#include "SerialUSB.h"

void nex_iterate(NexObject_var **list, uint8_t pid, uint8_t cid, int32_t event)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	72fb      	strb	r3, [r7, #11]
 80032ee:	4613      	mov	r3, r2
 80032f0:	72bb      	strb	r3, [r7, #10]
	NexObject_var *e = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
    uint16_t i = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	82fb      	strh	r3, [r7, #22]

    USBSerial.print("pid: %d \t cid: %d \t event: %d", pid, cid, event);
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <nex_iterate+0xa0>)
 80032fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80032fe:	7af9      	ldrb	r1, [r7, #11]
 8003300:	7aba      	ldrb	r2, [r7, #10]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	481f      	ldr	r0, [pc, #124]	; (8003384 <nex_iterate+0xa4>)
 8003306:	47a0      	blx	r4
    if (list==NULL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d104      	bne.n	8003318 <nex_iterate+0x38>
    {
    	USBSerial.print("list kosong");
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <nex_iterate+0xa0>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	481d      	ldr	r0, [pc, #116]	; (8003388 <nex_iterate+0xa8>)
 8003314:	4798      	blx	r3
        return;
 8003316:	e02f      	b.n	8003378 <nex_iterate+0x98>
    }

    for(i = 0; (e = list[i]) != NULL; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	82fb      	strh	r3, [r7, #22]
 800331c:	e021      	b.n	8003362 <nex_iterate+0x82>
    {
        if (e->__pid == pid && e->__cid == cid)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	7afa      	ldrb	r2, [r7, #11]
 8003324:	429a      	cmp	r2, r3
 8003326:	d119      	bne.n	800335c <nex_iterate+0x7c>
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	7aba      	ldrb	r2, [r7, #10]
 800332e:	429a      	cmp	r2, r3
 8003330:	d114      	bne.n	800335c <nex_iterate+0x7c>
        {
        	USBSerial.print("name: %s\r\n",e->__name);
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <nex_iterate+0xa0>)
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	6852      	ldr	r2, [r2, #4]
 800333a:	4611      	mov	r1, r2
 800333c:	4813      	ldr	r0, [pc, #76]	; (800338c <nex_iterate+0xac>)
 800333e:	4798      	blx	r3
            if (NEX_EVENT_PUSH == event)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d103      	bne.n	800334e <nex_iterate+0x6e>
            {
            	nex_push(e);
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f7ff ffa5 	bl	8003296 <nex_push>
            {
            	nex_pop(e);
//                e->pop();
            }

            break;
 800334c:	e013      	b.n	8003376 <nex_iterate+0x96>
            else if (NEX_EVENT_POP == event)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d110      	bne.n	8003376 <nex_iterate+0x96>
            	nex_pop(e);
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f7ff ffb0 	bl	80032ba <nex_pop>
            break;
 800335a:	e00c      	b.n	8003376 <nex_iterate+0x96>
    for(i = 0; (e = list[i]) != NULL; i++)
 800335c:	8afb      	ldrh	r3, [r7, #22]
 800335e:	3301      	adds	r3, #1
 8003360:	82fb      	strh	r3, [r7, #22]
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1d4      	bne.n	800331e <nex_iterate+0x3e>
 8003374:	e000      	b.n	8003378 <nex_iterate+0x98>
            break;
 8003376:	bf00      	nop
        }
    }
}
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	2000034c 	.word	0x2000034c
 8003384:	0800e9cc 	.word	0x0800e9cc
 8003388:	0800e9ec 	.word	0x0800e9ec
 800338c:	0800e9f8 	.word	0x0800e9f8

08003390 <Serial1_begin>:
//===================================
//===================================
#define  begin() begin(9600)

static void Serial1_begin(uint32_t baudrate)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  HALSerial__construct (&Serial1.serialParam, &huart1);
 8003398:	4916      	ldr	r1, [pc, #88]	; (80033f4 <Serial1_begin+0x64>)
 800339a:	4817      	ldr	r0, [pc, #92]	; (80033f8 <Serial1_begin+0x68>)
 800339c:	f000 f940 	bl	8003620 <HALSerial__construct>
  Serial1.serialParam._written = FALSE;
 80033a0:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <Serial1_begin+0x68>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	741a      	strb	r2, [r3, #16]
//  HAL_UART_Init(this->huart);
  while(HAL_UART_Receive_IT(Serial1.serialParam.huart/*&huart1*/, Serial1.serialParam._rx_buffer + Serial1.serialParam._rx_buffer_head, 1) == HAL_BUSY);
 80033a6:	bf00      	nop
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <Serial1_begin+0x68>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <Serial1_begin+0x68>)
 80033ae:	7c52      	ldrb	r2, [r2, #17]
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	4611      	mov	r1, r2
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <Serial1_begin+0x6c>)
 80033b6:	4411      	add	r1, r2
 80033b8:	2201      	movs	r2, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 f8cd 	bl	800855a <HAL_UART_Receive_IT>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d0f0      	beq.n	80033a8 <Serial1_begin+0x18>

  Serial1.serialParam.huart->Init.BaudRate = baudrate;
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <Serial1_begin+0x68>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]
  HALSerial_begin(&Serial1.serialParam);
 80033ce:	480a      	ldr	r0, [pc, #40]	; (80033f8 <Serial1_begin+0x68>)
 80033d0:	f000 f9ae 	bl	8003730 <HALSerial_begin>
  HAL_UART_Receive_IT(&Serial1.serialParam.huart, Serial1.serialParam._rx_buffer, HALSERIAL_RX_BUFFER_SIZE);
 80033d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d8:	4908      	ldr	r1, [pc, #32]	; (80033fc <Serial1_begin+0x6c>)
 80033da:	4809      	ldr	r0, [pc, #36]	; (8003400 <Serial1_begin+0x70>)
 80033dc:	f005 f8bd 	bl	800855a <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&Serial1.serialParam.huart, Serial1.serialParam._tx_buffer, HALSERIAL_TX_BUFFER_SIZE);
 80033e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <Serial1_begin+0x74>)
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <Serial1_begin+0x70>)
 80033e8:	f005 f872 	bl	80084d0 <HAL_UART_Transmit_IT>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000830 	.word	0x20000830
 80033f8:	200000f0 	.word	0x200000f0
 80033fc:	20000110 	.word	0x20000110
 8003400:	200000fc 	.word	0x200000fc
 8003404:	20000210 	.word	0x20000210

08003408 <Serial1_setTimeout>:

static void Serial1_setTimeout(uint32_t timeout)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  Serial1.serialParam._timeout = timeout;
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <Serial1_setTimeout+0x1c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6053      	str	r3, [r2, #4]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	200000f0 	.word	0x200000f0

08003428 <Serial1_end>:

static void Serial1_end(void)	 			{HALSerial_end(&Serial1.serialParam);}
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <Serial1_end+0x10>)
 800342e:	f000 f9a0 	bl	8003772 <HALSerial_end>
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200000f0 	.word	0x200000f0

0800343c <Serial1_available>:
static int Serial1_available(void)			{return HALSerial_available(&Serial1.serialParam);}
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <Serial1_available+0x10>)
 8003442:	f000 f9a6 	bl	8003792 <HALSerial_available>
 8003446:	4603      	mov	r3, r0
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200000f0 	.word	0x200000f0

08003450 <Serial1_peek>:
static int Serial1_peek(void)				{return HALSerial_peek(&Serial1.serialParam);}
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <Serial1_peek+0x10>)
 8003456:	f000 f9b0 	bl	80037ba <HALSerial_peek>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200000f0 	.word	0x200000f0

08003464 <Serial1_availableForWrite>:
static int Serial1_availableForWrite(void)	{return HALSerial_availableForWrite(&Serial1.serialParam);}
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <Serial1_availableForWrite+0x10>)
 800346a:	f000 f9e9 	bl	8003840 <HALSerial_availableForWrite>
 800346e:	4603      	mov	r3, r0
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200000f0 	.word	0x200000f0

08003478 <Serial1_flush>:
static void Serial1_flush(void)				{HALSerial_flush(&Serial1.serialParam);}
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <Serial1_flush+0x10>)
 800347e:	f000 f9fd 	bl	800387c <HALSerial_flush>
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200000f0 	.word	0x200000f0

0800348c <Serial1_write>:
static size_t Serial1_write(uint8_t c)		{return HALSerial_writeByte(&Serial1.serialParam, c);}
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	4619      	mov	r1, r3
 800349a:	4804      	ldr	r0, [pc, #16]	; (80034ac <Serial1_write+0x20>)
 800349c:	f000 fa15 	bl	80038ca <HALSerial_writeByte>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200000f0 	.word	0x200000f0

080034b0 <Serial1_puts>:
static size_t Serial1_puts(const uint8_t *str, size_t size) {return HALSerial_write(&Serial1.serialParam, str, size);}
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4804      	ldr	r0, [pc, #16]	; (80034d0 <Serial1_puts+0x20>)
 80034c0:	f000 fa4f 	bl	8003962 <HALSerial_write>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200000f0 	.word	0x200000f0

080034d4 <Serial1_read>:
static int Serial1_read(void)				{return HALSerial_read(&Serial1.serialParam);}
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <Serial1_read+0x10>)
 80034da:	f000 f98b 	bl	80037f4 <HALSerial_read>
 80034de:	4603      	mov	r3, r0
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200000f0 	.word	0x200000f0

080034e8 <Serial1_readUntil>:
static size_t Serial1_readUntil(char terminator, char *buffer, size_t length) {return HALSerial_readBytesUntil(&Serial1.serialParam,terminator,buffer, length);}
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	7bf9      	ldrb	r1, [r7, #15]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <Serial1_readUntil+0x24>)
 80034fe:	f000 fabe 	bl	8003a7e <HALSerial_readBytesUntil>
 8003502:	4603      	mov	r3, r0
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200000f0 	.word	0x200000f0

08003510 <Serial1_readTimeout>:
static int Serial1_readTimeout(void)		{return HALSerial_timedRead(&Serial1.serialParam);}
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <Serial1_readTimeout+0x10>)
 8003516:	f000 fa66 	bl	80039e6 <HALSerial_timedRead>
 800351a:	4603      	mov	r3, r0
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200000f0 	.word	0x200000f0

08003524 <Serial1_gets>:
static size_t Serial1_gets(char* buffer, size_t len) {return HALSerial_readBytes(&Serial1.serialParam, buffer, len);}
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <Serial1_gets+0x20>)
 8003534:	f000 fa7f 	bl	8003a36 <HALSerial_readBytes>
 8003538:	4603      	mov	r3, r0
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200000f0 	.word	0x200000f0

08003548 <Serial1_readbytes>:

static size_t Serial1_readbytes(char* buffer, size_t len)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	return Serial1_readUntil(NULL,buffer, len);
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	2000      	movs	r0, #0
 8003558:	f7ff ffc6 	bl	80034e8 <Serial1_readUntil>
 800355c:	4603      	mov	r3, r0
//	return HALSerial_readBytes(&Serial1.serialParam, buffer, len);
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <Serial1_print>:

char serial_buffer_print[256];
static size_t Serial1_print(const char fmt[], ...)
{
 8003568:	b40f      	push	{r0, r1, r2, r3}
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	603b      	str	r3, [r7, #0]
  vsnprintf(serial_buffer_print, sizeof(serial_buffer_print), fmt, args);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357e:	480a      	ldr	r0, [pc, #40]	; (80035a8 <Serial1_print+0x40>)
 8003580:	f00a fdee 	bl	800e160 <vsniprintf>
  va_end(args);
  size_t ret = Serial1_puts(serial_buffer_print, strlen(serial_buffer_print));
 8003584:	4808      	ldr	r0, [pc, #32]	; (80035a8 <Serial1_print+0x40>)
 8003586:	f7fc fe2b 	bl	80001e0 <strlen>
 800358a:	4603      	mov	r3, r0
 800358c:	4619      	mov	r1, r3
 800358e:	4806      	ldr	r0, [pc, #24]	; (80035a8 <Serial1_print+0x40>)
 8003590:	f7ff ff8e 	bl	80034b0 <Serial1_puts>
 8003594:	6078      	str	r0, [r7, #4]
  return ret;
 8003596:	687b      	ldr	r3, [r7, #4]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a2:	b004      	add	sp, #16
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000920 	.word	0x20000920

080035ac <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	if( huart != NULL )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00f      	beq.n	80035da <HAL_UART_RxCpltCallback+0x2e>
	{
		if (huart->Instance == USART1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_UART_RxCpltCallback+0x38>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_UART_RxCpltCallback+0x1e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 80035c4:	4808      	ldr	r0, [pc, #32]	; (80035e8 <HAL_UART_RxCpltCallback+0x3c>)
 80035c6:	f000 f846 	bl	8003656 <HALSerial__rx_complete_irq>
		if (huart->Instance == USART2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_UART_RxCpltCallback+0x40>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d102      	bne.n	80035da <HAL_UART_RxCpltCallback+0x2e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 80035d4:	4804      	ldr	r0, [pc, #16]	; (80035e8 <HAL_UART_RxCpltCallback+0x3c>)
 80035d6:	f000 f83e 	bl	8003656 <HALSerial__rx_complete_irq>
	}

}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40011000 	.word	0x40011000
 80035e8:	200000f0 	.word	0x200000f0
 80035ec:	40004400 	.word	0x40004400

080035f0 <HAL_UART_TxCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	if ( huart == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_UART_TxCpltCallback+0x20>
		return;
  if (huart->Instance == USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_UART_TxCpltCallback+0x28>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d104      	bne.n	8003612 <HAL_UART_TxCpltCallback+0x22>
	HALSerial__tx_complete_irq(&Serial1.serialParam);
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <HAL_UART_TxCpltCallback+0x2c>)
 800360a:	f000 f84f 	bl	80036ac <HALSerial__tx_complete_irq>
 800360e:	e000      	b.n	8003612 <HAL_UART_TxCpltCallback+0x22>
		return;
 8003610:	bf00      	nop
}
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40011000 	.word	0x40011000
 800361c:	200000f0 	.word	0x200000f0

08003620 <HALSerial__construct>:


void HALSerial__construct(HALSerial *this, UART_HandleTypeDef *huart_)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  Stream___construct((Stream *)this);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa5c 	bl	8003ae8 <Stream___construct>
  this->_rx_buffer_head = 0;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	745a      	strb	r2, [r3, #17]
  this->_rx_buffer_tail = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	749a      	strb	r2, [r3, #18]
  this->_tx_buffer_head = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	74da      	strb	r2, [r3, #19]
  this->_tx_buffer_tail = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	751a      	strb	r2, [r3, #20]
  this-> huart = huart_;//&huart1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	60da      	str	r2, [r3, #12]
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HALSerial__rx_complete_irq>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

static void HALSerial__rx_complete_irq(HALSerial *this)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  hal_rx_buffer_index_t i = ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->huart->pRxBuffPtr - this->_rx_buffer)) % HALSERIAL_RX_BUFFER_SIZE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3320      	adds	r3, #32
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	73fb      	strb	r3, [r7, #15]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != this->_rx_buffer_tail)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7c9b      	ldrb	r3, [r3, #18]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	429a      	cmp	r2, r3
 800367a:	d002      	beq.n	8003682 <HALSerial__rx_complete_irq+0x2c>
    this->_rx_buffer_head = i;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	745a      	strb	r2, [r3, #17]
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8003682:	bf00      	nop
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68d8      	ldr	r0, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3320      	adds	r3, #32
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	7c52      	ldrb	r2, [r2, #17]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4413      	add	r3, r2
 8003694:	2201      	movs	r2, #1
 8003696:	4619      	mov	r1, r3
 8003698:	f004 ff5f 	bl	800855a <HAL_UART_Receive_IT>
 800369c:	4603      	mov	r3, r0
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d0f0      	beq.n	8003684 <HALSerial__rx_complete_irq+0x2e>
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HALSerial__tx_complete_irq>:

static void HALSerial__tx_complete_irq(HALSerial *this) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  this->_tx_buffer_tail = ((unsigned int)(HALSERIAL_TX_BUFFER_SIZE + this->huart->pTxBuffPtr - this->_tx_buffer)) % HALSERIAL_TX_BUFFER_SIZE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	751a      	strb	r2, [r3, #20]

  uint16_t size;
  if (this->_tx_buffer_head < this->_tx_buffer_tail)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7cdb      	ldrb	r3, [r3, #19]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7d1b      	ldrb	r3, [r3, #20]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	429a      	cmp	r2, r3
 80036da:	d207      	bcs.n	80036ec <HALSerial__tx_complete_irq+0x40>
    size = HALSERIAL_TX_BUFFER_SIZE - this->_tx_buffer_tail;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7d1b      	ldrb	r3, [r3, #20]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036e8:	81fb      	strh	r3, [r7, #14]
 80036ea:	e009      	b.n	8003700 <HALSerial__tx_complete_irq+0x54>
  else
    size = this->_tx_buffer_head - this->_tx_buffer_tail;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7cdb      	ldrb	r3, [r3, #19]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7d1b      	ldrb	r3, [r3, #20]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	81fb      	strh	r3, [r7, #14]

  if (size > 0)
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HALSerial__tx_complete_irq+0x7c>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, size) == HAL_BUSY);
 8003706:	bf00      	nop
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68d8      	ldr	r0, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	7d12      	ldrb	r2, [r2, #20]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	4413      	add	r3, r2
 800371a:	89fa      	ldrh	r2, [r7, #14]
 800371c:	4619      	mov	r1, r3
 800371e:	f004 fed7 	bl	80084d0 <HAL_UART_Transmit_IT>
 8003722:	4603      	mov	r3, r0
 8003724:	2b02      	cmp	r3, #2
 8003726:	d0ef      	beq.n	8003708 <HALSerial__tx_complete_irq+0x5c>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HALSerial_begin>:

// Public Methods //////////////////////////////////////////////////////////////

void HALSerial_begin(HALSerial *this)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  this->_written = FALSE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	741a      	strb	r2, [r3, #16]
  HAL_UART_Init(this->huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fe48 	bl	80083d8 <HAL_UART_Init>
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8003748:	bf00      	nop
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68d8      	ldr	r0, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3320      	adds	r3, #32
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	7c52      	ldrb	r2, [r2, #17]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4413      	add	r3, r2
 800375a:	2201      	movs	r2, #1
 800375c:	4619      	mov	r1, r3
 800375e:	f004 fefc 	bl	800855a <HAL_UART_Receive_IT>
 8003762:	4603      	mov	r3, r0
 8003764:	2b02      	cmp	r3, #2
 8003766:	d0f0      	beq.n	800374a <HALSerial_begin+0x1a>
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HALSerial_end>:

void HALSerial_end(HALSerial *this)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  // wait for transmission of outgoing data
  HALSerial_flush(this);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f87e 	bl	800387c <HALSerial_flush>

  HAL_UART_DeInit(this->huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fe74 	bl	8008472 <HAL_UART_DeInit>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HALSerial_available>:

int __attribute__((weak)) HALSerial_available(HALSerial *this)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  return ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->_rx_buffer_head - this->_rx_buffer_tail)) % HALSERIAL_RX_BUFFER_SIZE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7c5b      	ldrb	r3, [r3, #17]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	7c92      	ldrb	r2, [r2, #18]
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	b2db      	uxtb	r3, r3
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HALSerial_peek>:

int __attribute__((weak)) HALSerial_peek(HALSerial *this)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7c5b      	ldrb	r3, [r3, #17]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7c9b      	ldrb	r3, [r3, #18]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d102      	bne.n	80037d8 <HALSerial_peek+0x1e>
  {
    return -1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e007      	b.n	80037e8 <HALSerial_peek+0x2e>
  }
  else
  {
    return this->_rx_buffer[this->_rx_buffer_tail];
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7c9b      	ldrb	r3, [r3, #18]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	f893 3020 	ldrb.w	r3, [r3, #32]
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HALSerial_read>:

int __attribute__((weak)) HALSerial_read(HALSerial *this)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  // if the head isn't ahead of the tail, we don't have any characters
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7c5b      	ldrb	r3, [r3, #17]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7c9b      	ldrb	r3, [r3, #18]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	429a      	cmp	r2, r3
 800380a:	d102      	bne.n	8003812 <HALSerial_read+0x1e>
  {
    return -1;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	e010      	b.n	8003834 <HALSerial_read+0x40>
  }
  else
  {
    unsigned char c = this->_rx_buffer[this->_rx_buffer_tail];
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7c9b      	ldrb	r3, [r3, #18]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003822:	73fb      	strb	r3, [r7, #15]
    this->_rx_buffer_tail = (hal_rx_buffer_index_t)(this->_rx_buffer_tail + 1) % HALSERIAL_RX_BUFFER_SIZE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7c9b      	ldrb	r3, [r3, #18]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	749a      	strb	r2, [r3, #18]
    return c;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HALSerial_availableForWrite>:

int __attribute__((weak)) HALSerial_availableForWrite(HALSerial *this)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  hal_tx_buffer_index_t head;
  hal_tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = this->_tx_buffer_head;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7cdb      	ldrb	r3, [r3, #19]
 800384c:	73fb      	strb	r3, [r7, #15]
    tail = this->_tx_buffer_tail;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7d1b      	ldrb	r3, [r3, #20]
 8003852:	73bb      	strb	r3, [r7, #14]
  }
  if (head >= tail)
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	429a      	cmp	r2, r3
 800385a:	d305      	bcc.n	8003868 <HALSerial_availableForWrite+0x28>
    return HALSERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	4413      	add	r3, r2
 8003866:	e003      	b.n	8003870 <HALSerial_availableForWrite+0x30>
  return tail - head - 1;
 8003868:	7bba      	ldrb	r2, [r7, #14]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	3b01      	subs	r3, #1
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HALSerial_flush>:

void __attribute__((weak)) HALSerial_flush(HALSerial *this)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!this->_written)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7c1b      	ldrb	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01a      	beq.n	80038c2 <HALSerial_flush+0x46>
    return;

  unsigned long ticks = HALSerial_millis(this);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f890 	bl	80039b2 <HALSerial_millis>
 8003892:	60f8      	str	r0, [r7, #12]
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 8003894:	e003      	b.n	800389e <HALSerial_flush+0x22>
    HALSerial_delay(this, 1);
 8003896:	2101      	movs	r1, #1
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f896 	bl	80039ca <HALSerial_delay>
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7cdb      	ldrb	r3, [r3, #19]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7d1b      	ldrb	r3, [r3, #20]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d00a      	beq.n	80038c4 <HALSerial_flush+0x48>
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f87f 	bl	80039b2 <HALSerial_millis>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038be:	d3ea      	bcc.n	8003896 <HALSerial_flush+0x1a>
 80038c0:	e000      	b.n	80038c4 <HALSerial_flush+0x48>
    return;
 80038c2:	bf00      	nop
  }
}
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HALSerial_writeByte>:

size_t __attribute__((weak)) HALSerial_writeByte(HALSerial *this, uint8_t c)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
  this->_written = TRUE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	741a      	strb	r2, [r3, #16]

  hal_tx_buffer_index_t i = (this->_tx_buffer_head + 1) % HALSERIAL_TX_BUFFER_SIZE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7cdb      	ldrb	r3, [r3, #19]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	425a      	negs	r2, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	bf58      	it	pl
 80038ec:	4253      	negpl	r3, r2
 80038ee:	73fb      	strb	r3, [r7, #15]

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == this->_tx_buffer_tail) {
 80038f0:	e003      	b.n	80038fa <HALSerial_writeByte+0x30>
    HALSerial_delay(this, 1);
 80038f2:	2101      	movs	r1, #1
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f868 	bl	80039ca <HALSerial_delay>
  while (i == this->_tx_buffer_tail) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7d1b      	ldrb	r3, [r3, #20]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	429a      	cmp	r2, r3
 8003904:	d0f5      	beq.n	80038f2 <HALSerial_writeByte+0x28>
  }

  this->_tx_buffer[this->_tx_buffer_head] = c;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7cdb      	ldrb	r3, [r3, #19]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  if (this->_tx_buffer_head == this->_tx_buffer_tail) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7cdb      	ldrb	r3, [r3, #19]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7d1b      	ldrb	r3, [r3, #20]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	429a      	cmp	r2, r3
 8003926:	d114      	bne.n	8003952 <HALSerial_writeByte+0x88>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 8003928:	e003      	b.n	8003932 <HALSerial_writeByte+0x68>
      HALSerial_delay(this, 1);
 800392a:	2101      	movs	r1, #1
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f84c 	bl	80039ca <HALSerial_delay>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68d8      	ldr	r0, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	7d12      	ldrb	r2, [r2, #20]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	4413      	add	r3, r2
 8003944:	2201      	movs	r2, #1
 8003946:	4619      	mov	r1, r3
 8003948:	f004 fdc2 	bl	80084d0 <HAL_UART_Transmit_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	2b02      	cmp	r3, #2
 8003950:	d0eb      	beq.n	800392a <HALSerial_writeByte+0x60>
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  TX_BUFFER_ATOMIC
  {
    this->_tx_buffer_head = i;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	74da      	strb	r2, [r3, #19]
  }

  return 1;
 8003958:	2301      	movs	r3, #1
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HALSerial_write>:

size_t HALSerial_write(HALSerial *this, const uint8_t *buffer, size_t size)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  if (buffer == NULL)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HALSerial_write+0x16>
    return 0;
 8003974:	2300      	movs	r3, #0
 8003976:	e018      	b.n	80039aa <HALSerial_write+0x48>
  size_t n = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  while (size--)
 800397c:	e00d      	b.n	800399a <HALSerial_write+0x38>
  {
    if (HALSerial_writeByte(this, *buffer++))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	60ba      	str	r2, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff ff9e 	bl	80038ca <HALSerial_writeByte>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HALSerial_write+0x44>
      n++;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
  while (size--)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1e5a      	subs	r2, r3, #1
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ec      	bne.n	800397e <HALSerial_write+0x1c>
 80039a4:	e000      	b.n	80039a8 <HALSerial_write+0x46>
    else
      break;
 80039a6:	bf00      	nop
  }
//  HAL_UART_Transmit(this->huart, buffer, size, 100);
//  HALSerial__rx_complete_irq(this); // ini tadi lupa di comment
  return n;
 80039a8:	697b      	ldr	r3, [r7, #20]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HALSerial_millis>:

/* Parent */

unsigned long HALSerial_millis(HALSerial *this) {
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  return this->millis();
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4798      	blx	r3
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HALSerial_delay>:

unsigned char HALSerial_delay(HALSerial *this, unsigned long value) {
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  return this->delay(value);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	4798      	blx	r3
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HALSerial_timedRead>:

// protected method to read stream with timeout
int HALSerial_timedRead(HALSerial *this)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  int c;
  this->_startMillis = HALSerial_millis(this);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ffdf 	bl	80039b2 <HALSerial_millis>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
  do
  {
    c = HALSerial_read(this);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fefa 	bl	80037f4 <HALSerial_read>
 8003a00:	60f8      	str	r0, [r7, #12]
    if (c >= 0)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db01      	blt.n	8003a0c <HALSerial_timedRead+0x26>
      return c;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	e010      	b.n	8003a2e <HALSerial_timedRead+0x48>
    else HALSerial_delay(this, 1);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ffdb 	bl	80039ca <HALSerial_delay>
  } while (HALSerial_millis(this) - this->_startMillis < this->_timeout);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffcc 	bl	80039b2 <HALSerial_millis>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3e7      	bcc.n	80039fa <HALSerial_timedRead+0x14>
  return -1; // -1 indicates timeout
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HALSerial_readBytes>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t HALSerial_readBytes(HALSerial *this, char *buffer, size_t length)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  size_t count = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  while (count < length)
 8003a46:	e00f      	b.n	8003a68 <HALSerial_readBytes+0x32>
  {
    int c = HALSerial_timedRead(this);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff ffcc 	bl	80039e6 <HALSerial_timedRead>
 8003a4e:	6138      	str	r0, [r7, #16]
    if (c < 0)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0d      	blt.n	8003a72 <HALSerial_readBytes+0x3c>
      break;
    *buffer++ = (char)c;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	60ba      	str	r2, [r7, #8]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
    count++;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3301      	adds	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
  while (count < length)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d3eb      	bcc.n	8003a48 <HALSerial_readBytes+0x12>
 8003a70:	e000      	b.n	8003a74 <HALSerial_readBytes+0x3e>
      break;
 8003a72:	bf00      	nop
  }
  return count;
 8003a74:	697b      	ldr	r3, [r7, #20]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HALSerial_readBytesUntil>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t HALSerial_readBytesUntil(HALSerial *this, char terminator, char *buffer, size_t length)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	72fb      	strb	r3, [r7, #11]
  size_t index = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
  while (index < length)
 8003a92:	e013      	b.n	8003abc <HALSerial_readBytesUntil+0x3e>
  {
    int c = HALSerial_timedRead(this);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ffa6 	bl	80039e6 <HALSerial_timedRead>
 8003a9a:	6138      	str	r0, [r7, #16]
    if (c < 0 || c == terminator)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	db10      	blt.n	8003ac4 <HALSerial_readBytesUntil+0x46>
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d00c      	beq.n	8003ac4 <HALSerial_readBytesUntil+0x46>
      break;
    *buffer++ = (char)c;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
    index++;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
  while (index < length)
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3e7      	bcc.n	8003a94 <HALSerial_readBytesUntil+0x16>
  }
  return index; // return number of characters, not including null terminator
 8003ac4:	697b      	ldr	r3, [r7, #20]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <Print___construct>:
}

// Public Methods //////////////////////////////////////////////////////////////

void Print___construct(Print *this)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  this->write_error = 0;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <Stream___construct>:
// These overload exists for compatibility with any class that has derived
// Stream and used parseFloat/Int with a custom ignore character. To keep
// the public API simple, these overload remains protected.

void Stream___construct(Stream *this)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  Print___construct((Print *)this);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffec 	bl	8003ace <Print___construct>
  this->_timeout = 1000;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003afc:	605a      	str	r2, [r3, #4]
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0
  CDC_init();
 8003b0a:	f009 fc95 	bl	800d438 <CDC_init>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <SerialUSB_end>:

static void SerialUSB_end(void)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	af00      	add	r7, sp, #0
  CDC_DeInit();
 8003b16:	f009 fc96 	bl	800d446 <CDC_DeInit>
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <SerialUSB_availableForWrite+0x10>)
 8003b26:	f000 f92c 	bl	8003d82 <CDC_TransmitQueue_WriteSize>
 8003b2a:	4603      	mov	r3, r0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000cf4 	.word	0x20000cf4

08003b34 <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f806 	bl	8003b54 <SerialUSB_puts>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 8003b62:	e01c      	b.n	8003b9e <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8003b64:	4815      	ldr	r0, [pc, #84]	; (8003bbc <SerialUSB_puts+0x68>)
 8003b66:	f000 f90c 	bl	8003d82 <CDC_TransmitQueue_WriteSize>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d201      	bcs.n	8003b7a <SerialUSB_puts+0x26>
        portion = rest;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	480d      	ldr	r0, [pc, #52]	; (8003bbc <SerialUSB_puts+0x68>)
 8003b86:	f000 f933 	bl	8003df0 <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	60fb      	str	r3, [r7, #12]
        buf += portion;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4413      	add	r3, r2
 8003b98:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 8003b9a:	f009 fbf5 	bl	800d388 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <SerialUSB_puts+0x5a>
 8003ba4:	f009 fbc4 	bl	800d330 <CDC_connected>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1da      	bne.n	8003b64 <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000cf4 	.word	0x20000cf4

08003bc0 <SerialUSB_available>:

static int SerialUSB_available(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <SerialUSB_available+0x10>)
 8003bc6:	f000 fa43 	bl	8004050 <CDC_ReceiveQueue_ReadSize>
 8003bca:	4603      	mov	r3, r0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20001d7c 	.word	0x20001d7c

08003bd4 <SerialUSB_read>:

static int SerialUSB_read(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <SerialUSB_read+0x1c>)
 8003bdc:	f000 fa68 	bl	80040b0 <CDC_ReceiveQueue_Dequeue>
 8003be0:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 8003be2:	f009 fbff 	bl	800d3e4 <CDC_resume_receive>
  return ch;
 8003be6:	687b      	ldr	r3, [r7, #4]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20001d7c 	.word	0x20001d7c

08003bf4 <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 8003c04:	f000 fc30 	bl	8004468 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4811      	ldr	r0, [pc, #68]	; (8003c58 <SerialUSB_readbytes+0x64>)
 8003c14:	f000 fac3 	bl	800419e <CDC_ReceiveQueue_Read>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 8003c1c:	f009 fbe2 	bl	800d3e4 <CDC_resume_receive>
      rest -= read;
 8003c20:	89fb      	ldrh	r3, [r7, #14]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
      buffer += read;
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <SerialUSB_readbytes+0x46>
        return length;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	e009      	b.n	8003c4e <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 8003c3a:	f000 fc15 	bl	8004468 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b31      	cmp	r3, #49	; 0x31
 8003c46:	d9e0      	bls.n	8003c0a <SerialUSB_readbytes+0x16>
    return length - rest;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	1ad3      	subs	r3, r2, r3
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20001d7c 	.word	0x20001d7c

08003c5c <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	4603      	mov	r3, r0
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 8003c70:	f000 fbfa 	bl	8004468 <HAL_GetTick>
 8003c74:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	7bf9      	ldrb	r1, [r7, #15]
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	4815      	ldr	r0, [pc, #84]	; (8003cdc <SerialUSB_readBytesUntil+0x80>)
 8003c88:	f000 faec 	bl	8004264 <CDC_ReceiveQueue_ReadUntil>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 8003c90:	f009 fba8 	bl	800d3e4 <CDC_resume_receive>
      rest -= read;
 8003c94:	8abb      	ldrh	r3, [r7, #20]
 8003c96:	461a      	mov	r2, r3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]
      buffer += read;
 8003c9e:	8abb      	ldrh	r3, [r7, #20]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
      if (found) {
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	e00e      	b.n	8003cd4 <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <SerialUSB_readBytesUntil+0x64>
        return length;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	e009      	b.n	8003cd4 <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 8003cc0:	f000 fbd2 	bl	8004468 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b31      	cmp	r3, #49	; 0x31
 8003ccc:	d9d3      	bls.n	8003c76 <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	1ad3      	subs	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20001d7c 	.word	0x20001d7c

08003ce0 <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <SerialUSB_peek+0x10>)
 8003ce6:	f000 fa28 	bl	800413a <CDC_ReceiveQueue_Peek>
 8003cea:	4603      	mov	r3, r0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20001d7c 	.word	0x20001d7c

08003cf4 <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 8003cf8:	bf00      	nop
 8003cfa:	4804      	ldr	r0, [pc, #16]	; (8003d0c <SerialUSB_flush+0x18>)
 8003cfc:	f000 f85d 	bl	8003dba <CDC_TransmitQueue_ReadSize>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dcf9      	bgt.n	8003cfa <SerialUSB_flush+0x6>
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000cf4 	.word	0x20000cf4

08003d10 <SerialUSB_print>:



static size_t SerialUSB_print(const char fmt[], ...)
{
 8003d10:	b40f      	push	{r0, r1, r2, r3}
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b0c2      	sub	sp, #264	; 0x108
 8003d16:	af00      	add	r7, sp, #0
	char serialusb_buffer_print[256];
	va_list args;
	va_start(args, fmt);
 8003d18:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	601a      	str	r2, [r3, #0]
	vsnprintf(serialusb_buffer_print, sizeof(serialusb_buffer_print), fmt, args);
 8003d20:	463b      	mov	r3, r7
 8003d22:	1d38      	adds	r0, r7, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d2e:	f00a fa17 	bl	800e160 <vsniprintf>
	va_end(args);
	size_t ret = SerialUSB_puts(serialusb_buffer_print, strlen(serialusb_buffer_print));
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fa53 	bl	80001e0 <strlen>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff07 	bl	8003b54 <SerialUSB_puts>
 8003d46:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	return ret;
 8003d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d5a:	b004      	add	sp, #16
 8003d5c:	4770      	bx	lr

08003d5e <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3380      	adds	r3, #128	; 0x80
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8003d9a:	b292      	uxth	r2, r2
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8003da0:	425a      	negs	r2, r3
 8003da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003daa:	bf58      	it	pl
 8003dac:	4253      	negpl	r3, r2
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3380      	adds	r3, #128	; 0x80
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8003dd6:	425a      	negs	r2, r3
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003de0:	bf58      	it	pl
 8003de2:	4253      	negpl	r3, r2
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003e08:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d90c      	bls.n	8003e2c <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f009 ff99 	bl	800dd5c <memcpy>
 8003e2a:	e015      	b.n	8003e58 <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f009 ff8c 	bl	800dd5c <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	18d1      	adds	r1, r2, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	f009 ff82 	bl	800dd5c <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d30c      	bcc.n	8003eb4 <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	e008      	b.n	8003ec6 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	22c0      	movs	r2, #192	; 0xc0
 8003f3a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003f5c:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	89ba      	ldrh	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d82c      	bhi.n	8003fc6 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	89fa      	ldrh	r2, [r7, #14]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d809      	bhi.n	8003f8e <CDC_ReceiveQueue_ReserveBlock+0x44>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	89fa      	ldrh	r2, [r7, #14]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d109      	bne.n	8003f9c <CDC_ReceiveQueue_ReserveBlock+0x52>
 8003f88:	89bb      	ldrh	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003f96:	b292      	uxth	r2, r2
 8003f98:	4413      	add	r3, r2
 8003f9a:	e025      	b.n	8003fe8 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d921      	bls.n	8003fe6 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003fc0:	b292      	uxth	r2, r2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	e010      	b.n	8003fe8 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003fd2:	89bb      	ldrh	r3, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d206      	bcs.n	8003fe6 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	e000      	b.n	8003fe8 <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004006:	b29a      	uxth	r2, r3
 8004008:	887b      	ldrh	r3, [r7, #2]
 800400a:	4413      	add	r3, r2
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800401a:	b29a      	uxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004022:	b29b      	uxth	r3, r3
 8004024:	429a      	cmp	r2, r3
 8004026:	d303      	bcc.n	8004030 <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	22c0      	movs	r2, #192	; 0xc0
 800402c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004036:	b29b      	uxth	r3, r3
 8004038:	2bbf      	cmp	r3, #191	; 0xbf
 800403a:	d903      	bls.n	8004044 <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800405e:	b29b      	uxth	r3, r3
 8004060:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004068:	b29b      	uxth	r3, r3
 800406a:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004072:	b29a      	uxth	r2, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	b29b      	uxth	r3, r3
 8004078:	429a      	cmp	r2, r3
 800407a:	d808      	bhi.n	800408e <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004088:	b29b      	uxth	r3, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	e00a      	b.n	80040a4 <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 800408e:	89bb      	ldrh	r3, [r7, #12]
 8004090:	b29b      	uxth	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	b29b      	uxth	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 80040a0:	b292      	uxth	r2, r2
 80040a2:	1a9b      	subs	r3, r3, r2
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80040be:	b29b      	uxth	r3, r3
 80040c0:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	429a      	cmp	r2, r3
 80040da:	d103      	bne.n	80040e4 <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	89bb      	ldrh	r3, [r7, #12]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d102      	bne.n	80040fa <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	e019      	b.n	800412e <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004100:	b29b      	uxth	r3, r3
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	b291      	uxth	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	5c9b      	ldrb	r3, [r3, r2]
 8004112:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800411a:	b29a      	uxth	r2, r3
 800411c:	897b      	ldrh	r3, [r7, #10]
 800411e:	b29b      	uxth	r3, r3
 8004120:	429a      	cmp	r2, r3
 8004122:	d303      	bcc.n	800412c <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004148:	b29b      	uxth	r3, r3
 800414a:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004152:	b29b      	uxth	r3, r3
 8004154:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800415c:	b29a      	uxth	r2, r3
 800415e:	89bb      	ldrh	r3, [r7, #12]
 8004160:	b29b      	uxth	r3, r3
 8004162:	429a      	cmp	r2, r3
 8004164:	d303      	bcc.n	800416e <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004174:	b29a      	uxth	r2, r3
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	b29b      	uxth	r3, r3
 800417a:	429a      	cmp	r2, r3
 800417c:	d102      	bne.n	8004184 <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	e006      	b.n	8004192 <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	5c9b      	ldrb	r3, [r3, r2]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80041bc:	b29b      	uxth	r3, r3
 80041be:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	8a7b      	ldrh	r3, [r7, #18]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d303      	bcc.n	80041d8 <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041de:	b29a      	uxth	r2, r3
 80041e0:	8abb      	ldrh	r3, [r7, #20]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d808      	bhi.n	80041fa <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 80041e8:	8abb      	ldrh	r3, [r7, #20]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	82fb      	strh	r3, [r7, #22]
 80041f8:	e007      	b.n	800420a <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 80041fa:	8a7b      	ldrh	r3, [r7, #18]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004204:	b29b      	uxth	r3, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 800420a:	8afa      	ldrh	r2, [r7, #22]
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	429a      	cmp	r2, r3
 8004210:	d201      	bcs.n	8004216 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800421c:	b29b      	uxth	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	4619      	mov	r1, r3
 8004228:	68b8      	ldr	r0, [r7, #8]
 800422a:	f009 fd97 	bl	800dd5c <memcpy>
  queue->read = queue->read + size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004234:	b29a      	uxth	r2, r3
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	4413      	add	r3, r2
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004248:	b29a      	uxth	r2, r3
 800424a:	8a7b      	ldrh	r3, [r7, #18]
 800424c:	b29b      	uxth	r3, r3
 800424e:	429a      	cmp	r2, r3
 8004250:	d303      	bcc.n	800425a <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 800425a:	88fb      	ldrh	r3, [r7, #6]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	461a      	mov	r2, r3
 8004270:	460b      	mov	r3, r1
 8004272:	72fb      	strb	r3, [r7, #11]
 8004274:	4613      	mov	r3, r2
 8004276:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800427e:	b29b      	uxth	r3, r3
 8004280:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004288:	b29b      	uxth	r3, r3
 800428a:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004292:	b29a      	uxth	r2, r3
 8004294:	8a7b      	ldrh	r3, [r7, #18]
 8004296:	b29b      	uxth	r3, r3
 8004298:	429a      	cmp	r2, r3
 800429a:	d303      	bcc.n	80042a4 <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	8abb      	ldrh	r3, [r7, #20]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d808      	bhi.n	80042c6 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 80042b4:	8abb      	ldrh	r3, [r7, #20]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	83fb      	strh	r3, [r7, #30]
 80042c4:	e007      	b.n	80042d6 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 80042c6:	8a7b      	ldrh	r3, [r7, #18]
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 80042d6:	8bfa      	ldrh	r2, [r7, #30]
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d201      	bcs.n	80042e2 <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 80042de:	8bfb      	ldrh	r3, [r7, #30]
 80042e0:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 80042f2:	2300      	movs	r3, #0
 80042f4:	83bb      	strh	r3, [r7, #28]
 80042f6:	e02d      	b.n	8004354 <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 80042f8:	8bbb      	ldrh	r3, [r7, #28]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 8004302:	7dfa      	ldrb	r2, [r7, #23]
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	429a      	cmp	r2, r3
 8004308:	d11c      	bne.n	8004344 <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004310:	b29a      	uxth	r2, r3
 8004312:	8bbb      	ldrh	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004328:	b29a      	uxth	r2, r3
 800432a:	8a7b      	ldrh	r3, [r7, #18]
 800432c:	b29b      	uxth	r3, r3
 800432e:	429a      	cmp	r2, r3
 8004330:	d303      	bcc.n	800433a <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	8bba      	ldrh	r2, [r7, #28]
 800433e:	801a      	strh	r2, [r3, #0]
      return true;
 8004340:	2301      	movs	r3, #1
 8004342:	e025      	b.n	8004390 <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 8004344:	8bbb      	ldrh	r3, [r7, #28]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	7dfa      	ldrb	r2, [r7, #23]
 800434c:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 800434e:	8bbb      	ldrh	r3, [r7, #28]
 8004350:	3301      	adds	r3, #1
 8004352:	83bb      	strh	r3, [r7, #28]
 8004354:	8bba      	ldrh	r2, [r7, #28]
 8004356:	893b      	ldrh	r3, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3cd      	bcc.n	80042f8 <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	893a      	ldrh	r2, [r7, #8]
 8004360:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004368:	b29a      	uxth	r2, r3
 800436a:	893b      	ldrh	r3, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800437c:	b29a      	uxth	r2, r3
 800437e:	8a7b      	ldrh	r3, [r7, #18]
 8004380:	b29b      	uxth	r3, r3
 8004382:	429a      	cmp	r2, r3
 8004384:	d303      	bcc.n	800438e <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3724      	adds	r7, #36	; 0x24
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_Init+0x40>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <HAL_Init+0x40>)
 80043a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_Init+0x40>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <HAL_Init+0x40>)
 80043b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_Init+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <HAL_Init+0x40>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c4:	2003      	movs	r0, #3
 80043c6:	f000 f973 	bl	80046b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f000 f808 	bl	80043e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d0:	f7fc fe0a 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023c00 	.word	0x40023c00

080043e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_InitTick+0x54>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_InitTick+0x58>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4619      	mov	r1, r3
 80043f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f999 	bl	8004736 <HAL_SYSTICK_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e00e      	b.n	800442c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d80a      	bhi.n	800442a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004414:	2200      	movs	r2, #0
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f000 f953 	bl	80046c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004420:	4a06      	ldr	r2, [pc, #24]	; (800443c <HAL_InitTick+0x5c>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	2000000c 	.word	0x2000000c
 8004438:	20000380 	.word	0x20000380
 800443c:	2000037c 	.word	0x2000037c

08004440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_IncTick+0x20>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_IncTick+0x24>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4413      	add	r3, r2
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <HAL_IncTick+0x24>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000380 	.word	0x20000380
 8004464:	20000a20 	.word	0x20000a20

08004468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return uwTick;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_GetTick+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000a20 	.word	0x20000a20

08004480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7ff ffee 	bl	8004468 <HAL_GetTick>
 800448c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d005      	beq.n	80044a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_Delay+0x44>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044a6:	bf00      	nop
 80044a8:	f7ff ffde 	bl	8004468 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d8f7      	bhi.n	80044a8 <HAL_Delay+0x28>
  {
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000380 	.word	0x20000380

080044c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044fa:	4a04      	ldr	r2, [pc, #16]	; (800450c <__NVIC_SetPriorityGrouping+0x44>)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	60d3      	str	r3, [r2, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <__NVIC_GetPriorityGrouping+0x18>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	f003 0307 	and.w	r3, r3, #7
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	2b00      	cmp	r3, #0
 800453c:	db0b      	blt.n	8004556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	f003 021f 	and.w	r2, r3, #31
 8004544:	4907      	ldr	r1, [pc, #28]	; (8004564 <__NVIC_EnableIRQ+0x38>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2001      	movs	r0, #1
 800454e:	fa00 f202 	lsl.w	r2, r0, r2
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	2b00      	cmp	r3, #0
 8004578:	db12      	blt.n	80045a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	f003 021f 	and.w	r2, r3, #31
 8004580:	490a      	ldr	r1, [pc, #40]	; (80045ac <__NVIC_DisableIRQ+0x44>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2001      	movs	r0, #1
 800458a:	fa00 f202 	lsl.w	r2, r0, r2
 800458e:	3320      	adds	r3, #32
 8004590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004594:	f3bf 8f4f 	dsb	sy
}
 8004598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800459a:	f3bf 8f6f 	isb	sy
}
 800459e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100

080045b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	; (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	; (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf28      	it	cs
 8004622:	2304      	movcs	r3, #4
 8004624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3304      	adds	r3, #4
 800462a:	2b06      	cmp	r3, #6
 800462c:	d902      	bls.n	8004634 <NVIC_EncodePriority+0x30>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3b03      	subs	r3, #3
 8004632:	e000      	b.n	8004636 <NVIC_EncodePriority+0x32>
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	401a      	ands	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800464c:	f04f 31ff 	mov.w	r1, #4294967295
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43d9      	mvns	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465c:	4313      	orrs	r3, r2
         );
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800467c:	d301      	bcc.n	8004682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467e:	2301      	movs	r3, #1
 8004680:	e00f      	b.n	80046a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <SysTick_Config+0x40>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468a:	210f      	movs	r1, #15
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	f7ff ff8e 	bl	80045b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SysTick_Config+0x40>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469a:	4b04      	ldr	r3, [pc, #16]	; (80046ac <SysTick_Config+0x40>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000e010 	.word	0xe000e010

080046b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff05 	bl	80044c8 <__NVIC_SetPriorityGrouping>
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d8:	f7ff ff1a 	bl	8004510 <__NVIC_GetPriorityGrouping>
 80046dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	f7ff ff8e 	bl	8004604 <NVIC_EncodePriority>
 80046e8:	4602      	mov	r2, r0
 80046ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff5d 	bl	80045b0 <__NVIC_SetPriority>
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	4603      	mov	r3, r0
 8004706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff0d 	bl	800452c <__NVIC_EnableIRQ>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	4603      	mov	r3, r0
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff1d 	bl	8004568 <__NVIC_DisableIRQ>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff94 	bl	800466c <SysTick_Config>
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7ff fe84 	bl	8004468 <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d008      	beq.n	8004780 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e052      	b.n	8004826 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0216 	bic.w	r2, r2, #22
 800478e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800479e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <HAL_DMA_Abort+0x62>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0208 	bic.w	r2, r2, #8
 80047be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d0:	e013      	b.n	80047fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d2:	f7ff fe49 	bl	8004468 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d90c      	bls.n	80047fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2203      	movs	r2, #3
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e015      	b.n	8004826 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	223f      	movs	r2, #63	; 0x3f
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d004      	beq.n	800484c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e00c      	b.n	8004866 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2205      	movs	r2, #5
 8004850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e159      	b.n	8004b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f040 8148 	bne.w	8004b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d005      	beq.n	80048c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d130      	bne.n	8004928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	2203      	movs	r2, #3
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 0201 	and.w	r2, r3, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d017      	beq.n	8004964 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d123      	bne.n	80049b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	08da      	lsrs	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3208      	adds	r2, #8
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	220f      	movs	r2, #15
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3208      	adds	r2, #8
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0203 	and.w	r2, r3, #3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a2 	beq.w	8004b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	4a56      	ldr	r2, [pc, #344]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a08:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0a:	4b54      	ldr	r3, [pc, #336]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a16:	4a52      	ldr	r2, [pc, #328]	; (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a49      	ldr	r2, [pc, #292]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_GPIO_Init+0x202>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a48      	ldr	r2, [pc, #288]	; (8004b68 <HAL_GPIO_Init+0x2f4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_GPIO_Init+0x1fe>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a47      	ldr	r2, [pc, #284]	; (8004b6c <HAL_GPIO_Init+0x2f8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00d      	beq.n	8004a6e <HAL_GPIO_Init+0x1fa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a46      	ldr	r2, [pc, #280]	; (8004b70 <HAL_GPIO_Init+0x2fc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <HAL_GPIO_Init+0x1f6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a45      	ldr	r2, [pc, #276]	; (8004b74 <HAL_GPIO_Init+0x300>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <HAL_GPIO_Init+0x1f2>
 8004a62:	2304      	movs	r3, #4
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a88:	4935      	ldr	r1, [pc, #212]	; (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b38:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <HAL_GPIO_Init+0x304>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f aea2 	bls.w	8004890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020c00 	.word	0x40020c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40013c00 	.word	0x40013c00

08004b7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e0bb      	b.n	8004d10 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b98:	2201      	movs	r2, #1
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	f040 80ab 	bne.w	8004d0a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	; (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a54      	ldr	r2, [pc, #336]	; (8004d2c <HAL_GPIO_DeInit+0x1b0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d019      	beq.n	8004c12 <HAL_GPIO_DeInit+0x96>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a53      	ldr	r2, [pc, #332]	; (8004d30 <HAL_GPIO_DeInit+0x1b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_GPIO_DeInit+0x92>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_GPIO_DeInit+0x1b8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00d      	beq.n	8004c0a <HAL_GPIO_DeInit+0x8e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a51      	ldr	r2, [pc, #324]	; (8004d38 <HAL_GPIO_DeInit+0x1bc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <HAL_GPIO_DeInit+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a50      	ldr	r2, [pc, #320]	; (8004d3c <HAL_GPIO_DeInit+0x1c0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <HAL_GPIO_DeInit+0x86>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	e008      	b.n	8004c14 <HAL_GPIO_DeInit+0x98>
 8004c02:	2307      	movs	r3, #7
 8004c04:	e006      	b.n	8004c14 <HAL_GPIO_DeInit+0x98>
 8004c06:	2303      	movs	r3, #3
 8004c08:	e004      	b.n	8004c14 <HAL_GPIO_DeInit+0x98>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e002      	b.n	8004c14 <HAL_GPIO_DeInit+0x98>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_GPIO_DeInit+0x98>
 8004c12:	2300      	movs	r3, #0
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	f002 0203 	and.w	r2, r2, #3
 8004c1a:	0092      	lsls	r2, r2, #2
 8004c1c:	4093      	lsls	r3, r2
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d132      	bne.n	8004c8a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	4944      	ldr	r1, [pc, #272]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c32:	4b43      	ldr	r3, [pc, #268]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	4941      	ldr	r1, [pc, #260]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c40:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	43db      	mvns	r3, r3
 8004c48:	493d      	ldr	r1, [pc, #244]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	493a      	ldr	r1, [pc, #232]	; (8004d40 <HAL_GPIO_DeInit+0x1c4>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	220f      	movs	r2, #15
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	; (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	3302      	adds	r3, #2
 8004c74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	482a      	ldr	r0, [pc, #168]	; (8004d28 <HAL_GPIO_DeInit+0x1ac>)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	400a      	ands	r2, r1
 8004c84:	3302      	adds	r3, #2
 8004c86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	2103      	movs	r1, #3
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	220f      	movs	r2, #15
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	08d2      	lsrs	r2, r2, #3
 8004cc0:	4019      	ands	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	2103      	movs	r1, #3
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	401a      	ands	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2103      	movs	r1, #3
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	401a      	ands	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	f67f af40 	bls.w	8004b98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40020000 	.word	0x40020000
 8004d30:	40020400 	.word	0x40020400
 8004d34:	40020800 	.word	0x40020800
 8004d38:	40020c00 	.word	0x40020c00
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40013c00 	.word	0x40013c00

08004d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e001      	b.n	8004d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
 8004d80:	4613      	mov	r3, r2
 8004d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d84:	787b      	ldrb	r3, [r7, #1]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8a:	887a      	ldrh	r2, [r7, #2]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d90:	e003      	b.n	8004d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d92:	887b      	ldrh	r3, [r7, #2]
 8004d94:	041a      	lsls	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	041a      	lsls	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	619a      	str	r2, [r3, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e12b      	b.n	8005046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc f918 	bl	8001038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e40:	f002 fe32 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8004e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4a81      	ldr	r2, [pc, #516]	; (8005050 <HAL_I2C_Init+0x274>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d807      	bhi.n	8004e60 <HAL_I2C_Init+0x84>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a80      	ldr	r2, [pc, #512]	; (8005054 <HAL_I2C_Init+0x278>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bf94      	ite	ls
 8004e58:	2301      	movls	r3, #1
 8004e5a:	2300      	movhi	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e006      	b.n	8004e6e <HAL_I2C_Init+0x92>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a7d      	ldr	r2, [pc, #500]	; (8005058 <HAL_I2C_Init+0x27c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bf94      	ite	ls
 8004e68:	2301      	movls	r3, #1
 8004e6a:	2300      	movhi	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0e7      	b.n	8005046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a78      	ldr	r2, [pc, #480]	; (800505c <HAL_I2C_Init+0x280>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0c9b      	lsrs	r3, r3, #18
 8004e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a6a      	ldr	r2, [pc, #424]	; (8005050 <HAL_I2C_Init+0x274>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <HAL_I2C_Init+0xd4>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3301      	adds	r3, #1
 8004eae:	e009      	b.n	8004ec4 <HAL_I2C_Init+0xe8>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	4a69      	ldr	r2, [pc, #420]	; (8005060 <HAL_I2C_Init+0x284>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	495c      	ldr	r1, [pc, #368]	; (8005050 <HAL_I2C_Init+0x274>)
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	d819      	bhi.n	8004f18 <HAL_I2C_Init+0x13c>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1e59      	subs	r1, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ef8:	400b      	ands	r3, r1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_I2C_Init+0x138>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1e59      	subs	r1, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	e051      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f14:	2304      	movs	r3, #4
 8004f16:	e04f      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d111      	bne.n	8004f44 <HAL_I2C_Init+0x168>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e58      	subs	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	440b      	add	r3, r1
 8004f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e012      	b.n	8004f6a <HAL_I2C_Init+0x18e>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1e58      	subs	r0, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	0099      	lsls	r1, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_I2C_Init+0x196>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e022      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <HAL_I2C_Init+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1e58      	subs	r0, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	440b      	add	r3, r1
 8004f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	e00f      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	0099      	lsls	r1, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	6809      	ldr	r1, [r1, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6911      	ldr	r1, [r2, #16]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	000186a0 	.word	0x000186a0
 8005054:	001e847f 	.word	0x001e847f
 8005058:	003d08ff 	.word	0x003d08ff
 800505c:	431bde83 	.word	0x431bde83
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	461a      	mov	r2, r3
 8005070:	460b      	mov	r3, r1
 8005072:	817b      	strh	r3, [r7, #10]
 8005074:	4613      	mov	r3, r2
 8005076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005078:	f7ff f9f6 	bl	8004468 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 80e0 	bne.w	800524c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2319      	movs	r3, #25
 8005092:	2201      	movs	r2, #1
 8005094:	4970      	ldr	r1, [pc, #448]	; (8005258 <HAL_I2C_Master_Transmit+0x1f4>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fd86 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0d3      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_I2C_Master_Transmit+0x50>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e0cc      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d007      	beq.n	80050da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2221      	movs	r2, #33	; 0x21
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2210      	movs	r2, #16
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	893a      	ldrh	r2, [r7, #8]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a50      	ldr	r2, [pc, #320]	; (800525c <HAL_I2C_Master_Transmit+0x1f8>)
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800511c:	8979      	ldrh	r1, [r7, #10]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fbf0 	bl	8005908 <I2C_MasterRequestWrite>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e08d      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005148:	e066      	b.n	8005218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fe00 	bl	8005d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d107      	bne.n	8005172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06b      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11b      	bne.n	80051ec <HAL_I2C_Master_Transmit+0x188>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	6a39      	ldr	r1, [r7, #32]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fdf0 	bl	8005dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b04      	cmp	r3, #4
 8005202:	d107      	bne.n	8005214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01a      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d194      	bne.n	800514a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000

08005260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	460b      	mov	r3, r1
 800526e:	817b      	strh	r3, [r7, #10]
 8005270:	4613      	mov	r3, r2
 8005272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005274:	f7ff f8f8 	bl	8004468 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	f040 820b 	bne.w	800569e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2319      	movs	r3, #25
 800528e:	2201      	movs	r2, #1
 8005290:	497c      	ldr	r1, [pc, #496]	; (8005484 <HAL_I2C_Master_Receive+0x224>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fc88 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	e1fe      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_I2C_Master_Receive+0x50>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e1f7      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d007      	beq.n	80052d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2222      	movs	r2, #34	; 0x22
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2210      	movs	r2, #16
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	893a      	ldrh	r2, [r7, #8]
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a5c      	ldr	r2, [pc, #368]	; (8005488 <HAL_I2C_Master_Receive+0x228>)
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fb74 	bl	8005a0c <I2C_MasterRequestRead>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e1b8      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d113      	bne.n	800535e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e18c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11b      	bne.n	800539e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e16c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d11b      	bne.n	80053de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	e14c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005404:	e138      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	2b03      	cmp	r3, #3
 800540c:	f200 80f1 	bhi.w	80055f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b01      	cmp	r3, #1
 8005416:	d123      	bne.n	8005460 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fd1b 	bl	8005e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e139      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800545e:	e10b      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	2b02      	cmp	r3, #2
 8005466:	d14e      	bne.n	8005506 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2200      	movs	r2, #0
 8005470:	4906      	ldr	r1, [pc, #24]	; (800548c <HAL_I2C_Master_Receive+0x22c>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fb98 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e10e      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
 8005482:	bf00      	nop
 8005484:	00100002 	.word	0x00100002
 8005488:	ffff0000 	.word	0xffff0000
 800548c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005504:	e0b8      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	4966      	ldr	r1, [pc, #408]	; (80056a8 <HAL_I2C_Master_Receive+0x448>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fb49 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0bf      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	494f      	ldr	r1, [pc, #316]	; (80056a8 <HAL_I2C_Master_Receive+0x448>)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fb1b 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e091      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055f0:	e042      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fc2e 	bl	8005e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e04c      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d118      	bne.n	8005678 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f aec2 	bne.w	8005406 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3728      	adds	r7, #40	; 0x28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	00010004 	.word	0x00010004

080056ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	460b      	mov	r3, r1
 80056ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056bc:	f7fe fed4 	bl	8004468 <HAL_GetTick>
 80056c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	f040 8111 	bne.w	80058f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2319      	movs	r3, #25
 80056da:	2201      	movs	r2, #1
 80056dc:	4988      	ldr	r1, [pc, #544]	; (8005900 <HAL_I2C_IsDeviceReady+0x254>)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fa62 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e104      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_I2C_IsDeviceReady+0x50>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e0fd      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d007      	beq.n	8005722 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2224      	movs	r2, #36	; 0x24
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a70      	ldr	r2, [pc, #448]	; (8005904 <HAL_I2C_IsDeviceReady+0x258>)
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005754:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa20 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577c:	d103      	bne.n	8005786 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0b6      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800578a:	897b      	ldrh	r3, [r7, #10]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005798:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800579a:	f7fe fe65 	bl	8004468 <HAL_GetTick>
 800579e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057ce:	e025      	b.n	800581c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057d0:	f7fe fe4a 	bl	8004468 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d302      	bcc.n	80057e6 <HAL_I2C_IsDeviceReady+0x13a>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	22a0      	movs	r2, #160	; 0xa0
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2ba0      	cmp	r3, #160	; 0xa0
 8005826:	d005      	beq.n	8005834 <HAL_I2C_IsDeviceReady+0x188>
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_I2C_IsDeviceReady+0x188>
 800582e:	7dbb      	ldrb	r3, [r7, #22]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0cd      	beq.n	80057d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d129      	bne.n	800589e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005858:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2319      	movs	r3, #25
 8005876:	2201      	movs	r2, #1
 8005878:	4921      	ldr	r1, [pc, #132]	; (8005900 <HAL_I2C_IsDeviceReady+0x254>)
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f994 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e036      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e02c      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2319      	movs	r3, #25
 80058be:	2201      	movs	r2, #1
 80058c0:	490f      	ldr	r1, [pc, #60]	; (8005900 <HAL_I2C_IsDeviceReady+0x254>)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f970 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e012      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	f4ff af32 	bcc.w	8005746 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
  }
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00100002 	.word	0x00100002
 8005904:	ffff0000 	.word	0xffff0000

08005908 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af02      	add	r7, sp, #8
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	460b      	mov	r3, r1
 8005916:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d006      	beq.n	8005932 <I2C_MasterRequestWrite+0x2a>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d003      	beq.n	8005932 <I2C_MasterRequestWrite+0x2a>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005930:	d108      	bne.n	8005944 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e00b      	b.n	800595c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	2b12      	cmp	r3, #18
 800594a:	d107      	bne.n	800595c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f91d 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00d      	beq.n	8005990 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005982:	d103      	bne.n	800598c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e035      	b.n	80059fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005998:	d108      	bne.n	80059ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800599a:	897b      	ldrh	r3, [r7, #10]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a8:	611a      	str	r2, [r3, #16]
 80059aa:	e01b      	b.n	80059e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	11db      	asrs	r3, r3, #7
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f063 030f 	orn	r3, r3, #15
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	490e      	ldr	r1, [pc, #56]	; (8005a04 <I2C_MasterRequestWrite+0xfc>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f943 	bl	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e010      	b.n	80059fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4907      	ldr	r1, [pc, #28]	; (8005a08 <I2C_MasterRequestWrite+0x100>)
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f933 	bl	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	00010008 	.word	0x00010008
 8005a08:	00010002 	.word	0x00010002

08005a0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d006      	beq.n	8005a46 <I2C_MasterRequestRead+0x3a>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d003      	beq.n	8005a46 <I2C_MasterRequestRead+0x3a>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a44:	d108      	bne.n	8005a58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	e00b      	b.n	8005a70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	2b11      	cmp	r3, #17
 8005a5e:	d107      	bne.n	8005a70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f893 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00d      	beq.n	8005aa4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a96:	d103      	bne.n	8005aa0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e079      	b.n	8005b98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aac:	d108      	bne.n	8005ac0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	e05f      	b.n	8005b80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ac0:	897b      	ldrh	r3, [r7, #10]
 8005ac2:	11db      	asrs	r3, r3, #7
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f003 0306 	and.w	r3, r3, #6
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f063 030f 	orn	r3, r3, #15
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4930      	ldr	r1, [pc, #192]	; (8005ba0 <I2C_MasterRequestRead+0x194>)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f8b9 	bl	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e054      	b.n	8005b98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aee:	897b      	ldrh	r3, [r7, #10]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4929      	ldr	r1, [pc, #164]	; (8005ba4 <I2C_MasterRequestRead+0x198>)
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f8a9 	bl	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e044      	b.n	8005b98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f831 	bl	8005ba8 <I2C_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	d103      	bne.n	8005b64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e017      	b.n	8005b98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b68:	897b      	ldrh	r3, [r7, #10]
 8005b6a:	11db      	asrs	r3, r3, #7
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f063 030e 	orn	r3, r3, #14
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4907      	ldr	r1, [pc, #28]	; (8005ba4 <I2C_MasterRequestRead+0x198>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f865 	bl	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	00010008 	.word	0x00010008
 8005ba4:	00010002 	.word	0x00010002

08005ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb8:	e025      	b.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d021      	beq.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc2:	f7fe fc51 	bl	8004468 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d116      	bne.n	8005c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e023      	b.n	8005c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	0c1b      	lsrs	r3, r3, #16
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10d      	bne.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	43da      	mvns	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf0c      	ite	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	2300      	movne	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	e00c      	b.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	43da      	mvns	r2, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4013      	ands	r3, r2
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bf0c      	ite	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	2300      	movne	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d0b6      	beq.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c64:	e051      	b.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c74:	d123      	bne.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e046      	b.n	8005d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d021      	beq.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	f7fe fbcf 	bl	8004468 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d116      	bne.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e020      	b.n	8005d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10c      	bne.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	43da      	mvns	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf14      	ite	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	2300      	moveq	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	e00b      	b.n	8005d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d18d      	bne.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d60:	e02d      	b.n	8005dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f8ce 	bl	8005f04 <I2C_IsAcknowledgeFailed>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e02d      	b.n	8005dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d021      	beq.n	8005dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7a:	f7fe fb75 	bl	8004468 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d302      	bcc.n	8005d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d116      	bne.n	8005dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f043 0220 	orr.w	r2, r3, #32
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e007      	b.n	8005dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d1ca      	bne.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de2:	e02d      	b.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f88d 	bl	8005f04 <I2C_IsAcknowledgeFailed>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e02d      	b.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d021      	beq.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	f7fe fb34 	bl	8004468 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d116      	bne.n	8005e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e007      	b.n	8005e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d1ca      	bne.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e64:	e042      	b.n	8005eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d119      	bne.n	8005ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e029      	b.n	8005efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea8:	f7fe fade 	bl	8004468 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d116      	bne.n	8005eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e007      	b.n	8005efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef6:	2b40      	cmp	r3, #64	; 0x40
 8005ef8:	d1b5      	bne.n	8005e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1a:	d11b      	bne.n	8005f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0204 	orr.w	r2, r3, #4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f64:	b08f      	sub	sp, #60	; 0x3c
 8005f66:	af0a      	add	r7, sp, #40	; 0x28
 8005f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e10f      	b.n	8006194 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f007 fb82 	bl	800d698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2203      	movs	r2, #3
 8005f98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f003 f91b 	bl	80091ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	687e      	ldr	r6, [r7, #4]
 8005fc0:	466d      	mov	r5, sp
 8005fc2:	f106 0410 	add.w	r4, r6, #16
 8005fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fd6:	1d33      	adds	r3, r6, #4
 8005fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fda:	6838      	ldr	r0, [r7, #0]
 8005fdc:	f002 fff2 	bl	8008fc4 <USB_CoreInit>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e0d0      	b.n	8006194 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f003 f909 	bl	8009210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]
 8006002:	e04a      	b.n	800609a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006004:	7bfa      	ldrb	r2, [r7, #15]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	333d      	adds	r3, #61	; 0x3d
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	333c      	adds	r3, #60	; 0x3c
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	b298      	uxth	r0, r3
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	4613      	mov	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	3342      	adds	r3, #66	; 0x42
 8006040:	4602      	mov	r2, r0
 8006042:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	333f      	adds	r3, #63	; 0x3f
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006058:	7bfa      	ldrb	r2, [r7, #15]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	1a9b      	subs	r3, r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	3344      	adds	r3, #68	; 0x44
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800606c:	7bfa      	ldrb	r2, [r7, #15]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	3348      	adds	r3, #72	; 0x48
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006080:	7bfa      	ldrb	r2, [r7, #15]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	3350      	adds	r3, #80	; 0x50
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	3301      	adds	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3af      	bcc.n	8006004 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	e044      	b.n	8006134 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060ec:	7bfa      	ldrb	r2, [r7, #15]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	3301      	adds	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	7bfa      	ldrb	r2, [r7, #15]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d3b5      	bcc.n	80060aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	687e      	ldr	r6, [r7, #4]
 8006146:	466d      	mov	r5, sp
 8006148:	f106 0410 	add.w	r4, r6, #16
 800614c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800614e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006158:	e885 0003 	stmia.w	r5, {r0, r1}
 800615c:	1d33      	adds	r3, r6, #4
 800615e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006160:	6838      	ldr	r0, [r7, #0]
 8006162:	f003 f87f 	bl	8009264 <USB_DevInit>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e00d      	b.n	8006194 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f004 f8c7 	bl	800a320 <USB_DevDisconnect>

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800619c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_PCD_Start+0x1c>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e020      	b.n	80061fa <HAL_PCD_Start+0x5e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d109      	bne.n	80061dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d005      	beq.n	80061dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f002 fff3 	bl	80091cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 f877 	bl	800a2de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006202:	b590      	push	{r4, r7, lr}
 8006204:	b08d      	sub	sp, #52	; 0x34
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f004 f935 	bl	800a488 <USB_GetMode>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 839d 	bne.w	8006960 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f004 f899 	bl	800a362 <USB_ReadInterrupts>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8393 	beq.w	800695e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f004 f890 	bl	800a362 <USB_ReadInterrupts>
 8006242:	4603      	mov	r3, r0
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d107      	bne.n	800625c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f002 0202 	and.w	r2, r2, #2
 800625a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f004 f87e 	bl	800a362 <USB_ReadInterrupts>
 8006266:	4603      	mov	r3, r0
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d161      	bne.n	8006334 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0210 	bic.w	r2, r2, #16
 800627e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	3304      	adds	r3, #4
 800629e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	0c5b      	lsrs	r3, r3, #17
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d124      	bne.n	80062f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d035      	beq.n	8006324 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	091b      	lsrs	r3, r3, #4
 80062c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6a38      	ldr	r0, [r7, #32]
 80062cc:	f003 fee4 	bl	800a098 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062dc:	441a      	add	r2, r3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ee:	441a      	add	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	619a      	str	r2, [r3, #24]
 80062f4:	e016      	b.n	8006324 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	0c5b      	lsrs	r3, r3, #17
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	2b06      	cmp	r3, #6
 8006300:	d110      	bne.n	8006324 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006308:	2208      	movs	r2, #8
 800630a:	4619      	mov	r1, r3
 800630c:	6a38      	ldr	r0, [r7, #32]
 800630e:	f003 fec3 	bl	800a098 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631e:	441a      	add	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0210 	orr.w	r2, r2, #16
 8006332:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f004 f812 	bl	800a362 <USB_ReadInterrupts>
 800633e:	4603      	mov	r3, r0
 8006340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006344:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006348:	d16e      	bne.n	8006428 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f004 f818 	bl	800a388 <USB_ReadDevAllOutEpInterrupt>
 8006358:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800635a:	e062      	b.n	8006422 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d057      	beq.n	8006416 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f004 f83d 	bl	800a3f0 <USB_ReadDevOutEPInterrupt>
 8006376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	461a      	mov	r2, r3
 8006390:	2301      	movs	r3, #1
 8006392:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fdb0 	bl	8006efc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	2308      	movs	r3, #8
 80063b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 feaa 	bl	8007114 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	461a      	mov	r2, r3
 80063d8:	2310      	movs	r3, #16
 80063da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	461a      	mov	r2, r3
 80063f4:	2320      	movs	r3, #32
 80063f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006414:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	3301      	adds	r3, #1
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	085b      	lsrs	r3, r3, #1
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d199      	bne.n	800635c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f003 ff98 	bl	800a362 <USB_ReadInterrupts>
 8006432:	4603      	mov	r3, r0
 8006434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006438:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800643c:	f040 80c0 	bne.w	80065c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f003 ffb9 	bl	800a3bc <USB_ReadDevAllInEpInterrupt>
 800644a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006450:	e0b2      	b.n	80065b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80a7 	beq.w	80065ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f003 ffdf 	bl	800a42c <USB_ReadDevInEPInterrupt>
 800646e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d057      	beq.n	800652a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	43db      	mvns	r3, r3
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800649a:	4013      	ands	r3, r2
 800649c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064aa:	461a      	mov	r2, r3
 80064ac:	2301      	movs	r3, #1
 80064ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d132      	bne.n	800651e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064bc:	4613      	mov	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3348      	adds	r3, #72	; 0x48
 80064c8:	6819      	ldr	r1, [r3, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4403      	add	r3, r0
 80064d8:	3344      	adds	r3, #68	; 0x44
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4419      	add	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4403      	add	r3, r0
 80064ec:	3348      	adds	r3, #72	; 0x48
 80064ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d113      	bne.n	800651e <HAL_PCD_IRQHandler+0x31c>
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	3350      	adds	r3, #80	; 0x50
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006516:	461a      	mov	r2, r3
 8006518:	2101      	movs	r1, #1
 800651a:	f003 ffe7 	bl	800a4ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	b2db      	uxtb	r3, r3
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f007 f938 	bl	800d79a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	461a      	mov	r2, r3
 8006542:	2308      	movs	r3, #8
 8006544:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	461a      	mov	r2, r3
 800655e:	2310      	movs	r3, #16
 8006560:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	461a      	mov	r2, r3
 800657a:	2340      	movs	r3, #64	; 0x40
 800657c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	2302      	movs	r3, #2
 8006598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fc1b 	bl	8006de2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	3301      	adds	r3, #1
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	085b      	lsrs	r3, r3, #1
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f47f af49 	bne.w	8006452 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f003 fecc 	bl	800a362 <USB_ReadInterrupts>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d4:	d122      	bne.n	800661c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d108      	bne.n	8006606 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065fc:	2100      	movs	r1, #0
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fe26 	bl	8007250 <HAL_PCDEx_LPM_Callback>
 8006604:	e002      	b.n	800660c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f007 f934 	bl	800d874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800661a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f003 fe9e 	bl	800a362 <USB_ReadInterrupts>
 8006626:	4603      	mov	r3, r0
 8006628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006630:	d112      	bne.n	8006658 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d102      	bne.n	8006648 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f007 f8f0 	bl	800d828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006656:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f003 fe80 	bl	800a362 <USB_ReadInterrupts>
 8006662:	4603      	mov	r3, r0
 8006664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666c:	f040 80c7 	bne.w	80067fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2110      	movs	r1, #16
 800668a:	4618      	mov	r0, r3
 800668c:	f002 ff4e 	bl	800952c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006690:	2300      	movs	r3, #0
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006694:	e056      	b.n	8006744 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	461a      	mov	r2, r3
 80066a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	461a      	mov	r2, r3
 80066f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800671c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800673c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	3301      	adds	r3, #1
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674a:	429a      	cmp	r2, r3
 800674c:	d3a3      	bcc.n	8006696 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006760:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677a:	f043 030b 	orr.w	r3, r3, #11
 800677e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006790:	f043 030b 	orr.w	r3, r3, #11
 8006794:	6453      	str	r3, [r2, #68]	; 0x44
 8006796:	e015      	b.n	80067c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80067ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067be:	f043 030b 	orr.w	r3, r3, #11
 80067c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067e8:	461a      	mov	r2, r3
 80067ea:	f003 fe7f 	bl	800a4ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f003 fdad 	bl	800a362 <USB_ReadInterrupts>
 8006808:	4603      	mov	r3, r0
 800680a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006812:	d124      	bne.n	800685e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f003 fe43 	bl	800a4a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f002 fee3 	bl	80095ee <USB_GetDevSpeed>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681c      	ldr	r4, [r3, #0]
 8006834:	f001 f92c 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8006838:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800683e:	b2db      	uxtb	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	4620      	mov	r0, r4
 8006844:	f002 fc20 	bl	8009088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f006 ffce 	bl	800d7ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800685c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f003 fd7d 	bl	800a362 <USB_ReadInterrupts>
 8006868:	4603      	mov	r3, r0
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b08      	cmp	r3, #8
 8006870:	d10a      	bne.n	8006888 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f006 ffab 	bl	800d7ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f002 0208 	and.w	r2, r2, #8
 8006886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f003 fd68 	bl	800a362 <USB_ReadInterrupts>
 8006892:	4603      	mov	r3, r0
 8006894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689c:	d10f      	bne.n	80068be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	4619      	mov	r1, r3
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f007 f803 	bl	800d8b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f003 fd4d 	bl	800a362 <USB_ReadInterrupts>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068d2:	d10f      	bne.n	80068f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f006 ffd6 	bl	800d890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80068f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f003 fd32 	bl	800a362 <USB_ReadInterrupts>
 80068fe:	4603      	mov	r3, r0
 8006900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d10a      	bne.n	8006920 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f006 ffe4 	bl	800d8d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800691e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f003 fd1c 	bl	800a362 <USB_ReadInterrupts>
 800692a:	4603      	mov	r3, r0
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d115      	bne.n	8006960 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f006 ffd4 	bl	800d8f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	e000      	b.n	8006960 <HAL_PCD_IRQHandler+0x75e>
      return;
 800695e:	bf00      	nop
    }
  }
}
 8006960:	3734      	adds	r7, #52	; 0x34
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_PCD_SetAddress+0x1a>
 800697c:	2302      	movs	r3, #2
 800697e:	e013      	b.n	80069a8 <HAL_PCD_SetAddress+0x42>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	78fa      	ldrb	r2, [r7, #3]
 800698c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f003 fc7a 	bl	800a292 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	70fb      	strb	r3, [r7, #3]
 80069c2:	460b      	mov	r3, r1
 80069c4:	803b      	strh	r3, [r7, #0]
 80069c6:	4613      	mov	r3, r2
 80069c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da0f      	bge.n	80069f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	3338      	adds	r3, #56	; 0x38
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	3304      	adds	r3, #4
 80069ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	705a      	strb	r2, [r3, #1]
 80069f4:	e00f      	b.n	8006a16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	4613      	mov	r3, r2
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a22:	883a      	ldrh	r2, [r7, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	78ba      	ldrb	r2, [r7, #2]
 8006a2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a40:	78bb      	ldrb	r3, [r7, #2]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d102      	bne.n	8006a4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_PCD_EP_Open+0xaa>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e00e      	b.n	8006a78 <HAL_PCD_EP_Open+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 fde5 	bl	8009638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a76:	7afb      	ldrb	r3, [r7, #11]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	da0f      	bge.n	8006ab4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	f003 020f 	and.w	r2, r3, #15
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	3338      	adds	r3, #56	; 0x38
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	705a      	strb	r2, [r3, #1]
 8006ab2:	e00f      	b.n	8006ad4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	4613      	mov	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	3304      	adds	r3, #4
 8006acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_PCD_EP_Close+0x6e>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e00e      	b.n	8006b0c <HAL_PCD_EP_Close+0x8c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 fe23 	bl	8009748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	460b      	mov	r3, r1
 8006b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d102      	bne.n	8006b70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	6979      	ldr	r1, [r7, #20]
 8006b88:	f003 f8fe 	bl	8009d88 <USB_EP0StartXfer>
 8006b8c:	e008      	b.n	8006ba0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	f002 feb0 	bl	8009900 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	f003 020f 	and.w	r2, r3, #15
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006bcc:	681b      	ldr	r3, [r3, #0]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
 8006be6:	460b      	mov	r3, r1
 8006be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	3338      	adds	r3, #56	; 0x38
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3304      	adds	r3, #4
 8006c00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2201      	movs	r2, #1
 8006c18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	f003 f89c 	bl	8009d88 <USB_EP0StartXfer>
 8006c50:	e008      	b.n	8006c64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6979      	ldr	r1, [r7, #20]
 8006c60:	f002 fe4e 	bl	8009900 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d901      	bls.n	8006c8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e050      	b.n	8006d2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da0f      	bge.n	8006cb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	f003 020f 	and.w	r2, r3, #15
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	3338      	adds	r3, #56	; 0x38
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3304      	adds	r3, #4
 8006caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	705a      	strb	r2, [r3, #1]
 8006cb2:	e00d      	b.n	8006cd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_PCD_EP_SetStall+0x82>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e01e      	b.n	8006d2e <HAL_PCD_EP_SetStall+0xc0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68f9      	ldr	r1, [r7, #12]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f003 f9f3 	bl	800a0ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f003 fbe4 	bl	800a4ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d901      	bls.n	8006d54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e042      	b.n	8006dda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da0f      	bge.n	8006d7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	4613      	mov	r3, r2
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	3338      	adds	r3, #56	; 0x38
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	3304      	adds	r3, #4
 8006d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	705a      	strb	r2, [r3, #1]
 8006d7a:	e00f      	b.n	8006d9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	3304      	adds	r3, #4
 8006d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_PCD_EP_ClrStall+0x86>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e00e      	b.n	8006dda <HAL_PCD_EP_ClrStall+0xa4>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f003 f9fb 	bl	800a1c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b08a      	sub	sp, #40	; 0x28
 8006de6:	af02      	add	r7, sp, #8
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	3338      	adds	r3, #56	; 0x38
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	3304      	adds	r3, #4
 8006e08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d901      	bls.n	8006e1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e06c      	b.n	8006ef4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3303      	adds	r3, #3
 8006e3a:	089b      	lsrs	r3, r3, #2
 8006e3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e3e:	e02b      	b.n	8006e98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d902      	bls.n	8006e5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	3303      	adds	r3, #3
 8006e60:	089b      	lsrs	r3, r3, #2
 8006e62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68d9      	ldr	r1, [r3, #12]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4603      	mov	r3, r0
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f003 f8d7 	bl	800a02e <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	441a      	add	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	441a      	add	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d809      	bhi.n	8006ec2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d203      	bcs.n	8006ec2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1be      	bne.n	8006e40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d811      	bhi.n	8006ef2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	43db      	mvns	r3, r3
 8006ee8:	6939      	ldr	r1, [r7, #16]
 8006eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eee:	4013      	ands	r3, r2
 8006ef0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	333c      	adds	r3, #60	; 0x3c
 8006f14:	3304      	adds	r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f040 80a0 	bne.w	8007074 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d015      	beq.n	8006f6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a72      	ldr	r2, [pc, #456]	; (800710c <PCD_EP_OutXfrComplete_int+0x210>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f240 80dd 	bls.w	8007102 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80d7 	beq.w	8007102 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	461a      	mov	r2, r3
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	6093      	str	r3, [r2, #8]
 8006f68:	e0cb      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	461a      	mov	r2, r3
 8006f82:	2320      	movs	r3, #32
 8006f84:	6093      	str	r3, [r2, #8]
 8006f86:	e0bc      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 80b7 	bne.w	8007102 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4a5d      	ldr	r2, [pc, #372]	; (800710c <PCD_EP_OutXfrComplete_int+0x210>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d90f      	bls.n	8006fbc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb8:	6093      	str	r3, [r2, #8]
 8006fba:	e0a2      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006fce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	0159      	lsls	r1, r3, #5
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	440b      	add	r3, r1
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006fe2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4403      	add	r3, r0
 8006ff2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ff6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4403      	add	r3, r0
 800701a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4419      	add	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4403      	add	r3, r0
 8007030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007034:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d114      	bne.n	8007066 <PCD_EP_OutXfrComplete_int+0x16a>
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800705e:	461a      	mov	r2, r3
 8007060:	2101      	movs	r1, #1
 8007062:	f003 fa43 	bl	800a4ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f006 fb79 	bl	800d764 <HAL_PCD_DataOutStageCallback>
 8007072:	e046      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4a26      	ldr	r2, [pc, #152]	; (8007110 <PCD_EP_OutXfrComplete_int+0x214>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d124      	bne.n	80070c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007098:	6093      	str	r3, [r2, #8]
 800709a:	e032      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d008      	beq.n	80070b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	461a      	mov	r2, r3
 80070b4:	2320      	movs	r3, #32
 80070b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f006 fb50 	bl	800d764 <HAL_PCD_DataOutStageCallback>
 80070c4:	e01d      	b.n	8007102 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d114      	bne.n	80070f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80070cc:	6879      	ldr	r1, [r7, #4]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	1a9b      	subs	r3, r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070ee:	461a      	mov	r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	f003 f9fb 	bl	800a4ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f006 fb31 	bl	800d764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	4f54300a 	.word	0x4f54300a
 8007110:	4f54310a 	.word	0x4f54310a

08007114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	333c      	adds	r3, #60	; 0x3c
 800712c:	3304      	adds	r3, #4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a15      	ldr	r2, [pc, #84]	; (800719c <PCD_EP_OutSetupPacket_int+0x88>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d90e      	bls.n	8007168 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	461a      	mov	r2, r3
 8007162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007166:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f006 fae9 	bl	800d740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a0a      	ldr	r2, [pc, #40]	; (800719c <PCD_EP_OutSetupPacket_int+0x88>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d90c      	bls.n	8007190 <PCD_EP_OutSetupPacket_int+0x7c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d108      	bne.n	8007190 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007188:	461a      	mov	r2, r3
 800718a:	2101      	movs	r1, #1
 800718c:	f003 f9ae 	bl	800a4ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	4f54300a 	.word	0x4f54300a

080071a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
 80071ac:	4613      	mov	r3, r2
 80071ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80071be:	883b      	ldrh	r3, [r7, #0]
 80071c0:	0419      	lsls	r1, r3, #16
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	629a      	str	r2, [r3, #40]	; 0x28
 80071cc:	e028      	b.n	8007220 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	0c1b      	lsrs	r3, r3, #16
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	e00d      	b.n	80071fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	3340      	adds	r3, #64	; 0x40
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	3301      	adds	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
 80071fe:	7bfa      	ldrb	r2, [r7, #15]
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	3b01      	subs	r3, #1
 8007204:	429a      	cmp	r2, r3
 8007206:	d3ec      	bcc.n	80071e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007208:	883b      	ldrh	r3, [r7, #0]
 800720a:	0418      	lsls	r0, r3, #16
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	3b01      	subs	r3, #1
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4302      	orrs	r2, r0
 8007218:	3340      	adds	r3, #64	; 0x40
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	887a      	ldrh	r2, [r7, #2]
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e264      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d075      	beq.n	8007372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007286:	4ba3      	ldr	r3, [pc, #652]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b04      	cmp	r3, #4
 8007290:	d00c      	beq.n	80072ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007292:	4ba0      	ldr	r3, [pc, #640]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800729a:	2b08      	cmp	r3, #8
 800729c:	d112      	bne.n	80072c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800729e:	4b9d      	ldr	r3, [pc, #628]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072aa:	d10b      	bne.n	80072c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ac:	4b99      	ldr	r3, [pc, #612]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05b      	beq.n	8007370 <HAL_RCC_OscConfig+0x108>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d157      	bne.n	8007370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e23f      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072cc:	d106      	bne.n	80072dc <HAL_RCC_OscConfig+0x74>
 80072ce:	4b91      	ldr	r3, [pc, #580]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a90      	ldr	r2, [pc, #576]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e01d      	b.n	8007318 <HAL_RCC_OscConfig+0xb0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x98>
 80072e6:	4b8b      	ldr	r3, [pc, #556]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a8a      	ldr	r2, [pc, #552]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b88      	ldr	r3, [pc, #544]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a87      	ldr	r2, [pc, #540]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80072f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e00b      	b.n	8007318 <HAL_RCC_OscConfig+0xb0>
 8007300:	4b84      	ldr	r3, [pc, #528]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a83      	ldr	r2, [pc, #524]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4b81      	ldr	r3, [pc, #516]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a80      	ldr	r2, [pc, #512]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d013      	beq.n	8007348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fd f8a2 	bl	8004468 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007328:	f7fd f89e 	bl	8004468 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	; 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e204      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733a:	4b76      	ldr	r3, [pc, #472]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0xc0>
 8007346:	e014      	b.n	8007372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007348:	f7fd f88e 	bl	8004468 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007350:	f7fd f88a 	bl	8004468 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b64      	cmp	r3, #100	; 0x64
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e1f0      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007362:	4b6c      	ldr	r3, [pc, #432]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f0      	bne.n	8007350 <HAL_RCC_OscConfig+0xe8>
 800736e:	e000      	b.n	8007372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d063      	beq.n	8007446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800737e:	4b65      	ldr	r3, [pc, #404]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800738a:	4b62      	ldr	r3, [pc, #392]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007392:	2b08      	cmp	r3, #8
 8007394:	d11c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007396:	4b5f      	ldr	r3, [pc, #380]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d116      	bne.n	80073d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a2:	4b5c      	ldr	r3, [pc, #368]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_RCC_OscConfig+0x152>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e1c4      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ba:	4b56      	ldr	r3, [pc, #344]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4952      	ldr	r1, [pc, #328]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ce:	e03a      	b.n	8007446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d8:	4b4f      	ldr	r3, [pc, #316]	; (8007518 <HAL_RCC_OscConfig+0x2b0>)
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073de:	f7fd f843 	bl	8004468 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e6:	f7fd f83f 	bl	8004468 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e1a5      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f8:	4b46      	ldr	r3, [pc, #280]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007404:	4b43      	ldr	r3, [pc, #268]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	4940      	ldr	r1, [pc, #256]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]
 8007418:	e015      	b.n	8007446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800741a:	4b3f      	ldr	r3, [pc, #252]	; (8007518 <HAL_RCC_OscConfig+0x2b0>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fd f822 	bl	8004468 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007428:	f7fd f81e 	bl	8004468 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e184      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800743a:	4b36      	ldr	r3, [pc, #216]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d030      	beq.n	80074b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d016      	beq.n	8007488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800745a:	4b30      	ldr	r3, [pc, #192]	; (800751c <HAL_RCC_OscConfig+0x2b4>)
 800745c:	2201      	movs	r2, #1
 800745e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fd f802 	bl	8004468 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007468:	f7fc fffe 	bl	8004468 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e164      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800747a:	4b26      	ldr	r3, [pc, #152]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 800747c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <HAL_RCC_OscConfig+0x200>
 8007486:	e015      	b.n	80074b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007488:	4b24      	ldr	r3, [pc, #144]	; (800751c <HAL_RCC_OscConfig+0x2b4>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748e:	f7fc ffeb 	bl	8004468 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007496:	f7fc ffe7 	bl	8004468 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e14d      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a8:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f0      	bne.n	8007496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80a0 	beq.w	8007602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074c6:	4b13      	ldr	r3, [pc, #76]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10f      	bne.n	80074f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60bb      	str	r3, [r7, #8]
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80074dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e0:	6413      	str	r3, [r2, #64]	; 0x40
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <HAL_RCC_OscConfig+0x2ac>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ea:	60bb      	str	r3, [r7, #8]
 80074ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_OscConfig+0x2b8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d121      	bne.n	8007542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RCC_OscConfig+0x2b8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <HAL_RCC_OscConfig+0x2b8>)
 8007504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800750a:	f7fc ffad 	bl	8004468 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007510:	e011      	b.n	8007536 <HAL_RCC_OscConfig+0x2ce>
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800
 8007518:	42470000 	.word	0x42470000
 800751c:	42470e80 	.word	0x42470e80
 8007520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007524:	f7fc ffa0 	bl	8004468 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e106      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007536:	4b85      	ldr	r3, [pc, #532]	; (800774c <HAL_RCC_OscConfig+0x4e4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d106      	bne.n	8007558 <HAL_RCC_OscConfig+0x2f0>
 800754a:	4b81      	ldr	r3, [pc, #516]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 800754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754e:	4a80      	ldr	r2, [pc, #512]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6713      	str	r3, [r2, #112]	; 0x70
 8007556:	e01c      	b.n	8007592 <HAL_RCC_OscConfig+0x32a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b05      	cmp	r3, #5
 800755e:	d10c      	bne.n	800757a <HAL_RCC_OscConfig+0x312>
 8007560:	4b7b      	ldr	r3, [pc, #492]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	4a7a      	ldr	r2, [pc, #488]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007566:	f043 0304 	orr.w	r3, r3, #4
 800756a:	6713      	str	r3, [r2, #112]	; 0x70
 800756c:	4b78      	ldr	r3, [pc, #480]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 800756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007570:	4a77      	ldr	r2, [pc, #476]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	6713      	str	r3, [r2, #112]	; 0x70
 8007578:	e00b      	b.n	8007592 <HAL_RCC_OscConfig+0x32a>
 800757a:	4b75      	ldr	r3, [pc, #468]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	4a74      	ldr	r2, [pc, #464]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	6713      	str	r3, [r2, #112]	; 0x70
 8007586:	4b72      	ldr	r3, [pc, #456]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758a:	4a71      	ldr	r2, [pc, #452]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 800758c:	f023 0304 	bic.w	r3, r3, #4
 8007590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d015      	beq.n	80075c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759a:	f7fc ff65 	bl	8004468 <HAL_GetTick>
 800759e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075a0:	e00a      	b.n	80075b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a2:	f7fc ff61 	bl	8004468 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e0c5      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b8:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0ee      	beq.n	80075a2 <HAL_RCC_OscConfig+0x33a>
 80075c4:	e014      	b.n	80075f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c6:	f7fc ff4f 	bl	8004468 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075cc:	e00a      	b.n	80075e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ce:	f7fc ff4b 	bl	8004468 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075dc:	4293      	cmp	r3, r2
 80075de:	d901      	bls.n	80075e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e0af      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e4:	4b5a      	ldr	r3, [pc, #360]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1ee      	bne.n	80075ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d105      	bne.n	8007602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f6:	4b56      	ldr	r3, [pc, #344]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	4a55      	ldr	r2, [pc, #340]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80075fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 809b 	beq.w	8007742 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800760c:	4b50      	ldr	r3, [pc, #320]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 030c 	and.w	r3, r3, #12
 8007614:	2b08      	cmp	r3, #8
 8007616:	d05c      	beq.n	80076d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d141      	bne.n	80076a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007620:	4b4c      	ldr	r3, [pc, #304]	; (8007754 <HAL_RCC_OscConfig+0x4ec>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007626:	f7fc ff1f 	bl	8004468 <HAL_GetTick>
 800762a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800762c:	e008      	b.n	8007640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800762e:	f7fc ff1b 	bl	8004468 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e081      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007640:	4b43      	ldr	r3, [pc, #268]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f0      	bne.n	800762e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	019b      	lsls	r3, r3, #6
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	3b01      	subs	r3, #1
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	4937      	ldr	r1, [pc, #220]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007672:	4313      	orrs	r3, r2
 8007674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007676:	4b37      	ldr	r3, [pc, #220]	; (8007754 <HAL_RCC_OscConfig+0x4ec>)
 8007678:	2201      	movs	r2, #1
 800767a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fc fef4 	bl	8004468 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007684:	f7fc fef0 	bl	8004468 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e056      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f0      	beq.n	8007684 <HAL_RCC_OscConfig+0x41c>
 80076a2:	e04e      	b.n	8007742 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a4:	4b2b      	ldr	r3, [pc, #172]	; (8007754 <HAL_RCC_OscConfig+0x4ec>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076aa:	f7fc fedd 	bl	8004468 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076b2:	f7fc fed9 	bl	8004468 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e03f      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c4:	4b22      	ldr	r3, [pc, #136]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f0      	bne.n	80076b2 <HAL_RCC_OscConfig+0x44a>
 80076d0:	e037      	b.n	8007742 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e032      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076de:	4b1c      	ldr	r3, [pc, #112]	; (8007750 <HAL_RCC_OscConfig+0x4e8>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d028      	beq.n	800773e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d121      	bne.n	800773e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007704:	429a      	cmp	r2, r3
 8007706:	d11a      	bne.n	800773e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800770e:	4013      	ands	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007714:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007716:	4293      	cmp	r3, r2
 8007718:	d111      	bne.n	800773e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	3b01      	subs	r3, #1
 8007728:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800772a:	429a      	cmp	r2, r3
 800772c:	d107      	bne.n	800773e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d001      	beq.n	8007742 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40007000 	.word	0x40007000
 8007750:	40023800 	.word	0x40023800
 8007754:	42470060 	.word	0x42470060

08007758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0cc      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800776c:	4b68      	ldr	r3, [pc, #416]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d90c      	bls.n	8007794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b65      	ldr	r3, [pc, #404]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b63      	ldr	r3, [pc, #396]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0b8      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d020      	beq.n	80077e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077ac:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4a58      	ldr	r2, [pc, #352]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077c4:	4b53      	ldr	r3, [pc, #332]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a52      	ldr	r2, [pc, #328]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d0:	4b50      	ldr	r3, [pc, #320]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	494d      	ldr	r1, [pc, #308]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d044      	beq.n	8007878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d107      	bne.n	8007806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f6:	4b47      	ldr	r3, [pc, #284]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d119      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e07f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d003      	beq.n	8007816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007812:	2b03      	cmp	r3, #3
 8007814:	d107      	bne.n	8007826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007816:	4b3f      	ldr	r3, [pc, #252]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e06f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007826:	4b3b      	ldr	r3, [pc, #236]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e067      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007836:	4b37      	ldr	r3, [pc, #220]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f023 0203 	bic.w	r2, r3, #3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	4934      	ldr	r1, [pc, #208]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007844:	4313      	orrs	r3, r2
 8007846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007848:	f7fc fe0e 	bl	8004468 <HAL_GetTick>
 800784c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784e:	e00a      	b.n	8007866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007850:	f7fc fe0a 	bl	8004468 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e04f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 020c 	and.w	r2, r3, #12
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	429a      	cmp	r2, r3
 8007876:	d1eb      	bne.n	8007850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007878:	4b25      	ldr	r3, [pc, #148]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d20c      	bcs.n	80078a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007886:	4b22      	ldr	r3, [pc, #136]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788e:	4b20      	ldr	r3, [pc, #128]	; (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e032      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078ac:	4b19      	ldr	r3, [pc, #100]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4916      	ldr	r1, [pc, #88]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	490e      	ldr	r1, [pc, #56]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078de:	f000 f821 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	490a      	ldr	r1, [pc, #40]	; (8007918 <HAL_RCC_ClockConfig+0x1c0>)
 80078f0:	5ccb      	ldrb	r3, [r1, r3]
 80078f2:	fa22 f303 	lsr.w	r3, r2, r3
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <HAL_RCC_ClockConfig+0x1c4>)
 80078f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <HAL_RCC_ClockConfig+0x1c8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc fd6e 	bl	80043e0 <HAL_InitTick>

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40023c00 	.word	0x40023c00
 8007914:	40023800 	.word	0x40023800
 8007918:	0800ea50 	.word	0x0800ea50
 800791c:	2000000c 	.word	0x2000000c
 8007920:	2000037c 	.word	0x2000037c

08007924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007924:	b5b0      	push	{r4, r5, r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800792a:	2100      	movs	r1, #0
 800792c:	6079      	str	r1, [r7, #4]
 800792e:	2100      	movs	r1, #0
 8007930:	60f9      	str	r1, [r7, #12]
 8007932:	2100      	movs	r1, #0
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007936:	2100      	movs	r1, #0
 8007938:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800793a:	4952      	ldr	r1, [pc, #328]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800793c:	6889      	ldr	r1, [r1, #8]
 800793e:	f001 010c 	and.w	r1, r1, #12
 8007942:	2908      	cmp	r1, #8
 8007944:	d00d      	beq.n	8007962 <HAL_RCC_GetSysClockFreq+0x3e>
 8007946:	2908      	cmp	r1, #8
 8007948:	f200 8094 	bhi.w	8007a74 <HAL_RCC_GetSysClockFreq+0x150>
 800794c:	2900      	cmp	r1, #0
 800794e:	d002      	beq.n	8007956 <HAL_RCC_GetSysClockFreq+0x32>
 8007950:	2904      	cmp	r1, #4
 8007952:	d003      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x38>
 8007954:	e08e      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007956:	4b4c      	ldr	r3, [pc, #304]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8007958:	60bb      	str	r3, [r7, #8]
       break;
 800795a:	e08e      	b.n	8007a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800795c:	4b4b      	ldr	r3, [pc, #300]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x168>)
 800795e:	60bb      	str	r3, [r7, #8]
      break;
 8007960:	e08b      	b.n	8007a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007962:	4948      	ldr	r1, [pc, #288]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8007964:	6849      	ldr	r1, [r1, #4]
 8007966:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800796a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800796c:	4945      	ldr	r1, [pc, #276]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800796e:	6849      	ldr	r1, [r1, #4]
 8007970:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007974:	2900      	cmp	r1, #0
 8007976:	d024      	beq.n	80079c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007978:	4942      	ldr	r1, [pc, #264]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800797a:	6849      	ldr	r1, [r1, #4]
 800797c:	0989      	lsrs	r1, r1, #6
 800797e:	4608      	mov	r0, r1
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007988:	f04f 0500 	mov.w	r5, #0
 800798c:	ea00 0204 	and.w	r2, r0, r4
 8007990:	ea01 0305 	and.w	r3, r1, r5
 8007994:	493d      	ldr	r1, [pc, #244]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x168>)
 8007996:	fb01 f003 	mul.w	r0, r1, r3
 800799a:	2100      	movs	r1, #0
 800799c:	fb01 f102 	mul.w	r1, r1, r2
 80079a0:	1844      	adds	r4, r0, r1
 80079a2:	493a      	ldr	r1, [pc, #232]	; (8007a8c <HAL_RCC_GetSysClockFreq+0x168>)
 80079a4:	fba2 0101 	umull	r0, r1, r2, r1
 80079a8:	1863      	adds	r3, r4, r1
 80079aa:	4619      	mov	r1, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f04f 0300 	mov.w	r3, #0
 80079b4:	f7f8 fe48 	bl	8000648 <__aeabi_uldivmod>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4613      	mov	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e04a      	b.n	8007a58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c2:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	099b      	lsrs	r3, r3, #6
 80079c8:	461a      	mov	r2, r3
 80079ca:	f04f 0300 	mov.w	r3, #0
 80079ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	ea02 0400 	and.w	r4, r2, r0
 80079da:	ea03 0501 	and.w	r5, r3, r1
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	014b      	lsls	r3, r1, #5
 80079ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079f0:	0142      	lsls	r2, r0, #5
 80079f2:	4610      	mov	r0, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	1b00      	subs	r0, r0, r4
 80079f8:	eb61 0105 	sbc.w	r1, r1, r5
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	018b      	lsls	r3, r1, #6
 8007a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a0a:	0182      	lsls	r2, r0, #6
 8007a0c:	1a12      	subs	r2, r2, r0
 8007a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f04f 0100 	mov.w	r1, #0
 8007a1a:	00d9      	lsls	r1, r3, #3
 8007a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a20:	00d0      	lsls	r0, r2, #3
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	1912      	adds	r2, r2, r4
 8007a28:	eb45 0303 	adc.w	r3, r5, r3
 8007a2c:	f04f 0000 	mov.w	r0, #0
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	0299      	lsls	r1, r3, #10
 8007a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a3a:	0290      	lsls	r0, r2, #10
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4610      	mov	r0, r2
 8007a42:	4619      	mov	r1, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f04f 0300 	mov.w	r3, #0
 8007a4c:	f7f8 fdfc 	bl	8000648 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4613      	mov	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a58:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	3301      	adds	r3, #1
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	60bb      	str	r3, [r7, #8]
      break;
 8007a72:	e002      	b.n	8007a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a74:	4b04      	ldr	r3, [pc, #16]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8007a76:	60bb      	str	r3, [r7, #8]
      break;
 8007a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}
 8007a84:	40023800 	.word	0x40023800
 8007a88:	00f42400 	.word	0x00f42400
 8007a8c:	017d7840 	.word	0x017d7840

08007a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aac:	f7ff fff0 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0a9b      	lsrs	r3, r3, #10
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4903      	ldr	r1, [pc, #12]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	0800ea60 	.word	0x0800ea60

08007ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ad4:	f7ff ffdc 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	0b5b      	lsrs	r3, r3, #13
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	4903      	ldr	r1, [pc, #12]	; (8007af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae6:	5ccb      	ldrb	r3, [r1, r3]
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40023800 	.word	0x40023800
 8007af4:	0800ea60 	.word	0x0800ea60

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d038      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b20:	4b68      	ldr	r3, [pc, #416]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b26:	f7fc fc9f 	bl	8004468 <HAL_GetTick>
 8007b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b2e:	f7fc fc9b 	bl	8004468 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e0bd      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b40:	4b61      	ldr	r3, [pc, #388]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	019b      	lsls	r3, r3, #6
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	071b      	lsls	r3, r3, #28
 8007b5e:	495a      	ldr	r1, [pc, #360]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b66:	4b57      	ldr	r3, [pc, #348]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b6c:	f7fc fc7c 	bl	8004468 <HAL_GetTick>
 8007b70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b74:	f7fc fc78 	bl	8004468 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e09a      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b86:	4b50      	ldr	r3, [pc, #320]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8083 	beq.w	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4b48      	ldr	r3, [pc, #288]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	4a47      	ldr	r2, [pc, #284]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bae:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb0:	4b45      	ldr	r3, [pc, #276]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bbc:	4b43      	ldr	r3, [pc, #268]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a42      	ldr	r2, [pc, #264]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc8:	f7fc fc4e 	bl	8004468 <HAL_GetTick>
 8007bcc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bd0:	f7fc fc4a 	bl	8004468 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e06c      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007be2:	4b3a      	ldr	r3, [pc, #232]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bee:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d02f      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d028      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c0c:	4b2e      	ldr	r3, [pc, #184]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c14:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c16:	4b2e      	ldr	r3, [pc, #184]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c22:	4a29      	ldr	r2, [pc, #164]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c28:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d114      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c34:	f7fc fc18 	bl	8004468 <HAL_GetTick>
 8007c38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c3c:	f7fc fc14 	bl	8004468 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e034      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c52:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0ee      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6a:	d10d      	bne.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007c6c:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c80:	4911      	ldr	r1, [pc, #68]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	e005      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c92:	6093      	str	r3, [r2, #8]
 8007c94:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca0:	4909      	ldr	r1, [pc, #36]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7d1a      	ldrb	r2, [r3, #20]
 8007cb6:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007cb8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	42470068 	.word	0x42470068
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40007000 	.word	0x40007000
 8007cd0:	42470e40 	.word	0x42470e40
 8007cd4:	424711e0 	.word	0x424711e0

08007cd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e083      	b.n	8007df2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7f5b      	ldrb	r3, [r3, #29]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7f9 f9e4 	bl	80010c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	22ca      	movs	r2, #202	; 0xca
 8007d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2253      	movs	r2, #83	; 0x53
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f897 	bl	8007e4a <RTC_EnterInitMode>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e05e      	b.n	8007df2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6812      	ldr	r2, [r2, #0]
 8007d3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d46:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6899      	ldr	r1, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	68d2      	ldr	r2, [r2, #12]
 8007d6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6919      	ldr	r1, [r3, #16]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	041a      	lsls	r2, r3, #16
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d92:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10e      	bne.n	8007dc0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f829 	bl	8007dfa <HAL_RTC_WaitForSynchro>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	22ff      	movs	r2, #255	; 0xff
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2204      	movs	r2, #4
 8007dba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e018      	b.n	8007df2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	22ff      	movs	r2, #255	; 0xff
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e16:	f7fc fb27 	bl	8004468 <HAL_GetTick>
 8007e1a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e1c:	e009      	b.n	8007e32 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e1e:	f7fc fb23 	bl	8004468 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e2c:	d901      	bls.n	8007e32 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e007      	b.n	8007e42 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0ee      	beq.n	8007e1e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d119      	bne.n	8007e98 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e6e:	f7fc fafb 	bl	8004468 <HAL_GetTick>
 8007e72:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e74:	e009      	b.n	8007e8a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e76:	f7fc faf7 	bl	8004468 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e84:	d901      	bls.n	8007e8a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e007      	b.n	8007e9a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0ee      	beq.n	8007e76 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e041      	b.n	8007f38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7f9 f913 	bl	80010f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f000 f8f1 	bl	80080c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_TIM_ConfigClockSource+0x18>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e0b3      	b.n	80080c0 <HAL_TIM_ConfigClockSource+0x180>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f90:	d03e      	beq.n	8008010 <HAL_TIM_ConfigClockSource+0xd0>
 8007f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f96:	f200 8087 	bhi.w	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9e:	f000 8085 	beq.w	80080ac <HAL_TIM_ConfigClockSource+0x16c>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa6:	d87f      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fa8:	2b70      	cmp	r3, #112	; 0x70
 8007faa:	d01a      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0xa2>
 8007fac:	2b70      	cmp	r3, #112	; 0x70
 8007fae:	d87b      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fb0:	2b60      	cmp	r3, #96	; 0x60
 8007fb2:	d050      	beq.n	8008056 <HAL_TIM_ConfigClockSource+0x116>
 8007fb4:	2b60      	cmp	r3, #96	; 0x60
 8007fb6:	d877      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fb8:	2b50      	cmp	r3, #80	; 0x50
 8007fba:	d03c      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0xf6>
 8007fbc:	2b50      	cmp	r3, #80	; 0x50
 8007fbe:	d873      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d058      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0x136>
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d86f      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fc8:	2b30      	cmp	r3, #48	; 0x30
 8007fca:	d064      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x156>
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	d86b      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d060      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x156>
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d867      	bhi.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05c      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x156>
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d05a      	beq.n	8008096 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fe0:	e062      	b.n	80080a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6899      	ldr	r1, [r3, #8]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f000 f963 	bl	80082bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008004:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	609a      	str	r2, [r3, #8]
      break;
 800800e:	e04e      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	6899      	ldr	r1, [r3, #8]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f000 f94c 	bl	80082bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008032:	609a      	str	r2, [r3, #8]
      break;
 8008034:	e03b      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6859      	ldr	r1, [r3, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	461a      	mov	r2, r3
 8008044:	f000 f8c0 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2150      	movs	r1, #80	; 0x50
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f919 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8008054:	e02b      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6859      	ldr	r1, [r3, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	461a      	mov	r2, r3
 8008064:	f000 f8df 	bl	8008226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2160      	movs	r1, #96	; 0x60
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f909 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8008074:	e01b      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6859      	ldr	r1, [r3, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	461a      	mov	r2, r3
 8008084:	f000 f8a0 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2140      	movs	r1, #64	; 0x40
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f8f9 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8008094:	e00b      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f000 f8f0 	bl	8008286 <TIM_ITRx_SetConfig>
        break;
 80080a6:	e002      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a34      	ldr	r2, [pc, #208]	; (80081ac <TIM_Base_SetConfig+0xe4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0x38>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0x38>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a31      	ldr	r2, [pc, #196]	; (80081b0 <TIM_Base_SetConfig+0xe8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0x38>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a30      	ldr	r2, [pc, #192]	; (80081b4 <TIM_Base_SetConfig+0xec>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0x38>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a2f      	ldr	r2, [pc, #188]	; (80081b8 <TIM_Base_SetConfig+0xf0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d108      	bne.n	8008112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a25      	ldr	r2, [pc, #148]	; (80081ac <TIM_Base_SetConfig+0xe4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01b      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008120:	d017      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <TIM_Base_SetConfig+0xe8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a21      	ldr	r2, [pc, #132]	; (80081b4 <TIM_Base_SetConfig+0xec>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00f      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <TIM_Base_SetConfig+0xf0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00b      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a1f      	ldr	r2, [pc, #124]	; (80081bc <TIM_Base_SetConfig+0xf4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d007      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a1e      	ldr	r2, [pc, #120]	; (80081c0 <TIM_Base_SetConfig+0xf8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d003      	beq.n	8008152 <TIM_Base_SetConfig+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <TIM_Base_SetConfig+0xfc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d108      	bne.n	8008164 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a08      	ldr	r2, [pc, #32]	; (80081ac <TIM_Base_SetConfig+0xe4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d103      	bne.n	8008198 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	615a      	str	r2, [r3, #20]
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010000 	.word	0x40010000
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40014000 	.word	0x40014000
 80081c0:	40014400 	.word	0x40014400
 80081c4:	40014800 	.word	0x40014800

080081c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0201 	bic.w	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 030a 	bic.w	r3, r3, #10
 8008204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f023 0210 	bic.w	r2, r3, #16
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f043 0307 	orr.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	021a      	lsls	r2, r3, #8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	431a      	orrs	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e050      	b.n	80083b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1c      	ldr	r2, [pc, #112]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d018      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008360:	d013      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00e      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a16      	ldr	r2, [pc, #88]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d009      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d004      	beq.n	800838a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d10c      	bne.n	80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4313      	orrs	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40010000 	.word	0x40010000
 80083c8:	40000400 	.word	0x40000400
 80083cc:	40000800 	.word	0x40000800
 80083d0:	40000c00 	.word	0x40000c00
 80083d4:	40014000 	.word	0x40014000

080083d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e03f      	b.n	800846a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7f8 fe9a 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2224      	movs	r2, #36	; 0x24
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800841a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc09 	bl	8008c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695a      	ldr	r2, [r3, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e021      	b.n	80084c8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2224      	movs	r2, #36	; 0x24
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800849a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7f8 fed7 	bl	8001250 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d130      	bne.n	800854c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_UART_Transmit_IT+0x26>
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e029      	b.n	800854e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_UART_Transmit_IT+0x38>
 8008504:	2302      	movs	r3, #2
 8008506:	e022      	b.n	800854e <HAL_UART_Transmit_IT+0x7e>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	88fa      	ldrh	r2, [r7, #6]
 800851a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	88fa      	ldrh	r2, [r7, #6]
 8008520:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2221      	movs	r2, #33	; 0x21
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008546:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	e000      	b.n	800854e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800854c:	2302      	movs	r3, #2
  }
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b20      	cmp	r3, #32
 8008572:	d11d      	bne.n	80085b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <HAL_UART_Receive_IT+0x26>
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e016      	b.n	80085b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <HAL_UART_Receive_IT+0x38>
 800858e:	2302      	movs	r3, #2
 8008590:	e00f      	b.n	80085b2 <HAL_UART_Receive_IT+0x58>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	461a      	mov	r2, r3
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 f9ca 	bl	8008940 <UART_Start_Receive_IT>
 80085ac:	4603      	mov	r3, r0
 80085ae:	e000      	b.n	80085b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085b0:	2302      	movs	r3, #2
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80085dc:	2300      	movs	r3, #0
 80085de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10d      	bne.n	800860e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_UART_IRQHandler+0x52>
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa7d 	bl	8008b06 <UART_Receive_IT>
      return;
 800860c:	e17c      	b.n	8008908 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80b1 	beq.w	8008778 <HAL_UART_IRQHandler+0x1bc>
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <HAL_UART_IRQHandler+0x70>
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80a6 	beq.w	8008778 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_UART_IRQHandler+0x90>
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	f043 0201 	orr.w	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_UART_IRQHandler+0xb0>
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	f043 0202 	orr.w	r2, r3, #2
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <HAL_UART_IRQHandler+0xd0>
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	f043 0204 	orr.w	r2, r3, #4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00f      	beq.n	80086b6 <HAL_UART_IRQHandler+0xfa>
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <HAL_UART_IRQHandler+0xee>
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f043 0208 	orr.w	r2, r3, #8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 811f 	beq.w	80088fe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <HAL_UART_IRQHandler+0x11e>
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	f003 0320 	and.w	r3, r3, #32
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa16 	bl	8008b06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b40      	cmp	r3, #64	; 0x40
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_UART_IRQHandler+0x146>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d031      	beq.n	8008766 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f956 	bl	80089b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d123      	bne.n	800875e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695a      	ldr	r2, [r3, #20]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008724:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d013      	beq.n	8008756 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	4a77      	ldr	r2, [pc, #476]	; (8008910 <HAL_UART_IRQHandler+0x354>)
 8008734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	4618      	mov	r0, r3
 800873c:	f7fc f877 	bl	800482e <HAL_DMA_Abort_IT>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	e00e      	b.n	8008774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8dc 	bl	8008914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	e00a      	b.n	8008774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f8d8 	bl	8008914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008764:	e006      	b.n	8008774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8d4 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008772:	e0c4      	b.n	80088fe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008774:	bf00      	nop
    return;
 8008776:	e0c2      	b.n	80088fe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	2b01      	cmp	r3, #1
 800877e:	f040 80a2 	bne.w	80088c6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 809c 	beq.w	80088c6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8096 	beq.w	80088c6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d14f      	bne.n	800885e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80087c8:	8a3b      	ldrh	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 8099 	beq.w	8008902 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087d4:	8a3a      	ldrh	r2, [r7, #16]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	f080 8093 	bcs.w	8008902 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8a3a      	ldrh	r2, [r7, #16]
 80087e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ec:	d02b      	beq.n	8008846 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087fc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0201 	bic.w	r2, r2, #1
 800880c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695a      	ldr	r2, [r3, #20]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800881c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0210 	bic.w	r2, r2, #16
 800883a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	4618      	mov	r0, r3
 8008842:	f7fb ff84 	bl	800474e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884e:	b29b      	uxth	r3, r3
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	b29b      	uxth	r3, r3
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f866 	bl	8008928 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800885c:	e051      	b.n	8008902 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008866:	b29b      	uxth	r3, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d047      	beq.n	8008906 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008876:	8a7b      	ldrh	r3, [r7, #18]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d044      	beq.n	8008906 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800888a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0201 	bic.w	r2, r2, #1
 800889a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0210 	bic.w	r2, r2, #16
 80088b8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088ba:	8a7b      	ldrh	r3, [r7, #18]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f832 	bl	8008928 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088c4:	e01f      	b.n	8008906 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_UART_IRQHandler+0x326>
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f8ab 	bl	8008a36 <UART_Transmit_IT>
    return;
 80088e0:	e012      	b.n	8008908 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00d      	beq.n	8008908 <HAL_UART_IRQHandler+0x34c>
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d008      	beq.n	8008908 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8ed 	bl	8008ad6 <UART_EndTransmit_IT>
    return;
 80088fc:	e004      	b.n	8008908 <HAL_UART_IRQHandler+0x34c>
    return;
 80088fe:	bf00      	nop
 8008900:	e002      	b.n	8008908 <HAL_UART_IRQHandler+0x34c>
      return;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <HAL_UART_IRQHandler+0x34c>
      return;
 8008906:	bf00      	nop
  }
}
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08008a0f 	.word	0x08008a0f

08008914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	88fa      	ldrh	r2, [r7, #6]
 8008958:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	88fa      	ldrh	r2, [r7, #6]
 800895e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2222      	movs	r2, #34	; 0x22
 800896a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008984:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 0201 	orr.w	r2, r2, #1
 8008994:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 0220 	orr.w	r2, r2, #32
 80089a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695a      	ldr	r2, [r3, #20]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0201 	bic.w	r2, r2, #1
 80089da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d107      	bne.n	80089f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0210 	bic.w	r2, r2, #16
 80089f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff73 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b21      	cmp	r3, #33	; 0x21
 8008a48:	d13e      	bne.n	8008ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a52:	d114      	bne.n	8008a7e <UART_Transmit_IT+0x48>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d110      	bne.n	8008a7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	1c9a      	adds	r2, r3, #2
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	621a      	str	r2, [r3, #32]
 8008a7c:	e008      	b.n	8008a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	1c59      	adds	r1, r3, #1
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6211      	str	r1, [r2, #32]
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10f      	bne.n	8008ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e000      	b.n	8008aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ac8:	2302      	movs	r3, #2
  }
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7fa fd7a 	bl	80035f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b22      	cmp	r3, #34	; 0x22
 8008b18:	f040 8087 	bne.w	8008c2a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b24:	d117      	bne.n	8008b56 <UART_Receive_IT+0x50>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d113      	bne.n	8008b56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28
 8008b54:	e026      	b.n	8008ba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b68:	d007      	beq.n	8008b7a <UART_Receive_IT+0x74>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <UART_Receive_IT+0x82>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e008      	b.n	8008b9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d136      	bne.n	8008c26 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0220 	bic.w	r2, r2, #32
 8008bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d10e      	bne.n	8008c16 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0210 	bic.w	r2, r2, #16
 8008c06:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fe8a 	bl	8008928 <HAL_UARTEx_RxEventCallback>
 8008c14:	e002      	b.n	8008c1c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fa fcc8 	bl	80035ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e002      	b.n	8008c2c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	e000      	b.n	8008c2c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	b09f      	sub	sp, #124	; 0x7c
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4a:	68d9      	ldr	r1, [r3, #12]
 8008c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	ea40 0301 	orr.w	r3, r0, r1
 8008c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c58:	689a      	ldr	r2, [r3, #8]
 8008c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	431a      	orrs	r2, r3
 8008c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c78:	f021 010c 	bic.w	r1, r1, #12
 8008c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c82:	430b      	orrs	r3, r1
 8008c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	6999      	ldr	r1, [r3, #24]
 8008c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	ea40 0301 	orr.w	r3, r0, r1
 8008c9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	4bc5      	ldr	r3, [pc, #788]	; (8008fb8 <UART_SetConfig+0x384>)
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d004      	beq.n	8008cb2 <UART_SetConfig+0x7e>
 8008ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	4bc3      	ldr	r3, [pc, #780]	; (8008fbc <UART_SetConfig+0x388>)
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d103      	bne.n	8008cba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cb2:	f7fe ff0d 	bl	8007ad0 <HAL_RCC_GetPCLK2Freq>
 8008cb6:	6778      	str	r0, [r7, #116]	; 0x74
 8008cb8:	e002      	b.n	8008cc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cba:	f7fe fef5 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8008cbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc8:	f040 80b6 	bne.w	8008e38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cce:	461c      	mov	r4, r3
 8008cd0:	f04f 0500 	mov.w	r5, #0
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	1891      	adds	r1, r2, r2
 8008cda:	6439      	str	r1, [r7, #64]	; 0x40
 8008cdc:	415b      	adcs	r3, r3
 8008cde:	647b      	str	r3, [r7, #68]	; 0x44
 8008ce0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ce4:	1912      	adds	r2, r2, r4
 8008ce6:	eb45 0303 	adc.w	r3, r5, r3
 8008cea:	f04f 0000 	mov.w	r0, #0
 8008cee:	f04f 0100 	mov.w	r1, #0
 8008cf2:	00d9      	lsls	r1, r3, #3
 8008cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cf8:	00d0      	lsls	r0, r2, #3
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	1911      	adds	r1, r2, r4
 8008d00:	6639      	str	r1, [r7, #96]	; 0x60
 8008d02:	416b      	adcs	r3, r5
 8008d04:	667b      	str	r3, [r7, #100]	; 0x64
 8008d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	1891      	adds	r1, r2, r2
 8008d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d14:	415b      	adcs	r3, r3
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008d20:	f7f7 fc92 	bl	8000648 <__aeabi_uldivmod>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4ba5      	ldr	r3, [pc, #660]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	011e      	lsls	r6, r3, #4
 8008d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d34:	461c      	mov	r4, r3
 8008d36:	f04f 0500 	mov.w	r5, #0
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	1891      	adds	r1, r2, r2
 8008d40:	6339      	str	r1, [r7, #48]	; 0x30
 8008d42:	415b      	adcs	r3, r3
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
 8008d46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d4a:	1912      	adds	r2, r2, r4
 8008d4c:	eb45 0303 	adc.w	r3, r5, r3
 8008d50:	f04f 0000 	mov.w	r0, #0
 8008d54:	f04f 0100 	mov.w	r1, #0
 8008d58:	00d9      	lsls	r1, r3, #3
 8008d5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d5e:	00d0      	lsls	r0, r2, #3
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	1911      	adds	r1, r2, r4
 8008d66:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d68:	416b      	adcs	r3, r5
 8008d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	461a      	mov	r2, r3
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	1891      	adds	r1, r2, r2
 8008d78:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d7a:	415b      	adcs	r3, r3
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008d86:	f7f7 fc5f 	bl	8000648 <__aeabi_uldivmod>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4b8c      	ldr	r3, [pc, #560]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008d90:	fba3 1302 	umull	r1, r3, r3, r2
 8008d94:	095b      	lsrs	r3, r3, #5
 8008d96:	2164      	movs	r1, #100	; 0x64
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	3332      	adds	r3, #50	; 0x32
 8008da2:	4a87      	ldr	r2, [pc, #540]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008da4:	fba2 2303 	umull	r2, r3, r2, r3
 8008da8:	095b      	lsrs	r3, r3, #5
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008db0:	441e      	add	r6, r3
 8008db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008db4:	4618      	mov	r0, r3
 8008db6:	f04f 0100 	mov.w	r1, #0
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	1894      	adds	r4, r2, r2
 8008dc0:	623c      	str	r4, [r7, #32]
 8008dc2:	415b      	adcs	r3, r3
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dca:	1812      	adds	r2, r2, r0
 8008dcc:	eb41 0303 	adc.w	r3, r1, r3
 8008dd0:	f04f 0400 	mov.w	r4, #0
 8008dd4:	f04f 0500 	mov.w	r5, #0
 8008dd8:	00dd      	lsls	r5, r3, #3
 8008dda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dde:	00d4      	lsls	r4, r2, #3
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	1814      	adds	r4, r2, r0
 8008de6:	653c      	str	r4, [r7, #80]	; 0x50
 8008de8:	414b      	adcs	r3, r1
 8008dea:	657b      	str	r3, [r7, #84]	; 0x54
 8008dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	461a      	mov	r2, r3
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	1891      	adds	r1, r2, r2
 8008df8:	61b9      	str	r1, [r7, #24]
 8008dfa:	415b      	adcs	r3, r3
 8008dfc:	61fb      	str	r3, [r7, #28]
 8008dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008e06:	f7f7 fc1f 	bl	8000648 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4b6c      	ldr	r3, [pc, #432]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008e10:	fba3 1302 	umull	r1, r3, r3, r2
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	2164      	movs	r1, #100	; 0x64
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	3332      	adds	r3, #50	; 0x32
 8008e22:	4a67      	ldr	r2, [pc, #412]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008e24:	fba2 2303 	umull	r2, r3, r2, r3
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f003 0207 	and.w	r2, r3, #7
 8008e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4432      	add	r2, r6
 8008e34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e36:	e0b9      	b.n	8008fac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e3a:	461c      	mov	r4, r3
 8008e3c:	f04f 0500 	mov.w	r5, #0
 8008e40:	4622      	mov	r2, r4
 8008e42:	462b      	mov	r3, r5
 8008e44:	1891      	adds	r1, r2, r2
 8008e46:	6139      	str	r1, [r7, #16]
 8008e48:	415b      	adcs	r3, r3
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e50:	1912      	adds	r2, r2, r4
 8008e52:	eb45 0303 	adc.w	r3, r5, r3
 8008e56:	f04f 0000 	mov.w	r0, #0
 8008e5a:	f04f 0100 	mov.w	r1, #0
 8008e5e:	00d9      	lsls	r1, r3, #3
 8008e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e64:	00d0      	lsls	r0, r2, #3
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	eb12 0804 	adds.w	r8, r2, r4
 8008e6e:	eb43 0905 	adc.w	r9, r3, r5
 8008e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f04f 0100 	mov.w	r1, #0
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	008b      	lsls	r3, r1, #2
 8008e86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e8a:	0082      	lsls	r2, r0, #2
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	4649      	mov	r1, r9
 8008e90:	f7f7 fbda 	bl	8000648 <__aeabi_uldivmod>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4b49      	ldr	r3, [pc, #292]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	011e      	lsls	r6, r3, #4
 8008ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f04f 0100 	mov.w	r1, #0
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	1894      	adds	r4, r2, r2
 8008eb0:	60bc      	str	r4, [r7, #8]
 8008eb2:	415b      	adcs	r3, r3
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eba:	1812      	adds	r2, r2, r0
 8008ebc:	eb41 0303 	adc.w	r3, r1, r3
 8008ec0:	f04f 0400 	mov.w	r4, #0
 8008ec4:	f04f 0500 	mov.w	r5, #0
 8008ec8:	00dd      	lsls	r5, r3, #3
 8008eca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ece:	00d4      	lsls	r4, r2, #3
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	1814      	adds	r4, r2, r0
 8008ed6:	64bc      	str	r4, [r7, #72]	; 0x48
 8008ed8:	414b      	adcs	r3, r1
 8008eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f04f 0100 	mov.w	r1, #0
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	008b      	lsls	r3, r1, #2
 8008ef0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ef4:	0082      	lsls	r2, r0, #2
 8008ef6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008efa:	f7f7 fba5 	bl	8000648 <__aeabi_uldivmod>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008f04:	fba3 1302 	umull	r1, r3, r3, r2
 8008f08:	095b      	lsrs	r3, r3, #5
 8008f0a:	2164      	movs	r1, #100	; 0x64
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	3332      	adds	r3, #50	; 0x32
 8008f16:	4a2a      	ldr	r2, [pc, #168]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008f18:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1c:	095b      	lsrs	r3, r3, #5
 8008f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f22:	441e      	add	r6, r3
 8008f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f26:	4618      	mov	r0, r3
 8008f28:	f04f 0100 	mov.w	r1, #0
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	1894      	adds	r4, r2, r2
 8008f32:	603c      	str	r4, [r7, #0]
 8008f34:	415b      	adcs	r3, r3
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f3c:	1812      	adds	r2, r2, r0
 8008f3e:	eb41 0303 	adc.w	r3, r1, r3
 8008f42:	f04f 0400 	mov.w	r4, #0
 8008f46:	f04f 0500 	mov.w	r5, #0
 8008f4a:	00dd      	lsls	r5, r3, #3
 8008f4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f50:	00d4      	lsls	r4, r2, #3
 8008f52:	4622      	mov	r2, r4
 8008f54:	462b      	mov	r3, r5
 8008f56:	eb12 0a00 	adds.w	sl, r2, r0
 8008f5a:	eb43 0b01 	adc.w	fp, r3, r1
 8008f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f04f 0100 	mov.w	r1, #0
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	008b      	lsls	r3, r1, #2
 8008f72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f76:	0082      	lsls	r2, r0, #2
 8008f78:	4650      	mov	r0, sl
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	f7f7 fb64 	bl	8000648 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008f86:	fba3 1302 	umull	r1, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	2164      	movs	r1, #100	; 0x64
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	3332      	adds	r3, #50	; 0x32
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <UART_SetConfig+0x38c>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4432      	add	r2, r6
 8008faa:	609a      	str	r2, [r3, #8]
}
 8008fac:	bf00      	nop
 8008fae:	377c      	adds	r7, #124	; 0x7c
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	bf00      	nop
 8008fb8:	40011000 	.word	0x40011000
 8008fbc:	40011400 	.word	0x40011400
 8008fc0:	51eb851f 	.word	0x51eb851f

08008fc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	f107 001c 	add.w	r0, r7, #28
 8008fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d122      	bne.n	8009022 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d105      	bne.n	8009016 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fac6 	bl	800a5a8 <USB_CoreReset>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
 8009020:	e01a      	b.n	8009058 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 faba 	bl	800a5a8 <USB_CoreReset>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
 800904a:	e005      	b.n	8009058 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	2b01      	cmp	r3, #1
 800905c:	d10b      	bne.n	8009076 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f043 0206 	orr.w	r2, r3, #6
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f043 0220 	orr.w	r2, r3, #32
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009082:	b004      	add	sp, #16
 8009084:	4770      	bx	lr
	...

08009088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d165      	bne.n	8009168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4a41      	ldr	r2, [pc, #260]	; (80091a4 <USB_SetTurnaroundTime+0x11c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d906      	bls.n	80090b2 <USB_SetTurnaroundTime+0x2a>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4a40      	ldr	r2, [pc, #256]	; (80091a8 <USB_SetTurnaroundTime+0x120>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d202      	bcs.n	80090b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090ac:	230f      	movs	r3, #15
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e062      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	4a3c      	ldr	r2, [pc, #240]	; (80091a8 <USB_SetTurnaroundTime+0x120>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d306      	bcc.n	80090c8 <USB_SetTurnaroundTime+0x40>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a3b      	ldr	r2, [pc, #236]	; (80091ac <USB_SetTurnaroundTime+0x124>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d202      	bcs.n	80090c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090c2:	230e      	movs	r3, #14
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e057      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4a38      	ldr	r2, [pc, #224]	; (80091ac <USB_SetTurnaroundTime+0x124>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d306      	bcc.n	80090de <USB_SetTurnaroundTime+0x56>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4a37      	ldr	r2, [pc, #220]	; (80091b0 <USB_SetTurnaroundTime+0x128>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d202      	bcs.n	80090de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090d8:	230d      	movs	r3, #13
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e04c      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4a33      	ldr	r2, [pc, #204]	; (80091b0 <USB_SetTurnaroundTime+0x128>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d306      	bcc.n	80090f4 <USB_SetTurnaroundTime+0x6c>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	4a32      	ldr	r2, [pc, #200]	; (80091b4 <USB_SetTurnaroundTime+0x12c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d802      	bhi.n	80090f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090ee:	230c      	movs	r3, #12
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e041      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4a2f      	ldr	r2, [pc, #188]	; (80091b4 <USB_SetTurnaroundTime+0x12c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d906      	bls.n	800910a <USB_SetTurnaroundTime+0x82>
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a2e      	ldr	r2, [pc, #184]	; (80091b8 <USB_SetTurnaroundTime+0x130>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d802      	bhi.n	800910a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009104:	230b      	movs	r3, #11
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e036      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	4a2a      	ldr	r2, [pc, #168]	; (80091b8 <USB_SetTurnaroundTime+0x130>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d906      	bls.n	8009120 <USB_SetTurnaroundTime+0x98>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4a29      	ldr	r2, [pc, #164]	; (80091bc <USB_SetTurnaroundTime+0x134>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d802      	bhi.n	8009120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800911a:	230a      	movs	r3, #10
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e02b      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4a26      	ldr	r2, [pc, #152]	; (80091bc <USB_SetTurnaroundTime+0x134>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d906      	bls.n	8009136 <USB_SetTurnaroundTime+0xae>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a25      	ldr	r2, [pc, #148]	; (80091c0 <USB_SetTurnaroundTime+0x138>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d202      	bcs.n	8009136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009130:	2309      	movs	r3, #9
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e020      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4a21      	ldr	r2, [pc, #132]	; (80091c0 <USB_SetTurnaroundTime+0x138>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d306      	bcc.n	800914c <USB_SetTurnaroundTime+0xc4>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a20      	ldr	r2, [pc, #128]	; (80091c4 <USB_SetTurnaroundTime+0x13c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d802      	bhi.n	800914c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009146:	2308      	movs	r3, #8
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e015      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <USB_SetTurnaroundTime+0x13c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d906      	bls.n	8009162 <USB_SetTurnaroundTime+0xda>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <USB_SetTurnaroundTime+0x140>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d202      	bcs.n	8009162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800915c:	2307      	movs	r3, #7
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e00a      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009162:	2306      	movs	r3, #6
 8009164:	617b      	str	r3, [r7, #20]
 8009166:	e007      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800916e:	2309      	movs	r3, #9
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	e001      	b.n	8009178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009174:	2309      	movs	r3, #9
 8009176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	029b      	lsls	r3, r3, #10
 800918c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009190:	431a      	orrs	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	00d8acbf 	.word	0x00d8acbf
 80091a8:	00e4e1c0 	.word	0x00e4e1c0
 80091ac:	00f42400 	.word	0x00f42400
 80091b0:	01067380 	.word	0x01067380
 80091b4:	011a499f 	.word	0x011a499f
 80091b8:	01312cff 	.word	0x01312cff
 80091bc:	014ca43f 	.word	0x014ca43f
 80091c0:	016e3600 	.word	0x016e3600
 80091c4:	01a6ab1f 	.word	0x01a6ab1f
 80091c8:	01e84800 	.word	0x01e84800

080091cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f043 0201 	orr.w	r2, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f023 0201 	bic.w	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d106      	bne.n	800923c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]
 800923a:	e00b      	b.n	8009254 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	e001      	b.n	8009254 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e003      	b.n	800925c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009254:	2032      	movs	r0, #50	; 0x32
 8009256:	f7fb f913 	bl	8004480 <HAL_Delay>

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009264:	b084      	sub	sp, #16
 8009266:	b580      	push	{r7, lr}
 8009268:	b086      	sub	sp, #24
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800927e:	2300      	movs	r3, #0
 8009280:	613b      	str	r3, [r7, #16]
 8009282:	e009      	b.n	8009298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3340      	adds	r3, #64	; 0x40
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	2200      	movs	r2, #0
 8009290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	3301      	adds	r3, #1
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2b0e      	cmp	r3, #14
 800929c:	d9f2      	bls.n	8009284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800929e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d11c      	bne.n	80092de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
 80092dc:	e00b      	b.n	80092f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fc:	461a      	mov	r2, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009308:	4619      	mov	r1, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009310:	461a      	mov	r2, r3
 8009312:	680b      	ldr	r3, [r1, #0]
 8009314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	2b01      	cmp	r3, #1
 800931a:	d10c      	bne.n	8009336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d104      	bne.n	800932c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009322:	2100      	movs	r1, #0
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f949 	bl	80095bc <USB_SetDevSpeed>
 800932a:	e008      	b.n	800933e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800932c:	2101      	movs	r1, #1
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f944 	bl	80095bc <USB_SetDevSpeed>
 8009334:	e003      	b.n	800933e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009336:	2103      	movs	r1, #3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f93f 	bl	80095bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800933e:	2110      	movs	r1, #16
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f8f3 	bl	800952c <USB_FlushTxFifo>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f911 	bl	8009578 <USB_FlushRxFifo>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	461a      	mov	r2, r3
 8009368:	2300      	movs	r3, #0
 800936a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	461a      	mov	r2, r3
 8009380:	2300      	movs	r3, #0
 8009382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	e043      	b.n	8009412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093a0:	d118      	bne.n	80093d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e013      	b.n	80093e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	461a      	mov	r2, r3
 80093cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e008      	b.n	80093e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	461a      	mov	r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f2:	461a      	mov	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	461a      	mov	r2, r3
 8009406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800940a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	613b      	str	r3, [r7, #16]
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d3b7      	bcc.n	800938a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	e043      	b.n	80094a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009436:	d118      	bne.n	800946a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944a:	461a      	mov	r2, r3
 800944c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e013      	b.n	800947c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	461a      	mov	r2, r3
 8009462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	e008      	b.n	800947c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	461a      	mov	r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009488:	461a      	mov	r2, r3
 800948a:	2300      	movs	r3, #0
 800948c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	461a      	mov	r2, r3
 800949c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3301      	adds	r3, #1
 80094a6:	613b      	str	r3, [r7, #16]
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d3b7      	bcc.n	8009420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f043 0210 	orr.w	r2, r3, #16
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <USB_DevInit+0x2c4>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f043 0208 	orr.w	r2, r3, #8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d107      	bne.n	8009518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009510:	f043 0304 	orr.w	r3, r3, #4
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009524:	b004      	add	sp, #16
 8009526:	4770      	bx	lr
 8009528:	803c3800 	.word	0x803c3800

0800952c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	019b      	lsls	r3, r3, #6
 800953e:	f043 0220 	orr.w	r2, r3, #32
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4a09      	ldr	r2, [pc, #36]	; (8009574 <USB_FlushTxFifo+0x48>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d901      	bls.n	8009558 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e006      	b.n	8009566 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b20      	cmp	r3, #32
 8009562:	d0f0      	beq.n	8009546 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	00030d40 	.word	0x00030d40

08009578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2210      	movs	r2, #16
 8009588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60fb      	str	r3, [r7, #12]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a09      	ldr	r2, [pc, #36]	; (80095b8 <USB_FlushRxFifo+0x40>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d901      	bls.n	800959c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e006      	b.n	80095aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d0f0      	beq.n	800958a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	00030d40 	.word	0x00030d40

080095bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095dc:	4313      	orrs	r3, r2
 80095de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b087      	sub	sp, #28
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0306 	and.w	r3, r3, #6
 8009606:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
 8009612:	e00a      	b.n	800962a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d002      	beq.n	8009620 <USB_GetDevSpeed+0x32>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b06      	cmp	r3, #6
 800961e:	d102      	bne.n	8009626 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009620:	2302      	movs	r3, #2
 8009622:	75fb      	strb	r3, [r7, #23]
 8009624:	e001      	b.n	800962a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009626:	230f      	movs	r3, #15
 8009628:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
}
 800962c:	4618      	mov	r0, r3
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	785b      	ldrb	r3, [r3, #1]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d13a      	bne.n	80096ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800965a:	69da      	ldr	r2, [r3, #28]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	2101      	movs	r1, #1
 8009666:	fa01 f303 	lsl.w	r3, r1, r3
 800966a:	b29b      	uxth	r3, r3
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009672:	4313      	orrs	r3, r2
 8009674:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d155      	bne.n	8009738 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	78db      	ldrb	r3, [r3, #3]
 80096a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	059b      	lsls	r3, r3, #22
 80096ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b0:	4313      	orrs	r3, r2
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	e036      	b.n	8009738 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d0:	69da      	ldr	r2, [r3, #28]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	f003 030f 	and.w	r3, r3, #15
 80096da:	2101      	movs	r1, #1
 80096dc:	fa01 f303 	lsl.w	r3, r1, r3
 80096e0:	041b      	lsls	r3, r3, #16
 80096e2:	68f9      	ldr	r1, [r7, #12]
 80096e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e8:	4313      	orrs	r3, r2
 80096ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11a      	bne.n	8009738 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	78db      	ldrb	r3, [r3, #3]
 800971c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800971e:	430b      	orrs	r3, r1
 8009720:	4313      	orrs	r3, r2
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009736:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d161      	bne.n	8009828 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800977a:	d11f      	bne.n	80097bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800979a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	2101      	movs	r1, #1
 80097ce:	fa01 f303 	lsl.w	r3, r1, r3
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	43db      	mvns	r3, r3
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097dc:	4013      	ands	r3, r2
 80097de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e6:	69da      	ldr	r2, [r3, #28]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	2101      	movs	r1, #1
 80097f2:	fa01 f303 	lsl.w	r3, r1, r3
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	43db      	mvns	r3, r3
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009800:	4013      	ands	r3, r2
 8009802:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	0159      	lsls	r1, r3, #5
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	440b      	add	r3, r1
 800981a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981e:	4619      	mov	r1, r3
 8009820:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <USB_DeactivateEndpoint+0x1b0>)
 8009822:	4013      	ands	r3, r2
 8009824:	600b      	str	r3, [r1, #0]
 8009826:	e060      	b.n	80098ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800983a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983e:	d11f      	bne.n	8009880 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	440a      	add	r2, r1
 8009856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800985a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800985e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	440a      	add	r2, r1
 8009876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800987a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800987e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	2101      	movs	r1, #1
 8009892:	fa01 f303 	lsl.w	r3, r1, r3
 8009896:	041b      	lsls	r3, r3, #16
 8009898:	43db      	mvns	r3, r3
 800989a:	68f9      	ldr	r1, [r7, #12]
 800989c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098a0:	4013      	ands	r3, r2
 80098a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	69da      	ldr	r2, [r3, #28]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	2101      	movs	r1, #1
 80098b6:	fa01 f303 	lsl.w	r3, r1, r3
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	43db      	mvns	r3, r3
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c4:	4013      	ands	r3, r2
 80098c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	0159      	lsls	r1, r3, #5
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	440b      	add	r3, r1
 80098de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e2:	4619      	mov	r1, r3
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <USB_DeactivateEndpoint+0x1b4>)
 80098e6:	4013      	ands	r3, r2
 80098e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	ec337800 	.word	0xec337800
 80098fc:	eff37800 	.word	0xeff37800

08009900 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08a      	sub	sp, #40	; 0x28
 8009904:	af02      	add	r7, sp, #8
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b01      	cmp	r3, #1
 800991e:	f040 815c 	bne.w	8009bda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d132      	bne.n	8009990 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800994c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	4413      	add	r3, r2
 8009956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	69ba      	ldr	r2, [r7, #24]
 800995e:	0151      	lsls	r1, r2, #5
 8009960:	69fa      	ldr	r2, [r7, #28]
 8009962:	440a      	add	r2, r1
 8009964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800996c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	69ba      	ldr	r2, [r7, #24]
 800997e:	0151      	lsls	r1, r2, #5
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	440a      	add	r2, r1
 8009984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009988:	0cdb      	lsrs	r3, r3, #19
 800998a:	04db      	lsls	r3, r3, #19
 800998c:	6113      	str	r3, [r2, #16]
 800998e:	e074      	b.n	8009a7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	0151      	lsls	r1, r2, #5
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	440a      	add	r2, r1
 80099a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099aa:	0cdb      	lsrs	r3, r3, #19
 80099ac:	04db      	lsls	r3, r3, #19
 80099ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	0151      	lsls	r1, r2, #5
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	440a      	add	r2, r1
 80099c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e0:	691a      	ldr	r2, [r3, #16]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	6959      	ldr	r1, [r3, #20]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	440b      	add	r3, r1
 80099ec:	1e59      	subs	r1, r3, #1
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80099f6:	04d9      	lsls	r1, r3, #19
 80099f8:	4b9d      	ldr	r3, [pc, #628]	; (8009c70 <USB_EPStartXfer+0x370>)
 80099fa:	400b      	ands	r3, r1
 80099fc:	69b9      	ldr	r1, [r7, #24]
 80099fe:	0148      	lsls	r0, r1, #5
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	4401      	add	r1, r0
 8009a04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a18:	691a      	ldr	r2, [r3, #16]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a22:	69b9      	ldr	r1, [r7, #24]
 8009a24:	0148      	lsls	r0, r1, #5
 8009a26:	69f9      	ldr	r1, [r7, #28]
 8009a28:	4401      	add	r1, r0
 8009a2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	78db      	ldrb	r3, [r3, #3]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d11f      	bne.n	8009a7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	69ba      	ldr	r2, [r7, #24]
 8009a6a:	0151      	lsls	r1, r2, #5
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	440a      	add	r2, r1
 8009a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d14b      	bne.n	8009b18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d009      	beq.n	8009a9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a94:	461a      	mov	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	78db      	ldrb	r3, [r3, #3]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d128      	bne.n	8009af6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d110      	bne.n	8009ad6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	0151      	lsls	r1, r2, #5
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	440a      	add	r2, r1
 8009aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	e00f      	b.n	8009af6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	0151      	lsls	r1, r2, #5
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	440a      	add	r2, r1
 8009aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	69fa      	ldr	r2, [r7, #28]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	e12f      	b.n	8009d78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	0151      	lsls	r1, r2, #5
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	78db      	ldrb	r3, [r3, #3]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d015      	beq.n	8009b6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8117 	beq.w	8009d78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b60:	69f9      	ldr	r1, [r7, #28]
 8009b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b66:	4313      	orrs	r3, r2
 8009b68:	634b      	str	r3, [r1, #52]	; 0x34
 8009b6a:	e105      	b.n	8009d78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d110      	bne.n	8009b9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	0151      	lsls	r1, r2, #5
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	440a      	add	r2, r1
 8009b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	e00f      	b.n	8009bbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	781a      	ldrb	r2, [r3, #0]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	b298      	uxth	r0, r3
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fa2b 	bl	800a02e <USB_WritePacket>
 8009bd8:	e0ce      	b.n	8009d78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	69fa      	ldr	r2, [r7, #28]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf4:	0cdb      	lsrs	r3, r3, #19
 8009bf6:	04db      	lsls	r3, r3, #19
 8009bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	0151      	lsls	r1, r2, #5
 8009c0c:	69fa      	ldr	r2, [r7, #28]
 8009c0e:	440a      	add	r2, r1
 8009c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d126      	bne.n	8009c74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3c:	69b9      	ldr	r1, [r7, #24]
 8009c3e:	0148      	lsls	r0, r1, #5
 8009c40:	69f9      	ldr	r1, [r7, #28]
 8009c42:	4401      	add	r1, r0
 8009c44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	0151      	lsls	r1, r2, #5
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	440a      	add	r2, r1
 8009c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c6a:	6113      	str	r3, [r2, #16]
 8009c6c:	e036      	b.n	8009cdc <USB_EPStartXfer+0x3dc>
 8009c6e:	bf00      	nop
 8009c70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	695a      	ldr	r2, [r3, #20]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	1e5a      	subs	r2, r3, #1
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	8afb      	ldrh	r3, [r7, #22]
 8009c9a:	04d9      	lsls	r1, r3, #19
 8009c9c:	4b39      	ldr	r3, [pc, #228]	; (8009d84 <USB_EPStartXfer+0x484>)
 8009c9e:	400b      	ands	r3, r1
 8009ca0:	69b9      	ldr	r1, [r7, #24]
 8009ca2:	0148      	lsls	r0, r1, #5
 8009ca4:	69f9      	ldr	r1, [r7, #28]
 8009ca6:	4401      	add	r1, r0
 8009ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cac:	4313      	orrs	r3, r2
 8009cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	691a      	ldr	r2, [r3, #16]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	8af9      	ldrh	r1, [r7, #22]
 8009cc4:	fb01 f303 	mul.w	r3, r1, r3
 8009cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ccc:	69b9      	ldr	r1, [r7, #24]
 8009cce:	0148      	lsls	r0, r1, #5
 8009cd0:	69f9      	ldr	r1, [r7, #28]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d10d      	bne.n	8009cfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d009      	beq.n	8009cfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	68d9      	ldr	r1, [r3, #12]
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfa:	460a      	mov	r2, r1
 8009cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	78db      	ldrb	r3, [r3, #3]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d128      	bne.n	8009d58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d110      	bne.n	8009d38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	69fa      	ldr	r2, [r7, #28]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	e00f      	b.n	8009d58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	69fa      	ldr	r2, [r7, #28]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	1ff80000 	.word	0x1ff80000

08009d88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	f040 80cd 	bne.w	8009f44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d132      	bne.n	8009e18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	015a      	lsls	r2, r3, #5
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	4413      	add	r3, r2
 8009dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	0151      	lsls	r1, r2, #5
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	440a      	add	r2, r1
 8009dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e10:	0cdb      	lsrs	r3, r3, #19
 8009e12:	04db      	lsls	r3, r3, #19
 8009e14:	6113      	str	r3, [r2, #16]
 8009e16:	e04e      	b.n	8009eb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e32:	0cdb      	lsrs	r3, r3, #19
 8009e34:	04db      	lsls	r3, r3, #19
 8009e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d903      	bls.n	8009e70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	0151      	lsls	r1, r2, #5
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	440a      	add	r2, r1
 8009e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	691a      	ldr	r2, [r3, #16]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea6:	6939      	ldr	r1, [r7, #16]
 8009ea8:	0148      	lsls	r0, r1, #5
 8009eaa:	6979      	ldr	r1, [r7, #20]
 8009eac:	4401      	add	r1, r0
 8009eae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d11e      	bne.n	8009efa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d009      	beq.n	8009ed8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	0151      	lsls	r1, r2, #5
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	440a      	add	r2, r1
 8009eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	e092      	b.n	800a020 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	0151      	lsls	r1, r2, #5
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	440a      	add	r2, r1
 8009f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d07e      	beq.n	800a020 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	2101      	movs	r1, #1
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	6979      	ldr	r1, [r7, #20]
 8009f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	634b      	str	r3, [r1, #52]	; 0x34
 8009f42:	e06d      	b.n	800a020 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	0151      	lsls	r1, r2, #5
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	440a      	add	r2, r1
 8009f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f5e:	0cdb      	lsrs	r3, r3, #19
 8009f60:	04db      	lsls	r3, r3, #19
 8009f62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	0151      	lsls	r1, r2, #5
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	440a      	add	r2, r1
 8009f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	0151      	lsls	r1, r2, #5
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	440a      	add	r2, r1
 8009fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	691a      	ldr	r2, [r3, #16]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fce:	6939      	ldr	r1, [r7, #16]
 8009fd0:	0148      	lsls	r0, r1, #5
 8009fd2:	6979      	ldr	r1, [r7, #20]
 8009fd4:	4401      	add	r1, r0
 8009fd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d10d      	bne.n	800a000 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d009      	beq.n	800a000 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	68d9      	ldr	r1, [r3, #12]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	0151      	lsls	r1, r2, #5
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	440a      	add	r2, r1
 800a016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a01e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a02e:	b480      	push	{r7}
 800a030:	b089      	sub	sp, #36	; 0x24
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	4611      	mov	r1, r2
 800a03a:	461a      	mov	r2, r3
 800a03c:	460b      	mov	r3, r1
 800a03e:	71fb      	strb	r3, [r7, #7]
 800a040:	4613      	mov	r3, r2
 800a042:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a04c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a050:	2b00      	cmp	r3, #0
 800a052:	d11a      	bne.n	800a08a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a054:	88bb      	ldrh	r3, [r7, #4]
 800a056:	3303      	adds	r3, #3
 800a058:	089b      	lsrs	r3, r3, #2
 800a05a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a05c:	2300      	movs	r3, #0
 800a05e:	61bb      	str	r3, [r7, #24]
 800a060:	e00f      	b.n	800a082 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	031a      	lsls	r2, r3, #12
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06e:	461a      	mov	r2, r3
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	3304      	adds	r3, #4
 800a07a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	3301      	adds	r3, #1
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	429a      	cmp	r2, r3
 800a088:	d3eb      	bcc.n	800a062 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3724      	adds	r7, #36	; 0x24
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a098:	b480      	push	{r7}
 800a09a:	b089      	sub	sp, #36	; 0x24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a0ae:	88fb      	ldrh	r3, [r7, #6]
 800a0b0:	3303      	adds	r3, #3
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	e00b      	b.n	800a0d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	61bb      	str	r3, [r7, #24]
 800a0d4:	69ba      	ldr	r2, [r7, #24]
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d3ef      	bcc.n	800a0bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a0dc:	69fb      	ldr	r3, [r7, #28]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3724      	adds	r7, #36	; 0x24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d12c      	bne.n	800a160 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	db12      	blt.n	800a13e <USB_EPSetStall+0x54>
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00f      	beq.n	800a13e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a13c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	e02b      	b.n	800a1b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	015a      	lsls	r2, r3, #5
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	db12      	blt.n	800a198 <USB_EPSetStall+0xae>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00f      	beq.n	800a198 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a196:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d128      	bne.n	800a234 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	78db      	ldrb	r3, [r3, #3]
 800a206:	2b03      	cmp	r3, #3
 800a208:	d003      	beq.n	800a212 <USB_EPClearStall+0x4c>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d138      	bne.n	800a284 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	015a      	lsls	r2, r3, #5
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	0151      	lsls	r1, r2, #5
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	440a      	add	r2, r1
 800a228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	e027      	b.n	800a284 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a252:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	78db      	ldrb	r3, [r3, #3]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d003      	beq.n	800a264 <USB_EPClearStall+0x9e>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	78db      	ldrb	r3, [r3, #3]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d10f      	bne.n	800a284 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	0151      	lsls	r1, r2, #5
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	440a      	add	r2, r1
 800a27a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a27e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a282:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a2b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b085      	sub	sp, #20
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2f8:	f023 0303 	bic.w	r3, r3, #3
 800a2fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a30c:	f023 0302 	bic.w	r3, r3, #2
 800a310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a33a:	f023 0303 	bic.w	r3, r3, #3
 800a33e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a34e:	f043 0302 	orr.w	r3, r3, #2
 800a352:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4013      	ands	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a37a:	68fb      	ldr	r3, [r7, #12]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	0c1b      	lsrs	r3, r3, #16
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	4013      	ands	r3, r2
 800a3de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	b29b      	uxth	r3, r3
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4413      	add	r3, r2
 800a408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4013      	ands	r3, r2
 800a41c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a41e:	68bb      	ldr	r3, [r7, #8]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	f003 030f 	and.w	r3, r3, #15
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	fa22 f303 	lsr.w	r3, r2, r3
 800a45c:	01db      	lsls	r3, r3, #7
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4013      	ands	r3, r2
 800a478:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a47a:	68bb      	ldr	r3, [r7, #8]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	f003 0301 	and.w	r3, r3, #1
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	333c      	adds	r3, #60	; 0x3c
 800a502:	3304      	adds	r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	4a26      	ldr	r2, [pc, #152]	; (800a5a4 <USB_EP0_OutStart+0xb8>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d90a      	bls.n	800a526 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a520:	d101      	bne.n	800a526 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	e037      	b.n	800a596 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52c:	461a      	mov	r2, r3
 800a52e:	2300      	movs	r3, #0
 800a530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a544:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a554:	f043 0318 	orr.w	r3, r3, #24
 800a558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a568:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a56c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d10f      	bne.n	800a594 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57a:	461a      	mov	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	4f54300a 	.word	0x4f54300a

0800a5a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4a13      	ldr	r2, [pc, #76]	; (800a60c <USB_CoreReset+0x64>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d901      	bls.n	800a5c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e01b      	b.n	800a5fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	daf2      	bge.n	800a5b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	f043 0201 	orr.w	r2, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4a09      	ldr	r2, [pc, #36]	; (800a60c <USB_CoreReset+0x64>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d901      	bls.n	800a5f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e006      	b.n	800a5fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d0f0      	beq.n	800a5de <USB_CoreReset+0x36>

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	00030d40 	.word	0x00030d40

0800a610 <checkCrc>:


static void SGP40_delay(uint32_t time_);

static uint8_t checkCrc(uint8_t data1,uint8_t data2)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	460a      	mov	r2, r1
 800a61a:	71fb      	strb	r3, [r7, #7]
 800a61c:	4613      	mov	r3, r2
 800a61e:	71bb      	strb	r3, [r7, #6]
  uint8_t crc = 0xFF;
 800a620:	23ff      	movs	r3, #255	; 0xff
 800a622:	75fb      	strb	r3, [r7, #23]
  uint8_t data[2];
  data[0]=data1;
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	733b      	strb	r3, [r7, #12]
  data[1]=data2;
 800a628:	79bb      	ldrb	r3, [r7, #6]
 800a62a:	737b      	strb	r3, [r7, #13]
  for(int i =0; i<2;i++){
 800a62c:	2300      	movs	r3, #0
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	e021      	b.n	800a676 <checkCrc+0x66>
    crc ^= data[i];
 800a632:	f107 020c 	add.w	r2, r7, #12
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	4413      	add	r3, r2
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	4053      	eors	r3, r2
 800a640:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 800a642:	2308      	movs	r3, #8
 800a644:	73fb      	strb	r3, [r7, #15]
 800a646:	e010      	b.n	800a66a <checkCrc+0x5a>
      if(crc & 0x80){
 800a648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da06      	bge.n	800a65e <checkCrc+0x4e>
        crc = (crc << 1)^0x31u;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800a65a:	75fb      	strb	r3, [r7, #23]
 800a65c:	e002      	b.n	800a664 <checkCrc+0x54>
      }else{
        crc = (crc << 1);
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	3b01      	subs	r3, #1
 800a668:	73fb      	strb	r3, [r7, #15]
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1eb      	bne.n	800a648 <checkCrc+0x38>
  for(int i =0; i<2;i++){
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	3301      	adds	r3, #1
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	ddda      	ble.n	800a632 <checkCrc+0x22>
      }
    }
  }
  return crc;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <SGP40_write>:

SGP40_status SGP40_write(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af02      	add	r7, sp, #8
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	607a      	str	r2, [r7, #4]
 800a696:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Transmit(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6818      	ldr	r0, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
 800a6a0:	b299      	uxth	r1, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	f7fa fcd9 	bl	8005064 <HAL_I2C_Master_Transmit>
 800a6b2:	4603      	mov	r3, r0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <SGP40_read>:

SGP40_status SGP40_read(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Receive(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	7e1b      	ldrb	r3, [r3, #24]
 800a6d2:	b299      	uxth	r1, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	f7fa fdbe 	bl	8005260 <HAL_I2C_Master_Receive>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <SGP40_readRAW>:

SGP40_status SGP40_readRAW(SGP40_var *var, uint16_t* raw, uint32_t timeout_)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
	uint8_t data[3]={0,0,0};
 800a6fc:	4a14      	ldr	r2, [pc, #80]	; (800a750 <SGP40_readRAW+0x60>)
 800a6fe:	f107 0310 	add.w	r3, r7, #16
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	4611      	mov	r1, r2
 800a706:	8019      	strh	r1, [r3, #0]
 800a708:	3302      	adds	r3, #2
 800a70a:	0c12      	lsrs	r2, r2, #16
 800a70c:	701a      	strb	r2, [r3, #0]
	uint16_t value=0;
 800a70e:	2300      	movs	r3, #0
 800a710:	82fb      	strh	r3, [r7, #22]
	*raw = 0;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	801a      	strh	r2, [r3, #0]
	if ( SGP40_read(var, data, 3, timeout_) == SGP40_OK )
 800a718:	f107 0110 	add.w	r1, r7, #16
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2203      	movs	r2, #3
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f7ff ffcb 	bl	800a6bc <SGP40_read>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10c      	bne.n	800a746 <SGP40_readRAW+0x56>
	{
		value=(data[0]<<8)|data[1];
 800a72c:	7c3b      	ldrb	r3, [r7, #16]
 800a72e:	021b      	lsls	r3, r3, #8
 800a730:	b21a      	sxth	r2, r3
 800a732:	7c7b      	ldrb	r3, [r7, #17]
 800a734:	b21b      	sxth	r3, r3
 800a736:	4313      	orrs	r3, r2
 800a738:	b21b      	sxth	r3, r3
 800a73a:	82fb      	strh	r3, [r7, #22]
		*raw = value;
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	8afa      	ldrh	r2, [r7, #22]
 800a740:	801a      	strh	r2, [r3, #0]
		return SGP40_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e000      	b.n	800a748 <SGP40_readRAW+0x58>
	}
	return SGP40_ERROR;
 800a746:	2301      	movs	r3, #1
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	0800ea04 	.word	0x0800ea04

0800a754 <SGP40_isDevice>:


SGP40_status SGP40_isDevice(SGP40_var *var)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
	if ( var->i2c_ch == NULL )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <SGP40_isDevice+0x14>
		return SGP40_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e00b      	b.n	800a780 <SGP40_isDevice+0x2c>
	else
		return (SGP40_status)HAL_I2C_IsDeviceReady(var->i2c_ch, var->_deviceAddr, 10, 500);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6818      	ldr	r0, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7e1b      	ldrb	r3, [r3, #24]
 800a770:	b299      	uxth	r1, r3
 800a772:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a776:	220a      	movs	r2, #10
 800a778:	f7fa ff98 	bl	80056ac <HAL_I2C_IsDeviceReady>
 800a77c:	4603      	mov	r3, r0
 800a77e:	bf00      	nop
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <SGP40_begin>:

SGP40_status SGP40_begin(SGP40_var *var, I2C_HandleTypeDef *i2c_ch, uint8_t addr, uint32_t duration)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	4613      	mov	r3, r2
 800a796:	71fb      	strb	r3, [r7, #7]
	var->i2c_ch 		= i2c_ch;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	601a      	str	r2, [r3, #0]
	var->_deviceAddr 	= addr << 1;
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	761a      	strb	r2, [r3, #24]
	var->_relativeHumidity	=	50.f;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	; (800a818 <SGP40_begin+0x90>)
 800a7ac:	609a      	str	r2, [r3, #8]
	var->_temperatureC		= 	25.f;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4a1a      	ldr	r2, [pc, #104]	; (800a81c <SGP40_begin+0x94>)
 800a7b2:	60da      	str	r2, [r3, #12]
	SGP40_status ret = SGP40_isDevice(var);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff ffcd 	bl	800a754 <SGP40_isDevice>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	76fb      	strb	r3, [r7, #27]
	if ( ret != SGP40_OK )
 800a7be:	7efb      	ldrb	r3, [r7, #27]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <SGP40_begin+0x40>
		return ret;
 800a7c4:	7efb      	ldrb	r3, [r7, #27]
 800a7c6:	e023      	b.n	800a810 <SGP40_begin+0x88>
	VocAlgorithm_init(&var->_vocaAgorithmParams);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	331c      	adds	r3, #28
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fb41 	bl	800ae54 <VocAlgorithm_init>
	uint32_t t_ = HAL_GetTick();
 800a7d2:	f7f9 fe49 	bl	8004468 <HAL_GetTick>
 800a7d6:	61f8      	str	r0, [r7, #28]
	while( HAL_GetTick() - t_ <= duration )
 800a7d8:	e00e      	b.n	800a7f8 <SGP40_begin+0x70>
	{
		uint32_t rol_ov = HAL_GetTick();
 800a7da:	f7f9 fe45 	bl	8004468 <HAL_GetTick>
 800a7de:	6178      	str	r0, [r7, #20]
		if ( t_ > rol_ov )	// perventive action for roll-over counting in system-ticks
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d901      	bls.n	800a7ec <SGP40_begin+0x64>
			t_ = rol_ov;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	61fb      	str	r3, [r7, #28]
		// get voc - index
		uint16_t voc_index;
		SGP40_getVOCIndex(var, NULL, 500UL);
 800a7ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 f86c 	bl	800a8d0 <SGP40_getVOCIndex>
	while( HAL_GetTick() - t_ <= duration )
 800a7f8:	f7f9 fe36 	bl	8004468 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d2e8      	bcs.n	800a7da <SGP40_begin+0x52>
	}
	// need to measurement test
	return SGP40_measurementTest(var);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f8b3 	bl	800a974 <SGP40_measurementTest>
 800a80e:	4603      	mov	r3, r0
//	return SGP40_OK;
}
 800a810:	4618      	mov	r0, r3
 800a812:	3720      	adds	r7, #32
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	42480000 	.word	0x42480000
 800a81c:	41c80000 	.word	0x41c80000

0800a820 <SGP40_setRhT>:

SGP40_status SGP40_setRhT(SGP40_var *var, float relativeHumidity, float temperatureC, uint32_t timeout_)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	ed87 0a02 	vstr	s0, [r7, #8]
 800a82c:	edc7 0a01 	vstr	s1, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	var->_relativeHumidity = relativeHumidity;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	609a      	str	r2, [r3, #8]
	var->_temperatureC = temperatureC;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	60da      	str	r2, [r3, #12]
	SGP40_dataTransform(var);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f8ce 	bl	800a9e0 <SGP40_dataTransform>
	return SGP40_write(var, var->_rhTemData,6, timeout_);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f103 0110 	add.w	r1, r3, #16
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2206      	movs	r2, #6
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff ff1b 	bl	800a68a <SGP40_write>
 800a854:	4603      	mov	r3, r0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <SGP40_heaterOff>:

SGP40_status SGP40_heaterOff(SGP40_var *var, uint32_t timeout_)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
	uint8_t testCommand[CMD_HEATER_OFF_SIZE]={CMD_HEATER_OFF_H,CMD_HEATER_OFF_L};
 800a868:	f241 5336 	movw	r3, #5430	; 0x1536
 800a86c:	81bb      	strh	r3, [r7, #12]
	return SGP40_write(var, testCommand,CMD_HEATER_OFF_SIZE, timeout_);
 800a86e:	f107 010c 	add.w	r1, r7, #12
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2202      	movs	r2, #2
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff ff07 	bl	800a68a <SGP40_write>
 800a87c:	4603      	mov	r3, r0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <SGP40_softReset>:

SGP40_status SGP40_softReset(SGP40_var *var)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	uint8_t testCommand[CMD_SOFT_RESET_SIZE]={CMD_SOFT_RESET_H,CMD_SOFT_RESET_L};
 800a890:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a894:	81bb      	strh	r3, [r7, #12]
	SGP40_status ret = SGP40_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]
	ret = SGP40_write(var, testCommand, CMD_SOFT_RESET_SIZE, 100);
 800a89a:	f107 010c 	add.w	r1, r7, #12
 800a89e:	2364      	movs	r3, #100	; 0x64
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fef1 	bl	800a68a <SGP40_write>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d105      	bne.n	800a8be <SGP40_softReset+0x36>
	{
		var->_relativeHumidity = 50;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <SGP40_softReset+0x40>)
 800a8b6:	609a      	str	r2, [r3, #8]
		var->_temperatureC = 25.f;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a04      	ldr	r2, [pc, #16]	; (800a8cc <SGP40_softReset+0x44>)
 800a8bc:	60da      	str	r2, [r3, #12]
	}
	return ret;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	42480000 	.word	0x42480000
 800a8cc:	41c80000 	.word	0x41c80000

0800a8d0 <SGP40_getVOCIndex>:

SGP40_status SGP40_getVOCIndex(SGP40_var *var, uint16_t *VOC_index, uint32_t timeout_)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
	*VOC_index = 0;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	801a      	strh	r2, [r3, #0]
	uint8_t data[3]={0,0,0};
 800a8e2:	4a23      	ldr	r2, [pc, #140]	; (800a970 <SGP40_getVOCIndex+0xa0>)
 800a8e4:	f107 0314 	add.w	r3, r7, #20
 800a8e8:	6812      	ldr	r2, [r2, #0]
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	8019      	strh	r1, [r3, #0]
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	0c12      	lsrs	r2, r2, #16
 800a8f2:	701a      	strb	r2, [r3, #0]
	int32_t value;
	int32_t vocIndex=0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	613b      	str	r3, [r7, #16]
	SGP40_dataTransform(var);
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f871 	bl	800a9e0 <SGP40_dataTransform>
	SGP40_status ret = SGP40_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	77fb      	strb	r3, [r7, #31]
	ret = SGP40_write(var, var->_rhTemData,8, timeout_);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f103 0110 	add.w	r1, r3, #16
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2208      	movs	r2, #8
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff febc 	bl	800a68a <SGP40_write>
 800a912:	4603      	mov	r3, r0
 800a914:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 800a916:	7ffb      	ldrb	r3, [r7, #31]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <SGP40_getVOCIndex+0x50>
 800a91c:	7ffb      	ldrb	r3, [r7, #31]
 800a91e:	e022      	b.n	800a966 <SGP40_getVOCIndex+0x96>
	SGP40_delay(DURATION_READ_RAW_VOC);
 800a920:	201e      	movs	r0, #30
 800a922:	f000 f8d9 	bl	800aad8 <SGP40_delay>
	ret = SGP40_read(var, data, 3, timeout_);
 800a926:	f107 0114 	add.w	r1, r7, #20
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2203      	movs	r2, #3
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7ff fec4 	bl	800a6bc <SGP40_read>
 800a934:	4603      	mov	r3, r0
 800a936:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 800a938:	7ffb      	ldrb	r3, [r7, #31]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <SGP40_getVOCIndex+0x72>
 800a93e:	7ffb      	ldrb	r3, [r7, #31]
 800a940:	e011      	b.n	800a966 <SGP40_getVOCIndex+0x96>
	value=(data[0]<<8)|data[1];
 800a942:	7d3b      	ldrb	r3, [r7, #20]
 800a944:	021b      	lsls	r3, r3, #8
 800a946:	7d7a      	ldrb	r2, [r7, #21]
 800a948:	4313      	orrs	r3, r2
 800a94a:	61bb      	str	r3, [r7, #24]
	VocAlgorithm_process(&var->_vocaAgorithmParams, value, &vocIndex);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	331c      	adds	r3, #28
 800a950:	f107 0210 	add.w	r2, r7, #16
 800a954:	69b9      	ldr	r1, [r7, #24]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fad3 	bl	800af02 <VocAlgorithm_process>
	*VOC_index = vocIndex;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	b29a      	uxth	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	801a      	strh	r2, [r3, #0]
	return ret;
 800a964:	7ffb      	ldrb	r3, [r7, #31]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	0800ea04 	.word	0x0800ea04

0800a974 <SGP40_measurementTest>:

SGP40_status SGP40_measurementTest(SGP40_var *var)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	SGP40_status ret = SGP40_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73fb      	strb	r3, [r7, #15]
	uint8_t testCommand[CMD_MEASURE_TEST_SIZE]={CMD_MEASURE_TEST_H,CMD_MEASURE_TEST_L};
 800a980:	f640 6328 	movw	r3, #3624	; 0xe28
 800a984:	81bb      	strh	r3, [r7, #12]
	uint16_t value=0;
 800a986:	2300      	movs	r3, #0
 800a988:	817b      	strh	r3, [r7, #10]
	ret = SGP40_write(var, testCommand, CMD_MEASURE_TEST_SIZE, 200UL);
 800a98a:	f107 010c 	add.w	r1, r7, #12
 800a98e:	23c8      	movs	r3, #200	; 0xc8
 800a990:	2202      	movs	r2, #2
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff fe79 	bl	800a68a <SGP40_write>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
	if ( ret != SGP40_OK )
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <SGP40_measurementTest+0x32>
		return ret;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
 800a9a4:	e018      	b.n	800a9d8 <SGP40_measurementTest+0x64>
	SGP40_delay(DURATION_WAIT_MEASURE_TEST);
 800a9a6:	20fa      	movs	r0, #250	; 0xfa
 800a9a8:	f000 f896 	bl	800aad8 <SGP40_delay>
	ret = SGP40_readRAW(var, &value, 500UL);
 800a9ac:	f107 030a 	add.w	r3, r7, #10
 800a9b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fe9a 	bl	800a6f0 <SGP40_readRAW>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d107      	bne.n	800a9d6 <SGP40_measurementTest+0x62>
	{
		if ( value == TEST_OK )
 800a9c6:	897b      	ldrh	r3, [r7, #10]
 800a9c8:	f5b3 4f54 	cmp.w	r3, #54272	; 0xd400
 800a9cc:	d101      	bne.n	800a9d2 <SGP40_measurementTest+0x5e>
			return SGP40_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e002      	b.n	800a9d8 <SGP40_measurementTest+0x64>
		else
			return SGP40_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <SGP40_measurementTest+0x64>
	}
	else
		return ret;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SGP40_dataTransform>:

void SGP40_dataTransform(SGP40_var *var)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	uint16_t RH = (uint16_t)((var->_relativeHumidity*65535)/100+0.5);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	edd3 7a02 	vldr	s15, [r3, #8]
 800a9ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800aac4 <SGP40_dataTransform+0xe4>
 800a9f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aac8 <SGP40_dataTransform+0xe8>
 800a9fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a9fe:	ee16 0a90 	vmov	r0, s13
 800aa02:	f7f5 fda9 	bl	8000558 <__aeabi_f2d>
 800aa06:	f04f 0200 	mov.w	r2, #0
 800aa0a:	4b30      	ldr	r3, [pc, #192]	; (800aacc <SGP40_dataTransform+0xec>)
 800aa0c:	f7f5 fc46 	bl	800029c <__adddf3>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4610      	mov	r0, r2
 800aa16:	4619      	mov	r1, r3
 800aa18:	f7f5 fdf6 	bl	8000608 <__aeabi_d2uiz>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	81fb      	strh	r3, [r7, #14]
	uint16_t TemC = (uint16_t)((var->_temperatureC+45)*(65535/175)+0.5);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa26:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800aad0 <SGP40_dataTransform+0xf0>
 800aa2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa2e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800aad4 <SGP40_dataTransform+0xf4>
 800aa32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa36:	ee17 0a90 	vmov	r0, s15
 800aa3a:	f7f5 fd8d 	bl	8000558 <__aeabi_f2d>
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	4b22      	ldr	r3, [pc, #136]	; (800aacc <SGP40_dataTransform+0xec>)
 800aa44:	f7f5 fc2a 	bl	800029c <__adddf3>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	f7f5 fdda 	bl	8000608 <__aeabi_d2uiz>
 800aa54:	4603      	mov	r3, r0
 800aa56:	81bb      	strh	r3, [r7, #12]
	var->_rhTemData[INDEX_MEASURE_RAW_H]=CMD_MEASURE_RAW_H;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2226      	movs	r2, #38	; 0x26
 800aa5c:	741a      	strb	r2, [r3, #16]
	var->_rhTemData[INDEX_MEASURE_RAW_L]=CMD_MEASURE_RAW_L;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	220f      	movs	r2, #15
 800aa62:	745a      	strb	r2, [r3, #17]
	var->_rhTemData[INDEX_RH_H]=RH>>8;
 800aa64:	89fb      	ldrh	r3, [r7, #14]
 800aa66:	0a1b      	lsrs	r3, r3, #8
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	749a      	strb	r2, [r3, #18]
	var->_rhTemData[INDEX_RH_L]=RH&0x00FF;
 800aa70:	89fb      	ldrh	r3, [r7, #14]
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	74da      	strb	r2, [r3, #19]
	var->_rhTemData[INDEX_RH_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_RH_H],var->_rhTemData[INDEX_RH_L]);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7c9a      	ldrb	r2, [r3, #18]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	7cdb      	ldrb	r3, [r3, #19]
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7ff fdc4 	bl	800a610 <checkCrc>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	751a      	strb	r2, [r3, #20]
	var->_rhTemData[INDEX_TEM_H]=TemC>>8;
 800aa90:	89bb      	ldrh	r3, [r7, #12]
 800aa92:	0a1b      	lsrs	r3, r3, #8
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	755a      	strb	r2, [r3, #21]
	var->_rhTemData[INDEX_TEM_L]=TemC&0x00FF;
 800aa9c:	89bb      	ldrh	r3, [r7, #12]
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	759a      	strb	r2, [r3, #22]
	var->_rhTemData[INDEX_TEM_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_TEM_H],var->_rhTemData[INDEX_TEM_L]);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7d5a      	ldrb	r2, [r3, #21]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	7d9b      	ldrb	r3, [r3, #22]
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7ff fdae 	bl	800a610 <checkCrc>
 800aab4:	4603      	mov	r3, r0
 800aab6:	461a      	mov	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	75da      	strb	r2, [r3, #23]
}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	477fff00 	.word	0x477fff00
 800aac8:	42c80000 	.word	0x42c80000
 800aacc:	3fe00000 	.word	0x3fe00000
 800aad0:	42340000 	.word	0x42340000
 800aad4:	43bb0000 	.word	0x43bb0000

0800aad8 <SGP40_delay>:
		.getVOCIndex	= SGP40_getVOCIndex,
};


static void SGP40_delay(uint32_t time_)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
	if ( SGP40.halt == NULL )
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <SGP40_delay+0x28>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d103      	bne.n	800aaf0 <SGP40_delay+0x18>
		HAL_Delay(time_);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7f9 fcc9 	bl	8004480 <HAL_Delay>
	else
		SGP40.halt(time_);
}
 800aaee:	e003      	b.n	800aaf8 <SGP40_delay+0x20>
		SGP40.halt(time_);
 800aaf0:	4b03      	ldr	r3, [pc, #12]	; (800ab00 <SGP40_delay+0x28>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	4798      	blx	r3
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	20000384 	.word	0x20000384

0800ab04 <fix16_from_int>:
 * specified */
#define FIX16_OVERFLOW 0x80000000
/*!< fix16_t value of 1 */
#define FIX16_ONE 0x00010000

static __inline__ fix16_t fix16_from_int(int32_t a) {
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
    return a * FIX16_ONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	041b      	lsls	r3, r3, #16
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <fix16_cast_to_int>:

static __inline__ int32_t fix16_cast_to_int(fix16_t a) {
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
    return (a >> 16);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	141b      	asrs	r3, r3, #16
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <fix16_mul>:
static fix16_t fix16_sqrt(fix16_t inValue);

/*! Returns the exponent (e^) of the given fix16_t. */
static fix16_t fix16_exp(fix16_t inValue);

static fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1) {
 800ab34:	b480      	push	{r7}
 800ab36:	b08f      	sub	sp, #60	; 0x3c
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
    //					BD	16 * 16 -> 32 bit products
    //				 CB
    //				 AD
    //				AC
    //			 |----| 64 bit product
    int32_t A = (inArg0 >> 16), C = (inArg1 >> 16);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	141b      	asrs	r3, r3, #16
 800ab42:	633b      	str	r3, [r7, #48]	; 0x30
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	141b      	asrs	r3, r3, #16
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t B = (inArg0 & 0xFFFF), D = (inArg1 & 0xFFFF);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t AC = A * C;
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
 800ab5e:	623b      	str	r3, [r7, #32]
    int32_t AD_CB = A * D + C * B;
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab64:	fb02 f203 	mul.w	r2, r2, r3
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab6c:	fb01 f303 	mul.w	r3, r1, r3
 800ab70:	4413      	add	r3, r2
 800ab72:	61fb      	str	r3, [r7, #28]
    uint32_t BD = B * D;
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab78:	fb02 f303 	mul.w	r3, r2, r3
 800ab7c:	61bb      	str	r3, [r7, #24]

    int32_t product_hi = AC + (AD_CB >> 16);
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	141b      	asrs	r3, r3, #16
 800ab82:	6a3a      	ldr	r2, [r7, #32]
 800ab84:	4413      	add	r3, r2
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34

    // Handle carry from lower 32 bits to upper part of result.
    uint32_t ad_cb_temp = AD_CB << 16;
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	041b      	lsls	r3, r3, #16
 800ab8c:	617b      	str	r3, [r7, #20]
    uint32_t product_lo = BD + ad_cb_temp;
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	4413      	add	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]
    if (product_lo < BD)
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d202      	bcs.n	800aba4 <fix16_mul+0x70>
        product_hi++;
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	3301      	adds	r3, #1
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef FIXMATH_NO_OVERFLOW
    // The upper 17 bits should all be the same (the sign).
    if (product_hi >> 31 != product_hi >> 15)
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	17da      	asrs	r2, r3, #31
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	13db      	asrs	r3, r3, #15
 800abac:	429a      	cmp	r2, r3
 800abae:	d002      	beq.n	800abb6 <fix16_mul+0x82>
        return FIX16_OVERFLOW;
 800abb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abb4:	e01d      	b.n	800abf2 <fix16_mul+0xbe>
#else
    // Subtracting 0x8000 (= 0.5) and then using signed right shift
    // achieves proper rounding to result-1, except in the corner
    // case of negative numbers and lowest word = 0x8000.
    // To handle that, we also have to subtract 1 for negative numbers.
    uint32_t product_lo_tmp = product_lo;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	60fb      	str	r3, [r7, #12]
    product_lo -= 0x8000;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800abc0:	613b      	str	r3, [r7, #16]
    product_lo -= (uint32_t)product_hi >> 31;
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	17db      	asrs	r3, r3, #31
 800abc6:	461a      	mov	r2, r3
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	4413      	add	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
    if (product_lo > product_lo_tmp)
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d902      	bls.n	800abdc <fix16_mul+0xa8>
        product_hi--;
 800abd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd8:	3b01      	subs	r3, #1
 800abda:	637b      	str	r3, [r7, #52]	; 0x34

    // Discard the lowest 16 bits. Note that this is not exactly the same
    // as dividing by 0x10000. For example if product = -1, result will
    // also be -1 and not 0. This is compensated by adding +1 to the result
    // and compensating this in turn in the rounding above.
    fix16_t result = (product_hi << 16) | (product_lo >> 16);
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	461a      	mov	r2, r3
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60bb      	str	r3, [r7, #8]
    result += 1;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	3301      	adds	r3, #1
 800abee:	60bb      	str	r3, [r7, #8]
    return result;
 800abf0:	68bb      	ldr	r3, [r7, #8]
#endif
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	373c      	adds	r7, #60	; 0x3c
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <fix16_div>:

static fix16_t fix16_div(fix16_t a, fix16_t b) {
 800abfe:	b480      	push	{r7}
 800ac00:	b089      	sub	sp, #36	; 0x24
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
    // This uses the basic binary restoring division algorithm.
    // It appears to be faster to do the whole division manually than
    // trying to compose a 64-bit divide out of 32-bit divisions on
    // platforms without hardware divide.

    if (b == 0)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d102      	bne.n	800ac14 <fix16_div+0x16>
        return FIX16_MINIMUM;
 800ac0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac12:	e066      	b.n	800ace2 <fix16_div+0xe4>

    uint32_t remainder = (a >= 0) ? a : (-a);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bfb8      	it	lt
 800ac1a:	425b      	neglt	r3, r3
 800ac1c:	61fb      	str	r3, [r7, #28]
    uint32_t divider = (b >= 0) ? b : (-b);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	bfb8      	it	lt
 800ac24:	425b      	neglt	r3, r3
 800ac26:	61bb      	str	r3, [r7, #24]

    uint32_t quotient = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]
    uint32_t bit = 0x10000;
 800ac2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac30:	613b      	str	r3, [r7, #16]

    /* The algorithm requires D >= R */
    while (divider < remainder) {
 800ac32:	e005      	b.n	800ac40 <fix16_div+0x42>
        divider <<= 1;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	61bb      	str	r3, [r7, #24]
        bit <<= 1;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	613b      	str	r3, [r7, #16]
    while (divider < remainder) {
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d3f5      	bcc.n	800ac34 <fix16_div+0x36>
    }

#ifndef FIXMATH_NO_OVERFLOW
    if (!bit)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <fix16_div+0x56>
        return FIX16_OVERFLOW;
 800ac4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac52:	e046      	b.n	800ace2 <fix16_div+0xe4>
#endif

    if (divider & 0x80000000) {
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	da24      	bge.n	800aca4 <fix16_div+0xa6>
        // Perform one step manually to avoid overflows later.
        // We know that divider's bottom bit is 0 here.
        if (remainder >= divider) {
 800ac5a:	69fa      	ldr	r2, [r7, #28]
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d307      	bcc.n	800ac72 <fix16_div+0x74>
            quotient |= bit;
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 800ac6a:	69fa      	ldr	r2, [r7, #28]
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	61fb      	str	r3, [r7, #28]
        }
        divider >>= 1;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	61bb      	str	r3, [r7, #24]
        bit >>= 1;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	613b      	str	r3, [r7, #16]
    }

    /* Main division loop */
    while (bit && remainder) {
 800ac7e:	e011      	b.n	800aca4 <fix16_div+0xa6>
        if (remainder >= divider) {
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d307      	bcc.n	800ac98 <fix16_div+0x9a>
            quotient |= bit;
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	61fb      	str	r3, [r7, #28]
        }

        remainder <<= 1;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	61fb      	str	r3, [r7, #28]
        bit >>= 1;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	613b      	str	r3, [r7, #16]
    while (bit && remainder) {
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <fix16_div+0xb2>
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1e7      	bne.n	800ac80 <fix16_div+0x82>
    }

#ifndef FIXMATH_NO_ROUNDING
    if (remainder >= divider) {
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d302      	bcc.n	800acbe <fix16_div+0xc0>
        quotient++;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3301      	adds	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
    }
#endif

    fix16_t result = quotient;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	60fb      	str	r3, [r7, #12]

    /* Figure out the sign of result */
    if ((a ^ b) & 0x80000000) {
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	4053      	eors	r3, r2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da09      	bge.n	800ace0 <fix16_div+0xe2>
#ifndef FIXMATH_NO_OVERFLOW
        if (result == FIX16_MINIMUM)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acd2:	d102      	bne.n	800acda <fix16_div+0xdc>
            return FIX16_OVERFLOW;
 800acd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acd8:	e003      	b.n	800ace2 <fix16_div+0xe4>
#endif

        result = -result;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	425b      	negs	r3, r3
 800acde:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800ace0:	68fb      	ldr	r3, [r7, #12]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3724      	adds	r7, #36	; 0x24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <fix16_sqrt>:

static fix16_t fix16_sqrt(fix16_t x) {
 800acee:	b480      	push	{r7}
 800acf0:	b087      	sub	sp, #28
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
    // It is assumed that x is not negative

    uint32_t num = x;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	617b      	str	r3, [r7, #20]
    uint32_t result = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	613b      	str	r3, [r7, #16]
    uint32_t bit;
    uint8_t n;

    bit = (uint32_t)1 << 30;
 800acfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad02:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 800ad04:	e002      	b.n	800ad0c <fix16_sqrt+0x1e>
        bit >>= 2;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	089b      	lsrs	r3, r3, #2
 800ad0a:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d8f8      	bhi.n	800ad06 <fix16_sqrt+0x18>

    // The main part is executed twice, in order to avoid
    // using 64 bit values in computations.
    for (n = 0; n < 2; n++) {
 800ad14:	2300      	movs	r3, #0
 800ad16:	72fb      	strb	r3, [r7, #11]
 800ad18:	e03c      	b.n	800ad94 <fix16_sqrt+0xa6>
        // First we get the top 24 bits of the answer.
        while (bit) {
            if (num >= result + bit) {
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d30b      	bcc.n	800ad3e <fix16_sqrt+0x50>
                num -= result + bit;
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	617b      	str	r3, [r7, #20]
                result = (result >> 1) + bit;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	e002      	b.n	800ad44 <fix16_sqrt+0x56>
            } else {
                result = (result >> 1);
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	085b      	lsrs	r3, r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
            }
            bit >>= 2;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	089b      	lsrs	r3, r3, #2
 800ad48:	60fb      	str	r3, [r7, #12]
        while (bit) {
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e4      	bne.n	800ad1a <fix16_sqrt+0x2c>
        }

        if (n == 0) {
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d11b      	bne.n	800ad8e <fix16_sqrt+0xa0>
            // Then process it again to get the lowest 8 bits.
            if (num > 65535) {
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5c:	d30e      	bcc.n	800ad7c <fix16_sqrt+0x8e>
                // by 16, so we have to add 1 to result manually and
                // adjust 'num' accordingly.
                // num = a - (result + 0.5)^2
                //	 = num + result^2 - (result + 0.5)^2
                //	 = num - result - 0.5
                num -= result;
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	617b      	str	r3, [r7, #20]
                num = (num << 16) - 0x8000;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ad6e:	617b      	str	r3, [r7, #20]
                result = (result << 16) + 0x8000;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	041b      	lsls	r3, r3, #16
 800ad74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	e005      	b.n	800ad88 <fix16_sqrt+0x9a>
            } else {
                num <<= 16;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	617b      	str	r3, [r7, #20]
                result <<= 16;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	041b      	lsls	r3, r3, #16
 800ad86:	613b      	str	r3, [r7, #16]
            }

            bit = 1 << 14;
 800ad88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad8c:	60fb      	str	r3, [r7, #12]
    for (n = 0; n < 2; n++) {
 800ad8e:	7afb      	ldrb	r3, [r7, #11]
 800ad90:	3301      	adds	r3, #1
 800ad92:	72fb      	strb	r3, [r7, #11]
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d9d7      	bls.n	800ad4a <fix16_sqrt+0x5c>
        }
    }

#ifndef FIXMATH_NO_ROUNDING
    // Finally, if next bit would have been 1, round the result upwards.
    if (num > result) {
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d902      	bls.n	800ada8 <fix16_sqrt+0xba>
        result++;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3301      	adds	r3, #1
 800ada6:	613b      	str	r3, [r7, #16]
    }
#endif

    return (fix16_t)result;
 800ada8:	693b      	ldr	r3, [r7, #16]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
	...

0800adb8 <fix16_exp>:

static fix16_t fix16_exp(fix16_t x) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
    const fix16_t* exp_values;

    fix16_t res, arg;
    uint16_t i;

    if (x >= F16(10.3972))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a20      	ldr	r2, [pc, #128]	; (800ae44 <fix16_exp+0x8c>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	dd02      	ble.n	800adce <fix16_exp+0x16>
        return FIX16_MAXIMUM;
 800adc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800adcc:	e035      	b.n	800ae3a <fix16_exp+0x82>
    if (x <= F16(-11.7835))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a1d      	ldr	r2, [pc, #116]	; (800ae48 <fix16_exp+0x90>)
 800add2:	4293      	cmp	r3, r2
 800add4:	da01      	bge.n	800adda <fix16_exp+0x22>
        return 0;
 800add6:	2300      	movs	r3, #0
 800add8:	e02f      	b.n	800ae3a <fix16_exp+0x82>

    if (x < 0) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da05      	bge.n	800adec <fix16_exp+0x34>
        x = -x;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	425b      	negs	r3, r3
 800ade4:	607b      	str	r3, [r7, #4]
        exp_values = exp_neg_values;
 800ade6:	4b19      	ldr	r3, [pc, #100]	; (800ae4c <fix16_exp+0x94>)
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e001      	b.n	800adf0 <fix16_exp+0x38>
    } else {
        exp_values = exp_pos_values;
 800adec:	4b18      	ldr	r3, [pc, #96]	; (800ae50 <fix16_exp+0x98>)
 800adee:	617b      	str	r3, [r7, #20]
    }

    res = FIX16_ONE;
 800adf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adf4:	613b      	str	r3, [r7, #16]
    arg = FIX16_ONE;
 800adf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adfa:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800adfc:	2300      	movs	r3, #0
 800adfe:	817b      	strh	r3, [r7, #10]
 800ae00:	e017      	b.n	800ae32 <fix16_exp+0x7a>
        while (x >= arg) {
            res = fix16_mul(res, exp_values[i]);
 800ae02:	897b      	ldrh	r3, [r7, #10]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6938      	ldr	r0, [r7, #16]
 800ae10:	f7ff fe90 	bl	800ab34 <fix16_mul>
 800ae14:	6138      	str	r0, [r7, #16]
            x -= arg;
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	607b      	str	r3, [r7, #4]
        while (x >= arg) {
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	daed      	bge.n	800ae02 <fix16_exp+0x4a>
        }
        arg >>= 3;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	10db      	asrs	r3, r3, #3
 800ae2a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800ae2c:	897b      	ldrh	r3, [r7, #10]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	817b      	strh	r3, [r7, #10]
 800ae32:	897b      	ldrh	r3, [r7, #10]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d9f2      	bls.n	800ae1e <fix16_exp+0x66>
    }
    return res;
 800ae38:	693b      	ldr	r3, [r7, #16]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	000a65ae 	.word	0x000a65ae
 800ae48:	fff4376e 	.word	0xfff4376e
 800ae4c:	0800ea68 	.word	0x0800ea68
 800ae50:	0800ea78 	.word	0x0800ea78

0800ae54 <VocAlgorithm_init>:
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params);
static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample);

void VocAlgorithm_init(VocAlgorithmParams* params) {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]

    params->mVoc_Index_Offset = F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 800ae62:	601a      	str	r2, [r3, #0]
    params->mTau_Mean_Variance_Hours =
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800ae6a:	605a      	str	r2, [r3, #4]
        F16(VocAlgorithm_TAU_MEAN_VARIANCE_HOURS);
    params->mGating_Max_Duration_Minutes =
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 800ae72:	609a      	str	r2, [r3, #8]
        F16(VocAlgorithm_GATING_MAX_DURATION_MINUTES);
    params->mSraw_Std_Initial = F16(VocAlgorithm_SRAW_STD_INITIAL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f44f 1248 	mov.w	r2, #3276800	; 0x320000
 800ae7a:	60da      	str	r2, [r3, #12]
    params->mUptime = F16(0.);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	611a      	str	r2, [r3, #16]
    params->mSraw = F16(0.);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	615a      	str	r2, [r3, #20]
    params->mVoc_Index = 0;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	619a      	str	r2, [r3, #24]
    VocAlgorithm__init_instances(params);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f804 	bl	800ae9c <VocAlgorithm__init_instances>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <VocAlgorithm__init_instances>:

static void VocAlgorithm__init_instances(VocAlgorithmParams* params) {
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__init(params);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8ac 	bl	800b002 <VocAlgorithm__mean_variance_estimator__init>
    VocAlgorithm__mean_variance_estimator__set_parameters(
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68d9      	ldr	r1, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f8c0 	bl	800b03c <VocAlgorithm__mean_variance_estimator__set_parameters>
        params, params->mSraw_Std_Initial, params->mTau_Mean_Variance_Hours,
        params->mGating_Max_Duration_Minutes);
    VocAlgorithm__mox_model__init(params);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fae2 	bl	800b486 <VocAlgorithm__mox_model__init>
    VocAlgorithm__mox_model__set_parameters(
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f8f8 	bl	800b0b8 <VocAlgorithm__mean_variance_estimator__get_std>
 800aec8:	4604      	mov	r4, r0
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f900 	bl	800b0d0 <VocAlgorithm__mean_variance_estimator__get_mean>
 800aed0:	4603      	mov	r3, r0
 800aed2:	461a      	mov	r2, r3
 800aed4:	4621      	mov	r1, r4
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fae3 	bl	800b4a2 <VocAlgorithm__mox_model__set_parameters>
        params, VocAlgorithm__mean_variance_estimator__get_std(params),
        VocAlgorithm__mean_variance_estimator__get_mean(params));
    VocAlgorithm__sigmoid_scaled__init(params);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fb10 	bl	800b502 <VocAlgorithm__sigmoid_scaled__init>
    VocAlgorithm__sigmoid_scaled__set_parameters(params,
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fb16 	bl	800b51a <VocAlgorithm__sigmoid_scaled__set_parameters>
                                                 params->mVoc_Index_Offset);
    VocAlgorithm__adaptive_lowpass__init(params);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fb80 	bl	800b5f4 <VocAlgorithm__adaptive_lowpass__init>
    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fb88 	bl	800b60a <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd90      	pop	{r4, r7, pc}

0800af02 <VocAlgorithm_process>:
    params->mSraw_Std_Initial = (fix16_from_int(std_initial));
    VocAlgorithm__init_instances(params);
}

void VocAlgorithm_process(VocAlgorithmParams* params, int32_t sraw,
                          int32_t* voc_index) {
 800af02:	b590      	push	{r4, r7, lr}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= F16(VocAlgorithm_INITIAL_BLACKOUT))) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f5b3 1f34 	cmp.w	r3, #2949120	; 0x2d0000
 800af16:	dc06      	bgt.n	800af26 <VocAlgorithm_process+0x24>
        params->mUptime =
            (params->mUptime + F16(VocAlgorithm_SAMPLING_INTERVAL));
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->mUptime =
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	611a      	str	r2, [r3, #16]
 800af24:	e05f      	b.n	800afe6 <VocAlgorithm_process+0xe4>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dd1f      	ble.n	800af6c <VocAlgorithm_process+0x6a>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800af32:	4293      	cmp	r3, r2
 800af34:	dc1a      	bgt.n	800af6c <VocAlgorithm_process+0x6a>
            if ((sraw < 20001)) {
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f644 6220 	movw	r2, #20000	; 0x4e20
 800af3c:	4293      	cmp	r3, r2
 800af3e:	dc03      	bgt.n	800af48 <VocAlgorithm_process+0x46>
                sraw = 20001;
 800af40:	f644 6321 	movw	r3, #20001	; 0x4e21
 800af44:	60bb      	str	r3, [r7, #8]
 800af46:	e007      	b.n	800af58 <VocAlgorithm_process+0x56>
            } else if ((sraw > 52767)) {
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f64c 621f 	movw	r2, #52767	; 0xce1f
 800af4e:	4293      	cmp	r3, r2
 800af50:	dd02      	ble.n	800af58 <VocAlgorithm_process+0x56>
                sraw = 52767;
 800af52:	f64c 631f 	movw	r3, #52767	; 0xce1f
 800af56:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = (fix16_from_int((sraw - 20000)));
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800af5e:	3b20      	subs	r3, #32
 800af60:	4618      	mov	r0, r3
 800af62:	f7ff fdcf 	bl	800ab04 <fix16_from_int>
 800af66:	4602      	mov	r2, r0
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	615a      	str	r2, [r3, #20]
        }
        params->mVoc_Index =
            VocAlgorithm__mox_model__process(params, params->mSraw);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	4619      	mov	r1, r3
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 faa7 	bl	800b4c6 <VocAlgorithm__mox_model__process>
 800af78:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__sigmoid_scaled__process(params, params->mVoc_Index);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	4619      	mov	r1, r3
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 fad7 	bl	800b538 <VocAlgorithm__sigmoid_scaled__process>
 800af8a:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__adaptive_lowpass__process(params, params->mVoc_Index);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	4619      	mov	r1, r3
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fb4c 	bl	800b634 <VocAlgorithm__adaptive_lowpass__process>
 800af9c:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	619a      	str	r2, [r3, #24]
        if ((params->mVoc_Index < F16(0.5))) {
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afaa:	da03      	bge.n	800afb4 <VocAlgorithm_process+0xb2>
            params->mVoc_Index = F16(0.5);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800afb2:	619a      	str	r2, [r3, #24]
        }
        if ((params->mSraw > F16(0.))) {
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dd14      	ble.n	800afe6 <VocAlgorithm_process+0xe4>
            VocAlgorithm__mean_variance_estimator__process(
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6959      	ldr	r1, [r3, #20]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	461a      	mov	r2, r3
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f966 	bl	800b298 <VocAlgorithm__mean_variance_estimator__process>
                params, params->mSraw, params->mVoc_Index);
            VocAlgorithm__mox_model__set_parameters(
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f000 f873 	bl	800b0b8 <VocAlgorithm__mean_variance_estimator__get_std>
 800afd2:	4604      	mov	r4, r0
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 f87b 	bl	800b0d0 <VocAlgorithm__mean_variance_estimator__get_mean>
 800afda:	4603      	mov	r3, r0
 800afdc:	461a      	mov	r2, r3
 800afde:	4621      	mov	r1, r4
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fa5e 	bl	800b4a2 <VocAlgorithm__mox_model__set_parameters>
                params, VocAlgorithm__mean_variance_estimator__get_std(params),
                VocAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *voc_index = (fix16_cast_to_int((params->mVoc_Index + F16(0.5))));
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fd94 	bl	800ab1c <fix16_cast_to_int>
 800aff4:	4602      	mov	r2, r0
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
	return ;
 800affa:	bf00      	nop
}
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	bd90      	pop	{r4, r7, pc}

0800b002 <VocAlgorithm__mean_variance_estimator__init>:

static void
VocAlgorithm__mean_variance_estimator__init(VocAlgorithmParams* params) {
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__set_parameters(params, F16(0.),
 800b00a:	2300      	movs	r3, #0
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f813 	bl	800b03c <VocAlgorithm__mean_variance_estimator__set_parameters>
                                                          F16(0.), F16(0.));
    VocAlgorithm__mean_variance_estimator___init_instances(params);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f804 	bl	800b024 <VocAlgorithm__mean_variance_estimator___init_instances>
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <VocAlgorithm__mean_variance_estimator___init_instances>:

static void VocAlgorithm__mean_variance_estimator___init_instances(
    VocAlgorithmParams* params) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__init(params);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f9d9 	bl	800b3e4 <VocAlgorithm__mean_variance_estimator___sigmoid__init>
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <VocAlgorithm__mean_variance_estimator__set_parameters>:

static void VocAlgorithm__mean_variance_estimator__set_parameters(
    VocAlgorithmParams* params, fix16_t std_initial,
    fix16_t tau_mean_variance_hours, fix16_t gating_max_duration_minutes) {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes =
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	61da      	str	r2, [r3, #28]
        gating_max_duration_minutes;
    params->m_Mean_Variance_Estimator___Initialized = false;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2020 	strb.w	r2, [r3, #32]
    params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	625a      	str	r2, [r3, #36]	; 0x24
    params->m_Mean_Variance_Estimator___Sraw_Offset = F16(0.);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	629a      	str	r2, [r3, #40]	; 0x28
    params->m_Mean_Variance_Estimator___Std = std_initial;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	62da      	str	r2, [r3, #44]	; 0x2c
    params->m_Mean_Variance_Estimator___Gamma =
        (fix16_div(F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3312      	adds	r3, #18
 800b06e:	4619      	mov	r1, r3
 800b070:	f240 408d 	movw	r0, #1165	; 0x48d
 800b074:	f7ff fdc3 	bl	800abfe <fix16_div>
 800b078:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator___Gamma =
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	631a      	str	r2, [r3, #48]	; 0x30
                        (VocAlgorithm_SAMPLING_INTERVAL / 3600.))),
                   (tau_mean_variance_hours +
                    F16((VocAlgorithm_SAMPLING_INTERVAL / 3600.)))));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a0c      	ldr	r2, [pc, #48]	; (800b0b4 <VocAlgorithm__mean_variance_estimator__set_parameters+0x78>)
 800b082:	635a      	str	r2, [r3, #52]	; 0x34
        F16(((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
              VocAlgorithm_SAMPLING_INTERVAL) /
             (VocAlgorithm_TAU_INITIAL_MEAN + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance = F16(
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f240 628d 	movw	r2, #1677	; 0x68d
 800b08a:	639a      	str	r2, [r3, #56]	; 0x38
        ((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          VocAlgorithm_SAMPLING_INTERVAL) /
         (VocAlgorithm_TAU_INITIAL_VARIANCE + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator__Gamma_Mean = F16(0.);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	63da      	str	r2, [r3, #60]	; 0x3c
    params->m_Mean_Variance_Estimator__Gamma_Variance = F16(0.);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Uptime_Gamma = F16(0.);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	645a      	str	r2, [r3, #68]	; 0x44
    params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	649a      	str	r2, [r3, #72]	; 0x48
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	00030c31 	.word	0x00030c31

0800b0b8 <VocAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static fix16_t
VocAlgorithm__mean_variance_estimator__get_std(VocAlgorithmParams* params) {
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <VocAlgorithm__mean_variance_estimator__get_mean>:

static fix16_t
VocAlgorithm__mean_variance_estimator__get_mean(VocAlgorithmParams* params) {
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    return (params->m_Mean_Variance_Estimator___Mean +
 800b0e0:	4413      	add	r3, r2
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <VocAlgorithm__mean_variance_estimator___calculate_gamma>:

static void VocAlgorithm__mean_variance_estimator___calculate_gamma(
    VocAlgorithmParams* params, fix16_t voc_index_from_prior) {
 800b0f0:	b590      	push	{r4, r7, lr}
 800b0f2:	b08d      	sub	sp, #52	; 0x34
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
    fix16_t sigmoid_gamma_variance;
    fix16_t gamma_variance;
    fix16_t gating_threshold_variance;
    fix16_t sigmoid_gating_variance;

    uptime_limit = F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800b0fa:	4b63      	ldr	r3, [pc, #396]	; (800b288 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x198>)
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        VocAlgorithm_SAMPLING_INTERVAL));
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b104:	429a      	cmp	r2, r3
 800b106:	dd05      	ble.n	800b114 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x24>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	645a      	str	r2, [r3, #68]	; 0x44
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b11a:	429a      	cmp	r2, r3
 800b11c:	dd05      	ble.n	800b12a <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x3a>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b122:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	649a      	str	r2, [r3, #72]	; 0x48
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b12a:	f240 238f 	movw	r3, #655	; 0x28f
 800b12e:	4a57      	ldr	r2, [pc, #348]	; (800b28c <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x19c>)
 800b130:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f963 	bl	800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_MEAN),
        F16(VocAlgorithm_INIT_TRANSITION_MEAN));
    sigmoid_gamma_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f973 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b146:	62b8      	str	r0, [r7, #40]	; 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean =
        (params->m_Mean_Variance_Estimator___Gamma +
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                     params->m_Mean_Variance_Estimator___Gamma),
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fceb 	bl	800ab34 <fix16_mul>
 800b15e:	4603      	mov	r3, r0
    gamma_mean =
 800b160:	4423      	add	r3, r4
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
                    sigmoid_gamma_mean)));
    gating_threshold_mean =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f95e 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b170:	4603      	mov	r3, r0
 800b172:	4619      	mov	r1, r3
 800b174:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 800b178:	f7ff fcdc 	bl	800ab34 <fix16_mul>
 800b17c:	4603      	mov	r3, r0
    gating_threshold_mean =
 800b17e:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 800b182:	623b      	str	r3, [r7, #32]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b184:	f241 730a 	movw	r3, #5898	; 0x170a
 800b188:	6a3a      	ldr	r2, [r7, #32]
 800b18a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f936 	bl	800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_mean,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f948 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b19c:	61f8      	str	r0, [r7, #28]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (fix16_mul(sigmoid_gating_mean, gamma_mean));
 800b19e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1a0:	69f8      	ldr	r0, [r7, #28]
 800b1a2:	f7ff fcc7 	bl	800ab34 <fix16_mul>
 800b1a6:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	63da      	str	r2, [r3, #60]	; 0x3c
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b1ac:	f240 238f 	movw	r3, #655	; 0x28f
 800b1b0:	4a37      	ldr	r2, [pc, #220]	; (800b290 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a0>)
 800b1b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f922 	bl	800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_VARIANCE),
        F16(VocAlgorithm_INIT_TRANSITION_VARIANCE));
    sigmoid_gamma_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f932 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b1c8:	61b8      	str	r0, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma +
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul(
             (params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
              params->m_Mean_Variance_Estimator___Gamma),
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul(
 800b1d6:	1ad0      	subs	r0, r2, r3
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	4619      	mov	r1, r3
 800b1e0:	f7ff fca8 	bl	800ab34 <fix16_mul>
 800b1e4:	4603      	mov	r3, r0
    gamma_variance =
 800b1e6:	4423      	add	r3, r4
 800b1e8:	617b      	str	r3, [r7, #20]
             (sigmoid_gamma_variance - sigmoid_gamma_mean))));
    gating_threshold_variance =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f91b 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 800b1fe:	f7ff fc99 	bl	800ab34 <fix16_mul>
 800b202:	4603      	mov	r3, r0
    gating_threshold_variance =
 800b204:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 800b208:	613b      	str	r3, [r7, #16]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b20a:	f241 730a 	movw	r3, #5898	; 0x170a
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f8f3 	bl	800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_variance,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f905 	bl	800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b222:	60f8      	str	r0, [r7, #12]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (fix16_mul(sigmoid_gating_variance, gamma_variance));
 800b224:	6979      	ldr	r1, [r7, #20]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fc84 	bl	800ab34 <fix16_mul>
 800b22c:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
                    ((fix16_mul((F16(1.) - sigmoid_gating_mean),
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800b23c:	4915      	ldr	r1, [pc, #84]	; (800b294 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a4>)
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fc78 	bl	800ab34 <fix16_mul>
 800b244:	4603      	mov	r3, r0
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
 800b246:	f5a3 4399 	sub.w	r3, r3, #19584	; 0x4c80
 800b24a:	3b4d      	subs	r3, #77	; 0x4d
 800b24c:	4619      	mov	r1, r3
 800b24e:	f240 4044 	movw	r0, #1092	; 0x444
 800b252:	f7ff fc6f 	bl	800ab34 <fix16_mul>
 800b256:	4603      	mov	r3, r0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b258:	18e2      	adds	r2, r4, r3
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	64da      	str	r2, [r3, #76]	; 0x4c
                                F16((1. + VocAlgorithm_GATING_MAX_RATIO)))) -
                     F16(VocAlgorithm_GATING_MAX_RATIO)))));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes <
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b262:	2b00      	cmp	r3, #0
 800b264:	da02      	bge.n	800b26c <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x17c>
         F16(0.))) {
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes)) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	69db      	ldr	r3, [r3, #28]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b274:	429a      	cmp	r2, r3
 800b276:	dd02      	ble.n	800b27e <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x18e>
        params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 800b27e:	bf00      	nop
 800b280:	3734      	adds	r7, #52	; 0x34
 800b282:	46bd      	mov	sp, r7
 800b284:	bd90      	pop	{r4, r7, pc}
 800b286:	bf00      	nop
 800b288:	7ffe0000 	.word	0x7ffe0000
 800b28c:	0a8c0000 	.word	0x0a8c0000
 800b290:	14640000 	.word	0x14640000
 800b294:	00014ccd 	.word	0x00014ccd

0800b298 <VocAlgorithm__mean_variance_estimator__process>:

static void VocAlgorithm__mean_variance_estimator__process(
    VocAlgorithmParams* params, fix16_t sraw, fix16_t voc_index_from_prior) {
 800b298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b29a:	b089      	sub	sp, #36	; 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]

    fix16_t delta_sgp;
    fix16_t c;
    fix16_t additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2aa:	f083 0301 	eor.w	r3, r3, #1
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <VocAlgorithm__mean_variance_estimator__process+0x32>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2020 	strb.w	r2, [r3, #32]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	629a      	str	r2, [r3, #40]	; 0x28
        params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	625a      	str	r2, [r3, #36]	; 0x24
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
                        delta_sgp)));
    }
}
 800b2c8:	e088      	b.n	800b3dc <VocAlgorithm__mean_variance_estimator__process+0x144>
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800b2d2:	da04      	bge.n	800b2de <VocAlgorithm__mean_variance_estimator__process+0x46>
             (params->m_Mean_Variance_Estimator___Mean <= F16(-100.)))) {
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 800b2d8:	f513 0fc8 	cmn.w	r3, #6553600	; 0x640000
 800b2dc:	dc09      	bgt.n	800b2f2 <VocAlgorithm__mean_variance_estimator__process+0x5a>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                 params->m_Mean_Variance_Estimator___Mean);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b2e6:	441a      	add	r2, r3
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
            params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	625a      	str	r2, [r3, #36]	; 0x24
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	60bb      	str	r3, [r7, #8]
        VocAlgorithm__mean_variance_estimator___calculate_gamma(
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff fef6 	bl	800b0f0 <VocAlgorithm__mean_variance_estimator___calculate_gamma>
            (sraw - params->m_Mean_Variance_Estimator___Mean),
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        delta_sgp = (fix16_div(
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff fc74 	bl	800abfe <fix16_div>
 800b316:	6178      	str	r0, [r7, #20]
        if ((delta_sgp < F16(0.))) {
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da05      	bge.n	800b32a <VocAlgorithm__mean_variance_estimator__process+0x92>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	e004      	b.n	800b334 <VocAlgorithm__mean_variance_estimator__process+0x9c>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4413      	add	r3, r2
 800b332:	61fb      	str	r3, [r7, #28]
        additional_scaling = F16(1.);
 800b334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b338:	61bb      	str	r3, [r7, #24]
        if ((c > F16(1440.))) {
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	f1b3 6fb4 	cmp.w	r3, #94371840	; 0x5a00000
 800b340:	dd02      	ble.n	800b348 <VocAlgorithm__mean_variance_estimator__process+0xb0>
            additional_scaling = F16(4.);
 800b342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b346:	61bb      	str	r3, [r7, #24]
                 params->m_Mean_Variance_Estimator__Gamma_Variance)))),
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 800b34c:	f5c3 0380 	rsb	r3, r3, #4194304	; 0x400000
 800b350:	4619      	mov	r1, r3
 800b352:	69b8      	ldr	r0, [r7, #24]
 800b354:	f7ff fbee 	bl	800ab34 <fix16_mul>
 800b358:	4603      	mov	r3, r0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7ff fcc7 	bl	800acee <fix16_sqrt>
 800b360:	4606      	mov	r6, r0
                (fix16_mul(
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800b36a:	69b9      	ldr	r1, [r7, #24]
 800b36c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b370:	f7ff fbe0 	bl	800ab34 <fix16_mul>
 800b374:	4603      	mov	r3, r0
 800b376:	4619      	mov	r1, r3
 800b378:	4628      	mov	r0, r5
 800b37a:	f7ff fc40 	bl	800abfe <fix16_div>
 800b37e:	4603      	mov	r3, r0
 800b380:	4619      	mov	r1, r3
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fbd6 	bl	800ab34 <fix16_mul>
 800b388:	4604      	mov	r4, r0
                (fix16_mul(
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38e:	6979      	ldr	r1, [r7, #20]
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff fbcf 	bl	800ab34 <fix16_mul>
 800b396:	4603      	mov	r3, r0
 800b398:	69b9      	ldr	r1, [r7, #24]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff fc2f 	bl	800abfe <fix16_div>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fbc5 	bl	800ab34 <fix16_mul>
 800b3aa:	4603      	mov	r3, r0
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 800b3ac:	4423      	add	r3, r4
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fc9d 	bl	800acee <fix16_sqrt>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff fbbb 	bl	800ab34 <fix16_mul>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	62da      	str	r2, [r3, #44]	; 0x2c
            (params->m_Mean_Variance_Estimator___Mean +
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3cc:	6979      	ldr	r1, [r7, #20]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff fbb0 	bl	800ab34 <fix16_mul>
 800b3d4:	4603      	mov	r3, r0
            (params->m_Mean_Variance_Estimator___Mean +
 800b3d6:	18e2      	adds	r2, r4, r3
        params->m_Mean_Variance_Estimator___Mean =
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b3dc:	bf00      	nop
 800b3de:	3724      	adds	r7, #36	; 0x24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3e4 <VocAlgorithm__mean_variance_estimator___sigmoid__init>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__init(
    VocAlgorithmParams* params) {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f804 	bl	800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(0.), F16(0.), F16(0.));
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    VocAlgorithmParams* params, fix16_t L, fix16_t X0, fix16_t K) {
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator___Sigmoid__L = L;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	651a      	str	r2, [r3, #80]	; 0x50
    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	655a      	str	r2, [r3, #84]	; 0x54
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b420:	bf00      	nop
 800b422:	3714      	adds	r7, #20
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <VocAlgorithm__mean_variance_estimator___sigmoid__process>:

static fix16_t VocAlgorithm__mean_variance_estimator___sigmoid__process(
    VocAlgorithmParams* params, fix16_t sample) {
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]

    fix16_t x;

    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d58      	ldr	r0, [r3, #84]	; 0x54
                   (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0)));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	4619      	mov	r1, r3
 800b444:	f7ff fb76 	bl	800ab34 <fix16_mul>
 800b448:	60f8      	str	r0, [r7, #12]
    if ((x < F16(-50.))) {
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 800b450:	da02      	bge.n	800b458 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x2c>
        return params->m_Mean_Variance_Estimator___Sigmoid__L;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b456:	e012      	b.n	800b47e <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else if ((x > F16(50.))) {
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800b45e:	dd01      	ble.n	800b464 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x38>
        return F16(0.);
 800b460:	2300      	movs	r3, #0
 800b462:	e00c      	b.n	800b47e <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else {
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6d1c      	ldr	r4, [r3, #80]	; 0x50
                          (F16(1.) + fix16_exp(x))));
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fca5 	bl	800adb8 <fix16_exp>
 800b46e:	4603      	mov	r3, r0
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 800b470:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b474:	4619      	mov	r1, r3
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff fbc1 	bl	800abfe <fix16_div>
 800b47c:	4603      	mov	r3, r0
    }
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	bd90      	pop	{r4, r7, pc}

0800b486 <VocAlgorithm__mox_model__init>:

static void VocAlgorithm__mox_model__init(VocAlgorithmParams* params) {
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mox_model__set_parameters(params, F16(1.), F16(0.));
 800b48e:	2200      	movs	r2, #0
 800b490:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f804 	bl	800b4a2 <VocAlgorithm__mox_model__set_parameters>
}
 800b49a:	bf00      	nop
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <VocAlgorithm__mox_model__set_parameters>:

static void VocAlgorithm__mox_model__set_parameters(VocAlgorithmParams* params,
                                                    fix16_t SRAW_STD,
                                                    fix16_t SRAW_MEAN) {
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	65da      	str	r2, [r3, #92]	; 0x5c
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b4ba:	bf00      	nop
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <VocAlgorithm__mox_model__process>:

static fix16_t VocAlgorithm__mox_model__process(VocAlgorithmParams* params,
                                                fix16_t sraw) {
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]

    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	1ad2      	subs	r2, r2, r3
                                 (-(params->m_Mox_Model__Sraw_Std +
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 800b4dc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b4e0:	f503 1310 	add.w	r3, r3, #2359296	; 0x240000
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	f7ff fb89 	bl	800abfe <fix16_div>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f44f 0166 	mov.w	r1, #15073280	; 0xe60000
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff fb1e 	bl	800ab34 <fix16_mul>
 800b4f8:	4603      	mov	r3, r0
                                    F16(VocAlgorithm_SRAW_STD_BONUS))))),
                      F16(VocAlgorithm_VOC_INDEX_GAIN)));
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <VocAlgorithm__sigmoid_scaled__init>:

static void VocAlgorithm__sigmoid_scaled__init(VocAlgorithmParams* params) {
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]

    VocAlgorithm__sigmoid_scaled__set_parameters(params, F16(0.));
 800b50a:	2100      	movs	r1, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f804 	bl	800b51a <VocAlgorithm__sigmoid_scaled__set_parameters>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <VocAlgorithm__sigmoid_scaled__set_parameters>:

static void
VocAlgorithm__sigmoid_scaled__set_parameters(VocAlgorithmParams* params,
                                             fix16_t offset) {
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]

    params->m_Sigmoid_Scaled__Offset = offset;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b52a:	bf00      	nop
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
	...

0800b538 <VocAlgorithm__sigmoid_scaled__process>:

static fix16_t VocAlgorithm__sigmoid_scaled__process(VocAlgorithmParams* params,
                                                     fix16_t sample) {
 800b538:	b590      	push	{r4, r7, lr}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]

    fix16_t x;
    fix16_t shift;

    x = (fix16_mul(F16(VocAlgorithm_SIGMOID_K),
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	f5a3 0355 	sub.w	r3, r3, #13959168	; 0xd50000
 800b548:	4619      	mov	r1, r3
 800b54a:	4829      	ldr	r0, [pc, #164]	; (800b5f0 <VocAlgorithm__sigmoid_scaled__process+0xb8>)
 800b54c:	f7ff faf2 	bl	800ab34 <fix16_mul>
 800b550:	60f8      	str	r0, [r7, #12]
                   (sample - F16(VocAlgorithm_SIGMOID_X0))));
    if ((x < F16(-50.))) {
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 800b558:	da02      	bge.n	800b560 <VocAlgorithm__sigmoid_scaled__process+0x28>
        return F16(VocAlgorithm_SIGMOID_L);
 800b55a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800b55e:	e042      	b.n	800b5e6 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else if ((x > F16(50.))) {
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800b566:	dd01      	ble.n	800b56c <VocAlgorithm__sigmoid_scaled__process+0x34>
        return F16(0.);
 800b568:	2300      	movs	r3, #0
 800b56a:	e03c      	b.n	800b5e6 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else {
        if ((sample >= F16(0.))) {
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	db20      	blt.n	800b5b4 <VocAlgorithm__sigmoid_scaled__process+0x7c>
            shift = (fix16_div(
                (F16(VocAlgorithm_SIGMOID_L) -
                 (fix16_mul(F16(5.), params->m_Sigmoid_Scaled__Offset))),
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b576:	4619      	mov	r1, r3
 800b578:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 800b57c:	f7ff fada 	bl	800ab34 <fix16_mul>
 800b580:	4603      	mov	r3, r0
            shift = (fix16_div(
 800b582:	f1c3 73fa 	rsb	r3, r3, #32768000	; 0x1f40000
 800b586:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7ff fb37 	bl	800abfe <fix16_div>
 800b590:	60b8      	str	r0, [r7, #8]
                F16(4.)));
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f103 74fa 	add.w	r4, r3, #32768000	; 0x1f40000
                               (F16(1.) + fix16_exp(x)))) -
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f7ff fc0d 	bl	800adb8 <fix16_exp>
 800b59e:	4603      	mov	r3, r0
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 800b5a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff fb29 	bl	800abfe <fix16_div>
 800b5ac:	4602      	mov	r2, r0
                               (F16(1.) + fix16_exp(x)))) -
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	e018      	b.n	800b5e6 <VocAlgorithm__sigmoid_scaled__process+0xae>
                    shift);
        } else {
            return (fix16_mul(
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b8:	f44f 01c8 	mov.w	r1, #6553600	; 0x640000
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7ff fb1e 	bl	800abfe <fix16_div>
 800b5c2:	4604      	mov	r4, r0
                (fix16_div(params->m_Sigmoid_Scaled__Offset,
                           F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT))),
                (fix16_div(F16(VocAlgorithm_SIGMOID_L),
                           (F16(1.) + fix16_exp(x))))));
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7ff fbf7 	bl	800adb8 <fix16_exp>
 800b5ca:	4603      	mov	r3, r0
            return (fix16_mul(
 800b5cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f04f 70fa 	mov.w	r0, #32768000	; 0x1f40000
 800b5d6:	f7ff fb12 	bl	800abfe <fix16_div>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7ff faa8 	bl	800ab34 <fix16_mul>
 800b5e4:	4603      	mov	r3, r0
        }
    }
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd90      	pop	{r4, r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	fffffe56 	.word	0xfffffe56

0800b5f4 <VocAlgorithm__adaptive_lowpass__init>:

static void VocAlgorithm__adaptive_lowpass__init(VocAlgorithmParams* params) {
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]

    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f804 	bl	800b60a <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 800b602:	bf00      	nop
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <VocAlgorithm__adaptive_lowpass__set_parameters>:

static void
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params) {
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f640 4231 	movw	r2, #3121	; 0xc31
 800b618:	669a      	str	r2, [r3, #104]	; 0x68
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_FAST + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass__A2 =
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2283      	movs	r2, #131	; 0x83
 800b61e:	66da      	str	r2, [r3, #108]	; 0x6c
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_SLOW + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass___Initialized = false;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <VocAlgorithm__adaptive_lowpass__process>:

static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample) {
 800b634:	b590      	push	{r4, r7, lr}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
    fix16_t abs_delta;
    fix16_t F1;
    fix16_t tau_a;
    fix16_t a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b644:	f083 0301 	eor.w	r3, r3, #1
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00c      	beq.n	800b668 <VocAlgorithm__adaptive_lowpass__process+0x34>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	675a      	str	r2, [r3, #116]	; 0x74
        params->m_Adaptive_Lowpass___X2 = sample;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	679a      	str	r2, [r3, #120]	; 0x78
        params->m_Adaptive_Lowpass___X3 = sample;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	67da      	str	r2, [r3, #124]	; 0x7c
        params->m_Adaptive_Lowpass___Initialized = true;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    }
    params->m_Adaptive_Lowpass___X1 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A1),
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b66c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7ff fa5c 	bl	800ab34 <fix16_mul>
 800b67c:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X1)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A1, sample)));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff fa55 	bl	800ab34 <fix16_mul>
 800b68a:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X1)) +
 800b68c:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X1 =
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	675a      	str	r2, [r3, #116]	; 0x74
    params->m_Adaptive_Lowpass___X2 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A2),
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b696:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f7ff fa47 	bl	800ab34 <fix16_mul>
 800b6a6:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X2)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A2, sample)));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fa40 	bl	800ab34 <fix16_mul>
 800b6b4:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X2)) +
 800b6b6:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X2 =
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	679a      	str	r2, [r3, #120]	; 0x78
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    abs_delta =
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	617b      	str	r3, [r7, #20]
    if ((abs_delta < F16(0.))) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	da02      	bge.n	800b6d4 <VocAlgorithm__adaptive_lowpass__process+0xa0>
        abs_delta = (-abs_delta);
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	425b      	negs	r3, r3
 800b6d2:	617b      	str	r3, [r7, #20]
    }
    F1 = fix16_exp((fix16_mul(F16(VocAlgorithm_LP_ALPHA), abs_delta)));
 800b6d4:	6979      	ldr	r1, [r7, #20]
 800b6d6:	4819      	ldr	r0, [pc, #100]	; (800b73c <VocAlgorithm__adaptive_lowpass__process+0x108>)
 800b6d8:	f7ff fa2c 	bl	800ab34 <fix16_mul>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fb6a 	bl	800adb8 <fix16_exp>
 800b6e4:	6138      	str	r0, [r7, #16]
    tau_a =
        ((fix16_mul(F16((VocAlgorithm_LP_TAU_SLOW - VocAlgorithm_LP_TAU_FAST)),
 800b6e6:	6939      	ldr	r1, [r7, #16]
 800b6e8:	f04f 70f0 	mov.w	r0, #31457280	; 0x1e00000
 800b6ec:	f7ff fa22 	bl	800ab34 <fix16_mul>
 800b6f0:	4603      	mov	r3, r0
    tau_a =
 800b6f2:	f503 13a0 	add.w	r3, r3, #1310720	; 0x140000
 800b6f6:	60fb      	str	r3, [r7, #12]
                    F1)) +
         F16(VocAlgorithm_LP_TAU_FAST));
    a3 = (fix16_div(F16(VocAlgorithm_SAMPLING_INTERVAL),
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b6fe:	4619      	mov	r1, r3
 800b700:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b704:	f7ff fa7b 	bl	800abfe <fix16_div>
 800b708:	60b8      	str	r0, [r7, #8]
                    (F16(VocAlgorithm_SAMPLING_INTERVAL) + tau_a)));
    params->m_Adaptive_Lowpass___X3 =
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7ff fa0c 	bl	800ab34 <fix16_mul>
 800b71c:	4604      	mov	r4, r0
         (fix16_mul(a3, sample)));
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	68b8      	ldr	r0, [r7, #8]
 800b722:	f7ff fa07 	bl	800ab34 <fix16_mul>
 800b726:	4603      	mov	r3, r0
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800b728:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X3 =
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	67da      	str	r2, [r3, #124]	; 0x7c
    return params->m_Adaptive_Lowpass___X3;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 800b732:	4618      	mov	r0, r3
 800b734:	371c      	adds	r7, #28
 800b736:	46bd      	mov	sp, r7
 800b738:	bd90      	pop	{r4, r7, pc}
 800b73a:	bf00      	nop
 800b73c:	ffffcccd 	.word	0xffffcccd

0800b740 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b74c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b750:	f002 fa68 	bl	800dc24 <USBD_static_malloc>
 800b754:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d105      	bne.n	800b768 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b764:	2302      	movs	r3, #2
 800b766:	e066      	b.n	800b836 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7c1b      	ldrb	r3, [r3, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d119      	bne.n	800b7ac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b77c:	2202      	movs	r2, #2
 800b77e:	2181      	movs	r1, #129	; 0x81
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f002 f92c 	bl	800d9de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b78c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b790:	2202      	movs	r2, #2
 800b792:	2101      	movs	r1, #1
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 f922 	bl	800d9de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2210      	movs	r2, #16
 800b7a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b7aa:	e016      	b.n	800b7da <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7ac:	2340      	movs	r3, #64	; 0x40
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	2181      	movs	r1, #129	; 0x81
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f002 f913 	bl	800d9de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7be:	2340      	movs	r3, #64	; 0x40
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f002 f90a 	bl	800d9de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2210      	movs	r2, #16
 800b7d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7da:	2308      	movs	r3, #8
 800b7dc:	2203      	movs	r2, #3
 800b7de:	2182      	movs	r1, #130	; 0x82
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f002 f8fc 	bl	800d9de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	7c1b      	ldrb	r3, [r3, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b81a:	2101      	movs	r1, #1
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f002 f9cd 	bl	800dbbc <USBD_LL_PrepareReceive>
 800b822:	e007      	b.n	800b834 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	2101      	movs	r1, #1
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f002 f9c4 	bl	800dbbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b082      	sub	sp, #8
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b84a:	2181      	movs	r1, #129	; 0x81
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f002 f8ec 	bl	800da2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b858:	2101      	movs	r1, #1
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f002 f8e5 	bl	800da2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b868:	2182      	movs	r1, #130	; 0x82
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f002 f8dd 	bl	800da2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00e      	beq.n	800b8a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b89a:	4618      	mov	r0, r3
 800b89c:	f002 f9d0 	bl	800dc40 <USBD_static_free>
    pdev->pClassData = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	e0af      	b.n	800ba3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d03f      	beq.n	800b968 <USBD_CDC_Setup+0xb4>
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	f040 809f 	bne.w	800ba2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	88db      	ldrh	r3, [r3, #6]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d02e      	beq.n	800b954 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b25b      	sxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	da16      	bge.n	800b92e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b90c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	88d2      	ldrh	r2, [r2, #6]
 800b912:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	88db      	ldrh	r3, [r3, #6]
 800b918:	2b07      	cmp	r3, #7
 800b91a:	bf28      	it	cs
 800b91c:	2307      	movcs	r3, #7
 800b91e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	89fa      	ldrh	r2, [r7, #14]
 800b924:	4619      	mov	r1, r3
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 fb19 	bl	800cf5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b92c:	e085      	b.n	800ba3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	785a      	ldrb	r2, [r3, #1]
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	88db      	ldrh	r3, [r3, #6]
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b944:	6939      	ldr	r1, [r7, #16]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	88db      	ldrh	r3, [r3, #6]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 fb32 	bl	800cfb6 <USBD_CtlPrepareRx>
      break;
 800b952:	e072      	b.n	800ba3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	7850      	ldrb	r0, [r2, #1]
 800b960:	2200      	movs	r2, #0
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	4798      	blx	r3
      break;
 800b966:	e068      	b.n	800ba3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b0b      	cmp	r3, #11
 800b96e:	d852      	bhi.n	800ba16 <USBD_CDC_Setup+0x162>
 800b970:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBD_CDC_Setup+0xc4>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b9a9 	.word	0x0800b9a9
 800b97c:	0800ba25 	.word	0x0800ba25
 800b980:	0800ba17 	.word	0x0800ba17
 800b984:	0800ba17 	.word	0x0800ba17
 800b988:	0800ba17 	.word	0x0800ba17
 800b98c:	0800ba17 	.word	0x0800ba17
 800b990:	0800ba17 	.word	0x0800ba17
 800b994:	0800ba17 	.word	0x0800ba17
 800b998:	0800ba17 	.word	0x0800ba17
 800b99c:	0800ba17 	.word	0x0800ba17
 800b9a0:	0800b9d3 	.word	0x0800b9d3
 800b9a4:	0800b9fd 	.word	0x0800b9fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b03      	cmp	r3, #3
 800b9b2:	d107      	bne.n	800b9c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9b4:	f107 030a 	add.w	r3, r7, #10
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 face 	bl	800cf5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9c2:	e032      	b.n	800ba2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fa58 	bl	800ce7c <USBD_CtlError>
            ret = USBD_FAIL;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	75fb      	strb	r3, [r7, #23]
          break;
 800b9d0:	e02b      	b.n	800ba2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d107      	bne.n	800b9ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9de:	f107 030d 	add.w	r3, r7, #13
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f001 fab9 	bl	800cf5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9ec:	e01d      	b.n	800ba2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f001 fa43 	bl	800ce7c <USBD_CtlError>
            ret = USBD_FAIL;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b9fa:	e016      	b.n	800ba2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d00f      	beq.n	800ba28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 fa36 	bl	800ce7c <USBD_CtlError>
            ret = USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba14:	e008      	b.n	800ba28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f001 fa2f 	bl	800ce7c <USBD_CtlError>
          ret = USBD_FAIL;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	75fb      	strb	r3, [r7, #23]
          break;
 800ba22:	e002      	b.n	800ba2a <USBD_CDC_Setup+0x176>
          break;
 800ba24:	bf00      	nop
 800ba26:	e008      	b.n	800ba3a <USBD_CDC_Setup+0x186>
          break;
 800ba28:	bf00      	nop
      }
      break;
 800ba2a:	e006      	b.n	800ba3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 fa24 	bl	800ce7c <USBD_CtlError>
      ret = USBD_FAIL;
 800ba34:	2303      	movs	r3, #3
 800ba36:	75fb      	strb	r3, [r7, #23]
      break;
 800ba38:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e04f      	b.n	800bb06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3318      	adds	r3, #24
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d029      	beq.n	800bad8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	6879      	ldr	r1, [r7, #4]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	440b      	add	r3, r1
 800ba92:	3318      	adds	r3, #24
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	78f9      	ldrb	r1, [r7, #3]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	1a5b      	subs	r3, r3, r1
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4403      	add	r3, r0
 800baa4:	3344      	adds	r3, #68	; 0x44
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	fbb2 f1f3 	udiv	r1, r2, r3
 800baac:	fb03 f301 	mul.w	r3, r3, r1
 800bab0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d110      	bne.n	800bad8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	6879      	ldr	r1, [r7, #4]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	3318      	adds	r3, #24
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800baca:	78f9      	ldrb	r1, [r7, #3]
 800bacc:	2300      	movs	r3, #0
 800bace:	2200      	movs	r2, #0
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f002 f852 	bl	800db7a <USBD_LL_Transmit>
 800bad6:	e015      	b.n	800bb04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2200      	movs	r2, #0
 800badc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b084      	sub	sp, #16
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e015      	b.n	800bb5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	4619      	mov	r1, r3
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 f862 	bl	800dbfe <USBD_LL_GetRxDataSize>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb56:	4611      	mov	r1, r2
 800bb58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e01b      	b.n	800bbb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d015      	beq.n	800bbb4 <USBD_CDC_EP0_RxReady+0x50>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb8e:	2bff      	cmp	r3, #255	; 0xff
 800bb90:	d010      	beq.n	800bbb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bba0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	22ff      	movs	r2, #255	; 0xff
 800bbb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2243      	movs	r2, #67	; 0x43
 800bbcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bbce:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	20000428 	.word	0x20000428

0800bbe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2243      	movs	r2, #67	; 0x43
 800bbec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bbee:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	200003e4 	.word	0x200003e4

0800bc00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2243      	movs	r2, #67	; 0x43
 800bc0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bc0e:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	2000046c 	.word	0x2000046c

0800bc20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	220a      	movs	r2, #10
 800bc2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc2e:	4b03      	ldr	r3, [pc, #12]	; (800bc3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	200003a0 	.word	0x200003a0

0800bc40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc50:	2303      	movs	r3, #3
 800bc52:	e004      	b.n	800bc5e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b087      	sub	sp, #28
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc7c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e008      	b.n	800bc9a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e004      	b.n	800bccc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bce8:	2301      	movs	r3, #1
 800bcea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e01a      	b.n	800bd30 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d114      	bne.n	800bd2e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd22:	2181      	movs	r1, #129	; 0x81
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 ff28 	bl	800db7a <USBD_LL_Transmit>

    ret = USBD_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e016      	b.n	800bd84 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	7c1b      	ldrb	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd68:	2101      	movs	r1, #1
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 ff26 	bl	800dbbc <USBD_LL_PrepareReceive>
 800bd70:	e007      	b.n	800bd82 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd78:	2340      	movs	r3, #64	; 0x40
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f001 ff1d 	bl	800dbbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	4613      	mov	r3, r2
 800bd98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e01f      	b.n	800bde4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	79fa      	ldrb	r2, [r7, #7]
 800bdd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f001 fd99 	bl	800d910 <USBD_LL_Init>
 800bdde:	4603      	mov	r3, r0
 800bde0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800be00:	2303      	movs	r3, #3
 800be02:	e016      	b.n	800be32 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00b      	beq.n	800be30 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	f107 020e 	add.w	r2, r7, #14
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	4602      	mov	r2, r0
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 fdb0 	bl	800d9a8 <USBD_LL_Start>
 800be48:	4603      	mov	r3, r0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be74:	2303      	movs	r3, #3
 800be76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d009      	beq.n	800be96 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	78fa      	ldrb	r2, [r7, #3]
 800be8c:	4611      	mov	r1, r2
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	4798      	blx	r3
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d007      	beq.n	800bec6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	78fa      	ldrb	r2, [r7, #3]
 800bec0:	4611      	mov	r1, r2
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	4798      	blx	r3
  }

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 ff90 	bl	800ce08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bef6:	461a      	mov	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf04:	f003 031f 	and.w	r3, r3, #31
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d01a      	beq.n	800bf42 <USBD_LL_SetupStage+0x72>
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d822      	bhi.n	800bf56 <USBD_LL_SetupStage+0x86>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <USBD_LL_SetupStage+0x4a>
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d00a      	beq.n	800bf2e <USBD_LL_SetupStage+0x5e>
 800bf18:	e01d      	b.n	800bf56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fa62 	bl	800c3ec <USBD_StdDevReq>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf2c:	e020      	b.n	800bf70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fac6 	bl	800c4c8 <USBD_StdItfReq>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf40:	e016      	b.n	800bf70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fb05 	bl	800c55a <USBD_StdEPReq>
 800bf50:	4603      	mov	r3, r0
 800bf52:	73fb      	strb	r3, [r7, #15]
      break;
 800bf54:	e00c      	b.n	800bf70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f001 fd7f 	bl	800da68 <USBD_LL_StallEP>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf6e:	bf00      	nop
  }

  return ret;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b086      	sub	sp, #24
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	460b      	mov	r3, r1
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d138      	bne.n	800c000 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bf94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d14a      	bne.n	800c036 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d913      	bls.n	800bfd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	1ad2      	subs	r2, r2, r3
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	bf28      	it	cs
 800bfc6:	4613      	movcs	r3, r2
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6879      	ldr	r1, [r7, #4]
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f001 f80f 	bl	800cff0 <USBD_CtlContinueRx>
 800bfd2:	e030      	b.n	800c036 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d10b      	bne.n	800bff8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f001 f80a 	bl	800d012 <USBD_CtlSendStatus>
 800bffe:	e01a      	b.n	800c036 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d114      	bne.n	800c036 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00e      	beq.n	800c036 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	7afa      	ldrb	r2, [r7, #11]
 800c022:	4611      	mov	r1, r2
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	4798      	blx	r3
 800c028:	4603      	mov	r3, r0
 800c02a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
 800c034:	e000      	b.n	800c038 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3718      	adds	r7, #24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	460b      	mov	r3, r1
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c04e:	7afb      	ldrb	r3, [r7, #11]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d16b      	bne.n	800c12c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3314      	adds	r3, #20
 800c058:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c060:	2b02      	cmp	r3, #2
 800c062:	d156      	bne.n	800c112 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	689a      	ldr	r2, [r3, #8]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d914      	bls.n	800c09a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	1ad2      	subs	r2, r2, r3
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	461a      	mov	r2, r3
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 ff84 	bl	800cf94 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c08c:	2300      	movs	r3, #0
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f001 fd92 	bl	800dbbc <USBD_LL_PrepareReceive>
 800c098:	e03b      	b.n	800c112 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d11c      	bne.n	800c0e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d316      	bcc.n	800c0e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d20f      	bcs.n	800c0e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 ff65 	bl	800cf94 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f001 fd6f 	bl	800dbbc <USBD_LL_PrepareReceive>
 800c0de:	e018      	b.n	800c112 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d10b      	bne.n	800c104 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fe:	68db      	ldr	r3, [r3, #12]
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c104:	2180      	movs	r1, #128	; 0x80
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f001 fcae 	bl	800da68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 ff93 	bl	800d038 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d122      	bne.n	800c162 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7ff fe98 	bl	800be52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c12a:	e01a      	b.n	800c162 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b03      	cmp	r3, #3
 800c136:	d114      	bne.n	800c162 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13e:	695b      	ldr	r3, [r3, #20]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00e      	beq.n	800c162 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	7afa      	ldrb	r2, [r7, #11]
 800c14e:	4611      	mov	r1, r2
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	4798      	blx	r3
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	e000      	b.n	800c164 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e02f      	b.n	800c200 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00f      	beq.n	800c1ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d009      	beq.n	800c1ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	6852      	ldr	r2, [r2, #4]
 800c1c2:	b2d2      	uxtb	r2, r2
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1ca:	2340      	movs	r3, #64	; 0x40
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 fc04 	bl	800d9de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2240      	movs	r2, #64	; 0x40
 800c1e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1e6:	2340      	movs	r3, #64	; 0x40
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2180      	movs	r1, #128	; 0x80
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fbf6 	bl	800d9de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2240      	movs	r2, #64	; 0x40
 800c1fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	78fa      	ldrb	r2, [r7, #3]
 800c218:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2204      	movs	r2, #4
 800c242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b04      	cmp	r3, #4
 800c266:	d106      	bne.n	800c276 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c296:	2303      	movs	r3, #3
 800c298:	e012      	b.n	800c2c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d10b      	bne.n	800c2be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b8:	69db      	ldr	r3, [r3, #28]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e014      	b.n	800c30c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d10d      	bne.n	800c30a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d007      	beq.n	800c30a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	4611      	mov	r1, r2
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c32a:	2303      	movs	r3, #3
 800c32c:	e014      	b.n	800c358 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b03      	cmp	r3, #3
 800c338:	d10d      	bne.n	800c356 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c342:	2b00      	cmp	r3, #0
 800c344:	d007      	beq.n	800c356 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34e:	78fa      	ldrb	r2, [r7, #3]
 800c350:	4611      	mov	r1, r2
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	6852      	ldr	r2, [r2, #4]
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	4611      	mov	r1, r2
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	4798      	blx	r3
  }

  return USBD_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b087      	sub	sp, #28
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3cc:	8a3b      	ldrh	r3, [r7, #16]
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	b21a      	sxth	r2, r3
 800c3d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	b21b      	sxth	r3, r3
 800c3da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3dc:	89fb      	ldrh	r3, [r7, #14]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
	...

0800c3ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c402:	2b40      	cmp	r3, #64	; 0x40
 800c404:	d005      	beq.n	800c412 <USBD_StdDevReq+0x26>
 800c406:	2b40      	cmp	r3, #64	; 0x40
 800c408:	d853      	bhi.n	800c4b2 <USBD_StdDevReq+0xc6>
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00b      	beq.n	800c426 <USBD_StdDevReq+0x3a>
 800c40e:	2b20      	cmp	r3, #32
 800c410:	d14f      	bne.n	800c4b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	4798      	blx	r3
 800c420:	4603      	mov	r3, r0
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	e04a      	b.n	800c4bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	2b09      	cmp	r3, #9
 800c42c:	d83b      	bhi.n	800c4a6 <USBD_StdDevReq+0xba>
 800c42e:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <USBD_StdDevReq+0x48>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c489 	.word	0x0800c489
 800c438:	0800c49d 	.word	0x0800c49d
 800c43c:	0800c4a7 	.word	0x0800c4a7
 800c440:	0800c493 	.word	0x0800c493
 800c444:	0800c4a7 	.word	0x0800c4a7
 800c448:	0800c467 	.word	0x0800c467
 800c44c:	0800c45d 	.word	0x0800c45d
 800c450:	0800c4a7 	.word	0x0800c4a7
 800c454:	0800c47f 	.word	0x0800c47f
 800c458:	0800c471 	.word	0x0800c471
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f9de 	bl	800c820 <USBD_GetDescriptor>
          break;
 800c464:	e024      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fb43 	bl	800caf4 <USBD_SetAddress>
          break;
 800c46e:	e01f      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fb82 	bl	800cb7c <USBD_SetConfig>
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
          break;
 800c47c:	e018      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fc21 	bl	800ccc8 <USBD_GetConfig>
          break;
 800c486:	e013      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fc52 	bl	800cd34 <USBD_GetStatus>
          break;
 800c490:	e00e      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fc81 	bl	800cd9c <USBD_SetFeature>
          break;
 800c49a:	e009      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fc90 	bl	800cdc4 <USBD_ClrFeature>
          break;
 800c4a4:	e004      	b.n	800c4b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fce7 	bl	800ce7c <USBD_CtlError>
          break;
 800c4ae:	bf00      	nop
      }
      break;
 800c4b0:	e004      	b.n	800c4bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fce1 	bl	800ce7c <USBD_CtlError>
      break;
 800c4ba:	bf00      	nop
  }

  return ret;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop

0800c4c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4de:	2b40      	cmp	r3, #64	; 0x40
 800c4e0:	d005      	beq.n	800c4ee <USBD_StdItfReq+0x26>
 800c4e2:	2b40      	cmp	r3, #64	; 0x40
 800c4e4:	d82f      	bhi.n	800c546 <USBD_StdItfReq+0x7e>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <USBD_StdItfReq+0x26>
 800c4ea:	2b20      	cmp	r3, #32
 800c4ec:	d12b      	bne.n	800c546 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	2b02      	cmp	r3, #2
 800c4fa:	d81d      	bhi.n	800c538 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	889b      	ldrh	r3, [r3, #4]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b01      	cmp	r3, #1
 800c504:	d813      	bhi.n	800c52e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	4798      	blx	r3
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d110      	bne.n	800c542 <USBD_StdItfReq+0x7a>
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10d      	bne.n	800c542 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fd73 	bl	800d012 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c52c:	e009      	b.n	800c542 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fca3 	bl	800ce7c <USBD_CtlError>
          break;
 800c536:	e004      	b.n	800c542 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fc9e 	bl	800ce7c <USBD_CtlError>
          break;
 800c540:	e000      	b.n	800c544 <USBD_StdItfReq+0x7c>
          break;
 800c542:	bf00      	nop
      }
      break;
 800c544:	e004      	b.n	800c550 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fc97 	bl	800ce7c <USBD_CtlError>
      break;
 800c54e:	bf00      	nop
  }

  return ret;
 800c550:	7bfb      	ldrb	r3, [r7, #15]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	889b      	ldrh	r3, [r3, #4]
 800c56c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c576:	2b40      	cmp	r3, #64	; 0x40
 800c578:	d007      	beq.n	800c58a <USBD_StdEPReq+0x30>
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	f200 8145 	bhi.w	800c80a <USBD_StdEPReq+0x2b0>
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00c      	beq.n	800c59e <USBD_StdEPReq+0x44>
 800c584:	2b20      	cmp	r3, #32
 800c586:	f040 8140 	bne.w	800c80a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]
      break;
 800c59c:	e13a      	b.n	800c814 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d007      	beq.n	800c5b6 <USBD_StdEPReq+0x5c>
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	f300 8129 	bgt.w	800c7fe <USBD_StdEPReq+0x2a4>
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d07f      	beq.n	800c6b0 <USBD_StdEPReq+0x156>
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d03c      	beq.n	800c62e <USBD_StdEPReq+0xd4>
 800c5b4:	e123      	b.n	800c7fe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d002      	beq.n	800c5c8 <USBD_StdEPReq+0x6e>
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d016      	beq.n	800c5f4 <USBD_StdEPReq+0x9a>
 800c5c6:	e02c      	b.n	800c622 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00d      	beq.n	800c5ea <USBD_StdEPReq+0x90>
 800c5ce:	7bbb      	ldrb	r3, [r7, #14]
 800c5d0:	2b80      	cmp	r3, #128	; 0x80
 800c5d2:	d00a      	beq.n	800c5ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5d4:	7bbb      	ldrb	r3, [r7, #14]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 fa45 	bl	800da68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5de:	2180      	movs	r1, #128	; 0x80
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f001 fa41 	bl	800da68 <USBD_LL_StallEP>
 800c5e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5e8:	e020      	b.n	800c62c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fc45 	bl	800ce7c <USBD_CtlError>
              break;
 800c5f2:	e01b      	b.n	800c62c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	885b      	ldrh	r3, [r3, #2]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10e      	bne.n	800c61a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00b      	beq.n	800c61a <USBD_StdEPReq+0xc0>
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	2b80      	cmp	r3, #128	; 0x80
 800c606:	d008      	beq.n	800c61a <USBD_StdEPReq+0xc0>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	88db      	ldrh	r3, [r3, #6]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d104      	bne.n	800c61a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f001 fa27 	bl	800da68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fcf9 	bl	800d012 <USBD_CtlSendStatus>

              break;
 800c620:	e004      	b.n	800c62c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fc29 	bl	800ce7c <USBD_CtlError>
              break;
 800c62a:	bf00      	nop
          }
          break;
 800c62c:	e0ec      	b.n	800c808 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b02      	cmp	r3, #2
 800c638:	d002      	beq.n	800c640 <USBD_StdEPReq+0xe6>
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d016      	beq.n	800c66c <USBD_StdEPReq+0x112>
 800c63e:	e030      	b.n	800c6a2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00d      	beq.n	800c662 <USBD_StdEPReq+0x108>
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	2b80      	cmp	r3, #128	; 0x80
 800c64a:	d00a      	beq.n	800c662 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f001 fa09 	bl	800da68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c656:	2180      	movs	r1, #128	; 0x80
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f001 fa05 	bl	800da68 <USBD_LL_StallEP>
 800c65e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c660:	e025      	b.n	800c6ae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fc09 	bl	800ce7c <USBD_CtlError>
              break;
 800c66a:	e020      	b.n	800c6ae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	885b      	ldrh	r3, [r3, #2]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d11b      	bne.n	800c6ac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d004      	beq.n	800c688 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f001 fa0f 	bl	800daa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fcc2 	bl	800d012 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	4798      	blx	r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c6a0:	e004      	b.n	800c6ac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fbe9 	bl	800ce7c <USBD_CtlError>
              break;
 800c6aa:	e000      	b.n	800c6ae <USBD_StdEPReq+0x154>
              break;
 800c6ac:	bf00      	nop
          }
          break;
 800c6ae:	e0ab      	b.n	800c808 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d002      	beq.n	800c6c2 <USBD_StdEPReq+0x168>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d032      	beq.n	800c726 <USBD_StdEPReq+0x1cc>
 800c6c0:	e097      	b.n	800c7f2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6c2:	7bbb      	ldrb	r3, [r7, #14]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d007      	beq.n	800c6d8 <USBD_StdEPReq+0x17e>
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	2b80      	cmp	r3, #128	; 0x80
 800c6cc:	d004      	beq.n	800c6d8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fbd3 	bl	800ce7c <USBD_CtlError>
                break;
 800c6d6:	e091      	b.n	800c7fc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	da0b      	bge.n	800c6f8 <USBD_StdEPReq+0x19e>
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	3310      	adds	r3, #16
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	e00b      	b.n	800c710 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6fe:	4613      	mov	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	4413      	add	r3, r2
 800c70e:	3304      	adds	r3, #4
 800c710:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2202      	movs	r2, #2
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fc1d 	bl	800cf5e <USBD_CtlSendData>
              break;
 800c724:	e06a      	b.n	800c7fc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da11      	bge.n	800c752 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	f003 020f 	and.w	r2, r3, #15
 800c734:	6879      	ldr	r1, [r7, #4]
 800c736:	4613      	mov	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	440b      	add	r3, r1
 800c740:	3324      	adds	r3, #36	; 0x24
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d117      	bne.n	800c778 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fb96 	bl	800ce7c <USBD_CtlError>
                  break;
 800c750:	e054      	b.n	800c7fc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c752:	7bbb      	ldrb	r3, [r7, #14]
 800c754:	f003 020f 	and.w	r2, r3, #15
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d104      	bne.n	800c778 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fb83 	bl	800ce7c <USBD_CtlError>
                  break;
 800c776:	e041      	b.n	800c7fc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da0b      	bge.n	800c798 <USBD_StdEPReq+0x23e>
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c786:	4613      	mov	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4413      	add	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	3310      	adds	r3, #16
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	4413      	add	r3, r2
 800c794:	3304      	adds	r3, #4
 800c796:	e00b      	b.n	800c7b0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c79e:	4613      	mov	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <USBD_StdEPReq+0x264>
 800c7b8:	7bbb      	ldrb	r3, [r7, #14]
 800c7ba:	2b80      	cmp	r3, #128	; 0x80
 800c7bc:	d103      	bne.n	800c7c6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	e00e      	b.n	800c7e4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 f98a 	bl	800dae4 <USBD_LL_IsStallEP>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	e002      	b.n	800c7e4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fbb7 	bl	800cf5e <USBD_CtlSendData>
              break;
 800c7f0:	e004      	b.n	800c7fc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fb41 	bl	800ce7c <USBD_CtlError>
              break;
 800c7fa:	bf00      	nop
          }
          break;
 800c7fc:	e004      	b.n	800c808 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fb3b 	bl	800ce7c <USBD_CtlError>
          break;
 800c806:	bf00      	nop
      }
      break;
 800c808:	e004      	b.n	800c814 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fb35 	bl	800ce7c <USBD_CtlError>
      break;
 800c812:	bf00      	nop
  }

  return ret;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c82a:	2300      	movs	r3, #0
 800c82c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	885b      	ldrh	r3, [r3, #2]
 800c83a:	0a1b      	lsrs	r3, r3, #8
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b06      	cmp	r3, #6
 800c842:	f200 8128 	bhi.w	800ca96 <USBD_GetDescriptor+0x276>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <USBD_GetDescriptor+0x2c>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c869 	.word	0x0800c869
 800c850:	0800c881 	.word	0x0800c881
 800c854:	0800c8c1 	.word	0x0800c8c1
 800c858:	0800ca97 	.word	0x0800ca97
 800c85c:	0800ca97 	.word	0x0800ca97
 800c860:	0800ca37 	.word	0x0800ca37
 800c864:	0800ca63 	.word	0x0800ca63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	7c12      	ldrb	r2, [r2, #16]
 800c874:	f107 0108 	add.w	r1, r7, #8
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
 800c87c:	60f8      	str	r0, [r7, #12]
      break;
 800c87e:	e112      	b.n	800caa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7c1b      	ldrb	r3, [r3, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10d      	bne.n	800c8a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c890:	f107 0208 	add.w	r2, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	2202      	movs	r2, #2
 800c8a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8a2:	e100      	b.n	800caa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	f107 0208 	add.w	r2, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	701a      	strb	r2, [r3, #0]
      break;
 800c8be:	e0f2      	b.n	800caa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	885b      	ldrh	r3, [r3, #2]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b05      	cmp	r3, #5
 800c8c8:	f200 80ac 	bhi.w	800ca24 <USBD_GetDescriptor+0x204>
 800c8cc:	a201      	add	r2, pc, #4	; (adr r2, 800c8d4 <USBD_GetDescriptor+0xb4>)
 800c8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d2:	bf00      	nop
 800c8d4:	0800c8ed 	.word	0x0800c8ed
 800c8d8:	0800c921 	.word	0x0800c921
 800c8dc:	0800c955 	.word	0x0800c955
 800c8e0:	0800c989 	.word	0x0800c989
 800c8e4:	0800c9bd 	.word	0x0800c9bd
 800c8e8:	0800c9f1 	.word	0x0800c9f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	7c12      	ldrb	r2, [r2, #16]
 800c904:	f107 0108 	add.w	r1, r7, #8
 800c908:	4610      	mov	r0, r2
 800c90a:	4798      	blx	r3
 800c90c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c90e:	e091      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 fab2 	bl	800ce7c <USBD_CtlError>
            err++;
 800c918:	7afb      	ldrb	r3, [r7, #11]
 800c91a:	3301      	adds	r3, #1
 800c91c:	72fb      	strb	r3, [r7, #11]
          break;
 800c91e:	e089      	b.n	800ca34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00b      	beq.n	800c944 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	7c12      	ldrb	r2, [r2, #16]
 800c938:	f107 0108 	add.w	r1, r7, #8
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
 800c940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c942:	e077      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fa98 	bl	800ce7c <USBD_CtlError>
            err++;
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	3301      	adds	r3, #1
 800c950:	72fb      	strb	r3, [r7, #11]
          break;
 800c952:	e06f      	b.n	800ca34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00b      	beq.n	800c978 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	7c12      	ldrb	r2, [r2, #16]
 800c96c:	f107 0108 	add.w	r1, r7, #8
 800c970:	4610      	mov	r0, r2
 800c972:	4798      	blx	r3
 800c974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c976:	e05d      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c978:	6839      	ldr	r1, [r7, #0]
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 fa7e 	bl	800ce7c <USBD_CtlError>
            err++;
 800c980:	7afb      	ldrb	r3, [r7, #11]
 800c982:	3301      	adds	r3, #1
 800c984:	72fb      	strb	r3, [r7, #11]
          break;
 800c986:	e055      	b.n	800ca34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	7c12      	ldrb	r2, [r2, #16]
 800c9a0:	f107 0108 	add.w	r1, r7, #8
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	4798      	blx	r3
 800c9a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9aa:	e043      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fa64 	bl	800ce7c <USBD_CtlError>
            err++;
 800c9b4:	7afb      	ldrb	r3, [r7, #11]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ba:	e03b      	b.n	800ca34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00b      	beq.n	800c9e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ce:	695b      	ldr	r3, [r3, #20]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	7c12      	ldrb	r2, [r2, #16]
 800c9d4:	f107 0108 	add.w	r1, r7, #8
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4798      	blx	r3
 800c9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9de:	e029      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa4a 	bl	800ce7c <USBD_CtlError>
            err++;
 800c9e8:	7afb      	ldrb	r3, [r7, #11]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ee:	e021      	b.n	800ca34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	7c12      	ldrb	r2, [r2, #16]
 800ca08:	f107 0108 	add.w	r1, r7, #8
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3
 800ca10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca12:	e00f      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa30 	bl	800ce7c <USBD_CtlError>
            err++;
 800ca1c:	7afb      	ldrb	r3, [r7, #11]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	72fb      	strb	r3, [r7, #11]
          break;
 800ca22:	e007      	b.n	800ca34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fa28 	bl	800ce7c <USBD_CtlError>
          err++;
 800ca2c:	7afb      	ldrb	r3, [r7, #11]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ca32:	bf00      	nop
      }
      break;
 800ca34:	e037      	b.n	800caa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7c1b      	ldrb	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d109      	bne.n	800ca52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	f107 0208 	add.w	r2, r7, #8
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4798      	blx	r3
 800ca4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca50:	e029      	b.n	800caa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fa11 	bl	800ce7c <USBD_CtlError>
        err++;
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca60:	e021      	b.n	800caa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	7c1b      	ldrb	r3, [r3, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10d      	bne.n	800ca86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca72:	f107 0208 	add.w	r2, r7, #8
 800ca76:	4610      	mov	r0, r2
 800ca78:	4798      	blx	r3
 800ca7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	2207      	movs	r2, #7
 800ca82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca84:	e00f      	b.n	800caa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f9f7 	bl	800ce7c <USBD_CtlError>
        err++;
 800ca8e:	7afb      	ldrb	r3, [r7, #11]
 800ca90:	3301      	adds	r3, #1
 800ca92:	72fb      	strb	r3, [r7, #11]
      break;
 800ca94:	e007      	b.n	800caa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f9ef 	bl	800ce7c <USBD_CtlError>
      err++;
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	3301      	adds	r3, #1
 800caa2:	72fb      	strb	r3, [r7, #11]
      break;
 800caa4:	bf00      	nop
  }

  if (err != 0U)
 800caa6:	7afb      	ldrb	r3, [r7, #11]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d11e      	bne.n	800caea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	88db      	ldrh	r3, [r3, #6]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d016      	beq.n	800cae2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cab4:	893b      	ldrh	r3, [r7, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00e      	beq.n	800cad8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	88da      	ldrh	r2, [r3, #6]
 800cabe:	893b      	ldrh	r3, [r7, #8]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	bf28      	it	cs
 800cac4:	4613      	movcs	r3, r2
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800caca:	893b      	ldrh	r3, [r7, #8]
 800cacc:	461a      	mov	r2, r3
 800cace:	68f9      	ldr	r1, [r7, #12]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fa44 	bl	800cf5e <USBD_CtlSendData>
 800cad6:	e009      	b.n	800caec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f9ce 	bl	800ce7c <USBD_CtlError>
 800cae0:	e004      	b.n	800caec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 fa95 	bl	800d012 <USBD_CtlSendStatus>
 800cae8:	e000      	b.n	800caec <USBD_GetDescriptor+0x2cc>
    return;
 800caea:	bf00      	nop
  }
}
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop

0800caf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	889b      	ldrh	r3, [r3, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d131      	bne.n	800cb6a <USBD_SetAddress+0x76>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	88db      	ldrh	r3, [r3, #6]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d12d      	bne.n	800cb6a <USBD_SetAddress+0x76>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	885b      	ldrh	r3, [r3, #2]
 800cb12:	2b7f      	cmp	r3, #127	; 0x7f
 800cb14:	d829      	bhi.n	800cb6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	885b      	ldrh	r3, [r3, #2]
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d104      	bne.n	800cb38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f9a3 	bl	800ce7c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb36:	e01d      	b.n	800cb74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7bfa      	ldrb	r2, [r7, #15]
 800cb3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fff9 	bl	800db3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fa61 	bl	800d012 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5e:	e009      	b.n	800cb74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb68:	e004      	b.n	800cb74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f985 	bl	800ce7c <USBD_CtlError>
  }
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	885b      	ldrh	r3, [r3, #2]
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	4b4c      	ldr	r3, [pc, #304]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cb92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb94:	4b4b      	ldr	r3, [pc, #300]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d905      	bls.n	800cba8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f96c 	bl	800ce7c <USBD_CtlError>
    return USBD_FAIL;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e088      	b.n	800ccba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d002      	beq.n	800cbba <USBD_SetConfig+0x3e>
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d025      	beq.n	800cc04 <USBD_SetConfig+0x88>
 800cbb8:	e071      	b.n	800cc9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cbba:	4b42      	ldr	r3, [pc, #264]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d01c      	beq.n	800cbfc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cbc2:	4b40      	ldr	r3, [pc, #256]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbcc:	4b3d      	ldr	r3, [pc, #244]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff f948 	bl	800be68 <USBD_SetClassConfig>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d004      	beq.n	800cbec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f949 	bl	800ce7c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbea:	e065      	b.n	800ccb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 fa10 	bl	800d012 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbfa:	e05d      	b.n	800ccb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa08 	bl	800d012 <USBD_CtlSendStatus>
      break;
 800cc02:	e059      	b.n	800ccb8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc04:	4b2f      	ldr	r3, [pc, #188]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d112      	bne.n	800cc32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2202      	movs	r2, #2
 800cc10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cc14:	4b2b      	ldr	r3, [pc, #172]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc1e:	4b29      	ldr	r3, [pc, #164]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff f93b 	bl	800bea0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f9f1 	bl	800d012 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc30:	e042      	b.n	800ccb8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cc32:	4b24      	ldr	r3, [pc, #144]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d02a      	beq.n	800cc96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff f929 	bl	800bea0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc4e:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc58:	4b1a      	ldr	r3, [pc, #104]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7ff f902 	bl	800be68 <USBD_SetClassConfig>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00f      	beq.n	800cc8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f903 	bl	800ce7c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff f90e 	bl	800bea0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc8c:	e014      	b.n	800ccb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f9bf 	bl	800d012 <USBD_CtlSendStatus>
      break;
 800cc94:	e010      	b.n	800ccb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f9bb 	bl	800d012 <USBD_CtlSendStatus>
      break;
 800cc9c:	e00c      	b.n	800ccb8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f8eb 	bl	800ce7c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <USBD_SetConfig+0x148>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff f8f7 	bl	800bea0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ccb6:	bf00      	nop
  }

  return ret;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200005aa 	.word	0x200005aa

0800ccc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	88db      	ldrh	r3, [r3, #6]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d004      	beq.n	800cce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f8cd 	bl	800ce7c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cce2:	e023      	b.n	800cd2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	dc02      	bgt.n	800ccf6 <USBD_GetConfig+0x2e>
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	dc03      	bgt.n	800ccfc <USBD_GetConfig+0x34>
 800ccf4:	e015      	b.n	800cd22 <USBD_GetConfig+0x5a>
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	d00b      	beq.n	800cd12 <USBD_GetConfig+0x4a>
 800ccfa:	e012      	b.n	800cd22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3308      	adds	r3, #8
 800cd06:	2201      	movs	r2, #1
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f927 	bl	800cf5e <USBD_CtlSendData>
        break;
 800cd10:	e00c      	b.n	800cd2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3304      	adds	r3, #4
 800cd16:	2201      	movs	r2, #1
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f91f 	bl	800cf5e <USBD_CtlSendData>
        break;
 800cd20:	e004      	b.n	800cd2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f8a9 	bl	800ce7c <USBD_CtlError>
        break;
 800cd2a:	bf00      	nop
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	3b01      	subs	r3, #1
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d81e      	bhi.n	800cd8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	88db      	ldrh	r3, [r3, #6]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d004      	beq.n	800cd5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f890 	bl	800ce7c <USBD_CtlError>
        break;
 800cd5c:	e01a      	b.n	800cd94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2201      	movs	r2, #1
 800cd62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d005      	beq.n	800cd7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f043 0202 	orr.w	r2, r3, #2
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	330c      	adds	r3, #12
 800cd7e:	2202      	movs	r2, #2
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f8eb 	bl	800cf5e <USBD_CtlSendData>
      break;
 800cd88:	e004      	b.n	800cd94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f875 	bl	800ce7c <USBD_CtlError>
      break;
 800cd92:	bf00      	nop
  }
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	885b      	ldrh	r3, [r3, #2]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d106      	bne.n	800cdbc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f92b 	bl	800d012 <USBD_CtlSendStatus>
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d80b      	bhi.n	800cdf4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	885b      	ldrh	r3, [r3, #2]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d10c      	bne.n	800cdfe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f910 	bl	800d012 <USBD_CtlSendStatus>
      }
      break;
 800cdf2:	e004      	b.n	800cdfe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 f840 	bl	800ce7c <USBD_CtlError>
      break;
 800cdfc:	e000      	b.n	800ce00 <USBD_ClrFeature+0x3c>
      break;
 800cdfe:	bf00      	nop
  }
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3301      	adds	r3, #1
 800ce22:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	781a      	ldrb	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f7ff fabb 	bl	800c3ae <SWAPBYTE>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	3301      	adds	r3, #1
 800ce44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f7ff faae 	bl	800c3ae <SWAPBYTE>
 800ce52:	4603      	mov	r3, r0
 800ce54:	461a      	mov	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	3301      	adds	r3, #1
 800ce64:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff faa1 	bl	800c3ae <SWAPBYTE>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	461a      	mov	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	80da      	strh	r2, [r3, #6]
}
 800ce74:	bf00      	nop
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce86:	2180      	movs	r1, #128	; 0x80
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fded 	bl	800da68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce8e:	2100      	movs	r1, #0
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fde9 	bl	800da68 <USBD_LL_StallEP>
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b086      	sub	sp, #24
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	60f8      	str	r0, [r7, #12]
 800cea6:	60b9      	str	r1, [r7, #8]
 800cea8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d036      	beq.n	800cf22 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ceb8:	6938      	ldr	r0, [r7, #16]
 800ceba:	f000 f836 	bl	800cf2a <USBD_GetLen>
 800cebe:	4603      	mov	r3, r0
 800cec0:	3301      	adds	r3, #1
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	4413      	add	r3, r2
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	701a      	strb	r2, [r3, #0]
  idx++;
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	3301      	adds	r3, #1
 800cedc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	4413      	add	r3, r2
 800cee4:	2203      	movs	r2, #3
 800cee6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	3301      	adds	r3, #1
 800ceec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ceee:	e013      	b.n	800cf18 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	4413      	add	r3, r2
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	7812      	ldrb	r2, [r2, #0]
 800cefa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	3301      	adds	r3, #1
 800cf00:	613b      	str	r3, [r7, #16]
    idx++;
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	3301      	adds	r3, #1
 800cf06:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf08:	7dfb      	ldrb	r3, [r7, #23]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	2200      	movs	r2, #0
 800cf10:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	3301      	adds	r3, #1
 800cf16:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1e7      	bne.n	800cef0 <USBD_GetString+0x52>
 800cf20:	e000      	b.n	800cf24 <USBD_GetString+0x86>
    return;
 800cf22:	bf00      	nop
  }
}
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b085      	sub	sp, #20
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf3a:	e005      	b.n	800cf48 <USBD_GetLen+0x1e>
  {
    len++;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	3301      	adds	r3, #1
 800cf46:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1f5      	bne.n	800cf3c <USBD_GetLen+0x12>
  }

  return len;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	60f8      	str	r0, [r7, #12]
 800cf66:	60b9      	str	r1, [r7, #8]
 800cf68:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68ba      	ldr	r2, [r7, #8]
 800cf82:	2100      	movs	r1, #0
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 fdf8 	bl	800db7a <USBD_LL_Transmit>

  return USBD_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 fde7 	bl	800db7a <USBD_LL_Transmit>

  return USBD_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	60f8      	str	r0, [r7, #12]
 800cfbe:	60b9      	str	r1, [r7, #8]
 800cfc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	2100      	movs	r1, #0
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 fdeb 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	2100      	movs	r1, #0
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f000 fdda 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2204      	movs	r2, #4
 800d01e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d022:	2300      	movs	r3, #0
 800d024:	2200      	movs	r2, #0
 800d026:	2100      	movs	r1, #0
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fda6 	bl	800db7a <USBD_LL_Transmit>

  return USBD_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2205      	movs	r2, #5
 800d044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d048:	2300      	movs	r3, #0
 800d04a:	2200      	movs	r2, #0
 800d04c:	2100      	movs	r1, #0
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fdb4 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d064:	2200      	movs	r2, #0
 800d066:	4912      	ldr	r1, [pc, #72]	; (800d0b0 <MX_USB_DEVICE_Init+0x50>)
 800d068:	4812      	ldr	r0, [pc, #72]	; (800d0b4 <MX_USB_DEVICE_Init+0x54>)
 800d06a:	f7fe fe8f 	bl	800bd8c <USBD_Init>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d074:	f7f3 ffb2 	bl	8000fdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d078:	490f      	ldr	r1, [pc, #60]	; (800d0b8 <MX_USB_DEVICE_Init+0x58>)
 800d07a:	480e      	ldr	r0, [pc, #56]	; (800d0b4 <MX_USB_DEVICE_Init+0x54>)
 800d07c:	f7fe feb6 	bl	800bdec <USBD_RegisterClass>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d086:	f7f3 ffa9 	bl	8000fdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d08a:	490c      	ldr	r1, [pc, #48]	; (800d0bc <MX_USB_DEVICE_Init+0x5c>)
 800d08c:	4809      	ldr	r0, [pc, #36]	; (800d0b4 <MX_USB_DEVICE_Init+0x54>)
 800d08e:	f7fe fdd7 	bl	800bc40 <USBD_CDC_RegisterInterface>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d098:	f7f3 ffa0 	bl	8000fdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d09c:	4805      	ldr	r0, [pc, #20]	; (800d0b4 <MX_USB_DEVICE_Init+0x54>)
 800d09e:	f7fe fecc 	bl	800be3a <USBD_Start>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0a8:	f7f3 ff98 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0ac:	bf00      	nop
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	200004cc 	.word	0x200004cc
 800d0b4:	20000a24 	.word	0x20000a24
 800d0b8:	200003ac 	.word	0x200003ac
 800d0bc:	200004b8 	.word	0x200004b8

0800d0c0 <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d007      	beq.n	800d0e2 <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fd6f 	bl	800dbbc <USBD_LL_PrepareReceive>
    return USBD_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	e000      	b.n	800d0e4 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 800d0e2:	2303      	movs	r3, #3
  }
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 800d0f0:	480e      	ldr	r0, [pc, #56]	; (800d12c <CDC_Init_FS+0x40>)
 800d0f2:	f7f6 fe34 	bl	8003d5e <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 800d0f6:	480e      	ldr	r0, [pc, #56]	; (800d130 <CDC_Init_FS+0x44>)
 800d0f8:	f7f6 ff11 	bl	8003f1e <CDC_ReceiveQueue_Init>
  receivePended = true;
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <CDC_Init_FS+0x48>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 800d102:	480b      	ldr	r0, [pc, #44]	; (800d130 <CDC_Init_FS+0x44>)
 800d104:	f7f6 ff21 	bl	8003f4a <CDC_ReceiveQueue_ReserveBlock>
 800d108:	4603      	mov	r3, r0
 800d10a:	4619      	mov	r1, r3
 800d10c:	480a      	ldr	r0, [pc, #40]	; (800d138 <CDC_Init_FS+0x4c>)
 800d10e:	f7fe fdca 	bl	800bca6 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d112:	2200      	movs	r2, #0
 800d114:	4909      	ldr	r1, [pc, #36]	; (800d13c <CDC_Init_FS+0x50>)
 800d116:	4808      	ldr	r0, [pc, #32]	; (800d138 <CDC_Init_FS+0x4c>)
 800d118:	f7fe fda7 	bl	800bc6a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d11c:	4908      	ldr	r1, [pc, #32]	; (800d140 <CDC_Init_FS+0x54>)
 800d11e:	4806      	ldr	r0, [pc, #24]	; (800d138 <CDC_Init_FS+0x4c>)
 800d120:	f7fe fdc1 	bl	800bca6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d124:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d126:	4618      	mov	r0, r3
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	20000cf4 	.word	0x20000cf4
 800d130:	20001d7c 	.word	0x20001d7c
 800d134:	200004af 	.word	0x200004af
 800d138:	20000a24 	.word	0x20000a24
 800d13c:	2000157c 	.word	0x2000157c
 800d140:	20000d7c 	.word	0x20000d7c

0800d144 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d144:	b480      	push	{r7}
 800d146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d148:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	4603      	mov	r3, r0
 800d15c:	6039      	str	r1, [r7, #0]
 800d15e:	71fb      	strb	r3, [r7, #7]
 800d160:	4613      	mov	r3, r2
 800d162:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	2b23      	cmp	r3, #35	; 0x23
 800d168:	f200 80ac 	bhi.w	800d2c4 <CDC_Control_FS+0x170>
 800d16c:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <CDC_Control_FS+0x20>)
 800d16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d172:	bf00      	nop
 800d174:	0800d2c5 	.word	0x0800d2c5
 800d178:	0800d2c5 	.word	0x0800d2c5
 800d17c:	0800d2c5 	.word	0x0800d2c5
 800d180:	0800d2c5 	.word	0x0800d2c5
 800d184:	0800d2c5 	.word	0x0800d2c5
 800d188:	0800d2c5 	.word	0x0800d2c5
 800d18c:	0800d2c5 	.word	0x0800d2c5
 800d190:	0800d2c5 	.word	0x0800d2c5
 800d194:	0800d2c5 	.word	0x0800d2c5
 800d198:	0800d2c5 	.word	0x0800d2c5
 800d19c:	0800d2c5 	.word	0x0800d2c5
 800d1a0:	0800d2c5 	.word	0x0800d2c5
 800d1a4:	0800d2c5 	.word	0x0800d2c5
 800d1a8:	0800d2c5 	.word	0x0800d2c5
 800d1ac:	0800d2c5 	.word	0x0800d2c5
 800d1b0:	0800d2c5 	.word	0x0800d2c5
 800d1b4:	0800d2c5 	.word	0x0800d2c5
 800d1b8:	0800d2c5 	.word	0x0800d2c5
 800d1bc:	0800d2c5 	.word	0x0800d2c5
 800d1c0:	0800d2c5 	.word	0x0800d2c5
 800d1c4:	0800d2c5 	.word	0x0800d2c5
 800d1c8:	0800d2c5 	.word	0x0800d2c5
 800d1cc:	0800d2c5 	.word	0x0800d2c5
 800d1d0:	0800d2c5 	.word	0x0800d2c5
 800d1d4:	0800d2c5 	.word	0x0800d2c5
 800d1d8:	0800d2c5 	.word	0x0800d2c5
 800d1dc:	0800d2c5 	.word	0x0800d2c5
 800d1e0:	0800d2c5 	.word	0x0800d2c5
 800d1e4:	0800d2c5 	.word	0x0800d2c5
 800d1e8:	0800d2c5 	.word	0x0800d2c5
 800d1ec:	0800d2c5 	.word	0x0800d2c5
 800d1f0:	0800d2c5 	.word	0x0800d2c5
 800d1f4:	0800d205 	.word	0x0800d205
 800d1f8:	0800d249 	.word	0x0800d249
 800d1fc:	0800d29d 	.word	0x0800d29d
 800d200:	0800d2c5 	.word	0x0800d2c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	3301      	adds	r3, #1
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	021b      	lsls	r3, r3, #8
 800d212:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	3302      	adds	r3, #2
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d21c:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	3303      	adds	r3, #3
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	061b      	lsls	r3, r3, #24
 800d226:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d228:	461a      	mov	r2, r3
 800d22a:	4b2b      	ldr	r3, [pc, #172]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d22c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	791a      	ldrb	r2, [r3, #4]
 800d232:	4b29      	ldr	r3, [pc, #164]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d234:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	795a      	ldrb	r2, [r3, #5]
 800d23a:	4b27      	ldr	r3, [pc, #156]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d23c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	799a      	ldrb	r2, [r3, #6]
 800d242:	4b25      	ldr	r3, [pc, #148]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d244:	719a      	strb	r2, [r3, #6]
    break;
 800d246:	e040      	b.n	800d2ca <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800d248:	4b23      	ldr	r3, [pc, #140]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800d252:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	0a1a      	lsrs	r2, r3, #8
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800d260:	4b1d      	ldr	r3, [pc, #116]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	0c1a      	lsrs	r2, r3, #16
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	3302      	adds	r3, #2
 800d26a:	b2d2      	uxtb	r2, r2
 800d26c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800d26e:	4b1a      	ldr	r3, [pc, #104]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	0e1a      	lsrs	r2, r3, #24
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	3303      	adds	r3, #3
 800d278:	b2d2      	uxtb	r2, r2
 800d27a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	3304      	adds	r3, #4
 800d280:	4a15      	ldr	r2, [pc, #84]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d282:	7912      	ldrb	r2, [r2, #4]
 800d284:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	3305      	adds	r3, #5
 800d28a:	4a13      	ldr	r2, [pc, #76]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d28c:	7952      	ldrb	r2, [r2, #5]
 800d28e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	3306      	adds	r3, #6
 800d294:	4a10      	ldr	r2, [pc, #64]	; (800d2d8 <CDC_Control_FS+0x184>)
 800d296:	7992      	ldrb	r2, [r2, #6]
 800d298:	701a      	strb	r2, [r3, #0]
    break;
 800d29a:	e016      	b.n	800d2ca <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	885b      	ldrh	r3, [r3, #2]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bf14      	ite	ne
 800d2a8:	2301      	movne	r3, #1
 800d2aa:	2300      	moveq	r3, #0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	461a      	mov	r2, r3
      lineState =
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <CDC_Control_FS+0x188>)
 800d2b2:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 800d2b4:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <CDC_Control_FS+0x188>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d005      	beq.n	800d2c8 <CDC_Control_FS+0x174>
              transmitStart = 0;
 800d2bc:	4b08      	ldr	r3, [pc, #32]	; (800d2e0 <CDC_Control_FS+0x18c>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800d2c2:	e001      	b.n	800d2c8 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2c4:	bf00      	nop
 800d2c6:	e000      	b.n	800d2ca <CDC_Control_FS+0x176>
    break;
 800d2c8:	bf00      	nop
  }

  return (USBD_OK);
 800d2ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	200004b0 	.word	0x200004b0
 800d2dc:	200005ac 	.word	0x200005ac
 800d2e0:	200005b0 	.word	0x200005b0

0800d2e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	480b      	ldr	r0, [pc, #44]	; (800d324 <CDC_Receive_FS+0x40>)
 800d2f8:	f7f6 fe7c 	bl	8003ff4 <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <CDC_Receive_FS+0x44>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 800d302:	f000 f86f 	bl	800d3e4 <CDC_resume_receive>
 800d306:	4603      	mov	r3, r0
 800d308:	f083 0301 	eor.w	r3, r3, #1
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 800d312:	4806      	ldr	r0, [pc, #24]	; (800d32c <CDC_Receive_FS+0x48>)
 800d314:	f7ff fed4 	bl	800d0c0 <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 800d318:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20001d7c 	.word	0x20001d7c
 800d328:	200004af 	.word	0x200004af
 800d32c:	20000a24 	.word	0x20000a24

0800d330 <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 800d336:	4b11      	ldr	r3, [pc, #68]	; (800d37c <CDC_connected+0x4c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d005      	beq.n	800d34e <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 800d342:	f7f7 f891 	bl	8004468 <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 800d34e:	4b0c      	ldr	r3, [pc, #48]	; (800d380 <CDC_connected+0x50>)
 800d350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d354:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 800d356:	2b03      	cmp	r3, #3
 800d358:	d108      	bne.n	800d36c <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d805      	bhi.n	800d36c <CDC_connected+0x3c>
         && lineState;
 800d360:	4b08      	ldr	r3, [pc, #32]	; (800d384 <CDC_connected+0x54>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <CDC_connected+0x3c>
 800d368:	2301      	movs	r3, #1
 800d36a:	e000      	b.n	800d36e <CDC_connected+0x3e>
 800d36c:	2300      	movs	r3, #0
 800d36e:	f003 0301 	and.w	r3, r3, #1
 800d372:	b2db      	uxtb	r3, r3
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200005b0 	.word	0x200005b0
 800d380:	20000a24 	.word	0x20000a24
 800d384:	200005ac 	.word	0x200005ac

0800d388 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800d38e:	4b12      	ldr	r3, [pc, #72]	; (800d3d8 <CDC_continue_transmit+0x50>)
 800d390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d394:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d116      	bne.n	800d3ce <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 800d3a0:	1dbb      	adds	r3, r7, #6
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	480d      	ldr	r0, [pc, #52]	; (800d3dc <CDC_continue_transmit+0x54>)
 800d3a6:	f7f6 fd69 	bl	8003e7c <CDC_TransmitQueue_ReadBlock>
 800d3aa:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00d      	beq.n	800d3ce <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 800d3b2:	f7f7 f859 	bl	8004468 <HAL_GetTick>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4a09      	ldr	r2, [pc, #36]	; (800d3e0 <CDC_continue_transmit+0x58>)
 800d3ba:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 800d3bc:	88fb      	ldrh	r3, [r7, #6]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	68b9      	ldr	r1, [r7, #8]
 800d3c2:	4805      	ldr	r0, [pc, #20]	; (800d3d8 <CDC_continue_transmit+0x50>)
 800d3c4:	f7fe fc51 	bl	800bc6a <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3c8:	4803      	ldr	r0, [pc, #12]	; (800d3d8 <CDC_continue_transmit+0x50>)
 800d3ca:	f7fe fc85 	bl	800bcd8 <USBD_CDC_TransmitPacket>
    }
  }
}
 800d3ce:	bf00      	nop
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20000a24 	.word	0x20000a24
 800d3dc:	20000cf4 	.word	0x20000cf4
 800d3e0:	200005b0 	.word	0x200005b0

0800d3e4 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <CDC_resume_receive+0x48>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f083 0301 	eor.w	r3, r3, #1
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d012      	beq.n	800d420 <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 800d3fa:	480d      	ldr	r0, [pc, #52]	; (800d430 <CDC_resume_receive+0x4c>)
 800d3fc:	f7f6 fda5 	bl	8003f4a <CDC_ReceiveQueue_ReserveBlock>
 800d400:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00b      	beq.n	800d420 <CDC_resume_receive+0x3c>
      receivePended = true;
 800d408:	4b08      	ldr	r3, [pc, #32]	; (800d42c <CDC_resume_receive+0x48>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	4808      	ldr	r0, [pc, #32]	; (800d434 <CDC_resume_receive+0x50>)
 800d412:	f7fe fc48 	bl	800bca6 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d416:	4807      	ldr	r0, [pc, #28]	; (800d434 <CDC_resume_receive+0x50>)
 800d418:	f7fe fc8e 	bl	800bd38 <USBD_CDC_ReceivePacket>
      return true;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e000      	b.n	800d422 <CDC_resume_receive+0x3e>
    }
  }
  return false;
 800d420:	2300      	movs	r3, #0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	200004af 	.word	0x200004af
 800d430:	20001d7c 	.word	0x20001d7c
 800d434:	20000a24 	.word	0x20000a24

0800d438 <CDC_init>:

int8_t CDC_init(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 800d43c:	f7ff fe56 	bl	800d0ec <CDC_Init_FS>
 800d440:	4603      	mov	r3, r0
}
 800d442:	4618      	mov	r0, r3
 800d444:	bd80      	pop	{r7, pc}

0800d446 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 800d44a:	f7ff fe7b 	bl	800d144 <CDC_DeInit_FS>
 800d44e:	4603      	mov	r3, r0
}
 800d450:	4618      	mov	r0, r3
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  transmitStart = 0;
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <USBD_CDC_Transferred+0x1c>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 800d45e:	4805      	ldr	r0, [pc, #20]	; (800d474 <USBD_CDC_Transferred+0x20>)
 800d460:	f7f6 fd43 	bl	8003eea <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 800d464:	f7ff ff90 	bl	800d388 <CDC_continue_transmit>
  return (USBD_OK);
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	200005b0 	.word	0x200005b0
 800d474:	20000cf4 	.word	0x20000cf4

0800d478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	4603      	mov	r3, r0
 800d480:	6039      	str	r1, [r7, #0]
 800d482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2212      	movs	r2, #18
 800d488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d48a:	4b03      	ldr	r3, [pc, #12]	; (800d498 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	200004e8 	.word	0x200004e8

0800d49c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	6039      	str	r1, [r7, #0]
 800d4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2204      	movs	r2, #4
 800d4ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4ae:	4b03      	ldr	r3, [pc, #12]	; (800d4bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	200004fc 	.word	0x200004fc

0800d4c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	6039      	str	r1, [r7, #0]
 800d4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4cc:	79fb      	ldrb	r3, [r7, #7]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d105      	bne.n	800d4de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	4907      	ldr	r1, [pc, #28]	; (800d4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d4d6:	4808      	ldr	r0, [pc, #32]	; (800d4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4d8:	f7ff fce1 	bl	800ce9e <USBD_GetString>
 800d4dc:	e004      	b.n	800d4e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	4904      	ldr	r1, [pc, #16]	; (800d4f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d4e2:	4805      	ldr	r0, [pc, #20]	; (800d4f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4e4:	f7ff fcdb 	bl	800ce9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4e8:	4b02      	ldr	r3, [pc, #8]	; (800d4f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20001e44 	.word	0x20001e44
 800d4f8:	0800ea08 	.word	0x0800ea08

0800d4fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	4603      	mov	r3, r0
 800d504:	6039      	str	r1, [r7, #0]
 800d506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	4904      	ldr	r1, [pc, #16]	; (800d51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d50c:	4804      	ldr	r0, [pc, #16]	; (800d520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d50e:	f7ff fcc6 	bl	800ce9e <USBD_GetString>
  return USBD_StrDesc;
 800d512:	4b02      	ldr	r3, [pc, #8]	; (800d51c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	20001e44 	.word	0x20001e44
 800d520:	0800ea20 	.word	0x0800ea20

0800d524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	221a      	movs	r2, #26
 800d534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d536:	f000 f843 	bl	800d5c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d53a:	4b02      	ldr	r3, [pc, #8]	; (800d544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20000500 	.word	0x20000500

0800d548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	4907      	ldr	r1, [pc, #28]	; (800d57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d55e:	4808      	ldr	r0, [pc, #32]	; (800d580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d560:	f7ff fc9d 	bl	800ce9e <USBD_GetString>
 800d564:	e004      	b.n	800d570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	4904      	ldr	r1, [pc, #16]	; (800d57c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d56a:	4805      	ldr	r0, [pc, #20]	; (800d580 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d56c:	f7ff fc97 	bl	800ce9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d570:	4b02      	ldr	r3, [pc, #8]	; (800d57c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20001e44 	.word	0x20001e44
 800d580:	0800ea34 	.word	0x0800ea34

0800d584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	6039      	str	r1, [r7, #0]
 800d58e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d105      	bne.n	800d5a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	4907      	ldr	r1, [pc, #28]	; (800d5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d59a:	4808      	ldr	r0, [pc, #32]	; (800d5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d59c:	f7ff fc7f 	bl	800ce9e <USBD_GetString>
 800d5a0:	e004      	b.n	800d5ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	4904      	ldr	r1, [pc, #16]	; (800d5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5a6:	4805      	ldr	r0, [pc, #20]	; (800d5bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5a8:	f7ff fc79 	bl	800ce9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20001e44 	.word	0x20001e44
 800d5bc:	0800ea40 	.word	0x0800ea40

0800d5c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5c6:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <Get_SerialNum+0x44>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5cc:	4b0e      	ldr	r3, [pc, #56]	; (800d608 <Get_SerialNum+0x48>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	; (800d60c <Get_SerialNum+0x4c>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4413      	add	r3, r2
 800d5de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d009      	beq.n	800d5fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5e6:	2208      	movs	r2, #8
 800d5e8:	4909      	ldr	r1, [pc, #36]	; (800d610 <Get_SerialNum+0x50>)
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f000 f814 	bl	800d618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5f0:	2204      	movs	r2, #4
 800d5f2:	4908      	ldr	r1, [pc, #32]	; (800d614 <Get_SerialNum+0x54>)
 800d5f4:	68b8      	ldr	r0, [r7, #8]
 800d5f6:	f000 f80f 	bl	800d618 <IntToUnicode>
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	1fff7a10 	.word	0x1fff7a10
 800d608:	1fff7a14 	.word	0x1fff7a14
 800d60c:	1fff7a18 	.word	0x1fff7a18
 800d610:	20000502 	.word	0x20000502
 800d614:	20000512 	.word	0x20000512

0800d618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d618:	b480      	push	{r7}
 800d61a:	b087      	sub	sp, #28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d62a:	2300      	movs	r3, #0
 800d62c:	75fb      	strb	r3, [r7, #23]
 800d62e:	e027      	b.n	800d680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	0f1b      	lsrs	r3, r3, #28
 800d634:	2b09      	cmp	r3, #9
 800d636:	d80b      	bhi.n	800d650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	0f1b      	lsrs	r3, r3, #28
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4619      	mov	r1, r3
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	440b      	add	r3, r1
 800d648:	3230      	adds	r2, #48	; 0x30
 800d64a:	b2d2      	uxtb	r2, r2
 800d64c:	701a      	strb	r2, [r3, #0]
 800d64e:	e00a      	b.n	800d666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	0f1b      	lsrs	r3, r3, #28
 800d654:	b2da      	uxtb	r2, r3
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	4619      	mov	r1, r3
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	440b      	add	r3, r1
 800d660:	3237      	adds	r2, #55	; 0x37
 800d662:	b2d2      	uxtb	r2, r2
 800d664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	011b      	lsls	r3, r3, #4
 800d66a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	3301      	adds	r3, #1
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	4413      	add	r3, r2
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	3301      	adds	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]
 800d680:	7dfa      	ldrb	r2, [r7, #23]
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	429a      	cmp	r2, r3
 800d686:	d3d3      	bcc.n	800d630 <IntToUnicode+0x18>
  }
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	371c      	adds	r7, #28
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr
	...

0800d698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08a      	sub	sp, #40	; 0x28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6a0:	f107 0314 	add.w	r3, r7, #20
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	609a      	str	r2, [r3, #8]
 800d6ac:	60da      	str	r2, [r3, #12]
 800d6ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6b8:	d13a      	bne.n	800d730 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	613b      	str	r3, [r7, #16]
 800d6be:	4b1e      	ldr	r3, [pc, #120]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	4a1d      	ldr	r2, [pc, #116]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800d6ca:	4b1b      	ldr	r3, [pc, #108]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	613b      	str	r3, [r7, #16]
 800d6d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d6d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d6da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6dc:	2302      	movs	r3, #2
 800d6de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6e8:	230a      	movs	r3, #10
 800d6ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6ec:	f107 0314 	add.w	r3, r7, #20
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	4812      	ldr	r0, [pc, #72]	; (800d73c <HAL_PCD_MspInit+0xa4>)
 800d6f4:	f7f7 f8be 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6f8:	4b0f      	ldr	r3, [pc, #60]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fc:	4a0e      	ldr	r2, [pc, #56]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d702:	6353      	str	r3, [r2, #52]	; 0x34
 800d704:	2300      	movs	r3, #0
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d70c:	4a0a      	ldr	r2, [pc, #40]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d70e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d712:	6453      	str	r3, [r2, #68]	; 0x44
 800d714:	4b08      	ldr	r3, [pc, #32]	; (800d738 <HAL_PCD_MspInit+0xa0>)
 800d716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d71c:	60fb      	str	r3, [r7, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d720:	2200      	movs	r2, #0
 800d722:	2100      	movs	r1, #0
 800d724:	2043      	movs	r0, #67	; 0x43
 800d726:	f7f6 ffce 	bl	80046c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d72a:	2043      	movs	r0, #67	; 0x43
 800d72c:	f7f6 ffe7 	bl	80046fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d730:	bf00      	nop
 800d732:	3728      	adds	r7, #40	; 0x28
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	40023800 	.word	0x40023800
 800d73c:	40020000 	.word	0x40020000

0800d740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7fe fbba 	bl	800bed0 <USBD_LL_SetupStage>
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d776:	78fa      	ldrb	r2, [r7, #3]
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	4613      	mov	r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	1a9b      	subs	r3, r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	440b      	add	r3, r1
 800d784:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	78fb      	ldrb	r3, [r7, #3]
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7fe fbf4 	bl	800bf7a <USBD_LL_DataOutStage>
}
 800d792:	bf00      	nop
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7ac:	78fa      	ldrb	r2, [r7, #3]
 800d7ae:	6879      	ldr	r1, [r7, #4]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	1a9b      	subs	r3, r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	440b      	add	r3, r1
 800d7ba:	3348      	adds	r3, #72	; 0x48
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	78fb      	ldrb	r3, [r7, #3]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	f7fe fc3d 	bl	800c040 <USBD_LL_DataInStage>
}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fe fd51 	bl	800c284 <USBD_LL_SOF>
}
 800d7e2:	bf00      	nop
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d001      	beq.n	800d802 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d7fe:	f7f3 fbed 	bl	8000fdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d808:	7bfa      	ldrb	r2, [r7, #15]
 800d80a:	4611      	mov	r1, r2
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fe fcfb 	bl	800c208 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fe fca7 	bl	800c16c <USBD_LL_Reset>
}
 800d81e:	bf00      	nop
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d836:	4618      	mov	r0, r3
 800d838:	f7fe fcf6 	bl	800c228 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	6812      	ldr	r2, [r2, #0]
 800d84a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d84e:	f043 0301 	orr.w	r3, r3, #1
 800d852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d005      	beq.n	800d868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d85c:	4b04      	ldr	r3, [pc, #16]	; (800d870 <HAL_PCD_SuspendCallback+0x48>)
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	4a03      	ldr	r2, [pc, #12]	; (800d870 <HAL_PCD_SuspendCallback+0x48>)
 800d862:	f043 0306 	orr.w	r3, r3, #6
 800d866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	e000ed00 	.word	0xe000ed00

0800d874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe fce6 	bl	800c254 <USBD_LL_Resume>
}
 800d888:	bf00      	nop
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8a2:	78fa      	ldrb	r2, [r7, #3]
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe fd34 	bl	800c314 <USBD_LL_IsoOUTIncomplete>
}
 800d8ac:	bf00      	nop
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8c6:	78fa      	ldrb	r2, [r7, #3]
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fcfc 	bl	800c2c8 <USBD_LL_IsoINIncomplete>
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe fd3a 	bl	800c360 <USBD_LL_DevConnected>
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d902:	4618      	mov	r0, r3
 800d904:	f7fe fd37 	bl	800c376 <USBD_LL_DevDisconnected>
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d13c      	bne.n	800d99a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d920:	4a20      	ldr	r2, [pc, #128]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d92c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d930:	4b1c      	ldr	r3, [pc, #112]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d938:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d93a:	2204      	movs	r2, #4
 800d93c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d93e:	4b19      	ldr	r3, [pc, #100]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d940:	2202      	movs	r2, #2
 800d942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d944:	4b17      	ldr	r3, [pc, #92]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d946:	2200      	movs	r2, #0
 800d948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d94a:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d94c:	2202      	movs	r2, #2
 800d94e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d950:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d952:	2201      	movs	r2, #1
 800d954:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d956:	4b13      	ldr	r3, [pc, #76]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d958:	2200      	movs	r2, #0
 800d95a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d95c:	4b11      	ldr	r3, [pc, #68]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d95e:	2200      	movs	r2, #0
 800d960:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d962:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d964:	2200      	movs	r2, #0
 800d966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d968:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d96e:	480d      	ldr	r0, [pc, #52]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d970:	f7f8 faf7 	bl	8005f62 <HAL_PCD_Init>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d97a:	f7f3 fb2f 	bl	8000fdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d97e:	2180      	movs	r1, #128	; 0x80
 800d980:	4808      	ldr	r0, [pc, #32]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d982:	f7f9 fc54 	bl	800722e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d986:	2240      	movs	r2, #64	; 0x40
 800d988:	2100      	movs	r1, #0
 800d98a:	4806      	ldr	r0, [pc, #24]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d98c:	f7f9 fc08 	bl	80071a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d990:	2280      	movs	r2, #128	; 0x80
 800d992:	2101      	movs	r1, #1
 800d994:	4803      	ldr	r0, [pc, #12]	; (800d9a4 <USBD_LL_Init+0x94>)
 800d996:	f7f9 fc03 	bl	80071a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	20002044 	.word	0x20002044

0800d9a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f8 fbec 	bl	800619c <HAL_PCD_Start>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 f942 	bl	800dc54 <USBD_Get_USB_Status>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b084      	sub	sp, #16
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	4608      	mov	r0, r1
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	70fb      	strb	r3, [r7, #3]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70bb      	strb	r3, [r7, #2]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da06:	78bb      	ldrb	r3, [r7, #2]
 800da08:	883a      	ldrh	r2, [r7, #0]
 800da0a:	78f9      	ldrb	r1, [r7, #3]
 800da0c:	f7f8 ffd0 	bl	80069b0 <HAL_PCD_EP_Open>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f91c 	bl	800dc54 <USBD_Get_USB_Status>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da20:	7bbb      	ldrb	r3, [r7, #14]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	460b      	mov	r3, r1
 800da34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da44:	78fa      	ldrb	r2, [r7, #3]
 800da46:	4611      	mov	r1, r2
 800da48:	4618      	mov	r0, r3
 800da4a:	f7f9 f819 	bl	8006a80 <HAL_PCD_EP_Close>
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 f8fd 	bl	800dc54 <USBD_Get_USB_Status>
 800da5a:	4603      	mov	r3, r0
 800da5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da82:	78fa      	ldrb	r2, [r7, #3]
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f7f9 f8f1 	bl	8006c6e <HAL_PCD_EP_SetStall>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da90:	7bfb      	ldrb	r3, [r7, #15]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 f8de 	bl	800dc54 <USBD_Get_USB_Status>
 800da98:	4603      	mov	r3, r0
 800da9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
 800daae:	460b      	mov	r3, r1
 800dab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	4611      	mov	r1, r2
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f9 f936 	bl	8006d36 <HAL_PCD_EP_ClrStall>
 800daca:	4603      	mov	r3, r0
 800dacc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 f8bf 	bl	800dc54 <USBD_Get_USB_Status>
 800dad6:	4603      	mov	r3, r0
 800dad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dada:	7bbb      	ldrb	r3, [r7, #14]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	460b      	mov	r3, r1
 800daee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800daf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800daf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	da0b      	bge.n	800db18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db06:	68f9      	ldr	r1, [r7, #12]
 800db08:	4613      	mov	r3, r2
 800db0a:	00db      	lsls	r3, r3, #3
 800db0c:	1a9b      	subs	r3, r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	440b      	add	r3, r1
 800db12:	333e      	adds	r3, #62	; 0x3e
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	e00b      	b.n	800db30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db1e:	68f9      	ldr	r1, [r7, #12]
 800db20:	4613      	mov	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db56:	78fa      	ldrb	r2, [r7, #3]
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f8 ff03 	bl	8006966 <HAL_PCD_SetAddress>
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db64:	7bfb      	ldrb	r3, [r7, #15]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f874 	bl	800dc54 <USBD_Get_USB_Status>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db70:	7bbb      	ldrb	r3, [r7, #14]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b086      	sub	sp, #24
 800db7e:	af00      	add	r7, sp, #0
 800db80:	60f8      	str	r0, [r7, #12]
 800db82:	607a      	str	r2, [r7, #4]
 800db84:	603b      	str	r3, [r7, #0]
 800db86:	460b      	mov	r3, r1
 800db88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db98:	7af9      	ldrb	r1, [r7, #11]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	f7f9 f81c 	bl	8006bda <HAL_PCD_EP_Transmit>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f853 	bl	800dc54 <USBD_Get_USB_Status>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	460b      	mov	r3, r1
 800dbca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbda:	7af9      	ldrb	r1, [r7, #11]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	f7f8 ff98 	bl	8006b14 <HAL_PCD_EP_Receive>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 f832 	bl	800dc54 <USBD_Get_USB_Status>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b082      	sub	sp, #8
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	460b      	mov	r3, r1
 800dc08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc10:	78fa      	ldrb	r2, [r7, #3]
 800dc12:	4611      	mov	r1, r2
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7f8 ffc8 	bl	8006baa <HAL_PCD_EP_GetRxCount>
 800dc1a:	4603      	mov	r3, r0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc2c:	4b03      	ldr	r3, [pc, #12]	; (800dc3c <USBD_static_malloc+0x18>)
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	200005b4 	.word	0x200005b4

0800dc40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]

}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc62:	79fb      	ldrb	r3, [r7, #7]
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d817      	bhi.n	800dc98 <USBD_Get_USB_Status+0x44>
 800dc68:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <USBD_Get_USB_Status+0x1c>)
 800dc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6e:	bf00      	nop
 800dc70:	0800dc81 	.word	0x0800dc81
 800dc74:	0800dc87 	.word	0x0800dc87
 800dc78:	0800dc8d 	.word	0x0800dc8d
 800dc7c:	0800dc93 	.word	0x0800dc93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73fb      	strb	r3, [r7, #15]
    break;
 800dc84:	e00b      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc86:	2303      	movs	r3, #3
 800dc88:	73fb      	strb	r3, [r7, #15]
    break;
 800dc8a:	e008      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc90:	e005      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc92:	2303      	movs	r3, #3
 800dc94:	73fb      	strb	r3, [r7, #15]
    break;
 800dc96:	e002      	b.n	800dc9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc98:	2303      	movs	r3, #3
 800dc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc9c:	bf00      	nop
  }
  return usb_status;
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <atoi>:
 800dcac:	220a      	movs	r2, #10
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f000 b9dc 	b.w	800e06c <strtol>

0800dcb4 <__errno>:
 800dcb4:	4b01      	ldr	r3, [pc, #4]	; (800dcbc <__errno+0x8>)
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	2000051c 	.word	0x2000051c

0800dcc0 <__libc_init_array>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	4d0d      	ldr	r5, [pc, #52]	; (800dcf8 <__libc_init_array+0x38>)
 800dcc4:	4c0d      	ldr	r4, [pc, #52]	; (800dcfc <__libc_init_array+0x3c>)
 800dcc6:	1b64      	subs	r4, r4, r5
 800dcc8:	10a4      	asrs	r4, r4, #2
 800dcca:	2600      	movs	r6, #0
 800dccc:	42a6      	cmp	r6, r4
 800dcce:	d109      	bne.n	800dce4 <__libc_init_array+0x24>
 800dcd0:	4d0b      	ldr	r5, [pc, #44]	; (800dd00 <__libc_init_array+0x40>)
 800dcd2:	4c0c      	ldr	r4, [pc, #48]	; (800dd04 <__libc_init_array+0x44>)
 800dcd4:	f000 fd98 	bl	800e808 <_init>
 800dcd8:	1b64      	subs	r4, r4, r5
 800dcda:	10a4      	asrs	r4, r4, #2
 800dcdc:	2600      	movs	r6, #0
 800dcde:	42a6      	cmp	r6, r4
 800dce0:	d105      	bne.n	800dcee <__libc_init_array+0x2e>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce8:	4798      	blx	r3
 800dcea:	3601      	adds	r6, #1
 800dcec:	e7ee      	b.n	800dccc <__libc_init_array+0xc>
 800dcee:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf2:	4798      	blx	r3
 800dcf4:	3601      	adds	r6, #1
 800dcf6:	e7f2      	b.n	800dcde <__libc_init_array+0x1e>
 800dcf8:	0800ebec 	.word	0x0800ebec
 800dcfc:	0800ebec 	.word	0x0800ebec
 800dd00:	0800ebec 	.word	0x0800ebec
 800dd04:	0800ebf0 	.word	0x0800ebf0

0800dd08 <__itoa>:
 800dd08:	1e93      	subs	r3, r2, #2
 800dd0a:	2b22      	cmp	r3, #34	; 0x22
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	d904      	bls.n	800dd1c <__itoa+0x14>
 800dd12:	2300      	movs	r3, #0
 800dd14:	700b      	strb	r3, [r1, #0]
 800dd16:	461c      	mov	r4, r3
 800dd18:	4620      	mov	r0, r4
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	2a0a      	cmp	r2, #10
 800dd1e:	d109      	bne.n	800dd34 <__itoa+0x2c>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	da07      	bge.n	800dd34 <__itoa+0x2c>
 800dd24:	232d      	movs	r3, #45	; 0x2d
 800dd26:	700b      	strb	r3, [r1, #0]
 800dd28:	4240      	negs	r0, r0
 800dd2a:	2101      	movs	r1, #1
 800dd2c:	4421      	add	r1, r4
 800dd2e:	f000 f9a7 	bl	800e080 <__utoa>
 800dd32:	e7f1      	b.n	800dd18 <__itoa+0x10>
 800dd34:	2100      	movs	r1, #0
 800dd36:	e7f9      	b.n	800dd2c <__itoa+0x24>

0800dd38 <itoa>:
 800dd38:	f7ff bfe6 	b.w	800dd08 <__itoa>

0800dd3c <malloc>:
 800dd3c:	4b02      	ldr	r3, [pc, #8]	; (800dd48 <malloc+0xc>)
 800dd3e:	4601      	mov	r1, r0
 800dd40:	6818      	ldr	r0, [r3, #0]
 800dd42:	f000 b871 	b.w	800de28 <_malloc_r>
 800dd46:	bf00      	nop
 800dd48:	2000051c 	.word	0x2000051c

0800dd4c <free>:
 800dd4c:	4b02      	ldr	r3, [pc, #8]	; (800dd58 <free+0xc>)
 800dd4e:	4601      	mov	r1, r0
 800dd50:	6818      	ldr	r0, [r3, #0]
 800dd52:	f000 b819 	b.w	800dd88 <_free_r>
 800dd56:	bf00      	nop
 800dd58:	2000051c 	.word	0x2000051c

0800dd5c <memcpy>:
 800dd5c:	440a      	add	r2, r1
 800dd5e:	4291      	cmp	r1, r2
 800dd60:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd64:	d100      	bne.n	800dd68 <memcpy+0xc>
 800dd66:	4770      	bx	lr
 800dd68:	b510      	push	{r4, lr}
 800dd6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd72:	4291      	cmp	r1, r2
 800dd74:	d1f9      	bne.n	800dd6a <memcpy+0xe>
 800dd76:	bd10      	pop	{r4, pc}

0800dd78 <memset>:
 800dd78:	4402      	add	r2, r0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d100      	bne.n	800dd82 <memset+0xa>
 800dd80:	4770      	bx	lr
 800dd82:	f803 1b01 	strb.w	r1, [r3], #1
 800dd86:	e7f9      	b.n	800dd7c <memset+0x4>

0800dd88 <_free_r>:
 800dd88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd8a:	2900      	cmp	r1, #0
 800dd8c:	d048      	beq.n	800de20 <_free_r+0x98>
 800dd8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd92:	9001      	str	r0, [sp, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f1a1 0404 	sub.w	r4, r1, #4
 800dd9a:	bfb8      	it	lt
 800dd9c:	18e4      	addlt	r4, r4, r3
 800dd9e:	f000 f9ed 	bl	800e17c <__malloc_lock>
 800dda2:	4a20      	ldr	r2, [pc, #128]	; (800de24 <_free_r+0x9c>)
 800dda4:	9801      	ldr	r0, [sp, #4]
 800dda6:	6813      	ldr	r3, [r2, #0]
 800dda8:	4615      	mov	r5, r2
 800ddaa:	b933      	cbnz	r3, 800ddba <_free_r+0x32>
 800ddac:	6063      	str	r3, [r4, #4]
 800ddae:	6014      	str	r4, [r2, #0]
 800ddb0:	b003      	add	sp, #12
 800ddb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddb6:	f000 b9e7 	b.w	800e188 <__malloc_unlock>
 800ddba:	42a3      	cmp	r3, r4
 800ddbc:	d90b      	bls.n	800ddd6 <_free_r+0x4e>
 800ddbe:	6821      	ldr	r1, [r4, #0]
 800ddc0:	1862      	adds	r2, r4, r1
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	bf04      	itt	eq
 800ddc6:	681a      	ldreq	r2, [r3, #0]
 800ddc8:	685b      	ldreq	r3, [r3, #4]
 800ddca:	6063      	str	r3, [r4, #4]
 800ddcc:	bf04      	itt	eq
 800ddce:	1852      	addeq	r2, r2, r1
 800ddd0:	6022      	streq	r2, [r4, #0]
 800ddd2:	602c      	str	r4, [r5, #0]
 800ddd4:	e7ec      	b.n	800ddb0 <_free_r+0x28>
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	b10b      	cbz	r3, 800dde0 <_free_r+0x58>
 800dddc:	42a3      	cmp	r3, r4
 800ddde:	d9fa      	bls.n	800ddd6 <_free_r+0x4e>
 800dde0:	6811      	ldr	r1, [r2, #0]
 800dde2:	1855      	adds	r5, r2, r1
 800dde4:	42a5      	cmp	r5, r4
 800dde6:	d10b      	bne.n	800de00 <_free_r+0x78>
 800dde8:	6824      	ldr	r4, [r4, #0]
 800ddea:	4421      	add	r1, r4
 800ddec:	1854      	adds	r4, r2, r1
 800ddee:	42a3      	cmp	r3, r4
 800ddf0:	6011      	str	r1, [r2, #0]
 800ddf2:	d1dd      	bne.n	800ddb0 <_free_r+0x28>
 800ddf4:	681c      	ldr	r4, [r3, #0]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	6053      	str	r3, [r2, #4]
 800ddfa:	4421      	add	r1, r4
 800ddfc:	6011      	str	r1, [r2, #0]
 800ddfe:	e7d7      	b.n	800ddb0 <_free_r+0x28>
 800de00:	d902      	bls.n	800de08 <_free_r+0x80>
 800de02:	230c      	movs	r3, #12
 800de04:	6003      	str	r3, [r0, #0]
 800de06:	e7d3      	b.n	800ddb0 <_free_r+0x28>
 800de08:	6825      	ldr	r5, [r4, #0]
 800de0a:	1961      	adds	r1, r4, r5
 800de0c:	428b      	cmp	r3, r1
 800de0e:	bf04      	itt	eq
 800de10:	6819      	ldreq	r1, [r3, #0]
 800de12:	685b      	ldreq	r3, [r3, #4]
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	bf04      	itt	eq
 800de18:	1949      	addeq	r1, r1, r5
 800de1a:	6021      	streq	r1, [r4, #0]
 800de1c:	6054      	str	r4, [r2, #4]
 800de1e:	e7c7      	b.n	800ddb0 <_free_r+0x28>
 800de20:	b003      	add	sp, #12
 800de22:	bd30      	pop	{r4, r5, pc}
 800de24:	200007d4 	.word	0x200007d4

0800de28 <_malloc_r>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	1ccd      	adds	r5, r1, #3
 800de2c:	f025 0503 	bic.w	r5, r5, #3
 800de30:	3508      	adds	r5, #8
 800de32:	2d0c      	cmp	r5, #12
 800de34:	bf38      	it	cc
 800de36:	250c      	movcc	r5, #12
 800de38:	2d00      	cmp	r5, #0
 800de3a:	4606      	mov	r6, r0
 800de3c:	db01      	blt.n	800de42 <_malloc_r+0x1a>
 800de3e:	42a9      	cmp	r1, r5
 800de40:	d903      	bls.n	800de4a <_malloc_r+0x22>
 800de42:	230c      	movs	r3, #12
 800de44:	6033      	str	r3, [r6, #0]
 800de46:	2000      	movs	r0, #0
 800de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de4a:	f000 f997 	bl	800e17c <__malloc_lock>
 800de4e:	4921      	ldr	r1, [pc, #132]	; (800ded4 <_malloc_r+0xac>)
 800de50:	680a      	ldr	r2, [r1, #0]
 800de52:	4614      	mov	r4, r2
 800de54:	b99c      	cbnz	r4, 800de7e <_malloc_r+0x56>
 800de56:	4f20      	ldr	r7, [pc, #128]	; (800ded8 <_malloc_r+0xb0>)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	b923      	cbnz	r3, 800de66 <_malloc_r+0x3e>
 800de5c:	4621      	mov	r1, r4
 800de5e:	4630      	mov	r0, r6
 800de60:	f000 f83c 	bl	800dedc <_sbrk_r>
 800de64:	6038      	str	r0, [r7, #0]
 800de66:	4629      	mov	r1, r5
 800de68:	4630      	mov	r0, r6
 800de6a:	f000 f837 	bl	800dedc <_sbrk_r>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	d123      	bne.n	800deba <_malloc_r+0x92>
 800de72:	230c      	movs	r3, #12
 800de74:	6033      	str	r3, [r6, #0]
 800de76:	4630      	mov	r0, r6
 800de78:	f000 f986 	bl	800e188 <__malloc_unlock>
 800de7c:	e7e3      	b.n	800de46 <_malloc_r+0x1e>
 800de7e:	6823      	ldr	r3, [r4, #0]
 800de80:	1b5b      	subs	r3, r3, r5
 800de82:	d417      	bmi.n	800deb4 <_malloc_r+0x8c>
 800de84:	2b0b      	cmp	r3, #11
 800de86:	d903      	bls.n	800de90 <_malloc_r+0x68>
 800de88:	6023      	str	r3, [r4, #0]
 800de8a:	441c      	add	r4, r3
 800de8c:	6025      	str	r5, [r4, #0]
 800de8e:	e004      	b.n	800de9a <_malloc_r+0x72>
 800de90:	6863      	ldr	r3, [r4, #4]
 800de92:	42a2      	cmp	r2, r4
 800de94:	bf0c      	ite	eq
 800de96:	600b      	streq	r3, [r1, #0]
 800de98:	6053      	strne	r3, [r2, #4]
 800de9a:	4630      	mov	r0, r6
 800de9c:	f000 f974 	bl	800e188 <__malloc_unlock>
 800dea0:	f104 000b 	add.w	r0, r4, #11
 800dea4:	1d23      	adds	r3, r4, #4
 800dea6:	f020 0007 	bic.w	r0, r0, #7
 800deaa:	1ac2      	subs	r2, r0, r3
 800deac:	d0cc      	beq.n	800de48 <_malloc_r+0x20>
 800deae:	1a1b      	subs	r3, r3, r0
 800deb0:	50a3      	str	r3, [r4, r2]
 800deb2:	e7c9      	b.n	800de48 <_malloc_r+0x20>
 800deb4:	4622      	mov	r2, r4
 800deb6:	6864      	ldr	r4, [r4, #4]
 800deb8:	e7cc      	b.n	800de54 <_malloc_r+0x2c>
 800deba:	1cc4      	adds	r4, r0, #3
 800debc:	f024 0403 	bic.w	r4, r4, #3
 800dec0:	42a0      	cmp	r0, r4
 800dec2:	d0e3      	beq.n	800de8c <_malloc_r+0x64>
 800dec4:	1a21      	subs	r1, r4, r0
 800dec6:	4630      	mov	r0, r6
 800dec8:	f000 f808 	bl	800dedc <_sbrk_r>
 800decc:	3001      	adds	r0, #1
 800dece:	d1dd      	bne.n	800de8c <_malloc_r+0x64>
 800ded0:	e7cf      	b.n	800de72 <_malloc_r+0x4a>
 800ded2:	bf00      	nop
 800ded4:	200007d4 	.word	0x200007d4
 800ded8:	200007d8 	.word	0x200007d8

0800dedc <_sbrk_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4d06      	ldr	r5, [pc, #24]	; (800def8 <_sbrk_r+0x1c>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	602b      	str	r3, [r5, #0]
 800dee8:	f7f3 fa30 	bl	800134c <_sbrk>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_sbrk_r+0x1a>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	b103      	cbz	r3, 800def6 <_sbrk_r+0x1a>
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	2000244c 	.word	0x2000244c

0800defc <siprintf>:
 800defc:	b40e      	push	{r1, r2, r3}
 800defe:	b500      	push	{lr}
 800df00:	b09c      	sub	sp, #112	; 0x70
 800df02:	ab1d      	add	r3, sp, #116	; 0x74
 800df04:	9002      	str	r0, [sp, #8]
 800df06:	9006      	str	r0, [sp, #24]
 800df08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df0c:	4809      	ldr	r0, [pc, #36]	; (800df34 <siprintf+0x38>)
 800df0e:	9107      	str	r1, [sp, #28]
 800df10:	9104      	str	r1, [sp, #16]
 800df12:	4909      	ldr	r1, [pc, #36]	; (800df38 <siprintf+0x3c>)
 800df14:	f853 2b04 	ldr.w	r2, [r3], #4
 800df18:	9105      	str	r1, [sp, #20]
 800df1a:	6800      	ldr	r0, [r0, #0]
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	a902      	add	r1, sp, #8
 800df20:	f000 f994 	bl	800e24c <_svfiprintf_r>
 800df24:	9b02      	ldr	r3, [sp, #8]
 800df26:	2200      	movs	r2, #0
 800df28:	701a      	strb	r2, [r3, #0]
 800df2a:	b01c      	add	sp, #112	; 0x70
 800df2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df30:	b003      	add	sp, #12
 800df32:	4770      	bx	lr
 800df34:	2000051c 	.word	0x2000051c
 800df38:	ffff0208 	.word	0xffff0208

0800df3c <strncpy>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	3901      	subs	r1, #1
 800df40:	4603      	mov	r3, r0
 800df42:	b132      	cbz	r2, 800df52 <strncpy+0x16>
 800df44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df48:	f803 4b01 	strb.w	r4, [r3], #1
 800df4c:	3a01      	subs	r2, #1
 800df4e:	2c00      	cmp	r4, #0
 800df50:	d1f7      	bne.n	800df42 <strncpy+0x6>
 800df52:	441a      	add	r2, r3
 800df54:	2100      	movs	r1, #0
 800df56:	4293      	cmp	r3, r2
 800df58:	d100      	bne.n	800df5c <strncpy+0x20>
 800df5a:	bd10      	pop	{r4, pc}
 800df5c:	f803 1b01 	strb.w	r1, [r3], #1
 800df60:	e7f9      	b.n	800df56 <strncpy+0x1a>
	...

0800df64 <_strtol_l.isra.0>:
 800df64:	2b01      	cmp	r3, #1
 800df66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df6a:	d001      	beq.n	800df70 <_strtol_l.isra.0+0xc>
 800df6c:	2b24      	cmp	r3, #36	; 0x24
 800df6e:	d906      	bls.n	800df7e <_strtol_l.isra.0+0x1a>
 800df70:	f7ff fea0 	bl	800dcb4 <__errno>
 800df74:	2316      	movs	r3, #22
 800df76:	6003      	str	r3, [r0, #0]
 800df78:	2000      	movs	r0, #0
 800df7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7e:	4f3a      	ldr	r7, [pc, #232]	; (800e068 <_strtol_l.isra.0+0x104>)
 800df80:	468e      	mov	lr, r1
 800df82:	4676      	mov	r6, lr
 800df84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800df88:	5de5      	ldrb	r5, [r4, r7]
 800df8a:	f015 0508 	ands.w	r5, r5, #8
 800df8e:	d1f8      	bne.n	800df82 <_strtol_l.isra.0+0x1e>
 800df90:	2c2d      	cmp	r4, #45	; 0x2d
 800df92:	d134      	bne.n	800dffe <_strtol_l.isra.0+0x9a>
 800df94:	f89e 4000 	ldrb.w	r4, [lr]
 800df98:	f04f 0801 	mov.w	r8, #1
 800df9c:	f106 0e02 	add.w	lr, r6, #2
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d05c      	beq.n	800e05e <_strtol_l.isra.0+0xfa>
 800dfa4:	2b10      	cmp	r3, #16
 800dfa6:	d10c      	bne.n	800dfc2 <_strtol_l.isra.0+0x5e>
 800dfa8:	2c30      	cmp	r4, #48	; 0x30
 800dfaa:	d10a      	bne.n	800dfc2 <_strtol_l.isra.0+0x5e>
 800dfac:	f89e 4000 	ldrb.w	r4, [lr]
 800dfb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfb4:	2c58      	cmp	r4, #88	; 0x58
 800dfb6:	d14d      	bne.n	800e054 <_strtol_l.isra.0+0xf0>
 800dfb8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800dfbc:	2310      	movs	r3, #16
 800dfbe:	f10e 0e02 	add.w	lr, lr, #2
 800dfc2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800dfc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dfca:	2600      	movs	r6, #0
 800dfcc:	fbbc f9f3 	udiv	r9, ip, r3
 800dfd0:	4635      	mov	r5, r6
 800dfd2:	fb03 ca19 	mls	sl, r3, r9, ip
 800dfd6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dfda:	2f09      	cmp	r7, #9
 800dfdc:	d818      	bhi.n	800e010 <_strtol_l.isra.0+0xac>
 800dfde:	463c      	mov	r4, r7
 800dfe0:	42a3      	cmp	r3, r4
 800dfe2:	dd24      	ble.n	800e02e <_strtol_l.isra.0+0xca>
 800dfe4:	2e00      	cmp	r6, #0
 800dfe6:	db1f      	blt.n	800e028 <_strtol_l.isra.0+0xc4>
 800dfe8:	45a9      	cmp	r9, r5
 800dfea:	d31d      	bcc.n	800e028 <_strtol_l.isra.0+0xc4>
 800dfec:	d101      	bne.n	800dff2 <_strtol_l.isra.0+0x8e>
 800dfee:	45a2      	cmp	sl, r4
 800dff0:	db1a      	blt.n	800e028 <_strtol_l.isra.0+0xc4>
 800dff2:	fb05 4503 	mla	r5, r5, r3, r4
 800dff6:	2601      	movs	r6, #1
 800dff8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dffc:	e7eb      	b.n	800dfd6 <_strtol_l.isra.0+0x72>
 800dffe:	2c2b      	cmp	r4, #43	; 0x2b
 800e000:	bf08      	it	eq
 800e002:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e006:	46a8      	mov	r8, r5
 800e008:	bf08      	it	eq
 800e00a:	f106 0e02 	addeq.w	lr, r6, #2
 800e00e:	e7c7      	b.n	800dfa0 <_strtol_l.isra.0+0x3c>
 800e010:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e014:	2f19      	cmp	r7, #25
 800e016:	d801      	bhi.n	800e01c <_strtol_l.isra.0+0xb8>
 800e018:	3c37      	subs	r4, #55	; 0x37
 800e01a:	e7e1      	b.n	800dfe0 <_strtol_l.isra.0+0x7c>
 800e01c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e020:	2f19      	cmp	r7, #25
 800e022:	d804      	bhi.n	800e02e <_strtol_l.isra.0+0xca>
 800e024:	3c57      	subs	r4, #87	; 0x57
 800e026:	e7db      	b.n	800dfe0 <_strtol_l.isra.0+0x7c>
 800e028:	f04f 36ff 	mov.w	r6, #4294967295
 800e02c:	e7e4      	b.n	800dff8 <_strtol_l.isra.0+0x94>
 800e02e:	2e00      	cmp	r6, #0
 800e030:	da05      	bge.n	800e03e <_strtol_l.isra.0+0xda>
 800e032:	2322      	movs	r3, #34	; 0x22
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	4665      	mov	r5, ip
 800e038:	b942      	cbnz	r2, 800e04c <_strtol_l.isra.0+0xe8>
 800e03a:	4628      	mov	r0, r5
 800e03c:	e79d      	b.n	800df7a <_strtol_l.isra.0+0x16>
 800e03e:	f1b8 0f00 	cmp.w	r8, #0
 800e042:	d000      	beq.n	800e046 <_strtol_l.isra.0+0xe2>
 800e044:	426d      	negs	r5, r5
 800e046:	2a00      	cmp	r2, #0
 800e048:	d0f7      	beq.n	800e03a <_strtol_l.isra.0+0xd6>
 800e04a:	b10e      	cbz	r6, 800e050 <_strtol_l.isra.0+0xec>
 800e04c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e050:	6011      	str	r1, [r2, #0]
 800e052:	e7f2      	b.n	800e03a <_strtol_l.isra.0+0xd6>
 800e054:	2430      	movs	r4, #48	; 0x30
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1b3      	bne.n	800dfc2 <_strtol_l.isra.0+0x5e>
 800e05a:	2308      	movs	r3, #8
 800e05c:	e7b1      	b.n	800dfc2 <_strtol_l.isra.0+0x5e>
 800e05e:	2c30      	cmp	r4, #48	; 0x30
 800e060:	d0a4      	beq.n	800dfac <_strtol_l.isra.0+0x48>
 800e062:	230a      	movs	r3, #10
 800e064:	e7ad      	b.n	800dfc2 <_strtol_l.isra.0+0x5e>
 800e066:	bf00      	nop
 800e068:	0800eaae 	.word	0x0800eaae

0800e06c <strtol>:
 800e06c:	4613      	mov	r3, r2
 800e06e:	460a      	mov	r2, r1
 800e070:	4601      	mov	r1, r0
 800e072:	4802      	ldr	r0, [pc, #8]	; (800e07c <strtol+0x10>)
 800e074:	6800      	ldr	r0, [r0, #0]
 800e076:	f7ff bf75 	b.w	800df64 <_strtol_l.isra.0>
 800e07a:	bf00      	nop
 800e07c:	2000051c 	.word	0x2000051c

0800e080 <__utoa>:
 800e080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e082:	4c1f      	ldr	r4, [pc, #124]	; (800e100 <__utoa+0x80>)
 800e084:	b08b      	sub	sp, #44	; 0x2c
 800e086:	4605      	mov	r5, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	466e      	mov	r6, sp
 800e08c:	f104 0c20 	add.w	ip, r4, #32
 800e090:	6820      	ldr	r0, [r4, #0]
 800e092:	6861      	ldr	r1, [r4, #4]
 800e094:	4637      	mov	r7, r6
 800e096:	c703      	stmia	r7!, {r0, r1}
 800e098:	3408      	adds	r4, #8
 800e09a:	4564      	cmp	r4, ip
 800e09c:	463e      	mov	r6, r7
 800e09e:	d1f7      	bne.n	800e090 <__utoa+0x10>
 800e0a0:	7921      	ldrb	r1, [r4, #4]
 800e0a2:	7139      	strb	r1, [r7, #4]
 800e0a4:	1e91      	subs	r1, r2, #2
 800e0a6:	6820      	ldr	r0, [r4, #0]
 800e0a8:	6038      	str	r0, [r7, #0]
 800e0aa:	2922      	cmp	r1, #34	; 0x22
 800e0ac:	f04f 0100 	mov.w	r1, #0
 800e0b0:	d904      	bls.n	800e0bc <__utoa+0x3c>
 800e0b2:	7019      	strb	r1, [r3, #0]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	b00b      	add	sp, #44	; 0x2c
 800e0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0bc:	1e58      	subs	r0, r3, #1
 800e0be:	4684      	mov	ip, r0
 800e0c0:	fbb5 f7f2 	udiv	r7, r5, r2
 800e0c4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e0c8:	fb02 5617 	mls	r6, r2, r7, r5
 800e0cc:	4476      	add	r6, lr
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e0d4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e0d8:	462e      	mov	r6, r5
 800e0da:	42b2      	cmp	r2, r6
 800e0dc:	f101 0101 	add.w	r1, r1, #1
 800e0e0:	463d      	mov	r5, r7
 800e0e2:	d9ed      	bls.n	800e0c0 <__utoa+0x40>
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	545a      	strb	r2, [r3, r1]
 800e0e8:	1919      	adds	r1, r3, r4
 800e0ea:	1aa5      	subs	r5, r4, r2
 800e0ec:	42aa      	cmp	r2, r5
 800e0ee:	dae2      	bge.n	800e0b6 <__utoa+0x36>
 800e0f0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e0f4:	780e      	ldrb	r6, [r1, #0]
 800e0f6:	7006      	strb	r6, [r0, #0]
 800e0f8:	3201      	adds	r2, #1
 800e0fa:	f801 5901 	strb.w	r5, [r1], #-1
 800e0fe:	e7f4      	b.n	800e0ea <__utoa+0x6a>
 800e100:	0800ea88 	.word	0x0800ea88

0800e104 <utoa>:
 800e104:	f7ff bfbc 	b.w	800e080 <__utoa>

0800e108 <_vsniprintf_r>:
 800e108:	b530      	push	{r4, r5, lr}
 800e10a:	1e14      	subs	r4, r2, #0
 800e10c:	4605      	mov	r5, r0
 800e10e:	b09b      	sub	sp, #108	; 0x6c
 800e110:	4618      	mov	r0, r3
 800e112:	da05      	bge.n	800e120 <_vsniprintf_r+0x18>
 800e114:	238b      	movs	r3, #139	; 0x8b
 800e116:	602b      	str	r3, [r5, #0]
 800e118:	f04f 30ff 	mov.w	r0, #4294967295
 800e11c:	b01b      	add	sp, #108	; 0x6c
 800e11e:	bd30      	pop	{r4, r5, pc}
 800e120:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e124:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e128:	bf14      	ite	ne
 800e12a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e12e:	4623      	moveq	r3, r4
 800e130:	9302      	str	r3, [sp, #8]
 800e132:	9305      	str	r3, [sp, #20]
 800e134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e138:	9100      	str	r1, [sp, #0]
 800e13a:	9104      	str	r1, [sp, #16]
 800e13c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e140:	4602      	mov	r2, r0
 800e142:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e144:	4669      	mov	r1, sp
 800e146:	4628      	mov	r0, r5
 800e148:	f000 f880 	bl	800e24c <_svfiprintf_r>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	bfbc      	itt	lt
 800e150:	238b      	movlt	r3, #139	; 0x8b
 800e152:	602b      	strlt	r3, [r5, #0]
 800e154:	2c00      	cmp	r4, #0
 800e156:	d0e1      	beq.n	800e11c <_vsniprintf_r+0x14>
 800e158:	9b00      	ldr	r3, [sp, #0]
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
 800e15e:	e7dd      	b.n	800e11c <_vsniprintf_r+0x14>

0800e160 <vsniprintf>:
 800e160:	b507      	push	{r0, r1, r2, lr}
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4613      	mov	r3, r2
 800e166:	460a      	mov	r2, r1
 800e168:	4601      	mov	r1, r0
 800e16a:	4803      	ldr	r0, [pc, #12]	; (800e178 <vsniprintf+0x18>)
 800e16c:	6800      	ldr	r0, [r0, #0]
 800e16e:	f7ff ffcb 	bl	800e108 <_vsniprintf_r>
 800e172:	b003      	add	sp, #12
 800e174:	f85d fb04 	ldr.w	pc, [sp], #4
 800e178:	2000051c 	.word	0x2000051c

0800e17c <__malloc_lock>:
 800e17c:	4801      	ldr	r0, [pc, #4]	; (800e184 <__malloc_lock+0x8>)
 800e17e:	f000 baf9 	b.w	800e774 <__retarget_lock_acquire_recursive>
 800e182:	bf00      	nop
 800e184:	20002454 	.word	0x20002454

0800e188 <__malloc_unlock>:
 800e188:	4801      	ldr	r0, [pc, #4]	; (800e190 <__malloc_unlock+0x8>)
 800e18a:	f000 baf4 	b.w	800e776 <__retarget_lock_release_recursive>
 800e18e:	bf00      	nop
 800e190:	20002454 	.word	0x20002454

0800e194 <__ssputs_r>:
 800e194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e198:	688e      	ldr	r6, [r1, #8]
 800e19a:	429e      	cmp	r6, r3
 800e19c:	4682      	mov	sl, r0
 800e19e:	460c      	mov	r4, r1
 800e1a0:	4690      	mov	r8, r2
 800e1a2:	461f      	mov	r7, r3
 800e1a4:	d838      	bhi.n	800e218 <__ssputs_r+0x84>
 800e1a6:	898a      	ldrh	r2, [r1, #12]
 800e1a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1ac:	d032      	beq.n	800e214 <__ssputs_r+0x80>
 800e1ae:	6825      	ldr	r5, [r4, #0]
 800e1b0:	6909      	ldr	r1, [r1, #16]
 800e1b2:	eba5 0901 	sub.w	r9, r5, r1
 800e1b6:	6965      	ldr	r5, [r4, #20]
 800e1b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	444b      	add	r3, r9
 800e1c4:	106d      	asrs	r5, r5, #1
 800e1c6:	429d      	cmp	r5, r3
 800e1c8:	bf38      	it	cc
 800e1ca:	461d      	movcc	r5, r3
 800e1cc:	0553      	lsls	r3, r2, #21
 800e1ce:	d531      	bpl.n	800e234 <__ssputs_r+0xa0>
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7ff fe29 	bl	800de28 <_malloc_r>
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	b950      	cbnz	r0, 800e1f0 <__ssputs_r+0x5c>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	f8ca 3000 	str.w	r3, [sl]
 800e1e0:	89a3      	ldrh	r3, [r4, #12]
 800e1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e6:	81a3      	strh	r3, [r4, #12]
 800e1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f0:	6921      	ldr	r1, [r4, #16]
 800e1f2:	464a      	mov	r2, r9
 800e1f4:	f7ff fdb2 	bl	800dd5c <memcpy>
 800e1f8:	89a3      	ldrh	r3, [r4, #12]
 800e1fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	6126      	str	r6, [r4, #16]
 800e206:	6165      	str	r5, [r4, #20]
 800e208:	444e      	add	r6, r9
 800e20a:	eba5 0509 	sub.w	r5, r5, r9
 800e20e:	6026      	str	r6, [r4, #0]
 800e210:	60a5      	str	r5, [r4, #8]
 800e212:	463e      	mov	r6, r7
 800e214:	42be      	cmp	r6, r7
 800e216:	d900      	bls.n	800e21a <__ssputs_r+0x86>
 800e218:	463e      	mov	r6, r7
 800e21a:	4632      	mov	r2, r6
 800e21c:	6820      	ldr	r0, [r4, #0]
 800e21e:	4641      	mov	r1, r8
 800e220:	f000 faaa 	bl	800e778 <memmove>
 800e224:	68a3      	ldr	r3, [r4, #8]
 800e226:	6822      	ldr	r2, [r4, #0]
 800e228:	1b9b      	subs	r3, r3, r6
 800e22a:	4432      	add	r2, r6
 800e22c:	60a3      	str	r3, [r4, #8]
 800e22e:	6022      	str	r2, [r4, #0]
 800e230:	2000      	movs	r0, #0
 800e232:	e7db      	b.n	800e1ec <__ssputs_r+0x58>
 800e234:	462a      	mov	r2, r5
 800e236:	f000 fab9 	bl	800e7ac <_realloc_r>
 800e23a:	4606      	mov	r6, r0
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d1e1      	bne.n	800e204 <__ssputs_r+0x70>
 800e240:	6921      	ldr	r1, [r4, #16]
 800e242:	4650      	mov	r0, sl
 800e244:	f7ff fda0 	bl	800dd88 <_free_r>
 800e248:	e7c7      	b.n	800e1da <__ssputs_r+0x46>
	...

0800e24c <_svfiprintf_r>:
 800e24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e250:	4698      	mov	r8, r3
 800e252:	898b      	ldrh	r3, [r1, #12]
 800e254:	061b      	lsls	r3, r3, #24
 800e256:	b09d      	sub	sp, #116	; 0x74
 800e258:	4607      	mov	r7, r0
 800e25a:	460d      	mov	r5, r1
 800e25c:	4614      	mov	r4, r2
 800e25e:	d50e      	bpl.n	800e27e <_svfiprintf_r+0x32>
 800e260:	690b      	ldr	r3, [r1, #16]
 800e262:	b963      	cbnz	r3, 800e27e <_svfiprintf_r+0x32>
 800e264:	2140      	movs	r1, #64	; 0x40
 800e266:	f7ff fddf 	bl	800de28 <_malloc_r>
 800e26a:	6028      	str	r0, [r5, #0]
 800e26c:	6128      	str	r0, [r5, #16]
 800e26e:	b920      	cbnz	r0, 800e27a <_svfiprintf_r+0x2e>
 800e270:	230c      	movs	r3, #12
 800e272:	603b      	str	r3, [r7, #0]
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
 800e278:	e0d1      	b.n	800e41e <_svfiprintf_r+0x1d2>
 800e27a:	2340      	movs	r3, #64	; 0x40
 800e27c:	616b      	str	r3, [r5, #20]
 800e27e:	2300      	movs	r3, #0
 800e280:	9309      	str	r3, [sp, #36]	; 0x24
 800e282:	2320      	movs	r3, #32
 800e284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e288:	f8cd 800c 	str.w	r8, [sp, #12]
 800e28c:	2330      	movs	r3, #48	; 0x30
 800e28e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e438 <_svfiprintf_r+0x1ec>
 800e292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e296:	f04f 0901 	mov.w	r9, #1
 800e29a:	4623      	mov	r3, r4
 800e29c:	469a      	mov	sl, r3
 800e29e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2a2:	b10a      	cbz	r2, 800e2a8 <_svfiprintf_r+0x5c>
 800e2a4:	2a25      	cmp	r2, #37	; 0x25
 800e2a6:	d1f9      	bne.n	800e29c <_svfiprintf_r+0x50>
 800e2a8:	ebba 0b04 	subs.w	fp, sl, r4
 800e2ac:	d00b      	beq.n	800e2c6 <_svfiprintf_r+0x7a>
 800e2ae:	465b      	mov	r3, fp
 800e2b0:	4622      	mov	r2, r4
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f7ff ff6d 	bl	800e194 <__ssputs_r>
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	f000 80aa 	beq.w	800e414 <_svfiprintf_r+0x1c8>
 800e2c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2c2:	445a      	add	r2, fp
 800e2c4:	9209      	str	r2, [sp, #36]	; 0x24
 800e2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80a2 	beq.w	800e414 <_svfiprintf_r+0x1c8>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2da:	f10a 0a01 	add.w	sl, sl, #1
 800e2de:	9304      	str	r3, [sp, #16]
 800e2e0:	9307      	str	r3, [sp, #28]
 800e2e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2e6:	931a      	str	r3, [sp, #104]	; 0x68
 800e2e8:	4654      	mov	r4, sl
 800e2ea:	2205      	movs	r2, #5
 800e2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f0:	4851      	ldr	r0, [pc, #324]	; (800e438 <_svfiprintf_r+0x1ec>)
 800e2f2:	f7f1 ff7d 	bl	80001f0 <memchr>
 800e2f6:	9a04      	ldr	r2, [sp, #16]
 800e2f8:	b9d8      	cbnz	r0, 800e332 <_svfiprintf_r+0xe6>
 800e2fa:	06d0      	lsls	r0, r2, #27
 800e2fc:	bf44      	itt	mi
 800e2fe:	2320      	movmi	r3, #32
 800e300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e304:	0711      	lsls	r1, r2, #28
 800e306:	bf44      	itt	mi
 800e308:	232b      	movmi	r3, #43	; 0x2b
 800e30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e30e:	f89a 3000 	ldrb.w	r3, [sl]
 800e312:	2b2a      	cmp	r3, #42	; 0x2a
 800e314:	d015      	beq.n	800e342 <_svfiprintf_r+0xf6>
 800e316:	9a07      	ldr	r2, [sp, #28]
 800e318:	4654      	mov	r4, sl
 800e31a:	2000      	movs	r0, #0
 800e31c:	f04f 0c0a 	mov.w	ip, #10
 800e320:	4621      	mov	r1, r4
 800e322:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e326:	3b30      	subs	r3, #48	; 0x30
 800e328:	2b09      	cmp	r3, #9
 800e32a:	d94e      	bls.n	800e3ca <_svfiprintf_r+0x17e>
 800e32c:	b1b0      	cbz	r0, 800e35c <_svfiprintf_r+0x110>
 800e32e:	9207      	str	r2, [sp, #28]
 800e330:	e014      	b.n	800e35c <_svfiprintf_r+0x110>
 800e332:	eba0 0308 	sub.w	r3, r0, r8
 800e336:	fa09 f303 	lsl.w	r3, r9, r3
 800e33a:	4313      	orrs	r3, r2
 800e33c:	9304      	str	r3, [sp, #16]
 800e33e:	46a2      	mov	sl, r4
 800e340:	e7d2      	b.n	800e2e8 <_svfiprintf_r+0x9c>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	1d19      	adds	r1, r3, #4
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	9103      	str	r1, [sp, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	bfbb      	ittet	lt
 800e34e:	425b      	neglt	r3, r3
 800e350:	f042 0202 	orrlt.w	r2, r2, #2
 800e354:	9307      	strge	r3, [sp, #28]
 800e356:	9307      	strlt	r3, [sp, #28]
 800e358:	bfb8      	it	lt
 800e35a:	9204      	strlt	r2, [sp, #16]
 800e35c:	7823      	ldrb	r3, [r4, #0]
 800e35e:	2b2e      	cmp	r3, #46	; 0x2e
 800e360:	d10c      	bne.n	800e37c <_svfiprintf_r+0x130>
 800e362:	7863      	ldrb	r3, [r4, #1]
 800e364:	2b2a      	cmp	r3, #42	; 0x2a
 800e366:	d135      	bne.n	800e3d4 <_svfiprintf_r+0x188>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	1d1a      	adds	r2, r3, #4
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	9203      	str	r2, [sp, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	bfb8      	it	lt
 800e374:	f04f 33ff 	movlt.w	r3, #4294967295
 800e378:	3402      	adds	r4, #2
 800e37a:	9305      	str	r3, [sp, #20]
 800e37c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e448 <_svfiprintf_r+0x1fc>
 800e380:	7821      	ldrb	r1, [r4, #0]
 800e382:	2203      	movs	r2, #3
 800e384:	4650      	mov	r0, sl
 800e386:	f7f1 ff33 	bl	80001f0 <memchr>
 800e38a:	b140      	cbz	r0, 800e39e <_svfiprintf_r+0x152>
 800e38c:	2340      	movs	r3, #64	; 0x40
 800e38e:	eba0 000a 	sub.w	r0, r0, sl
 800e392:	fa03 f000 	lsl.w	r0, r3, r0
 800e396:	9b04      	ldr	r3, [sp, #16]
 800e398:	4303      	orrs	r3, r0
 800e39a:	3401      	adds	r4, #1
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a2:	4826      	ldr	r0, [pc, #152]	; (800e43c <_svfiprintf_r+0x1f0>)
 800e3a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3a8:	2206      	movs	r2, #6
 800e3aa:	f7f1 ff21 	bl	80001f0 <memchr>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	d038      	beq.n	800e424 <_svfiprintf_r+0x1d8>
 800e3b2:	4b23      	ldr	r3, [pc, #140]	; (800e440 <_svfiprintf_r+0x1f4>)
 800e3b4:	bb1b      	cbnz	r3, 800e3fe <_svfiprintf_r+0x1b2>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	3307      	adds	r3, #7
 800e3ba:	f023 0307 	bic.w	r3, r3, #7
 800e3be:	3308      	adds	r3, #8
 800e3c0:	9303      	str	r3, [sp, #12]
 800e3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c4:	4433      	add	r3, r6
 800e3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c8:	e767      	b.n	800e29a <_svfiprintf_r+0x4e>
 800e3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	2001      	movs	r0, #1
 800e3d2:	e7a5      	b.n	800e320 <_svfiprintf_r+0xd4>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	3401      	adds	r4, #1
 800e3d8:	9305      	str	r3, [sp, #20]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	f04f 0c0a 	mov.w	ip, #10
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3e6:	3a30      	subs	r2, #48	; 0x30
 800e3e8:	2a09      	cmp	r2, #9
 800e3ea:	d903      	bls.n	800e3f4 <_svfiprintf_r+0x1a8>
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d0c5      	beq.n	800e37c <_svfiprintf_r+0x130>
 800e3f0:	9105      	str	r1, [sp, #20]
 800e3f2:	e7c3      	b.n	800e37c <_svfiprintf_r+0x130>
 800e3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e7f0      	b.n	800e3e0 <_svfiprintf_r+0x194>
 800e3fe:	ab03      	add	r3, sp, #12
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	462a      	mov	r2, r5
 800e404:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <_svfiprintf_r+0x1f8>)
 800e406:	a904      	add	r1, sp, #16
 800e408:	4638      	mov	r0, r7
 800e40a:	f3af 8000 	nop.w
 800e40e:	1c42      	adds	r2, r0, #1
 800e410:	4606      	mov	r6, r0
 800e412:	d1d6      	bne.n	800e3c2 <_svfiprintf_r+0x176>
 800e414:	89ab      	ldrh	r3, [r5, #12]
 800e416:	065b      	lsls	r3, r3, #25
 800e418:	f53f af2c 	bmi.w	800e274 <_svfiprintf_r+0x28>
 800e41c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e41e:	b01d      	add	sp, #116	; 0x74
 800e420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e424:	ab03      	add	r3, sp, #12
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	462a      	mov	r2, r5
 800e42a:	4b06      	ldr	r3, [pc, #24]	; (800e444 <_svfiprintf_r+0x1f8>)
 800e42c:	a904      	add	r1, sp, #16
 800e42e:	4638      	mov	r0, r7
 800e430:	f000 f87a 	bl	800e528 <_printf_i>
 800e434:	e7eb      	b.n	800e40e <_svfiprintf_r+0x1c2>
 800e436:	bf00      	nop
 800e438:	0800ebae 	.word	0x0800ebae
 800e43c:	0800ebb8 	.word	0x0800ebb8
 800e440:	00000000 	.word	0x00000000
 800e444:	0800e195 	.word	0x0800e195
 800e448:	0800ebb4 	.word	0x0800ebb4

0800e44c <_printf_common>:
 800e44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	4616      	mov	r6, r2
 800e452:	4699      	mov	r9, r3
 800e454:	688a      	ldr	r2, [r1, #8]
 800e456:	690b      	ldr	r3, [r1, #16]
 800e458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e45c:	4293      	cmp	r3, r2
 800e45e:	bfb8      	it	lt
 800e460:	4613      	movlt	r3, r2
 800e462:	6033      	str	r3, [r6, #0]
 800e464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e468:	4607      	mov	r7, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	b10a      	cbz	r2, 800e472 <_printf_common+0x26>
 800e46e:	3301      	adds	r3, #1
 800e470:	6033      	str	r3, [r6, #0]
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	0699      	lsls	r1, r3, #26
 800e476:	bf42      	ittt	mi
 800e478:	6833      	ldrmi	r3, [r6, #0]
 800e47a:	3302      	addmi	r3, #2
 800e47c:	6033      	strmi	r3, [r6, #0]
 800e47e:	6825      	ldr	r5, [r4, #0]
 800e480:	f015 0506 	ands.w	r5, r5, #6
 800e484:	d106      	bne.n	800e494 <_printf_common+0x48>
 800e486:	f104 0a19 	add.w	sl, r4, #25
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	6832      	ldr	r2, [r6, #0]
 800e48e:	1a9b      	subs	r3, r3, r2
 800e490:	42ab      	cmp	r3, r5
 800e492:	dc26      	bgt.n	800e4e2 <_printf_common+0x96>
 800e494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e498:	1e13      	subs	r3, r2, #0
 800e49a:	6822      	ldr	r2, [r4, #0]
 800e49c:	bf18      	it	ne
 800e49e:	2301      	movne	r3, #1
 800e4a0:	0692      	lsls	r2, r2, #26
 800e4a2:	d42b      	bmi.n	800e4fc <_printf_common+0xb0>
 800e4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	47c0      	blx	r8
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d01e      	beq.n	800e4f0 <_printf_common+0xa4>
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	68e5      	ldr	r5, [r4, #12]
 800e4b6:	6832      	ldr	r2, [r6, #0]
 800e4b8:	f003 0306 	and.w	r3, r3, #6
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	bf08      	it	eq
 800e4c0:	1aad      	subeq	r5, r5, r2
 800e4c2:	68a3      	ldr	r3, [r4, #8]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	bf0c      	ite	eq
 800e4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4cc:	2500      	movne	r5, #0
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	bfc4      	itt	gt
 800e4d2:	1a9b      	subgt	r3, r3, r2
 800e4d4:	18ed      	addgt	r5, r5, r3
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	341a      	adds	r4, #26
 800e4da:	42b5      	cmp	r5, r6
 800e4dc:	d11a      	bne.n	800e514 <_printf_common+0xc8>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e008      	b.n	800e4f4 <_printf_common+0xa8>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4652      	mov	r2, sl
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	47c0      	blx	r8
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d103      	bne.n	800e4f8 <_printf_common+0xac>
 800e4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f8:	3501      	adds	r5, #1
 800e4fa:	e7c6      	b.n	800e48a <_printf_common+0x3e>
 800e4fc:	18e1      	adds	r1, r4, r3
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	2030      	movs	r0, #48	; 0x30
 800e502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e506:	4422      	add	r2, r4
 800e508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e510:	3302      	adds	r3, #2
 800e512:	e7c7      	b.n	800e4a4 <_printf_common+0x58>
 800e514:	2301      	movs	r3, #1
 800e516:	4622      	mov	r2, r4
 800e518:	4649      	mov	r1, r9
 800e51a:	4638      	mov	r0, r7
 800e51c:	47c0      	blx	r8
 800e51e:	3001      	adds	r0, #1
 800e520:	d0e6      	beq.n	800e4f0 <_printf_common+0xa4>
 800e522:	3601      	adds	r6, #1
 800e524:	e7d9      	b.n	800e4da <_printf_common+0x8e>
	...

0800e528 <_printf_i>:
 800e528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e52c:	460c      	mov	r4, r1
 800e52e:	4691      	mov	r9, r2
 800e530:	7e27      	ldrb	r7, [r4, #24]
 800e532:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e534:	2f78      	cmp	r7, #120	; 0x78
 800e536:	4680      	mov	r8, r0
 800e538:	469a      	mov	sl, r3
 800e53a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e53e:	d807      	bhi.n	800e550 <_printf_i+0x28>
 800e540:	2f62      	cmp	r7, #98	; 0x62
 800e542:	d80a      	bhi.n	800e55a <_printf_i+0x32>
 800e544:	2f00      	cmp	r7, #0
 800e546:	f000 80d8 	beq.w	800e6fa <_printf_i+0x1d2>
 800e54a:	2f58      	cmp	r7, #88	; 0x58
 800e54c:	f000 80a3 	beq.w	800e696 <_printf_i+0x16e>
 800e550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e558:	e03a      	b.n	800e5d0 <_printf_i+0xa8>
 800e55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e55e:	2b15      	cmp	r3, #21
 800e560:	d8f6      	bhi.n	800e550 <_printf_i+0x28>
 800e562:	a001      	add	r0, pc, #4	; (adr r0, 800e568 <_printf_i+0x40>)
 800e564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5d5 	.word	0x0800e5d5
 800e570:	0800e551 	.word	0x0800e551
 800e574:	0800e551 	.word	0x0800e551
 800e578:	0800e551 	.word	0x0800e551
 800e57c:	0800e551 	.word	0x0800e551
 800e580:	0800e5d5 	.word	0x0800e5d5
 800e584:	0800e551 	.word	0x0800e551
 800e588:	0800e551 	.word	0x0800e551
 800e58c:	0800e551 	.word	0x0800e551
 800e590:	0800e551 	.word	0x0800e551
 800e594:	0800e6e1 	.word	0x0800e6e1
 800e598:	0800e605 	.word	0x0800e605
 800e59c:	0800e6c3 	.word	0x0800e6c3
 800e5a0:	0800e551 	.word	0x0800e551
 800e5a4:	0800e551 	.word	0x0800e551
 800e5a8:	0800e703 	.word	0x0800e703
 800e5ac:	0800e551 	.word	0x0800e551
 800e5b0:	0800e605 	.word	0x0800e605
 800e5b4:	0800e551 	.word	0x0800e551
 800e5b8:	0800e551 	.word	0x0800e551
 800e5bc:	0800e6cb 	.word	0x0800e6cb
 800e5c0:	680b      	ldr	r3, [r1, #0]
 800e5c2:	1d1a      	adds	r2, r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	600a      	str	r2, [r1, #0]
 800e5c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e0a3      	b.n	800e71c <_printf_i+0x1f4>
 800e5d4:	6825      	ldr	r5, [r4, #0]
 800e5d6:	6808      	ldr	r0, [r1, #0]
 800e5d8:	062e      	lsls	r6, r5, #24
 800e5da:	f100 0304 	add.w	r3, r0, #4
 800e5de:	d50a      	bpl.n	800e5f6 <_printf_i+0xce>
 800e5e0:	6805      	ldr	r5, [r0, #0]
 800e5e2:	600b      	str	r3, [r1, #0]
 800e5e4:	2d00      	cmp	r5, #0
 800e5e6:	da03      	bge.n	800e5f0 <_printf_i+0xc8>
 800e5e8:	232d      	movs	r3, #45	; 0x2d
 800e5ea:	426d      	negs	r5, r5
 800e5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5f0:	485e      	ldr	r0, [pc, #376]	; (800e76c <_printf_i+0x244>)
 800e5f2:	230a      	movs	r3, #10
 800e5f4:	e019      	b.n	800e62a <_printf_i+0x102>
 800e5f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e5fa:	6805      	ldr	r5, [r0, #0]
 800e5fc:	600b      	str	r3, [r1, #0]
 800e5fe:	bf18      	it	ne
 800e600:	b22d      	sxthne	r5, r5
 800e602:	e7ef      	b.n	800e5e4 <_printf_i+0xbc>
 800e604:	680b      	ldr	r3, [r1, #0]
 800e606:	6825      	ldr	r5, [r4, #0]
 800e608:	1d18      	adds	r0, r3, #4
 800e60a:	6008      	str	r0, [r1, #0]
 800e60c:	0628      	lsls	r0, r5, #24
 800e60e:	d501      	bpl.n	800e614 <_printf_i+0xec>
 800e610:	681d      	ldr	r5, [r3, #0]
 800e612:	e002      	b.n	800e61a <_printf_i+0xf2>
 800e614:	0669      	lsls	r1, r5, #25
 800e616:	d5fb      	bpl.n	800e610 <_printf_i+0xe8>
 800e618:	881d      	ldrh	r5, [r3, #0]
 800e61a:	4854      	ldr	r0, [pc, #336]	; (800e76c <_printf_i+0x244>)
 800e61c:	2f6f      	cmp	r7, #111	; 0x6f
 800e61e:	bf0c      	ite	eq
 800e620:	2308      	moveq	r3, #8
 800e622:	230a      	movne	r3, #10
 800e624:	2100      	movs	r1, #0
 800e626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e62a:	6866      	ldr	r6, [r4, #4]
 800e62c:	60a6      	str	r6, [r4, #8]
 800e62e:	2e00      	cmp	r6, #0
 800e630:	bfa2      	ittt	ge
 800e632:	6821      	ldrge	r1, [r4, #0]
 800e634:	f021 0104 	bicge.w	r1, r1, #4
 800e638:	6021      	strge	r1, [r4, #0]
 800e63a:	b90d      	cbnz	r5, 800e640 <_printf_i+0x118>
 800e63c:	2e00      	cmp	r6, #0
 800e63e:	d04d      	beq.n	800e6dc <_printf_i+0x1b4>
 800e640:	4616      	mov	r6, r2
 800e642:	fbb5 f1f3 	udiv	r1, r5, r3
 800e646:	fb03 5711 	mls	r7, r3, r1, r5
 800e64a:	5dc7      	ldrb	r7, [r0, r7]
 800e64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e650:	462f      	mov	r7, r5
 800e652:	42bb      	cmp	r3, r7
 800e654:	460d      	mov	r5, r1
 800e656:	d9f4      	bls.n	800e642 <_printf_i+0x11a>
 800e658:	2b08      	cmp	r3, #8
 800e65a:	d10b      	bne.n	800e674 <_printf_i+0x14c>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	07df      	lsls	r7, r3, #31
 800e660:	d508      	bpl.n	800e674 <_printf_i+0x14c>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	6861      	ldr	r1, [r4, #4]
 800e666:	4299      	cmp	r1, r3
 800e668:	bfde      	ittt	le
 800e66a:	2330      	movle	r3, #48	; 0x30
 800e66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e670:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e674:	1b92      	subs	r2, r2, r6
 800e676:	6122      	str	r2, [r4, #16]
 800e678:	f8cd a000 	str.w	sl, [sp]
 800e67c:	464b      	mov	r3, r9
 800e67e:	aa03      	add	r2, sp, #12
 800e680:	4621      	mov	r1, r4
 800e682:	4640      	mov	r0, r8
 800e684:	f7ff fee2 	bl	800e44c <_printf_common>
 800e688:	3001      	adds	r0, #1
 800e68a:	d14c      	bne.n	800e726 <_printf_i+0x1fe>
 800e68c:	f04f 30ff 	mov.w	r0, #4294967295
 800e690:	b004      	add	sp, #16
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	4835      	ldr	r0, [pc, #212]	; (800e76c <_printf_i+0x244>)
 800e698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	680e      	ldr	r6, [r1, #0]
 800e6a0:	061f      	lsls	r7, r3, #24
 800e6a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e6a6:	600e      	str	r6, [r1, #0]
 800e6a8:	d514      	bpl.n	800e6d4 <_printf_i+0x1ac>
 800e6aa:	07d9      	lsls	r1, r3, #31
 800e6ac:	bf44      	itt	mi
 800e6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e6b2:	6023      	strmi	r3, [r4, #0]
 800e6b4:	b91d      	cbnz	r5, 800e6be <_printf_i+0x196>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	f023 0320 	bic.w	r3, r3, #32
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2310      	movs	r3, #16
 800e6c0:	e7b0      	b.n	800e624 <_printf_i+0xfc>
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f043 0320 	orr.w	r3, r3, #32
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	2378      	movs	r3, #120	; 0x78
 800e6cc:	4828      	ldr	r0, [pc, #160]	; (800e770 <_printf_i+0x248>)
 800e6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6d2:	e7e3      	b.n	800e69c <_printf_i+0x174>
 800e6d4:	065e      	lsls	r6, r3, #25
 800e6d6:	bf48      	it	mi
 800e6d8:	b2ad      	uxthmi	r5, r5
 800e6da:	e7e6      	b.n	800e6aa <_printf_i+0x182>
 800e6dc:	4616      	mov	r6, r2
 800e6de:	e7bb      	b.n	800e658 <_printf_i+0x130>
 800e6e0:	680b      	ldr	r3, [r1, #0]
 800e6e2:	6826      	ldr	r6, [r4, #0]
 800e6e4:	6960      	ldr	r0, [r4, #20]
 800e6e6:	1d1d      	adds	r5, r3, #4
 800e6e8:	600d      	str	r5, [r1, #0]
 800e6ea:	0635      	lsls	r5, r6, #24
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	d501      	bpl.n	800e6f4 <_printf_i+0x1cc>
 800e6f0:	6018      	str	r0, [r3, #0]
 800e6f2:	e002      	b.n	800e6fa <_printf_i+0x1d2>
 800e6f4:	0671      	lsls	r1, r6, #25
 800e6f6:	d5fb      	bpl.n	800e6f0 <_printf_i+0x1c8>
 800e6f8:	8018      	strh	r0, [r3, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	4616      	mov	r6, r2
 800e700:	e7ba      	b.n	800e678 <_printf_i+0x150>
 800e702:	680b      	ldr	r3, [r1, #0]
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	600a      	str	r2, [r1, #0]
 800e708:	681e      	ldr	r6, [r3, #0]
 800e70a:	6862      	ldr	r2, [r4, #4]
 800e70c:	2100      	movs	r1, #0
 800e70e:	4630      	mov	r0, r6
 800e710:	f7f1 fd6e 	bl	80001f0 <memchr>
 800e714:	b108      	cbz	r0, 800e71a <_printf_i+0x1f2>
 800e716:	1b80      	subs	r0, r0, r6
 800e718:	6060      	str	r0, [r4, #4]
 800e71a:	6863      	ldr	r3, [r4, #4]
 800e71c:	6123      	str	r3, [r4, #16]
 800e71e:	2300      	movs	r3, #0
 800e720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e724:	e7a8      	b.n	800e678 <_printf_i+0x150>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	4632      	mov	r2, r6
 800e72a:	4649      	mov	r1, r9
 800e72c:	4640      	mov	r0, r8
 800e72e:	47d0      	blx	sl
 800e730:	3001      	adds	r0, #1
 800e732:	d0ab      	beq.n	800e68c <_printf_i+0x164>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	079b      	lsls	r3, r3, #30
 800e738:	d413      	bmi.n	800e762 <_printf_i+0x23a>
 800e73a:	68e0      	ldr	r0, [r4, #12]
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	4298      	cmp	r0, r3
 800e740:	bfb8      	it	lt
 800e742:	4618      	movlt	r0, r3
 800e744:	e7a4      	b.n	800e690 <_printf_i+0x168>
 800e746:	2301      	movs	r3, #1
 800e748:	4632      	mov	r2, r6
 800e74a:	4649      	mov	r1, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	47d0      	blx	sl
 800e750:	3001      	adds	r0, #1
 800e752:	d09b      	beq.n	800e68c <_printf_i+0x164>
 800e754:	3501      	adds	r5, #1
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	9903      	ldr	r1, [sp, #12]
 800e75a:	1a5b      	subs	r3, r3, r1
 800e75c:	42ab      	cmp	r3, r5
 800e75e:	dcf2      	bgt.n	800e746 <_printf_i+0x21e>
 800e760:	e7eb      	b.n	800e73a <_printf_i+0x212>
 800e762:	2500      	movs	r5, #0
 800e764:	f104 0619 	add.w	r6, r4, #25
 800e768:	e7f5      	b.n	800e756 <_printf_i+0x22e>
 800e76a:	bf00      	nop
 800e76c:	0800ebbf 	.word	0x0800ebbf
 800e770:	0800ebd0 	.word	0x0800ebd0

0800e774 <__retarget_lock_acquire_recursive>:
 800e774:	4770      	bx	lr

0800e776 <__retarget_lock_release_recursive>:
 800e776:	4770      	bx	lr

0800e778 <memmove>:
 800e778:	4288      	cmp	r0, r1
 800e77a:	b510      	push	{r4, lr}
 800e77c:	eb01 0402 	add.w	r4, r1, r2
 800e780:	d902      	bls.n	800e788 <memmove+0x10>
 800e782:	4284      	cmp	r4, r0
 800e784:	4623      	mov	r3, r4
 800e786:	d807      	bhi.n	800e798 <memmove+0x20>
 800e788:	1e43      	subs	r3, r0, #1
 800e78a:	42a1      	cmp	r1, r4
 800e78c:	d008      	beq.n	800e7a0 <memmove+0x28>
 800e78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e796:	e7f8      	b.n	800e78a <memmove+0x12>
 800e798:	4402      	add	r2, r0
 800e79a:	4601      	mov	r1, r0
 800e79c:	428a      	cmp	r2, r1
 800e79e:	d100      	bne.n	800e7a2 <memmove+0x2a>
 800e7a0:	bd10      	pop	{r4, pc}
 800e7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7aa:	e7f7      	b.n	800e79c <memmove+0x24>

0800e7ac <_realloc_r>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	4614      	mov	r4, r2
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	b921      	cbnz	r1, 800e7c0 <_realloc_r+0x14>
 800e7b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	f7ff bb34 	b.w	800de28 <_malloc_r>
 800e7c0:	b922      	cbnz	r2, 800e7cc <_realloc_r+0x20>
 800e7c2:	f7ff fae1 	bl	800dd88 <_free_r>
 800e7c6:	4625      	mov	r5, r4
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7cc:	f000 f814 	bl	800e7f8 <_malloc_usable_size_r>
 800e7d0:	42a0      	cmp	r0, r4
 800e7d2:	d20f      	bcs.n	800e7f4 <_realloc_r+0x48>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	f7ff fb26 	bl	800de28 <_malloc_r>
 800e7dc:	4605      	mov	r5, r0
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d0f2      	beq.n	800e7c8 <_realloc_r+0x1c>
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4622      	mov	r2, r4
 800e7e6:	f7ff fab9 	bl	800dd5c <memcpy>
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	f7ff facb 	bl	800dd88 <_free_r>
 800e7f2:	e7e9      	b.n	800e7c8 <_realloc_r+0x1c>
 800e7f4:	4635      	mov	r5, r6
 800e7f6:	e7e7      	b.n	800e7c8 <_realloc_r+0x1c>

0800e7f8 <_malloc_usable_size_r>:
 800e7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7fc:	1f18      	subs	r0, r3, #4
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfbc      	itt	lt
 800e802:	580b      	ldrlt	r3, [r1, r0]
 800e804:	18c0      	addlt	r0, r0, r3
 800e806:	4770      	bx	lr

0800e808 <_init>:
 800e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80a:	bf00      	nop
 800e80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80e:	bc08      	pop	{r3}
 800e810:	469e      	mov	lr, r3
 800e812:	4770      	bx	lr

0800e814 <_fini>:
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	bf00      	nop
 800e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81a:	bc08      	pop	{r3}
 800e81c:	469e      	mov	lr, r3
 800e81e:	4770      	bx	lr
