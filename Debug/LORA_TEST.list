
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a490  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a758  0800a758  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800a758  0800a758  0001a758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a760  0800a760  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800a768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d90  20000248  0800a9b0  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  0800a9b0  00021fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243f3  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbf  00000000  00000000  0004466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00049230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  0004aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cab6  00000000  00000000  0004c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc57  00000000  00000000  00068c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf6f  00000000  00000000  000888ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012585c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  001258b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a618 	.word	0x0800a618

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800a618 	.word	0x0800a618

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <digitalToggle>:
{
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	463b      	mov	r3, r7
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f8c1 	bl	8002722 <HAL_GPIO_TogglePin>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <ftoa>:
	sprintf(buff, "%02X%02X%02X%02X%02X%02X", uid.b[11], uid.b[10] + uid.b[2], uid.b[9], uid.b[8] + uid.b[0], uid.b[7], uid.b[6]);
	return buff;
}

char* ftoa(float f, char * buf, int precision)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80005b2:	60b8      	str	r0, [r7, #8]
 80005b4:	6079      	str	r1, [r7, #4]
	char * ptr = buf;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;
	if (precision > MAX_PRECISION)		// check precision bounds
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	dd01      	ble.n	80005c8 <ftoa+0x20>
		precision = MAX_PRECISION;
 80005c4:	2304      	movs	r3, #4
 80005c6:	607b      	str	r3, [r7, #4]
	if (f < 0) {		// sign stuff
 80005c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80005cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	d50a      	bpl.n	80005ec <ftoa+0x44>
		f = -f;
 80005d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a03 	vstr	s15, [r7, #12]
		*ptr++ = '-';
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	627a      	str	r2, [r7, #36]	; 0x24
 80005e8:	222d      	movs	r2, #45	; 0x2d
 80005ea:	701a      	strb	r2, [r3, #0]
	}
	if (precision < 0) {  // negative precision == automatic precision guess
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da31      	bge.n	8000656 <ftoa+0xae>
		if (f < 1.0) precision = 4;
 80005f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	d502      	bpl.n	800060a <ftoa+0x62>
 8000604:	2304      	movs	r3, #4
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	e025      	b.n	8000656 <ftoa+0xae>
		else if (f < 10.0) precision = 3;
 800060a:	edd7 7a03 	vldr	s15, [r7, #12]
 800060e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061a:	d502      	bpl.n	8000622 <ftoa+0x7a>
 800061c:	2303      	movs	r3, #3
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	e019      	b.n	8000656 <ftoa+0xae>
		else if (f < 100.0) precision = 2;
 8000622:	edd7 7a03 	vldr	s15, [r7, #12]
 8000626:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000790 <ftoa+0x1e8>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	d502      	bpl.n	800063a <ftoa+0x92>
 8000634:	2302      	movs	r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	e00d      	b.n	8000656 <ftoa+0xae>
		else if (f < 1000.0) precision = 1;
 800063a:	edd7 7a03 	vldr	s15, [r7, #12]
 800063e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000794 <ftoa+0x1ec>
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d502      	bpl.n	8000652 <ftoa+0xaa>
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e001      	b.n	8000656 <ftoa+0xae>
		else precision = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
	}
	if (precision)  	// round value according the precision
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <ftoa+0xcc>
		f += rounders[precision];
 800065c:	4a4e      	ldr	r2, [pc, #312]	; (8000798 <ftoa+0x1f0>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	edd3 7a00 	vldr	s15, [r3]
 8000668:	ed97 7a03 	vldr	s14, [r7, #12]
 800066c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000670:	edc7 7a03 	vstr	s15, [r7, #12]
	// integer part...
	intPart = f;
 8000674:	edd7 7a03 	vldr	s15, [r7, #12]
 8000678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800067c:	ee17 3a90 	vmov	r3, s15
 8000680:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
	if (!intPart)
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <ftoa+0x102>
		*ptr++ = '0';
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	627a      	str	r2, [r7, #36]	; 0x24
 80006a4:	2230      	movs	r2, #48	; 0x30
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e038      	b.n	800071c <ftoa+0x174>
	else
	{
		p = ptr;	// save start pointer
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	623b      	str	r3, [r7, #32]
		while (intPart) { // convert (reverse order)
 80006ae:	e01a      	b.n	80006e6 <ftoa+0x13e>
			*p++ = '0' + intPart % 10;
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	4b3a      	ldr	r3, [pc, #232]	; (800079c <ftoa+0x1f4>)
 80006b4:	fb83 1302 	smull	r1, r3, r3, r2
 80006b8:	1099      	asrs	r1, r3, #2
 80006ba:	17d3      	asrs	r3, r2, #31
 80006bc:	1ac9      	subs	r1, r1, r3
 80006be:	460b      	mov	r3, r1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	1ad1      	subs	r1, r2, r3
 80006c8:	b2ca      	uxtb	r2, r1
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	1c59      	adds	r1, r3, #1
 80006ce:	6239      	str	r1, [r7, #32]
 80006d0:	3230      	adds	r2, #48	; 0x30
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	4a30      	ldr	r2, [pc, #192]	; (800079c <ftoa+0x1f4>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1092      	asrs	r2, r2, #2
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	61fb      	str	r3, [r7, #28]
		while (intPart) { // convert (reverse order)
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1e1      	bne.n	80006b0 <ftoa+0x108>
		}
		p1 = p;  // save end pos
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	61bb      	str	r3, [r7, #24]
		while (p > ptr)	{ // reverse result
 80006f0:	e00e      	b.n	8000710 <ftoa+0x168>
			c = *--p;
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	627a      	str	r2, [r7, #36]	; 0x24
 800070c:	7dfa      	ldrb	r2, [r7, #23]
 800070e:	701a      	strb	r2, [r3, #0]
		while (p > ptr)	{ // reverse result
 8000710:	6a3a      	ldr	r2, [r7, #32]
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	429a      	cmp	r2, r3
 8000716:	d8ec      	bhi.n	80006f2 <ftoa+0x14a>
		}
		ptr = p1;	// restore end pos
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (precision) {	// decimal part
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d02c      	beq.n	800077c <ftoa+0x1d4>
		*ptr++ = '.';	// place decimal point
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	627a      	str	r2, [r7, #36]	; 0x24
 8000728:	222e      	movs	r2, #46	; 0x2e
 800072a:	701a      	strb	r2, [r3, #0]
		while (precision--)	 { // convert
 800072c:	e021      	b.n	8000772 <ftoa+0x1ca>
			f *= 10.0;
 800072e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000732:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073a:	edc7 7a03 	vstr	s15, [r7, #12]
			c = f;
 800073e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000746:	edc7 7a00 	vstr	s15, [r7]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	627a      	str	r2, [r7, #36]	; 0x24
 8000754:	7dfa      	ldrb	r2, [r7, #23]
 8000756:	3230      	adds	r2, #48	; 0x30
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	701a      	strb	r2, [r3, #0]
			f -= c;
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000766:	ed97 7a03 	vldr	s14, [r7, #12]
 800076a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076e:	edc7 7a03 	vstr	s15, [r7, #12]
		while (precision--)	 { // convert
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d8      	bne.n	800072e <ftoa+0x186>
		}
	}
	*ptr = 0;	// terminating zero
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	return buf;
 8000782:	68bb      	ldr	r3, [r7, #8]
}
 8000784:	4618      	mov	r0, r3
 8000786:	372c      	adds	r7, #44	; 0x2c
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	42c80000 	.word	0x42c80000
 8000794:	447a0000 	.word	0x447a0000
 8000798:	0800a6f8 	.word	0x0800a6f8
 800079c:	66666667 	.word	0x66666667

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b0ab      	sub	sp, #172	; 0xac
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f001 fc5f 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f8e5 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 fa33 	bl	8000c18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 fa07 	bl	8000bc4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007b6:	f000 f9b5 	bl	8000b24 <MX_TIM1_Init>
  MX_RTC_Init();
 80007ba:	f000 f98d 	bl	8000ad8 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80007be:	f008 fc95 	bl	80090ec <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80007c2:	f000 f95b 	bl	8000a7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 80007c6:	4a5e      	ldr	r2, [pc, #376]	; (8000940 <main+0x1a0>)
 80007c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d0:	6018      	str	r0, [r3, #0]
 80007d2:	3304      	adds	r3, #4
 80007d4:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 80007d6:	4a5b      	ldr	r2, [pc, #364]	; (8000944 <main+0x1a4>)
 80007d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e0:	6018      	str	r0, [r3, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 80007e6:	4a58      	ldr	r2, [pc, #352]	; (8000948 <main+0x1a8>)
 80007e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  USBSerial.begin();
 80007f6:	4b55      	ldr	r3, [pc, #340]	; (800094c <main+0x1ac>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4798      	blx	r3
  delay_microsInit();
 80007fc:	f000 fe7c 	bl	80014f8 <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 8000800:	4b53      	ldr	r3, [pc, #332]	; (8000950 <main+0x1b0>)
 8000802:	4a54      	ldr	r2, [pc, #336]	; (8000954 <main+0x1b4>)
 8000804:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 8000806:	4b52      	ldr	r3, [pc, #328]	; (8000950 <main+0x1b0>)
 8000808:	685c      	ldr	r4, [r3, #4]
 800080a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800080e:	2319      	movs	r3, #25
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000816:	f8ad 3000 	strh.w	r3, [sp]
 800081a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800081e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000822:	ca06      	ldmia	r2, {r1, r2}
 8000824:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);

  AHT10.halt = HAL_Delay;
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <main+0x1b8>)
 8000828:	4a4c      	ldr	r2, [pc, #304]	; (800095c <main+0x1bc>)
 800082a:	601a      	str	r2, [r3, #0]
  AHT10.getTick = HAL_GetTick;
 800082c:	4b4a      	ldr	r3, [pc, #296]	; (8000958 <main+0x1b8>)
 800082e:	4a4c      	ldr	r2, [pc, #304]	; (8000960 <main+0x1c0>)
 8000830:	605a      	str	r2, [r3, #4]
  AHT10_var AHT1;
  AHT10.begin(&AHT1, &hi2c1,0x38);
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <main+0x1b8>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800083a:	2238      	movs	r2, #56	; 0x38
 800083c:	4949      	ldr	r1, [pc, #292]	; (8000964 <main+0x1c4>)
 800083e:	4798      	blx	r3
  char txt[20]="halloooo \n";
 8000840:	4a49      	ldr	r2, [pc, #292]	; (8000968 <main+0x1c8>)
 8000842:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000846:	ca07      	ldmia	r2, {r0, r1, r2}
 8000848:	c303      	stmia	r3!, {r0, r1}
 800084a:	801a      	strh	r2, [r3, #0]
 800084c:	3302      	adds	r3, #2
 800084e:	0c12      	lsrs	r2, r2, #16
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( USBSerial.peek() >= USB_OTG_FS_MAX_PACKET_SIZE )
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <main+0x1ac>)
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	4798      	blx	r3
 8000864:	4603      	mov	r3, r0
 8000866:	2b3f      	cmp	r3, #63	; 0x3f
 8000868:	d902      	bls.n	8000870 <main+0xd0>
	  	  USBSerial.flush();
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <main+0x1ac>)
 800086c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086e:	4798      	blx	r3
//	  USBSerial.puts((uint8_t*)txt,strlen(txt));
	  int press_adc = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
	  if ( HX710B.read(&pressure_sensor1,&press_adc, 1000) == HX710B_OK )
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <main+0x1b0>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	f107 0110 	add.w	r1, r7, #16
 800087c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	4798      	blx	r3
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d113      	bne.n	80008b4 <main+0x114>
	  {
//		  uint32_t press_offset = 7240000;
		  sprintf(tmp,"value sensor = %i \n\r",press_adc);
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4936      	ldr	r1, [pc, #216]	; (800096c <main+0x1cc>)
 8000894:	4618      	mov	r0, r3
 8000896:	f009 fb59 	bl	8009f4c <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <main+0x1ac>)
 800089c:	691c      	ldr	r4, [r3, #16]
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc9c 	bl	80001e0 <strlen>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	47a0      	blx	r4
//		  float scale = press_adc * (-0.000018);
//		  sprintf(tmp,"voltage = %i \n\r",scale*1E+6);
//		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }

	  if( AHT10.getEvent(&AHT1, 100UL) == AHT10_OK )
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <main+0x1b8>)
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008bc:	2164      	movs	r1, #100	; 0x64
 80008be:	4610      	mov	r0, r2
 80008c0:	4798      	blx	r3
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <main+0x188>
	  {
		  sprintf(tmp,"AHT ada \n\r");
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4928      	ldr	r1, [pc, #160]	; (8000970 <main+0x1d0>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f009 fb3c 	bl	8009f4c <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <main+0x1ac>)
 80008d6:	691c      	ldr	r4, [r3, #16]
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc7f 	bl	80001e0 <strlen>
 80008e2:	4602      	mov	r2, r0
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	47a0      	blx	r4
		  char val[10];
		  sprintf(tmp, "temperature %s", ftoa(AHT1.temperature, val, 3));
 80008ee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2103      	movs	r1, #3
 80008f6:	4618      	mov	r0, r3
 80008f8:	eeb0 0a67 	vmov.f32	s0, s15
 80008fc:	f7ff fe54 	bl	80005a8 <ftoa>
 8000900:	4602      	mov	r2, r0
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	491b      	ldr	r1, [pc, #108]	; (8000974 <main+0x1d4>)
 8000908:	4618      	mov	r0, r3
 800090a:	f009 fb1f 	bl	8009f4c <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <main+0x1ac>)
 8000910:	691c      	ldr	r4, [r3, #16]
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc62 	bl	80001e0 <strlen>
 800091c:	4602      	mov	r2, r0
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	47a0      	blx	r4
	  }

	  HAL_Delay(500);
 8000928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092c:	f001 fc0e 	bl	800214c <HAL_Delay>
	  digitalToggle(LED_pin_);
 8000930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000938:	f7ff fe26 	bl	8000588 <digitalToggle>
  {
 800093c:	e78f      	b.n	800085e <main+0xbe>
 800093e:	bf00      	nop
 8000940:	0800a680 	.word	0x0800a680
 8000944:	0800a688 	.word	0x0800a688
 8000948:	0800a690 	.word	0x0800a690
 800094c:	20000034 	.word	0x20000034
 8000950:	20000020 	.word	0x20000020
 8000954:	0800154d 	.word	0x0800154d
 8000958:	20000004 	.word	0x20000004
 800095c:	0800214d 	.word	0x0800214d
 8000960:	08002135 	.word	0x08002135
 8000964:	2000049c 	.word	0x2000049c
 8000968:	0800a698 	.word	0x0800a698
 800096c:	0800a64c 	.word	0x0800a64c
 8000970:	0800a664 	.word	0x0800a664
 8000974:	0800a670 	.word	0x0800a670

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09a      	sub	sp, #104	; 0x68
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f009 fa1e 	bl	8009dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <SystemClock_Config+0xfc>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <SystemClock_Config+0xfc>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <SystemClock_Config+0xfc>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <SystemClock_Config+0x100>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <SystemClock_Config+0x100>)
 80009d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <SystemClock_Config+0x100>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80009e6:	2305      	movs	r3, #5
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f4:	2302      	movs	r3, #2
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 80009fe:	230f      	movs	r3, #15
 8000a00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000a02:	2390      	movs	r3, #144	; 0x90
 8000a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 f8e6 	bl	8004be4 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a1e:	f000 f97f 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fb48 	bl	80050d4 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a4a:	f000 f969 	bl	8000d20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a56:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 fd09 	bl	8005474 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a68:	f000 f95a 	bl	8000d20 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3768      	adds	r7, #104	; 0x68
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_I2C1_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x58>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aba:	f001 fe4d 	bl	8002758 <HAL_I2C_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 f92c 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000049c 	.word	0x2000049c
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_RTC_Init+0x44>)
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_RTC_Init+0x48>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_RTC_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_RTC_Init+0x44>)
 8000aea:	227f      	movs	r2, #127	; 0x7f
 8000aec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_RTC_Init+0x44>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_RTC_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_RTC_Init+0x44>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_RTC_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_RTC_Init+0x44>)
 8000b08:	f004 fda4 	bl	8005654 <HAL_RTC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b12:	f000 f905 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000534 	.word	0x20000534
 8000b20:	40002800 	.word	0x40002800

08000b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b42:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <MX_TIM1_Init+0x9c>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b48:	2247      	movs	r2, #71	; 0x47
 8000b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b6e:	f004 fe56 	bl	800581e <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f8d2 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000b8a:	f004 fe97 	bl	80058bc <HAL_TIM_ConfigClockSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b94:	f000 f8c4 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_TIM1_Init+0x98>)
 8000ba6:	f005 f867 	bl	8005c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bb0:	f000 f8b6 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000554 	.word	0x20000554
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART1_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	f005 f8aa 	bl	8005d54 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f88b 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200004f0 	.word	0x200004f0
 8000c14:	40011000 	.word	0x40011000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_GPIO_Init+0xfc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca4:	481c      	ldr	r0, [pc, #112]	; (8000d18 <MX_GPIO_Init+0x100>)
 8000ca6:	f001 fd23 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb0:	481a      	ldr	r0, [pc, #104]	; (8000d1c <MX_GPIO_Init+0x104>)
 8000cb2:	f001 fd1d 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MX_GPIO_Init+0x100>)
 8000cd0:	f001 fb72 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 8000cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_GPIO_Init+0x104>)
 8000cee:	f001 fb63 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_GPIO_Init+0x104>)
 8000d08:	f001 fb56 	bl	80023b8 <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12b      	bne.n	8000df6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd6:	f001 faef 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_RTC_MspInit+0x24>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d102      	bne.n	8000e24 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_RTC_MspInit+0x28>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40002800 	.word	0x40002800
 8000e34:	42470e3c 	.word	0x42470e3c

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_TIM_Base_MspInit+0x3c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10d      	bne.n	8000e66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_TIM_Base_MspInit+0x40>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40023800 	.word	0x40023800

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0x84>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12c      	bne.n	8000ef8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_UART_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ed6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_UART_MspInit+0x8c>)
 8000ef4:	f001 fa60 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40011000 	.word	0x40011000
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f001 f8d8 	bl	800210c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <OTG_FS_IRQHandler+0x10>)
 8000f66:	f002 fe0a 	bl	8003b7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20001bc0 	.word	0x20001bc0

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f008 fec8 	bl	8009d38 <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20020000 	.word	0x20020000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000264 	.word	0x20000264
 8000fdc:	20001fd8 	.word	0x20001fd8

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800100a:	490e      	ldr	r1, [pc, #56]	; (8001044 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001020:	4c0b      	ldr	r4, [pc, #44]	; (8001050 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd7 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f008 fe87 	bl	8009d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fbb3 	bl	80007a0 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8001048:	0800a768 	.word	0x0800a768
  ldr r2, =_sbss
 800104c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8001050:	20001fd8 	.word	0x20001fd8

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <AHT10_delay>:


#include "AHT10.h"

static void AHT10_delay(uint32_t time_)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(AHT10.halt != NULL)
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <AHT10_delay+0x28>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <AHT10_delay+0x1a>
		AHT10.halt(time_);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <AHT10_delay+0x28>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4798      	blx	r3
	else
		HAL_Delay(time_);
}
 8001070:	e002      	b.n	8001078 <AHT10_delay+0x20>
		HAL_Delay(time_);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f001 f86a 	bl	800214c <HAL_Delay>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <AHT10_getTick>:

static uint32_t AHT10_getTick(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	if(AHT10.getTick != NULL)
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <AHT10_getTick+0x20>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <AHT10_getTick+0x16>
		return AHT10.getTick();
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <AHT10_getTick+0x20>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4798      	blx	r3
 8001096:	4603      	mov	r3, r0
 8001098:	e002      	b.n	80010a0 <AHT10_getTick+0x1c>
	else
		return HAL_GetTick();
 800109a:	f001 f84b 	bl	8002134 <HAL_GetTick>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000004 	.word	0x20000004

080010a8 <AHT10_read>:

static AHT10_status AHT10_read(AHT10_var* var, uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
    if (len > _maxBufferSize)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d901      	bls.n	80010c0 <AHT10_read+0x18>
        return AHT10_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e00d      	b.n	80010dc <AHT10_read+0x34>
//    HAL_I2C
    return HAL_I2C_Master_Receive(var->i2c, var->address, buffer, len, timeout_);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	f001 fd81 	bl	8002bdc <HAL_I2C_Master_Receive>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <AHT10_write>:

static AHT10_status AHT10_write(AHT10_var* var, const uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
	 if ( len > _maxBufferSize )
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d901      	bls.n	80010fc <AHT10_write+0x18>
	        return AHT10_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e00d      	b.n	8001118 <AHT10_write+0x34>
	 return HAL_I2C_Master_Transmit(var->i2c, var->address, buffer, len, timeout_);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	7b1b      	ldrb	r3, [r3, #12]
 8001104:	b299      	uxth	r1, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b29a      	uxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4613      	mov	r3, r2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	f001 fc65 	bl	80029e0 <HAL_I2C_Master_Transmit>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <AHT10_detect>:

static AHT10_status AHT10_detect(AHT10_var* var)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	if( var->i2c == NULL )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <AHT10_detect+0x14>
		return false;
 8001130:	2300      	movs	r3, #0
 8001132:	e00b      	b.n	800114c <AHT10_detect+0x2c>
	uint8_t ret =  HAL_I2C_IsDeviceReady(var->i2c, var->address, 5, 100);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7b1b      	ldrb	r3, [r3, #12]
 800113c:	b299      	uxth	r1, r3
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	2205      	movs	r2, #5
 8001142:	f001 ff71 	bl	8003028 <HAL_I2C_IsDeviceReady>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
	return (AHT10_status)ret;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <AHT10_begin>:

static AHT10_status AHT10_begin(AHT10_var* var, I2C_HandleTypeDef *i2c_, uint8_t address)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	4613      	mov	r3, r2
 8001160:	71fb      	strb	r3, [r7, #7]
	var->i2c 			= i2c_;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	601a      	str	r2, [r3, #0]
	var->address 		= address<<1;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	731a      	strb	r2, [r3, #12]
	var->temperature 	= 0;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
	var->humidity 		= 0;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
	uint8_t ret = AHT10_detect(var);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ffcc 	bl	8001120 <AHT10_detect>
 8001188:	4603      	mov	r3, r0
 800118a:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 800118c:	7ffb      	ldrb	r3, [r7, #31]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <AHT10_begin+0x42>
		return ret;
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	e063      	b.n	800125e <AHT10_begin+0x10a>
	uint8_t *cmd = malloc(3 * sizeof(*cmd));
 8001196:	2003      	movs	r0, #3
 8001198:	f008 fdf8 	bl	8009d8c <malloc>
 800119c:	4603      	mov	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]
	if ( cmd != NULL )
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <AHT10_begin+0x5c>
		memset(cmd,0,3);
 80011a6:	2203      	movs	r2, #3
 80011a8:	2100      	movs	r1, #0
 80011aa:	69b8      	ldr	r0, [r7, #24]
 80011ac:	f008 fe0c 	bl	8009dc8 <memset>
	cmd[0] = AHTX0_CMD_SOFTRESET;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	22ba      	movs	r2, #186	; 0xba
 80011b4:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var,cmd,1);
 80011b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ba:	2201      	movs	r2, #1
 80011bc:	69b9      	ldr	r1, [r7, #24]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff ff90 	bl	80010e4 <AHT10_write>
 80011c4:	4603      	mov	r3, r0
 80011c6:	77fb      	strb	r3, [r7, #31]
	if( ret != AHT10_OK )
 80011c8:	7ffb      	ldrb	r3, [r7, #31]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <AHT10_begin+0x7e>
		return ret;
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	e045      	b.n	800125e <AHT10_begin+0x10a>
	AHT10_delay(20);	// time for module to warming up
 80011d2:	2014      	movs	r0, #20
 80011d4:	f7ff ff40 	bl	8001058 <AHT10_delay>

	cmd[0] = AHTX0_CMD_CALIBRATE;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	22e1      	movs	r2, #225	; 0xe1
 80011dc:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x08;
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3301      	adds	r3, #1
 80011e2:	2208      	movs	r2, #8
 80011e4:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x00;
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	3302      	adds	r3, #2
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var, cmd, 3);
 80011ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f2:	2203      	movs	r2, #3
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff74 	bl	80010e4 <AHT10_write>
 80011fc:	4603      	mov	r3, r0
 80011fe:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 8001200:	7ffb      	ldrb	r3, [r7, #31]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <AHT10_begin+0xb6>
		return ret;
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	e029      	b.n	800125e <AHT10_begin+0x10a>
	uint32_t ts = AHT10_getTick();
 800120a:	f7ff ff3b 	bl	8001084 <AHT10_getTick>
 800120e:	6178      	str	r0, [r7, #20]
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001210:	e010      	b.n	8001234 <AHT10_begin+0xe0>
	{
		AHT10_delay(5);
 8001212:	2005      	movs	r0, #5
 8001214:	f7ff ff20 	bl	8001058 <AHT10_delay>
		if( ts - AHT10_getTick() >= 5000 )
 8001218:	f7ff ff34 	bl	8001084 <AHT10_getTick>
 800121c:	4602      	mov	r2, r0
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	f241 3287 	movw	r2, #4999	; 0x1387
 8001226:	4293      	cmp	r3, r2
 8001228:	d904      	bls.n	8001234 <AHT10_begin+0xe0>
		{
			free(cmd);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f008 fdb6 	bl	8009d9c <free>
			return AHT10_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e014      	b.n	800125e <AHT10_begin+0x10a>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f92b 	bl	8001490 <AHT10_getStatus>
 800123a:	4603      	mov	r3, r0
 800123c:	b25b      	sxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	dbe7      	blt.n	8001212 <AHT10_begin+0xbe>
		}
	};
	free(cmd);
 8001242:	69b8      	ldr	r0, [r7, #24]
 8001244:	f008 fdaa 	bl	8009d9c <free>
	// load last status to clearing buffer
	if (!(AHT10_getStatus(var) & AHTX0_STATUS_CALIBRATED))
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f921 	bl	8001490 <AHT10_getStatus>
 800124e:	4603      	mov	r3, r0
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <AHT10_begin+0x108>
		return AHT10_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <AHT10_begin+0x10a>
	else
		return AHT10_OK;
 800125c:	2300      	movs	r3, #0

}
 800125e:	4618      	mov	r0, r3
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <AHT10_getEvent>:

static AHT10_status AHT10_getEvent(AHT10_var* var, uint32_t timeout_)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	if (var->error_counter >= AHT10_MAX_TRIAL)   // didn't get reply yet from AHT10
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7b5b      	ldrb	r3, [r3, #13]
 8001276:	2b09      	cmp	r3, #9
 8001278:	d91b      	bls.n	80012b2 <AHT10_getEvent+0x4a>
	{
		// need to restart module
		uint8_t address_ = var->address>>1;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b1b      	ldrb	r3, [r3, #12]
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		I2C_HandleTypeDef *i2c_ = var->i2c;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
		ret = AHT10_begin(var, i2c_, address_);
 800128a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800128e:	461a      	mov	r2, r3
 8001290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff5e 	bl	8001154 <AHT10_begin>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ( ret != AHT10_OK )
 800129e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <AHT10_getEvent+0x44>
			return ret;
 80012a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012aa:	e0e3      	b.n	8001474 <AHT10_getEvent+0x20c>
		var->error_counter = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	735a      	strb	r2, [r3, #13]
	}
	uint8_t cmd_TRIGGER[3] = {AHTX0_CMD_TRIGGER, 0x33, 0};
 80012b2:	4a72      	ldr	r2, [pc, #456]	; (800147c <AHT10_getEvent+0x214>)
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	4611      	mov	r1, r2
 80012bc:	8019      	strh	r1, [r3, #0]
 80012be:	3302      	adds	r3, #2
 80012c0:	0c12      	lsrs	r2, r2, #16
 80012c2:	701a      	strb	r2, [r3, #0]
	// read the data and store it!
	uint8_t *cmd_ptr = malloc(3 * sizeof(*cmd_ptr));
 80012c4:	2003      	movs	r0, #3
 80012c6:	f008 fd61 	bl	8009d8c <malloc>
 80012ca:	4603      	mov	r3, r0
 80012cc:	61fb      	str	r3, [r7, #28]
	if (cmd_ptr != NULL)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <AHT10_getEvent+0xb0>
	{
		cmd_ptr[0] = AHTX0_CMD_TRIGGER;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	22ac      	movs	r2, #172	; 0xac
 80012d8:	701a      	strb	r2, [r3, #0]
		cmd_ptr[1] = 0x33;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	2233      	movs	r2, #51	; 0x33
 80012e0:	701a      	strb	r2, [r3, #0]
		cmd_ptr[2] = 0;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3302      	adds	r3, #2
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		ret = AHT10_write(var, cmd_ptr, 3);
 80012ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ee:	2203      	movs	r2, #3
 80012f0:	69f9      	ldr	r1, [r7, #28]
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fef6 	bl	80010e4 <AHT10_write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != AHT10_OK )
 80012fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <AHT10_getEvent+0xb4>
		{
			var->error_counter++;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7b5b      	ldrb	r3, [r3, #13]
 800130a:	3301      	adds	r3, #1
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	735a      	strb	r2, [r3, #13]
			return ret;
 8001312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001316:	e0ad      	b.n	8001474 <AHT10_getEvent+0x20c>
		}
	}
	else
		return AHT10_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0ab      	b.n	8001474 <AHT10_getEvent+0x20c>
	free(cmd_ptr);
 800131c:	69f8      	ldr	r0, [r7, #28]
 800131e:	f008 fd3d 	bl	8009d9c <free>
	unsigned long t = AHT10_getTick();
 8001322:	f7ff feaf 	bl	8001084 <AHT10_getTick>
 8001326:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001328:	e01b      	b.n	8001362 <AHT10_getEvent+0xfa>
	{
		AHT10_delay(10);
 800132a:	200a      	movs	r0, #10
 800132c:	f7ff fe94 	bl	8001058 <AHT10_delay>
		uint32_t rollOver = AHT10_getTick();
 8001330:	f7ff fea8 	bl	8001084 <AHT10_getTick>
 8001334:	60f8      	str	r0, [r7, #12]
		if (rollOver < t)
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	429a      	cmp	r2, r3
 800133c:	d201      	bcs.n	8001342 <AHT10_getEvent+0xda>
			t = rollOver;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (AHT10_getTick() - t >= timeout_)
 8001342:	f7ff fe9f 	bl	8001084 <AHT10_getTick>
 8001346:	4602      	mov	r2, r0
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d807      	bhi.n	8001362 <AHT10_getEvent+0xfa>
		{
			var->error_counter++;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7b5b      	ldrb	r3, [r3, #13]
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	735a      	strb	r2, [r3, #13]
			return AHT10_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e088      	b.n	8001474 <AHT10_getEvent+0x20c>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f894 	bl	8001490 <AHT10_getStatus>
 8001368:	4603      	mov	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	dbdc      	blt.n	800132a <AHT10_getEvent+0xc2>
		};
	}

	uint8_t *data = malloc(6 * sizeof(*data));
 8001370:	2006      	movs	r0, #6
 8001372:	f008 fd0b 	bl	8009d8c <malloc>
 8001376:	4603      	mov	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]
	if (data != NULL)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <AHT10_getEvent+0x122>
	{
		// clear the data
		memset(data,0,6);
 8001380:	2206      	movs	r2, #6
 8001382:	2100      	movs	r1, #0
 8001384:	69b8      	ldr	r0, [r7, #24]
 8001386:	f008 fd1f 	bl	8009dc8 <memset>
	}

	ret = AHT10_read(var, data, 6, timeout_);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2206      	movs	r2, #6
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fe89 	bl	80010a8 <AHT10_read>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != AHT10_OK )
 800139c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <AHT10_getEvent+0x154>
	{
		var->error_counter++;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7b5b      	ldrb	r3, [r3, #13]
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	735a      	strb	r2, [r3, #13]
		free(data);
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f008 fcf3 	bl	8009d9c <free>
		return ret;
 80013b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ba:	e05b      	b.n	8001474 <AHT10_getEvent+0x20c>
	}

	uint32_t h = data[1];
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	3301      	adds	r3, #1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	617b      	str	r3, [r7, #20]
	h <<= 8;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	617b      	str	r3, [r7, #20]
	h |= data[2];
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3302      	adds	r3, #2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
	h <<= 4;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
	h |= data[3] >> 4;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	3303      	adds	r3, #3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
	var->humidity = ((float)h * 100) / 0x100000;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001480 <AHT10_getEvent+0x218>
 80013fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001402:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001484 <AHT10_getEvent+0x21c>
 8001406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a02 	vstr	s15, [r3, #8]

	uint32_t tdata = data[3] & 0x0F;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	3303      	adds	r3, #3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	613b      	str	r3, [r7, #16]
	tdata |= data[4];
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	3304      	adds	r3, #4
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	613b      	str	r3, [r7, #16]
	tdata |= data[5];
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	3305      	adds	r3, #5
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
	var->temperature = ((float)tdata * 200 / 0x100000) - 50;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001488 <AHT10_getEvent+0x220>
 8001452:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001456:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001484 <AHT10_getEvent+0x21c>
 800145a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800148c <AHT10_getEvent+0x224>
 8001462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edc3 7a01 	vstr	s15, [r3, #4]
	free(data);
 800146c:	69b8      	ldr	r0, [r7, #24]
 800146e:	f008 fc95 	bl	8009d9c <free>
	return AHT10_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800a6ac 	.word	0x0800a6ac
 8001480:	42c80000 	.word	0x42c80000
 8001484:	49800000 	.word	0x49800000
 8001488:	43480000 	.word	0x43480000
 800148c:	42480000 	.word	0x42480000

08001490 <AHT10_getStatus>:

static uint8_t AHT10_getStatus(AHT10_var* var)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	if ( AHT10_read(var, &ret, 1) != AHT10_OK )
 8001498:	f107 010f 	add.w	r1, r7, #15
 800149c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014a0:	2201      	movs	r2, #1
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fe00 	bl	80010a8 <AHT10_read>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <AHT10_getStatus+0x22>
		return 0xFF;
 80014ae:	23ff      	movs	r3, #255	; 0xff
 80014b0:	e000      	b.n	80014b4 <AHT10_getStatus+0x24>
	else
		return ret;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <AHT10_getTemperature>:


// extract Temperature value from the struct
static float AHT10_getTemperature (AHT10_var* var)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	return var->temperature;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	ee07 3a90 	vmov	s15, r3
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <AHT10_getHumidity>:

// extract Humidity value from the struct
static float AHT10_getHumidity (AHT10_var* var)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	return var->humidity;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	ee07 3a90 	vmov	s15, r3
}
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <delay_microsInit+0x4c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10e      	bne.n	8001526 <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <delay_microsInit+0x4c>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <delay_microsInit+0x4c>)
 800150e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001512:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <delay_microsInit+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <delay_microsInit+0x50>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <delay_microsInit+0x50>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 8001526:	bf00      	nop
	 __NOP();
 8001528:	bf00      	nop
	 __NOP();
 800152a:	bf00      	nop
	 if(DWT->CYCCNT)
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <delay_microsInit+0x50>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 8001538:	2301      	movs	r3, #1
	 }
};
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000edf0 	.word	0xe000edf0
 8001548:	e0001000 	.word	0xe0001000

0800154c <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <delay_microSeconds+0x60>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <delay_microSeconds+0x60>)
 800155c:	685c      	ldr	r4, [r3, #4]
 800155e:	f003 ff55 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8001562:	4603      	mov	r3, r0
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <delay_microSeconds+0x64>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4423      	add	r3, r4
 8001574:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d906      	bls.n	800158c <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 800157e:	bf00      	nop
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <delay_microSeconds+0x60>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	429a      	cmp	r2, r3
 8001588:	d8fa      	bhi.n	8001580 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 800158a:	e00a      	b.n	80015a2 <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 800158c:	bf00      	nop
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <delay_microSeconds+0x60>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3fa      	bcc.n	800158e <delay_microSeconds+0x42>
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <delay_microSeconds+0x60>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d8f5      	bhi.n	800158e <delay_microSeconds+0x42>
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e0001000 	.word	0xe0001000
 80015b0:	431bde83 	.word	0x431bde83

080015b4 <digitalWrite>:
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	e883 0003 	stmia.w	r3, {r0, r1}
 80015c2:	4613      	mov	r3, r2
 80015c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	89b9      	ldrh	r1, [r7, #12]
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 f88f 	bl	80026f0 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <digitalRead>:
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	463b      	mov	r3, r7
 80015e2:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	88ba      	ldrh	r2, [r7, #4]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 f867 	bl	80026c0 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
static HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 8001606:	f000 fd95 	bl	8002134 <HAL_GetTick>
 800160a:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 800160c:	e023      	b.n	8001656 <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 800160e:	f000 fd91 	bl	8002134 <HAL_GetTick>
 8001612:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d206      	bcs.n	800162a <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfb8      	it	lt
 8001626:	425b      	neglt	r3, r3
 8001628:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 800162a:	f000 fd83 	bl	8002134 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d801      	bhi.n	800163e <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e01f      	b.n	800167e <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HX710BIsReady+0x8c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HX710BIsReady+0x8c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	200a      	movs	r0, #10
 800164c:	4798      	blx	r3
 800164e:	e002      	b.n	8001656 <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8001650:	2005      	movs	r0, #5
 8001652:	f000 fd7b 	bl	800214c <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800165c:	2100      	movs	r1, #0
 800165e:	4611      	mov	r1, r2
 8001660:	7a9a      	ldrb	r2, [r3, #10]
 8001662:	7adb      	ldrb	r3, [r3, #11]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	431a      	orrs	r2, r3
 8001668:	2300      	movs	r3, #0
 800166a:	f362 030f 	bfi	r3, r2, #0, #16
 800166e:	4608      	mov	r0, r1
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff ffb2 	bl	80015da <digitalRead>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1c8      	bne.n	800160e <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000020 	.word	0x20000020

0800168c <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
static HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2100      	movs	r1, #0
 800169e:	4611      	mov	r1, r2
 80016a0:	791a      	ldrb	r2, [r3, #4]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	431a      	orrs	r2, r3
 80016a8:	2300      	movs	r3, #0
 80016aa:	f362 030f 	bfi	r3, r2, #0, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	4608      	mov	r0, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff ff7e 	bl	80015b4 <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff ff9e 	bl	80015fc <HX710BIsReady>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d169      	bne.n	800179a <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
 80016d2:	e045      	b.n	8001760 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2100      	movs	r1, #0
 80016e0:	4611      	mov	r1, r2
 80016e2:	791a      	ldrb	r2, [r3, #4]
 80016e4:	795b      	ldrb	r3, [r3, #5]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	431a      	orrs	r2, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	f362 030f 	bfi	r3, r2, #0, #16
 80016f0:	2201      	movs	r2, #1
 80016f2:	4608      	mov	r0, r1
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2100      	movs	r1, #0
 8001706:	4611      	mov	r1, r2
 8001708:	791a      	ldrb	r2, [r3, #4]
 800170a:	795b      	ldrb	r3, [r3, #5]
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	431a      	orrs	r2, r3
 8001710:	2300      	movs	r3, #0
 8001712:	f362 030f 	bfi	r3, r2, #0, #16
 8001716:	2200      	movs	r2, #0
 8001718:	4608      	mov	r0, r1
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff ff4a 	bl	80015b4 <digitalWrite>
			if ( i < 24)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b17      	cmp	r3, #23
 8001724:	d819      	bhi.n	800175a <HX710BRead+0xce>
			{
				raw = raw << 1;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001732:	2100      	movs	r1, #0
 8001734:	4611      	mov	r1, r2
 8001736:	7a9a      	ldrb	r2, [r3, #10]
 8001738:	7adb      	ldrb	r3, [r3, #11]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	431a      	orrs	r2, r3
 800173e:	2300      	movs	r3, #0
 8001740:	f362 030f 	bfi	r3, r2, #0, #16
 8001744:	4608      	mov	r0, r1
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff ff47 	bl	80015da <digitalRead>
 800174c:	4603      	mov	r3, r0
 800174e:	2b01      	cmp	r3, #1
 8001750:	d103      	bne.n	800175a <HX710BRead+0xce>
						raw= raw | 0x01;
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	3301      	adds	r3, #1
 800175e:	75fb      	strb	r3, [r7, #23]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	7b1b      	ldrb	r3, [r3, #12]
 8001764:	7dfa      	ldrb	r2, [r7, #23]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3b4      	bcc.n	80016d4 <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2100      	movs	r1, #0
 8001770:	4611      	mov	r1, r2
 8001772:	791a      	ldrb	r2, [r3, #4]
 8001774:	795b      	ldrb	r3, [r3, #5]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	431a      	orrs	r2, r3
 800177a:	2300      	movs	r3, #0
 800177c:	f362 030f 	bfi	r3, r2, #0, #16
 8001780:	2201      	movs	r2, #1
 8001782:	4608      	mov	r0, r1
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff ff15 	bl	80015b4 <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001790:	461a      	mov	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 800179a:	2303      	movs	r3, #3
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HX710BSetMode>:


static HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
 80017b0:	4613      	mov	r3, r2
 80017b2:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 80017b4:	78bb      	ldrb	r3, [r7, #2]
 80017b6:	461a      	mov	r2, r3
 80017b8:	2100      	movs	r1, #0
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ff66 	bl	800168c <HX710BRead>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HX710BInit>:


static HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 80017ca:	b082      	sub	sp, #8
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	1d38      	adds	r0, r7, #4
 80017d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80017da:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3306      	adds	r3, #6
 80017e0:	f107 021c 	add.w	r2, r7, #28
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	6018      	str	r0, [r3, #0]
 80017e8:	8892      	ldrh	r2, [r2, #4]
 80017ea:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	461a      	mov	r2, r3
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	6010      	str	r0, [r2, #0]
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001800:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8001802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001806:	22f4      	movs	r2, #244	; 0xf4
 8001808:	4619      	mov	r1, r3
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff ffca 	bl	80017a4 <HX710BSetMode>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800181c:	b002      	add	sp, #8
 800181e:	4770      	bx	lr

08001820 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  CDC_init();
 8001824:	f007 fe4e 	bl	80094c4 <CDC_init>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <SerialUSB_end>:

static void SerialUSB_end(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  CDC_DeInit();
 8001830:	f007 fe4f 	bl	80094d2 <CDC_DeInit>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <SerialUSB_availableForWrite+0x10>)
 800183e:	f000 f905 	bl	8001a4c <CDC_TransmitQueue_WriteSize>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000870 	.word	0x20000870

0800184c <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f806 	bl	800186c <SerialUSB_puts>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 800187a:	e01c      	b.n	80018b6 <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 800187c:	4815      	ldr	r0, [pc, #84]	; (80018d4 <SerialUSB_puts+0x68>)
 800187e:	f000 f8e5 	bl	8001a4c <CDC_TransmitQueue_WriteSize>
 8001882:	4603      	mov	r3, r0
 8001884:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	d201      	bcs.n	8001892 <SerialUSB_puts+0x26>
        portion = rest;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <SerialUSB_puts+0x68>)
 800189e:	f000 f90c 	bl	8001aba <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	60fb      	str	r3, [r7, #12]
        buf += portion;
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4413      	add	r3, r2
 80018b0:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 80018b2:	f007 fdaf 	bl	8009414 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <SerialUSB_puts+0x5a>
 80018bc:	f007 fd7e 	bl	80093bc <CDC_connected>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1da      	bne.n	800187c <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000870 	.word	0x20000870

080018d8 <SerialUSB_available>:

static int SerialUSB_available(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <SerialUSB_available+0x10>)
 80018de:	f000 fa1c 	bl	8001d1a <CDC_ReceiveQueue_ReadSize>
 80018e2:	4603      	mov	r3, r0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200018f8 	.word	0x200018f8

080018ec <SerialUSB_read>:

static int SerialUSB_read(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <SerialUSB_read+0x1c>)
 80018f4:	f000 fa41 	bl	8001d7a <CDC_ReceiveQueue_Dequeue>
 80018f8:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 80018fa:	f007 fdb9 	bl	8009470 <CDC_resume_receive>
  return ch;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200018f8 	.word	0x200018f8

0800190c <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 800191c:	f000 fc0a 	bl	8002134 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <SerialUSB_readbytes+0x64>)
 800192c:	f000 fa9c 	bl	8001e68 <CDC_ReceiveQueue_Read>
 8001930:	4603      	mov	r3, r0
 8001932:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 8001934:	f007 fd9c 	bl	8009470 <CDC_resume_receive>
      rest -= read;
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
      buffer += read;
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <SerialUSB_readbytes+0x46>
        return length;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	e009      	b.n	8001966 <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 8001952:	f000 fbef 	bl	8002134 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b31      	cmp	r3, #49	; 0x31
 800195e:	d9e0      	bls.n	8001922 <SerialUSB_readbytes+0x16>
    return length - rest;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	1ad3      	subs	r3, r2, r3
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200018f8 	.word	0x200018f8

08001974 <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af02      	add	r7, sp, #8
 800197a:	4603      	mov	r3, r0
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	b29b      	uxth	r3, r3
 8001986:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 8001988:	f000 fbd4 	bl	8002134 <HAL_GetTick>
 800198c:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	b29a      	uxth	r2, r3
 8001992:	7bf9      	ldrb	r1, [r7, #15]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	4815      	ldr	r0, [pc, #84]	; (80019f4 <SerialUSB_readBytesUntil+0x80>)
 80019a0:	f000 fac5 	bl	8001f2e <CDC_ReceiveQueue_ReadUntil>
 80019a4:	4603      	mov	r3, r0
 80019a6:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 80019a8:	f007 fd62 	bl	8009470 <CDC_resume_receive>
      rest -= read;
 80019ac:	8abb      	ldrh	r3, [r7, #20]
 80019ae:	461a      	mov	r2, r3
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	61fb      	str	r3, [r7, #28]
      buffer += read;
 80019b6:	8abb      	ldrh	r3, [r7, #20]
 80019b8:	461a      	mov	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4413      	add	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
      if (found) {
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	e00e      	b.n	80019ec <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <SerialUSB_readBytesUntil+0x64>
        return length;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	e009      	b.n	80019ec <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 80019d8:	f000 fbac 	bl	8002134 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b31      	cmp	r3, #49	; 0x31
 80019e4:	d9d3      	bls.n	800198e <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200018f8 	.word	0x200018f8

080019f8 <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <SerialUSB_peek+0x10>)
 80019fe:	f000 fa01 	bl	8001e04 <CDC_ReceiveQueue_Peek>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200018f8 	.word	0x200018f8

08001a0c <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 8001a10:	bf00      	nop
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <SerialUSB_flush+0x18>)
 8001a14:	f000 f836 	bl	8001a84 <CDC_TransmitQueue_ReadSize>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dcf9      	bgt.n	8001a12 <SerialUSB_flush+0x6>
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000870 	.word	0x20000870

08001a28 <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3380      	adds	r3, #128	; 0x80
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8001a64:	b292      	uxth	r2, r2
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8001a6a:	425a      	negs	r2, r3
 8001a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a74:	bf58      	it	pl
 8001a76:	4253      	negpl	r3, r2
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3380      	adds	r3, #128	; 0x80
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8001aa0:	425a      	negs	r2, r3
 8001aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aaa:	bf58      	it	pl
 8001aac:	4253      	negpl	r3, r2
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ad2:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d90c      	bls.n	8001af6 <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f008 f95c 	bl	8009dac <memcpy>
 8001af4:	e015      	b.n	8001b22 <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f008 f94f 	bl	8009dac <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	18d1      	adds	r1, r2, r3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f008 f945 	bl	8009dac <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d30c      	bcc.n	8001b7e <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	e008      	b.n	8001b90 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	22c0      	movs	r2, #192	; 0xc0
 8001c04:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001c26:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	89ba      	ldrh	r2, [r7, #12]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d82c      	bhi.n	8001c90 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	89fa      	ldrh	r2, [r7, #14]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d809      	bhi.n	8001c58 <CDC_ReceiveQueue_ReserveBlock+0x44>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	89fa      	ldrh	r2, [r7, #14]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d109      	bne.n	8001c66 <CDC_ReceiveQueue_ReserveBlock+0x52>
 8001c52:	89bb      	ldrh	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001c60:	b292      	uxth	r2, r2
 8001c62:	4413      	add	r3, r2
 8001c64:	e025      	b.n	8001cb2 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 8001c66:	89bb      	ldrh	r3, [r7, #12]
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d921      	bls.n	8001cb0 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	e010      	b.n	8001cb2 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001c9c:	89bb      	ldrh	r3, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d206      	bcs.n	8001cb0 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8001caa:	b292      	uxth	r2, r2
 8001cac:	4413      	add	r3, r2
 8001cae:	e000      	b.n	8001cb2 <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d303      	bcc.n	8001cfa <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	22c0      	movs	r2, #192	; 0xc0
 8001cf6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2bbf      	cmp	r3, #191	; 0xbf
 8001d04:	d903      	bls.n	8001d0e <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d808      	bhi.n	8001d58 <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	e00a      	b.n	8001d6e <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 8001d58:	89bb      	ldrh	r3, [r7, #12]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	1a9b      	subs	r3, r3, r2
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d103      	bne.n	8001dae <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	89bb      	ldrh	r3, [r7, #12]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d102      	bne.n	8001dc4 <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e019      	b.n	8001df8 <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	b291      	uxth	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	5c9b      	ldrb	r3, [r3, r2]
 8001ddc:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d303      	bcc.n	8001df6 <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	89bb      	ldrh	r3, [r7, #12]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d303      	bcc.n	8001e38 <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d102      	bne.n	8001e4e <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	e006      	b.n	8001e5c <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	5c9b      	ldrb	r3, [r3, r2]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8a7b      	ldrh	r3, [r7, #18]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d303      	bcc.n	8001ea2 <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	8abb      	ldrh	r3, [r7, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d808      	bhi.n	8001ec4 <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 8001eb2:	8abb      	ldrh	r3, [r7, #20]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	82fb      	strh	r3, [r7, #22]
 8001ec2:	e007      	b.n	8001ed4 <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 8001ec4:	8a7b      	ldrh	r3, [r7, #18]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 8001ed4:	8afa      	ldrh	r2, [r7, #22]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d201      	bcs.n	8001ee0 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 8001edc:	8afb      	ldrh	r3, [r7, #22]
 8001ede:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f007 ff5a 	bl	8009dac <memcpy>
  queue->read = queue->read + size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4413      	add	r3, r2
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	8a7b      	ldrh	r3, [r7, #18]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d303      	bcc.n	8001f24 <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 8001f24:	88fb      	ldrh	r3, [r7, #6]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b089      	sub	sp, #36	; 0x24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	8a7b      	ldrh	r3, [r7, #18]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d303      	bcc.n	8001f6e <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	8abb      	ldrh	r3, [r7, #20]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d808      	bhi.n	8001f90 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 8001f7e:	8abb      	ldrh	r3, [r7, #20]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	83fb      	strh	r3, [r7, #30]
 8001f8e:	e007      	b.n	8001fa0 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 8001f90:	8a7b      	ldrh	r3, [r7, #18]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 8001fa0:	8bfa      	ldrh	r2, [r7, #30]
 8001fa2:	893b      	ldrh	r3, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d201      	bcs.n	8001fac <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 8001fa8:	8bfb      	ldrh	r3, [r7, #30]
 8001faa:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	83bb      	strh	r3, [r7, #28]
 8001fc0:	e02d      	b.n	800201e <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 8001fc2:	8bbb      	ldrh	r3, [r7, #28]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 8001fcc:	7dfa      	ldrb	r2, [r7, #23]
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d11c      	bne.n	800200e <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	8bbb      	ldrh	r3, [r7, #28]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d303      	bcc.n	8002004 <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 8002004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002006:	8bba      	ldrh	r2, [r7, #28]
 8002008:	801a      	strh	r2, [r3, #0]
      return true;
 800200a:	2301      	movs	r3, #1
 800200c:	e025      	b.n	800205a <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 800200e:	8bbb      	ldrh	r3, [r7, #28]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	7dfa      	ldrb	r2, [r7, #23]
 8002016:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 8002018:	8bbb      	ldrh	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	83bb      	strh	r3, [r7, #28]
 800201e:	8bba      	ldrh	r2, [r7, #28]
 8002020:	893b      	ldrh	r3, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3cd      	bcc.n	8001fc2 <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002032:	b29a      	uxth	r2, r3
 8002034:	893b      	ldrh	r3, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002046:	b29a      	uxth	r2, r3
 8002048:	8a7b      	ldrh	r3, [r7, #18]
 800204a:	b29b      	uxth	r3, r3
 800204c:	429a      	cmp	r2, r3
 800204e:	d303      	bcc.n	8002058 <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_Init+0x40>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_Init+0x40>)
 800207e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_Init+0x40>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f94f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f808 	bl	80020ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800209c:	f7fe fe46 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_InitTick+0x54>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_InitTick+0x58>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f967 	bl	800239e <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00e      	b.n	80020f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d80a      	bhi.n	80020f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f92f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <HAL_InitTick+0x5c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000000 	.word	0x20000000
 8002104:	20000064 	.word	0x20000064
 8002108:	20000060 	.word	0x20000060

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000064 	.word	0x20000064
 8002130:	2000059c 	.word	0x2000059c

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	2000059c 	.word	0x2000059c

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000064 	.word	0x20000064

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e159      	b.n	8002688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8148 	bne.w	8002682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a2 	beq.w	8002682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x202>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1fe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1fa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1f6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1f2>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_GPIO_Init+0x304>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x304>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x304>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea2 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002734:	887a      	ldrh	r2, [r7, #2]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43d9      	mvns	r1, r3
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	400b      	ands	r3, r1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e12b      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fafc 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027bc:	f002 fe32 	bl	8005424 <HAL_RCC_GetPCLK1Freq>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a81      	ldr	r2, [pc, #516]	; (80029cc <HAL_I2C_Init+0x274>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d807      	bhi.n	80027dc <HAL_I2C_Init+0x84>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a80      	ldr	r2, [pc, #512]	; (80029d0 <HAL_I2C_Init+0x278>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e006      	b.n	80027ea <HAL_I2C_Init+0x92>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a7d      	ldr	r2, [pc, #500]	; (80029d4 <HAL_I2C_Init+0x27c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0e7      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a78      	ldr	r2, [pc, #480]	; (80029d8 <HAL_I2C_Init+0x280>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a6a      	ldr	r2, [pc, #424]	; (80029cc <HAL_I2C_Init+0x274>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d802      	bhi.n	800282c <HAL_I2C_Init+0xd4>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	e009      	b.n	8002840 <HAL_I2C_Init+0xe8>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_I2C_Init+0x284>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	495c      	ldr	r1, [pc, #368]	; (80029cc <HAL_I2C_Init+0x274>)
 800285c:	428b      	cmp	r3, r1
 800285e:	d819      	bhi.n	8002894 <HAL_I2C_Init+0x13c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fbb1 f3f3 	udiv	r3, r1, r3
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002874:	400b      	ands	r3, r1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_I2C_Init+0x138>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e59      	subs	r1, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fbb1 f3f3 	udiv	r3, r1, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	e051      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002890:	2304      	movs	r3, #4
 8002892:	e04f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_I2C_Init+0x168>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	440b      	add	r3, r1
 80028aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e012      	b.n	80028e6 <HAL_I2C_Init+0x18e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x196>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e022      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10e      	bne.n	8002914 <HAL_I2C_Init+0x1bc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e58      	subs	r0, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	fbb0 f3f3 	udiv	r3, r0, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002912:	e00f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	0099      	lsls	r1, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	fbb0 f3f3 	udiv	r3, r0, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6809      	ldr	r1, [r1, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6911      	ldr	r1, [r2, #16]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	000186a0 	.word	0x000186a0
 80029d0:	001e847f 	.word	0x001e847f
 80029d4:	003d08ff 	.word	0x003d08ff
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	461a      	mov	r2, r3
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
 80029f0:	4613      	mov	r3, r2
 80029f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff fb9e 	bl	8002134 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 80e0 	bne.w	8002bc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2319      	movs	r3, #25
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4970      	ldr	r1, [pc, #448]	; (8002bd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fd86 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0d3      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_I2C_Master_Transmit+0x50>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e0cc      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d007      	beq.n	8002a56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2221      	movs	r2, #33	; 0x21
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2210      	movs	r2, #16
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fbf0 	bl	8003284 <I2C_MasterRequestWrite>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e08d      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac4:	e066      	b.n	8002b94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fe00 	bl	80036d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d107      	bne.n	8002aee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06b      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11b      	bne.n	8002b68 <HAL_I2C_Master_Transmit+0x188>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	6a39      	ldr	r1, [r7, #32]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fdf0 	bl	8003752 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00d      	beq.n	8002b94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e01a      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d194      	bne.n	8002ac6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	00100002 	.word	0x00100002
 8002bd8:	ffff0000 	.word	0xffff0000

08002bdc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	; 0x30
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	461a      	mov	r2, r3
 8002be8:	460b      	mov	r3, r1
 8002bea:	817b      	strh	r3, [r7, #10]
 8002bec:	4613      	mov	r3, r2
 8002bee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff faa0 	bl	8002134 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	f040 820b 	bne.w	800301a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2319      	movs	r3, #25
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	497c      	ldr	r1, [pc, #496]	; (8002e00 <HAL_I2C_Master_Receive+0x224>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fc88 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e1fe      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_I2C_Master_Receive+0x50>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e1f7      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d007      	beq.n	8002c52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a5c      	ldr	r2, [pc, #368]	; (8002e04 <HAL_I2C_Master_Receive+0x228>)
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fb74 	bl	8003388 <I2C_MasterRequestRead>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1b8      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d113      	bne.n	8002cda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e18c      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d11b      	bne.n	8002d1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e16c      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d11b      	bne.n	8002d5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	e14c      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d80:	e138      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	f200 80f1 	bhi.w	8002f6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d123      	bne.n	8002ddc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fd1b 	bl	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e139      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dda:	e10b      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d14e      	bne.n	8002e82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	2200      	movs	r2, #0
 8002dec:	4906      	ldr	r1, [pc, #24]	; (8002e08 <HAL_I2C_Master_Receive+0x22c>)
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fb98 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e10e      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
 8002dfe:	bf00      	nop
 8002e00:	00100002 	.word	0x00100002
 8002e04:	ffff0000 	.word	0xffff0000
 8002e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e80:	e0b8      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4966      	ldr	r1, [pc, #408]	; (8003024 <HAL_I2C_Master_Receive+0x448>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fb49 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0bf      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	494f      	ldr	r1, [pc, #316]	; (8003024 <HAL_I2C_Master_Receive+0x448>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fb1b 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e091      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f6c:	e042      	b.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fc2e 	bl	80037d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e04c      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d118      	bne.n	8002ff4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f aec2 	bne.w	8002d82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3728      	adds	r7, #40	; 0x28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	00010004 	.word	0x00010004

08003028 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	460b      	mov	r3, r1
 8003036:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff f87c 	bl	8002134 <HAL_GetTick>
 800303c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b20      	cmp	r3, #32
 800304c:	f040 8111 	bne.w	8003272 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	4988      	ldr	r1, [pc, #544]	; (800327c <HAL_I2C_IsDeviceReady+0x254>)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa62 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	e104      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2C_IsDeviceReady+0x50>
 8003074:	2302      	movs	r3, #2
 8003076:	e0fd      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d007      	beq.n	800309e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2224      	movs	r2, #36	; 0x24
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a70      	ldr	r2, [pc, #448]	; (8003280 <HAL_I2C_IsDeviceReady+0x258>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa20 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f8:	d103      	bne.n	8003102 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0b6      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003114:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f80d 	bl	8002134 <HAL_GetTick>
 800311a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800314a:	e025      	b.n	8003198 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fe fff2 	bl	8002134 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <HAL_I2C_IsDeviceReady+0x13a>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	22a0      	movs	r2, #160	; 0xa0
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2ba0      	cmp	r3, #160	; 0xa0
 80031a2:	d005      	beq.n	80031b0 <HAL_I2C_IsDeviceReady+0x188>
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_I2C_IsDeviceReady+0x188>
 80031aa:	7dbb      	ldrb	r3, [r7, #22]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0cd      	beq.n	800314c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d129      	bne.n	800321a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	4921      	ldr	r1, [pc, #132]	; (800327c <HAL_I2C_IsDeviceReady+0x254>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f994 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e036      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e02c      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003232:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	2319      	movs	r3, #25
 800323a:	2201      	movs	r2, #1
 800323c:	490f      	ldr	r1, [pc, #60]	; (800327c <HAL_I2C_IsDeviceReady+0x254>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f970 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e012      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	3301      	adds	r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	f4ff af32 	bcc.w	80030c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	00100002 	.word	0x00100002
 8003280:	ffff0000 	.word	0xffff0000

08003284 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d006      	beq.n	80032ae <I2C_MasterRequestWrite+0x2a>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d003      	beq.n	80032ae <I2C_MasterRequestWrite+0x2a>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ac:	d108      	bne.n	80032c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e00b      	b.n	80032d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b12      	cmp	r3, #18
 80032c6:	d107      	bne.n	80032d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f91d 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fe:	d103      	bne.n	8003308 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e035      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003314:	d108      	bne.n	8003328 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	e01b      	b.n	8003360 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	11db      	asrs	r3, r3, #7
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0306 	and.w	r3, r3, #6
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f063 030f 	orn	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <I2C_MasterRequestWrite+0xfc>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f943 	bl	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e010      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <I2C_MasterRequestWrite+0x100>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f933 	bl	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00010008 	.word	0x00010008
 8003384:	00010002 	.word	0x00010002

08003388 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d006      	beq.n	80033c2 <I2C_MasterRequestRead+0x3a>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d003      	beq.n	80033c2 <I2C_MasterRequestRead+0x3a>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c0:	d108      	bne.n	80033d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e00b      	b.n	80033ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b11      	cmp	r3, #17
 80033da:	d107      	bne.n	80033ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f893 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d103      	bne.n	800341c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e079      	b.n	8003514 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003428:	d108      	bne.n	800343c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]
 800343a:	e05f      	b.n	80034fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800343c:	897b      	ldrh	r3, [r7, #10]
 800343e:	11db      	asrs	r3, r3, #7
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 0306 	and.w	r3, r3, #6
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f063 030f 	orn	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4930      	ldr	r1, [pc, #192]	; (800351c <I2C_MasterRequestRead+0x194>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f8b9 	bl	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e054      	b.n	8003514 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4929      	ldr	r1, [pc, #164]	; (8003520 <I2C_MasterRequestRead+0x198>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f8a9 	bl	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e044      	b.n	8003514 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f831 	bl	8003524 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00d      	beq.n	80034e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d6:	d103      	bne.n	80034e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e017      	b.n	8003514 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	11db      	asrs	r3, r3, #7
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0306 	and.w	r3, r3, #6
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f063 030e 	orn	r3, r3, #14
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <I2C_MasterRequestRead+0x198>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f865 	bl	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010008 	.word	0x00010008
 8003520:	00010002 	.word	0x00010002

08003524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003534:	e025      	b.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d021      	beq.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe fdf9 	bl	8002134 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d116      	bne.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e023      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10d      	bne.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	43da      	mvns	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	e00c      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	43da      	mvns	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0b6      	beq.n	8003536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e0:	e051      	b.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d123      	bne.n	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003600:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e046      	b.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d021      	beq.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fd77 	bl	8002134 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e020      	b.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10c      	bne.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4013      	ands	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e00b      	b.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d18d      	bne.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036dc:	e02d      	b.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8ce 	bl	8003880 <I2C_IsAcknowledgeFailed>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e02d      	b.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d021      	beq.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fd1d 	bl	8002134 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e007      	b.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d1ca      	bne.n	80036de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375e:	e02d      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f88d 	bl	8003880 <I2C_IsAcknowledgeFailed>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e02d      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d021      	beq.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe fcdc 	bl	8002134 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d1ca      	bne.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e0:	e042      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d119      	bne.n	8003824 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0210 	mvn.w	r2, #16
 80037f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e029      	b.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003824:	f7fe fc86 	bl	8002134 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	d302      	bcc.n	800383a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e007      	b.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d1b5      	bne.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d11b      	bne.n	80038d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e0:	b08f      	sub	sp, #60	; 0x3c
 80038e2:	af0a      	add	r7, sp, #40	; 0x28
 80038e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e10f      	b.n	8003b10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f005 ff0a 	bl	8009724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2203      	movs	r2, #3
 8003914:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fd3b 	bl	80063aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	687e      	ldr	r6, [r7, #4]
 800393c:	466d      	mov	r5, sp
 800393e:	f106 0410 	add.w	r4, r6, #16
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800394e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003952:	1d33      	adds	r3, r6, #4
 8003954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f002 fc12 	bl	8006180 <USB_CoreInit>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0d0      	b.n	8003b10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f002 fd29 	bl	80063cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	e04a      	b.n	8003a16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	333d      	adds	r3, #61	; 0x3d
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	333c      	adds	r3, #60	; 0x3c
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	b298      	uxth	r0, r3
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3342      	adds	r3, #66	; 0x42
 80039bc:	4602      	mov	r2, r0
 80039be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	333f      	adds	r3, #63	; 0x3f
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3344      	adds	r3, #68	; 0x44
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3348      	adds	r3, #72	; 0x48
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	3350      	adds	r3, #80	; 0x50
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	3301      	adds	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3af      	bcc.n	8003980 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e044      	b.n	8003ab0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	3301      	adds	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d3b5      	bcc.n	8003a26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	687e      	ldr	r6, [r7, #4]
 8003ac2:	466d      	mov	r5, sp
 8003ac4:	f106 0410 	add.w	r4, r6, #16
 8003ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad8:	1d33      	adds	r3, r6, #4
 8003ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f002 fc9f 	bl	8006420 <USB_DevInit>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e00d      	b.n	8003b10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fce7 	bl	80074dc <USB_DevDisconnect>

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_PCD_Start+0x1c>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e020      	b.n	8003b76 <HAL_PCD_Start+0x5e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d109      	bne.n	8003b58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d005      	beq.n	8003b58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f002 fc13 	bl	8006388 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fc97 	bl	800749a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b7e:	b590      	push	{r4, r7, lr}
 8003b80:	b08d      	sub	sp, #52	; 0x34
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 fd55 	bl	8007644 <USB_GetMode>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 839d 	bne.w	80042dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fcb9 	bl	800751e <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8393 	beq.w	80042da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fcb0 	bl	800751e <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d107      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f002 0202 	and.w	r2, r2, #2
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f003 fc9e 	bl	800751e <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d161      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0210 	bic.w	r2, r2, #16
 8003bfa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 020f 	and.w	r2, r3, #15
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	0c5b      	lsrs	r3, r3, #17
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d124      	bne.n	8003c72 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d035      	beq.n	8003ca0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6a38      	ldr	r0, [r7, #32]
 8003c48:	f003 fb04 	bl	8007254 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c58:	441a      	add	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	441a      	add	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	619a      	str	r2, [r3, #24]
 8003c70:	e016      	b.n	8003ca0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	0c5b      	lsrs	r3, r3, #17
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d110      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c84:	2208      	movs	r2, #8
 8003c86:	4619      	mov	r1, r3
 8003c88:	6a38      	ldr	r0, [r7, #32]
 8003c8a:	f003 fae3 	bl	8007254 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9a:	441a      	add	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0210 	orr.w	r2, r2, #16
 8003cae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 fc32 	bl	800751e <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc4:	d16e      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 fc38 	bl	8007544 <USB_ReadDevAllOutEpInterrupt>
 8003cd4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003cd6:	e062      	b.n	8003d9e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d057      	beq.n	8003d92 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fc5d 	bl	80075ac <USB_ReadDevOutEPInterrupt>
 8003cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fdb0 	bl	8004878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00c      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2308      	movs	r3, #8
 8003d32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 feaa 	bl	8004a90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	2310      	movs	r3, #16
 8003d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2320      	movs	r3, #32
 8003d72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	3301      	adds	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d199      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fbb8 	bl	800751e <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003db8:	f040 80c0 	bne.w	8003f3c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 fbd9 	bl	8007578 <USB_ReadDevAllInEpInterrupt>
 8003dc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dcc:	e0b2      	b.n	8003f34 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a7 	beq.w	8003f28 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fbff 	bl	80075e8 <USB_ReadDevInEPInterrupt>
 8003dea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d057      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69f9      	ldr	r1, [r7, #28]
 8003e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e16:	4013      	ands	r3, r2
 8003e18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e26:	461a      	mov	r2, r3
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d132      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3348      	adds	r3, #72	; 0x48
 8003e44:	6819      	ldr	r1, [r3, #0]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	3344      	adds	r3, #68	; 0x44
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4419      	add	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4403      	add	r3, r0
 8003e68:	3348      	adds	r3, #72	; 0x48
 8003e6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d113      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x31c>
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3350      	adds	r3, #80	; 0x50
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e92:	461a      	mov	r2, r3
 8003e94:	2101      	movs	r1, #1
 8003e96:	f003 fc07 	bl	80076a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f005 fcc0 	bl	8009826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2310      	movs	r3, #16
 8003edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2340      	movs	r3, #64	; 0x40
 8003ef8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	2302      	movs	r3, #2
 8003f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fc1b 	bl	800475e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f47f af49 	bne.w	8003dce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 faec 	bl	800751e <USB_ReadInterrupts>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f50:	d122      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d108      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f78:	2100      	movs	r1, #0
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fe26 	bl	8004bcc <HAL_PCDEx_LPM_Callback>
 8003f80:	e002      	b.n	8003f88 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f005 fcbc 	bl	8009900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f003 fabe 	bl	800751e <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d112      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f005 fc78 	bl	80098b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fd2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f003 faa0 	bl	800751e <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe8:	f040 80c7 	bne.w	800417a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2110      	movs	r1, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fb6e 	bl	80066e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004010:	e056      	b.n	80040c0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004024:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004044:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004060:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	461a      	mov	r2, r3
 8004074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004078:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004098:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040bc:	3301      	adds	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3a3      	bcc.n	8004012 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f6:	f043 030b 	orr.w	r3, r3, #11
 80040fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800410c:	f043 030b 	orr.w	r3, r3, #11
 8004110:	6453      	str	r3, [r2, #68]	; 0x44
 8004112:	e015      	b.n	8004140 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004122:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004126:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800412a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413a:	f043 030b 	orr.w	r3, r3, #11
 800413e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004152:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004164:	461a      	mov	r2, r3
 8004166:	f003 fa9f 	bl	80076a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f003 f9cd 	bl	800751e <USB_ReadInterrupts>
 8004184:	4603      	mov	r3, r0
 8004186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418e:	d124      	bne.n	80041da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 fa63 	bl	8007660 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f002 fb03 	bl	80067aa <USB_GetDevSpeed>
 80041a4:	4603      	mov	r3, r0
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681c      	ldr	r4, [r3, #0]
 80041b0:	f001 f92c 	bl	800540c <HAL_RCC_GetHCLKFreq>
 80041b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4620      	mov	r0, r4
 80041c0:	f002 f840 	bl	8006244 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f005 fb56 	bl	8009876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f003 f99d 	bl	800751e <USB_ReadInterrupts>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d10a      	bne.n	8004204 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f005 fb33 	bl	800985a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f002 0208 	and.w	r2, r2, #8
 8004202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f003 f988 	bl	800751e <USB_ReadInterrupts>
 800420e:	4603      	mov	r3, r0
 8004210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004218:	d10f      	bne.n	800423a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f005 fb8b 	bl	8009940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f003 f96d 	bl	800751e <USB_ReadInterrupts>
 8004244:	4603      	mov	r3, r0
 8004246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424e:	d10f      	bne.n	8004270 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f005 fb5e 	bl	800991c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800426e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f003 f952 	bl	800751e <USB_ReadInterrupts>
 800427a:	4603      	mov	r3, r0
 800427c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004284:	d10a      	bne.n	800429c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f005 fb6c 	bl	8009964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800429a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 f93c 	bl	800751e <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d115      	bne.n	80042dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f005 fb5c 	bl	8009980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	e000      	b.n	80042dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80042da:	bf00      	nop
    }
  }
}
 80042dc:	3734      	adds	r7, #52	; 0x34
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd90      	pop	{r4, r7, pc}

080042e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_PCD_SetAddress+0x1a>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e013      	b.n	8004324 <HAL_PCD_SetAddress+0x42>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f003 f89a 	bl	800744e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	4603      	mov	r3, r0
 800433c:	70fb      	strb	r3, [r7, #3]
 800433e:	460b      	mov	r3, r1
 8004340:	803b      	strh	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800434e:	2b00      	cmp	r3, #0
 8004350:	da0f      	bge.n	8004372 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	3338      	adds	r3, #56	; 0x38
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	705a      	strb	r2, [r3, #1]
 8004370:	e00f      	b.n	8004392 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800439e:	883a      	ldrh	r2, [r7, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	78ba      	ldrb	r2, [r7, #2]
 80043a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043bc:	78bb      	ldrb	r3, [r7, #2]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d102      	bne.n	80043c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_PCD_EP_Open+0xaa>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e00e      	b.n	80043f4 <HAL_PCD_EP_Open+0xc8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 fa05 	bl	80067f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da0f      	bge.n	8004430 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3338      	adds	r3, #56	; 0x38
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	705a      	strb	r2, [r3, #1]
 800442e:	e00f      	b.n	8004450 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 020f 	and.w	r2, r3, #15
 8004436:	4613      	mov	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	3304      	adds	r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	b2da      	uxtb	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_PCD_EP_Close+0x6e>
 8004466:	2302      	movs	r3, #2
 8004468:	e00e      	b.n	8004488 <HAL_PCD_EP_Close+0x8c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	f002 fa43 	bl	8006904 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	460b      	mov	r3, r1
 800449e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a0:	7afb      	ldrb	r3, [r7, #11]
 80044a2:	f003 020f 	and.w	r2, r3, #15
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2200      	movs	r2, #0
 80044d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	f002 fd1e 	bl	8006f44 <USB_EP0StartXfer>
 8004508:	e008      	b.n	800451c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	f002 fad0 	bl	8006abc <USB_EPStartXfer>
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004548:	681b      	ldr	r3, [r3, #0]
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b086      	sub	sp, #24
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	460b      	mov	r3, r1
 8004564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004566:	7afb      	ldrb	r3, [r7, #11]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	3338      	adds	r3, #56	; 0x38
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2201      	movs	r2, #1
 8004594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004596:	7afb      	ldrb	r3, [r7, #11]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	b2da      	uxtb	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045b0:	7afb      	ldrb	r3, [r7, #11]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	f002 fcbc 	bl	8006f44 <USB_EP0StartXfer>
 80045cc:	e008      	b.n	80045e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	f002 fa6e 	bl	8006abc <USB_EPStartXfer>
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 020f 	and.w	r2, r3, #15
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d901      	bls.n	8004608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e050      	b.n	80046aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da0f      	bge.n	8004630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3338      	adds	r3, #56	; 0x38
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	705a      	strb	r2, [r3, #1]
 800462e:	e00d      	b.n	800464c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	3304      	adds	r3, #4
 8004644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_PCD_EP_SetStall+0x82>
 8004668:	2302      	movs	r3, #2
 800466a:	e01e      	b.n	80046aa <HAL_PCD_EP_SetStall+0xc0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	4618      	mov	r0, r3
 800467c:	f002 fe13 	bl	80072a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	b2d9      	uxtb	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800469a:	461a      	mov	r2, r3
 800469c:	f003 f804 	bl	80076a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d901      	bls.n	80046d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e042      	b.n	8004756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da0f      	bge.n	80046f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	3338      	adds	r3, #56	; 0x38
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	705a      	strb	r2, [r3, #1]
 80046f6:	e00f      	b.n	8004718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	3304      	adds	r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_PCD_EP_ClrStall+0x86>
 8004734:	2302      	movs	r3, #2
 8004736:	e00e      	b.n	8004756 <HAL_PCD_EP_ClrStall+0xa4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68f9      	ldr	r1, [r7, #12]
 8004746:	4618      	mov	r0, r3
 8004748:	f002 fe1b 	bl	8007382 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08a      	sub	sp, #40	; 0x28
 8004762:	af02      	add	r7, sp, #8
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	3338      	adds	r3, #56	; 0x38
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	3304      	adds	r3, #4
 8004784:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d901      	bls.n	8004796 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06c      	b.n	8004870 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	3303      	adds	r3, #3
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ba:	e02b      	b.n	8004814 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d902      	bls.n	80047d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3303      	adds	r3, #3
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68d9      	ldr	r1, [r3, #12]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4603      	mov	r3, r0
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f002 fcf7 	bl	80071ea <USB_WritePacket>

    ep->xfer_buff  += len;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	441a      	add	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	b29b      	uxth	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	429a      	cmp	r2, r3
 8004828:	d809      	bhi.n	800483e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004832:	429a      	cmp	r2, r3
 8004834:	d203      	bcs.n	800483e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1be      	bne.n	80047bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d811      	bhi.n	800486e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2201      	movs	r2, #1
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	43db      	mvns	r3, r3
 8004864:	6939      	ldr	r1, [r7, #16]
 8004866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486a:	4013      	ands	r3, r2
 800486c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	333c      	adds	r3, #60	; 0x3c
 8004890:	3304      	adds	r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 80a0 	bne.w	80049f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d015      	beq.n	80048e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a72      	ldr	r2, [pc, #456]	; (8004a88 <PCD_EP_OutXfrComplete_int+0x210>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	f240 80dd 	bls.w	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80d7 	beq.w	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	461a      	mov	r2, r3
 80048de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e2:	6093      	str	r3, [r2, #8]
 80048e4:	e0cb      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	461a      	mov	r2, r3
 80048fe:	2320      	movs	r3, #32
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	e0bc      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 80b7 	bne.w	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <PCD_EP_OutXfrComplete_int+0x210>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d90f      	bls.n	8004938 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	6093      	str	r3, [r2, #8]
 8004936:	e0a2      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800494a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	0159      	lsls	r1, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	440b      	add	r3, r1
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800495e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4403      	add	r3, r0
 800496e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004972:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4403      	add	r3, r0
 8004996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4419      	add	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4403      	add	r3, r0
 80049ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d114      	bne.n	80049e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049da:	461a      	mov	r2, r3
 80049dc:	2101      	movs	r1, #1
 80049de:	f002 fe63 	bl	80076a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f004 ff01 	bl	80097f0 <HAL_PCD_DataOutStageCallback>
 80049ee:	e046      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <PCD_EP_OutXfrComplete_int+0x214>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d124      	bne.n	8004a42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a14:	6093      	str	r3, [r2, #8]
 8004a16:	e032      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2320      	movs	r3, #32
 8004a32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f004 fed8 	bl	80097f0 <HAL_PCD_DataOutStageCallback>
 8004a40:	e01d      	b.n	8004a7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d114      	bne.n	8004a72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f002 fe1b 	bl	80076a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f004 feb9 	bl	80097f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	4f54300a 	.word	0x4f54300a
 8004a8c:	4f54310a 	.word	0x4f54310a

08004a90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	333c      	adds	r3, #60	; 0x3c
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d90e      	bls.n	8004ae4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	461a      	mov	r2, r3
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f004 fe71 	bl	80097cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d90c      	bls.n	8004b0c <PCD_EP_OutSetupPacket_int+0x7c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d108      	bne.n	8004b0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b04:	461a      	mov	r2, r3
 8004b06:	2101      	movs	r1, #1
 8004b08:	f002 fdce 	bl	80076a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	4f54300a 	.word	0x4f54300a

08004b1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b3a:	883b      	ldrh	r3, [r7, #0]
 8004b3c:	0419      	lsls	r1, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
 8004b48:	e028      	b.n	8004b9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4413      	add	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e00d      	b.n	8004b7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	3340      	adds	r3, #64	; 0x40
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	3301      	adds	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d3ec      	bcc.n	8004b5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b84:	883b      	ldrh	r3, [r7, #0]
 8004b86:	0418      	lsls	r0, r3, #16
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4302      	orrs	r2, r0
 8004b94:	3340      	adds	r3, #64	; 0x40
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	887a      	ldrh	r2, [r7, #2]
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e264      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d075      	beq.n	8004cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c02:	4ba3      	ldr	r3, [pc, #652]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00c      	beq.n	8004c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0e:	4ba0      	ldr	r3, [pc, #640]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d112      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1a:	4b9d      	ldr	r3, [pc, #628]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c26:	d10b      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c28:	4b99      	ldr	r3, [pc, #612]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05b      	beq.n	8004cec <HAL_RCC_OscConfig+0x108>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d157      	bne.n	8004cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e23f      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d106      	bne.n	8004c58 <HAL_RCC_OscConfig+0x74>
 8004c4a:	4b91      	ldr	r3, [pc, #580]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a90      	ldr	r2, [pc, #576]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e01d      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x98>
 8004c62:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a8a      	ldr	r2, [pc, #552]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a87      	ldr	r2, [pc, #540]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	4b84      	ldr	r3, [pc, #528]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a83      	ldr	r2, [pc, #524]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a80      	ldr	r2, [pc, #512]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d013      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fa4a 	bl	8002134 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fd fa46 	bl	8002134 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e204      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0xc0>
 8004cc2:	e014      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fa36 	bl	8002134 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fa32 	bl	8002134 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1f0      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0xe8>
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d063      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfa:	4b65      	ldr	r3, [pc, #404]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d06:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d11c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b5f      	ldr	r3, [pc, #380]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d116      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	4b5c      	ldr	r3, [pc, #368]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d001      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e1c4      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b56      	ldr	r3, [pc, #344]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4952      	ldr	r1, [pc, #328]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4a:	e03a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d54:	4b4f      	ldr	r3, [pc, #316]	; (8004e94 <HAL_RCC_OscConfig+0x2b0>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fd f9eb 	bl	8002134 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fd f9e7 	bl	8002134 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1a5      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	4b46      	ldr	r3, [pc, #280]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	4b43      	ldr	r3, [pc, #268]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4940      	ldr	r1, [pc, #256]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d96:	4b3f      	ldr	r3, [pc, #252]	; (8004e94 <HAL_RCC_OscConfig+0x2b0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fd f9ca 	bl	8002134 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fd f9c6 	bl	8002134 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e184      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d030      	beq.n	8004e30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd6:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <HAL_RCC_OscConfig+0x2b4>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd f9aa 	bl	8002134 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de4:	f7fd f9a6 	bl	8002134 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e164      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x200>
 8004e02:	e015      	b.n	8004e30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x2b4>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0a:	f7fd f993 	bl	8002134 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e12:	f7fd f98f 	bl	8002134 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e14d      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80a0 	beq.w	8004f7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d121      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_RCC_OscConfig+0x2b8>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e86:	f7fd f955 	bl	8002134 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	e011      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2ce>
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	42470000 	.word	0x42470000
 8004e98:	42470e80 	.word	0x42470e80
 8004e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fd f948 	bl	8002134 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e106      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b85      	ldr	r3, [pc, #532]	; (80050c8 <HAL_RCC_OscConfig+0x4e4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a80      	ldr	r2, [pc, #512]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed2:	e01c      	b.n	8004f0e <HAL_RCC_OscConfig+0x32a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x312>
 8004edc:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	4a7a      	ldr	r2, [pc, #488]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee8:	4b78      	ldr	r3, [pc, #480]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef4:	e00b      	b.n	8004f0e <HAL_RCC_OscConfig+0x32a>
 8004ef6:	4b75      	ldr	r3, [pc, #468]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a74      	ldr	r2, [pc, #464]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
 8004f02:	4b72      	ldr	r3, [pc, #456]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a71      	ldr	r2, [pc, #452]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d015      	beq.n	8004f42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fd f90d 	bl	8002134 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fd f909 	bl	8002134 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0c5      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	4b65      	ldr	r3, [pc, #404]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ee      	beq.n	8004f1e <HAL_RCC_OscConfig+0x33a>
 8004f40:	e014      	b.n	8004f6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f42:	f7fd f8f7 	bl	8002134 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fd f8f3 	bl	8002134 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0af      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f60:	4b5a      	ldr	r3, [pc, #360]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ee      	bne.n	8004f4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b56      	ldr	r3, [pc, #344]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a55      	ldr	r2, [pc, #340]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 809b 	beq.w	80050be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f88:	4b50      	ldr	r3, [pc, #320]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d05c      	beq.n	800504e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d141      	bne.n	8005020 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fd f8c7 	bl	8002134 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fd f8c3 	bl	8002134 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e081      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbc:	4b43      	ldr	r3, [pc, #268]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	019b      	lsls	r3, r3, #6
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	4937      	ldr	r1, [pc, #220]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff2:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd f89c 	bl	8002134 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005000:	f7fd f898 	bl	8002134 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e056      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x41c>
 800501e:	e04e      	b.n	80050be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd f885 	bl	8002134 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800502e:	f7fd f881 	bl	8002134 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e03f      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005040:	4b22      	ldr	r3, [pc, #136]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x44a>
 800504c:	e037      	b.n	80050be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e032      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505a:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <HAL_RCC_OscConfig+0x4e8>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d028      	beq.n	80050ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d121      	bne.n	80050ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d11a      	bne.n	80050ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800508a:	4013      	ands	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005090:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40007000 	.word	0x40007000
 80050cc:	40023800 	.word	0x40023800
 80050d0:	42470060 	.word	0x42470060

080050d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0cc      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e8:	4b68      	ldr	r3, [pc, #416]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90c      	bls.n	8005110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b65      	ldr	r3, [pc, #404]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b63      	ldr	r3, [pc, #396]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0b8      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005128:	4b59      	ldr	r3, [pc, #356]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a58      	ldr	r2, [pc, #352]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005140:	4b53      	ldr	r3, [pc, #332]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a52      	ldr	r2, [pc, #328]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800514a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b50      	ldr	r3, [pc, #320]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	494d      	ldr	r1, [pc, #308]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d044      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b47      	ldr	r3, [pc, #284]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d119      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d003      	beq.n	8005192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005192:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e06f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e067      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b2:	4b37      	ldr	r3, [pc, #220]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4934      	ldr	r1, [pc, #208]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c4:	f7fc ffb6 	bl	8002134 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fc ffb2 	bl	8002134 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e04f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 020c 	and.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1eb      	bne.n	80051cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d20c      	bcs.n	800521c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e032      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4916      	ldr	r1, [pc, #88]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	490e      	ldr	r1, [pc, #56]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800525a:	f000 f821 	bl	80052a0 <HAL_RCC_GetSysClockFreq>
 800525e:	4602      	mov	r2, r0
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	490a      	ldr	r1, [pc, #40]	; (8005294 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fc ff16 	bl	80020ac <HAL_InitTick>

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023c00 	.word	0x40023c00
 8005290:	40023800 	.word	0x40023800
 8005294:	0800a70c 	.word	0x0800a70c
 8005298:	20000000 	.word	0x20000000
 800529c:	20000060 	.word	0x20000060

080052a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a0:	b5b0      	push	{r4, r5, r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052a6:	2100      	movs	r1, #0
 80052a8:	6079      	str	r1, [r7, #4]
 80052aa:	2100      	movs	r1, #0
 80052ac:	60f9      	str	r1, [r7, #12]
 80052ae:	2100      	movs	r1, #0
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052b2:	2100      	movs	r1, #0
 80052b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b6:	4952      	ldr	r1, [pc, #328]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 80052b8:	6889      	ldr	r1, [r1, #8]
 80052ba:	f001 010c 	and.w	r1, r1, #12
 80052be:	2908      	cmp	r1, #8
 80052c0:	d00d      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x3e>
 80052c2:	2908      	cmp	r1, #8
 80052c4:	f200 8094 	bhi.w	80053f0 <HAL_RCC_GetSysClockFreq+0x150>
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x32>
 80052cc:	2904      	cmp	r1, #4
 80052ce:	d003      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x38>
 80052d0:	e08e      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d2:	4b4c      	ldr	r3, [pc, #304]	; (8005404 <HAL_RCC_GetSysClockFreq+0x164>)
 80052d4:	60bb      	str	r3, [r7, #8]
       break;
 80052d6:	e08e      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_RCC_GetSysClockFreq+0x168>)
 80052da:	60bb      	str	r3, [r7, #8]
      break;
 80052dc:	e08b      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052de:	4948      	ldr	r1, [pc, #288]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 80052e0:	6849      	ldr	r1, [r1, #4]
 80052e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e8:	4945      	ldr	r1, [pc, #276]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 80052ea:	6849      	ldr	r1, [r1, #4]
 80052ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d024      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f4:	4942      	ldr	r1, [pc, #264]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 80052f6:	6849      	ldr	r1, [r1, #4]
 80052f8:	0989      	lsrs	r1, r1, #6
 80052fa:	4608      	mov	r0, r1
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005304:	f04f 0500 	mov.w	r5, #0
 8005308:	ea00 0204 	and.w	r2, r0, r4
 800530c:	ea01 0305 	and.w	r3, r1, r5
 8005310:	493d      	ldr	r1, [pc, #244]	; (8005408 <HAL_RCC_GetSysClockFreq+0x168>)
 8005312:	fb01 f003 	mul.w	r0, r1, r3
 8005316:	2100      	movs	r1, #0
 8005318:	fb01 f102 	mul.w	r1, r1, r2
 800531c:	1844      	adds	r4, r0, r1
 800531e:	493a      	ldr	r1, [pc, #232]	; (8005408 <HAL_RCC_GetSysClockFreq+0x168>)
 8005320:	fba2 0101 	umull	r0, r1, r2, r1
 8005324:	1863      	adds	r3, r4, r1
 8005326:	4619      	mov	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	f7fa ffae 	bl	8000290 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e04a      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	461a      	mov	r2, r3
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	ea02 0400 	and.w	r4, r2, r0
 8005356:	ea03 0501 	and.w	r5, r3, r1
 800535a:	4620      	mov	r0, r4
 800535c:	4629      	mov	r1, r5
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	014b      	lsls	r3, r1, #5
 8005368:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800536c:	0142      	lsls	r2, r0, #5
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	1b00      	subs	r0, r0, r4
 8005374:	eb61 0105 	sbc.w	r1, r1, r5
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	018b      	lsls	r3, r1, #6
 8005382:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005386:	0182      	lsls	r2, r0, #6
 8005388:	1a12      	subs	r2, r2, r0
 800538a:	eb63 0301 	sbc.w	r3, r3, r1
 800538e:	f04f 0000 	mov.w	r0, #0
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	00d9      	lsls	r1, r3, #3
 8005398:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800539c:	00d0      	lsls	r0, r2, #3
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	1912      	adds	r2, r2, r4
 80053a4:	eb45 0303 	adc.w	r3, r5, r3
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	0299      	lsls	r1, r3, #10
 80053b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053b6:	0290      	lsls	r0, r2, #10
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	f7fa ff62 	bl	8000290 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_RCC_GetSysClockFreq+0x160>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	60bb      	str	r3, [r7, #8]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <HAL_RCC_GetSysClockFreq+0x164>)
 80053f2:	60bb      	str	r3, [r7, #8]
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	68bb      	ldr	r3, [r7, #8]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	00f42400 	.word	0x00f42400
 8005408:	017d7840 	.word	0x017d7840

0800540c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_RCC_GetHCLKFreq+0x14>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000000 	.word	0x20000000

08005424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005428:	f7ff fff0 	bl	800540c <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0a9b      	lsrs	r3, r3, #10
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800a71c 	.word	0x0800a71c

0800544c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005450:	f7ff ffdc 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0b5b      	lsrs	r3, r3, #13
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	0800a71c 	.word	0x0800a71c

08005474 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d105      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d038      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800549c:	4b68      	ldr	r3, [pc, #416]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054a2:	f7fc fe47 	bl	8002134 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054a8:	e008      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054aa:	f7fc fe43 	bl	8002134 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e0bd      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054bc:	4b61      	ldr	r3, [pc, #388]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	019b      	lsls	r3, r3, #6
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	495a      	ldr	r1, [pc, #360]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054e2:	4b57      	ldr	r3, [pc, #348]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e8:	f7fc fe24 	bl	8002134 <HAL_GetTick>
 80054ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054f0:	f7fc fe20 	bl	8002134 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e09a      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005502:	4b50      	ldr	r3, [pc, #320]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8083 	beq.w	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	4b48      	ldr	r3, [pc, #288]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	4a47      	ldr	r2, [pc, #284]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6413      	str	r3, [r2, #64]	; 0x40
 800552c:	4b45      	ldr	r3, [pc, #276]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005538:	4b43      	ldr	r3, [pc, #268]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a42      	ldr	r2, [pc, #264]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800553e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005542:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005544:	f7fc fdf6 	bl	8002134 <HAL_GetTick>
 8005548:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fc fdf2 	bl	8002134 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e06c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800555e:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800556a:	4b36      	ldr	r3, [pc, #216]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005572:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02f      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	429a      	cmp	r2, r3
 8005586:	d028      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005588:	4b2e      	ldr	r3, [pc, #184]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005598:	4b2c      	ldr	r3, [pc, #176]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800559e:	4a29      	ldr	r2, [pc, #164]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055a4:	4b27      	ldr	r3, [pc, #156]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d114      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055b0:	f7fc fdc0 	bl	8002134 <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	e00a      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7fc fdbc 	bl	8002134 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e034      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ce:	4b1d      	ldr	r3, [pc, #116]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ee      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d10d      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80055e8:	4b16      	ldr	r3, [pc, #88]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	4911      	ldr	r1, [pc, #68]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4a0e      	ldr	r2, [pc, #56]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800560e:	6093      	str	r3, [r2, #8]
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561c:	4909      	ldr	r1, [pc, #36]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7d1a      	ldrb	r2, [r3, #20]
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005634:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	42470068 	.word	0x42470068
 8005644:	40023800 	.word	0x40023800
 8005648:	40007000 	.word	0x40007000
 800564c:	42470e40 	.word	0x42470e40
 8005650:	424711e0 	.word	0x424711e0

08005654 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e083      	b.n	800576e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7f5b      	ldrb	r3, [r3, #29]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fb fbc8 	bl	8000e0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	22ca      	movs	r2, #202	; 0xca
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2253      	movs	r2, #83	; 0x53
 8005690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f897 	bl	80057c6 <RTC_EnterInitMode>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	22ff      	movs	r2, #255	; 0xff
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e05e      	b.n	800576e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68d2      	ldr	r2, [r2, #12]
 80056ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6919      	ldr	r1, [r3, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	041a      	lsls	r2, r3, #16
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800570e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10e      	bne.n	800573c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f829 	bl	8005776 <HAL_RTC_WaitForSynchro>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2204      	movs	r2, #4
 8005736:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e018      	b.n	800576e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800574a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800576c:	2300      	movs	r3, #0
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005790:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fc fccf 	bl	8002134 <HAL_GetTick>
 8005796:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005798:	e009      	b.n	80057ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800579a:	f7fc fccb 	bl	8002134 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a8:	d901      	bls.n	80057ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e007      	b.n	80057be <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ee      	beq.n	800579a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d119      	bne.n	8005814 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057ea:	f7fc fca3 	bl	8002134 <HAL_GetTick>
 80057ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057f0:	e009      	b.n	8005806 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057f2:	f7fc fc9f 	bl	8002134 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005800:	d901      	bls.n	8005806 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e007      	b.n	8005816 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0ee      	beq.n	80057f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e041      	b.n	80058b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fb faf7 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f000 f8f1 	bl	8005a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_ConfigClockSource+0x18>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0b3      	b.n	8005a3c <HAL_TIM_ConfigClockSource+0x180>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590c:	d03e      	beq.n	800598c <HAL_TIM_ConfigClockSource+0xd0>
 800590e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005912:	f200 8087 	bhi.w	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	f000 8085 	beq.w	8005a28 <HAL_TIM_ConfigClockSource+0x16c>
 800591e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005922:	d87f      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 8005924:	2b70      	cmp	r3, #112	; 0x70
 8005926:	d01a      	beq.n	800595e <HAL_TIM_ConfigClockSource+0xa2>
 8005928:	2b70      	cmp	r3, #112	; 0x70
 800592a:	d87b      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 800592c:	2b60      	cmp	r3, #96	; 0x60
 800592e:	d050      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0x116>
 8005930:	2b60      	cmp	r3, #96	; 0x60
 8005932:	d877      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 8005934:	2b50      	cmp	r3, #80	; 0x50
 8005936:	d03c      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0xf6>
 8005938:	2b50      	cmp	r3, #80	; 0x50
 800593a:	d873      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d058      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x136>
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d86f      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d064      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x156>
 8005948:	2b30      	cmp	r3, #48	; 0x30
 800594a:	d86b      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d060      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x156>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d867      	bhi.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05c      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x156>
 8005958:	2b10      	cmp	r3, #16
 800595a:	d05a      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800595c:	e062      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f000 f963 	bl	8005c38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005980:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
      break;
 800598a:	e04e      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	6899      	ldr	r1, [r3, #8]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f000 f94c 	bl	8005c38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ae:	609a      	str	r2, [r3, #8]
      break;
 80059b0:	e03b      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	461a      	mov	r2, r3
 80059c0:	f000 f8c0 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2150      	movs	r1, #80	; 0x50
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f919 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80059d0:	e02b      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	f000 f8df 	bl	8005ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2160      	movs	r1, #96	; 0x60
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f909 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 80059f0:	e01b      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 f8a0 	bl	8005b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f8f9 	bl	8005c02 <TIM_ITRx_SetConfig>
      break;
 8005a10:	e00b      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f000 f8f0 	bl	8005c02 <TIM_ITRx_SetConfig>
        break;
 8005a22:	e002      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a24:	bf00      	nop
 8005a26:	e000      	b.n	8005a2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a31      	ldr	r2, [pc, #196]	; (8005b2c <TIM_Base_SetConfig+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <TIM_Base_SetConfig+0xec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x38>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <TIM_Base_SetConfig+0xf0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01b      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9c:	d017      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <TIM_Base_SetConfig+0xe8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <TIM_Base_SetConfig+0xec>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <TIM_Base_SetConfig+0xf0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <TIM_Base_SetConfig+0xf4>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <TIM_Base_SetConfig+0xf8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0x8a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <TIM_Base_SetConfig+0xfc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <TIM_Base_SetConfig+0xe4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d103      	bne.n	8005b14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 030a 	bic.w	r3, r3, #10
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0210 	bic.w	r2, r3, #16
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f043 0307 	orr.w	r3, r3, #7
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e050      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40014000 	.word	0x40014000

08005d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e03f      	b.n	8005de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb f87e 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f829 	bl	8005df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	b09f      	sub	sp, #124	; 0x7c
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	68d9      	ldr	r1, [r3, #12]
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e34:	f021 010c 	bic.w	r1, r1, #12
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	6999      	ldr	r1, [r3, #24]
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	ea40 0301 	orr.w	r3, r0, r1
 8005e58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4bc5      	ldr	r3, [pc, #788]	; (8006174 <UART_SetConfig+0x384>)
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d004      	beq.n	8005e6e <UART_SetConfig+0x7e>
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4bc3      	ldr	r3, [pc, #780]	; (8006178 <UART_SetConfig+0x388>)
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d103      	bne.n	8005e76 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e6e:	f7ff faed 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 8005e72:	6778      	str	r0, [r7, #116]	; 0x74
 8005e74:	e002      	b.n	8005e7c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e76:	f7ff fad5 	bl	8005424 <HAL_RCC_GetPCLK1Freq>
 8005e7a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e84:	f040 80b6 	bne.w	8005ff4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8a:	461c      	mov	r4, r3
 8005e8c:	f04f 0500 	mov.w	r5, #0
 8005e90:	4622      	mov	r2, r4
 8005e92:	462b      	mov	r3, r5
 8005e94:	1891      	adds	r1, r2, r2
 8005e96:	6439      	str	r1, [r7, #64]	; 0x40
 8005e98:	415b      	adcs	r3, r3
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ea0:	1912      	adds	r2, r2, r4
 8005ea2:	eb45 0303 	adc.w	r3, r5, r3
 8005ea6:	f04f 0000 	mov.w	r0, #0
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	00d9      	lsls	r1, r3, #3
 8005eb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eb4:	00d0      	lsls	r0, r2, #3
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	1911      	adds	r1, r2, r4
 8005ebc:	6639      	str	r1, [r7, #96]	; 0x60
 8005ebe:	416b      	adcs	r3, r5
 8005ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ed8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005edc:	f7fa f9d8 	bl	8000290 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4ba5      	ldr	r3, [pc, #660]	; (800617c <UART_SetConfig+0x38c>)
 8005ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	011e      	lsls	r6, r3, #4
 8005eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	f04f 0500 	mov.w	r5, #0
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	462b      	mov	r3, r5
 8005efa:	1891      	adds	r1, r2, r2
 8005efc:	6339      	str	r1, [r7, #48]	; 0x30
 8005efe:	415b      	adcs	r3, r3
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
 8005f02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f06:	1912      	adds	r2, r2, r4
 8005f08:	eb45 0303 	adc.w	r3, r5, r3
 8005f0c:	f04f 0000 	mov.w	r0, #0
 8005f10:	f04f 0100 	mov.w	r1, #0
 8005f14:	00d9      	lsls	r1, r3, #3
 8005f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f1a:	00d0      	lsls	r0, r2, #3
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	1911      	adds	r1, r2, r4
 8005f22:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f24:	416b      	adcs	r3, r5
 8005f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	1891      	adds	r1, r2, r2
 8005f34:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f36:	415b      	adcs	r3, r3
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f42:	f7fa f9a5 	bl	8000290 <__aeabi_uldivmod>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4b8c      	ldr	r3, [pc, #560]	; (800617c <UART_SetConfig+0x38c>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a87      	ldr	r2, [pc, #540]	; (800617c <UART_SetConfig+0x38c>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f6c:	441e      	add	r6, r3
 8005f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f70:	4618      	mov	r0, r3
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	1894      	adds	r4, r2, r2
 8005f7c:	623c      	str	r4, [r7, #32]
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
 8005f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f86:	1812      	adds	r2, r2, r0
 8005f88:	eb41 0303 	adc.w	r3, r1, r3
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	f04f 0500 	mov.w	r5, #0
 8005f94:	00dd      	lsls	r5, r3, #3
 8005f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f9a:	00d4      	lsls	r4, r2, #3
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	1814      	adds	r4, r2, r0
 8005fa2:	653c      	str	r4, [r7, #80]	; 0x50
 8005fa4:	414b      	adcs	r3, r1
 8005fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	1891      	adds	r1, r2, r2
 8005fb4:	61b9      	str	r1, [r7, #24]
 8005fb6:	415b      	adcs	r3, r3
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fc2:	f7fa f965 	bl	8000290 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4b6c      	ldr	r3, [pc, #432]	; (800617c <UART_SetConfig+0x38c>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	; 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3332      	adds	r3, #50	; 0x32
 8005fde:	4a67      	ldr	r2, [pc, #412]	; (800617c <UART_SetConfig+0x38c>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f003 0207 	and.w	r2, r3, #7
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4432      	add	r2, r6
 8005ff0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff2:	e0b9      	b.n	8006168 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	f04f 0500 	mov.w	r5, #0
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	1891      	adds	r1, r2, r2
 8006002:	6139      	str	r1, [r7, #16]
 8006004:	415b      	adcs	r3, r3
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800600c:	1912      	adds	r2, r2, r4
 800600e:	eb45 0303 	adc.w	r3, r5, r3
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	00d9      	lsls	r1, r3, #3
 800601c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006020:	00d0      	lsls	r0, r2, #3
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	eb12 0804 	adds.w	r8, r2, r4
 800602a:	eb43 0905 	adc.w	r9, r3, r5
 800602e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4618      	mov	r0, r3
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	008b      	lsls	r3, r1, #2
 8006042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006046:	0082      	lsls	r2, r0, #2
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa f920 	bl	8000290 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4b49      	ldr	r3, [pc, #292]	; (800617c <UART_SetConfig+0x38c>)
 8006056:	fba3 2302 	umull	r2, r3, r3, r2
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	011e      	lsls	r6, r3, #4
 800605e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006060:	4618      	mov	r0, r3
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	1894      	adds	r4, r2, r2
 800606c:	60bc      	str	r4, [r7, #8]
 800606e:	415b      	adcs	r3, r3
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006076:	1812      	adds	r2, r2, r0
 8006078:	eb41 0303 	adc.w	r3, r1, r3
 800607c:	f04f 0400 	mov.w	r4, #0
 8006080:	f04f 0500 	mov.w	r5, #0
 8006084:	00dd      	lsls	r5, r3, #3
 8006086:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800608a:	00d4      	lsls	r4, r2, #3
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	1814      	adds	r4, r2, r0
 8006092:	64bc      	str	r4, [r7, #72]	; 0x48
 8006094:	414b      	adcs	r3, r1
 8006096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4618      	mov	r0, r3
 800609e:	f04f 0100 	mov.w	r1, #0
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	008b      	lsls	r3, r1, #2
 80060ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060b0:	0082      	lsls	r2, r0, #2
 80060b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060b6:	f7fa f8eb 	bl	8000290 <__aeabi_uldivmod>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4b2f      	ldr	r3, [pc, #188]	; (800617c <UART_SetConfig+0x38c>)
 80060c0:	fba3 1302 	umull	r1, r3, r3, r2
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	2164      	movs	r1, #100	; 0x64
 80060c8:	fb01 f303 	mul.w	r3, r1, r3
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	3332      	adds	r3, #50	; 0x32
 80060d2:	4a2a      	ldr	r2, [pc, #168]	; (800617c <UART_SetConfig+0x38c>)
 80060d4:	fba2 2303 	umull	r2, r3, r2, r3
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060de:	441e      	add	r6, r3
 80060e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e2:	4618      	mov	r0, r3
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	1894      	adds	r4, r2, r2
 80060ee:	603c      	str	r4, [r7, #0]
 80060f0:	415b      	adcs	r3, r3
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f8:	1812      	adds	r2, r2, r0
 80060fa:	eb41 0303 	adc.w	r3, r1, r3
 80060fe:	f04f 0400 	mov.w	r4, #0
 8006102:	f04f 0500 	mov.w	r5, #0
 8006106:	00dd      	lsls	r5, r3, #3
 8006108:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800610c:	00d4      	lsls	r4, r2, #3
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	eb12 0a00 	adds.w	sl, r2, r0
 8006116:	eb43 0b01 	adc.w	fp, r3, r1
 800611a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4618      	mov	r0, r3
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	008b      	lsls	r3, r1, #2
 800612e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006132:	0082      	lsls	r2, r0, #2
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa f8aa 	bl	8000290 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <UART_SetConfig+0x38c>)
 8006142:	fba3 1302 	umull	r1, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2164      	movs	r1, #100	; 0x64
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3332      	adds	r3, #50	; 0x32
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <UART_SetConfig+0x38c>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4432      	add	r2, r6
 8006166:	609a      	str	r2, [r3, #8]
}
 8006168:	bf00      	nop
 800616a:	377c      	adds	r7, #124	; 0x7c
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006172:	bf00      	nop
 8006174:	40011000 	.word	0x40011000
 8006178:	40011400 	.word	0x40011400
 800617c:	51eb851f 	.word	0x51eb851f

08006180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006180:	b084      	sub	sp, #16
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	f107 001c 	add.w	r0, r7, #28
 800618e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	d122      	bne.n	80061de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d105      	bne.n	80061d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fac6 	bl	8007764 <USB_CoreReset>
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]
 80061dc:	e01a      	b.n	8006214 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 faba 	bl	8007764 <USB_CoreReset>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
 8006206:	e005      	b.n	8006214 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2b01      	cmp	r3, #1
 8006218:	d10b      	bne.n	8006232 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f043 0206 	orr.w	r2, r3, #6
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623e:	b004      	add	sp, #16
 8006240:	4770      	bx	lr
	...

08006244 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d165      	bne.n	8006324 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a41      	ldr	r2, [pc, #260]	; (8006360 <USB_SetTurnaroundTime+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d906      	bls.n	800626e <USB_SetTurnaroundTime+0x2a>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a40      	ldr	r2, [pc, #256]	; (8006364 <USB_SetTurnaroundTime+0x120>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d202      	bcs.n	800626e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006268:	230f      	movs	r3, #15
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e062      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <USB_SetTurnaroundTime+0x120>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d306      	bcc.n	8006284 <USB_SetTurnaroundTime+0x40>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4a3b      	ldr	r2, [pc, #236]	; (8006368 <USB_SetTurnaroundTime+0x124>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d202      	bcs.n	8006284 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800627e:	230e      	movs	r3, #14
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e057      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a38      	ldr	r2, [pc, #224]	; (8006368 <USB_SetTurnaroundTime+0x124>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d306      	bcc.n	800629a <USB_SetTurnaroundTime+0x56>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a37      	ldr	r2, [pc, #220]	; (800636c <USB_SetTurnaroundTime+0x128>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d202      	bcs.n	800629a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006294:	230d      	movs	r3, #13
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e04c      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a33      	ldr	r2, [pc, #204]	; (800636c <USB_SetTurnaroundTime+0x128>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d306      	bcc.n	80062b0 <USB_SetTurnaroundTime+0x6c>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a32      	ldr	r2, [pc, #200]	; (8006370 <USB_SetTurnaroundTime+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d802      	bhi.n	80062b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062aa:	230c      	movs	r3, #12
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e041      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <USB_SetTurnaroundTime+0x12c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d906      	bls.n	80062c6 <USB_SetTurnaroundTime+0x82>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <USB_SetTurnaroundTime+0x130>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d802      	bhi.n	80062c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062c0:	230b      	movs	r3, #11
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e036      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <USB_SetTurnaroundTime+0x130>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d906      	bls.n	80062dc <USB_SetTurnaroundTime+0x98>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4a29      	ldr	r2, [pc, #164]	; (8006378 <USB_SetTurnaroundTime+0x134>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d802      	bhi.n	80062dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062d6:	230a      	movs	r3, #10
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e02b      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a26      	ldr	r2, [pc, #152]	; (8006378 <USB_SetTurnaroundTime+0x134>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d906      	bls.n	80062f2 <USB_SetTurnaroundTime+0xae>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <USB_SetTurnaroundTime+0x138>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d202      	bcs.n	80062f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062ec:	2309      	movs	r3, #9
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e020      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a21      	ldr	r2, [pc, #132]	; (800637c <USB_SetTurnaroundTime+0x138>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d306      	bcc.n	8006308 <USB_SetTurnaroundTime+0xc4>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4a20      	ldr	r2, [pc, #128]	; (8006380 <USB_SetTurnaroundTime+0x13c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d802      	bhi.n	8006308 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006302:	2308      	movs	r3, #8
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e015      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <USB_SetTurnaroundTime+0x13c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d906      	bls.n	800631e <USB_SetTurnaroundTime+0xda>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4a1c      	ldr	r2, [pc, #112]	; (8006384 <USB_SetTurnaroundTime+0x140>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d202      	bcs.n	800631e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006318:	2307      	movs	r3, #7
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	e00a      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800631e:	2306      	movs	r3, #6
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e007      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800632a:	2309      	movs	r3, #9
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e001      	b.n	8006334 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006330:	2309      	movs	r3, #9
 8006332:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800634c:	431a      	orrs	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	00d8acbf 	.word	0x00d8acbf
 8006364:	00e4e1c0 	.word	0x00e4e1c0
 8006368:	00f42400 	.word	0x00f42400
 800636c:	01067380 	.word	0x01067380
 8006370:	011a499f 	.word	0x011a499f
 8006374:	01312cff 	.word	0x01312cff
 8006378:	014ca43f 	.word	0x014ca43f
 800637c:	016e3600 	.word	0x016e3600
 8006380:	01a6ab1f 	.word	0x01a6ab1f
 8006384:	01e84800 	.word	0x01e84800

08006388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f043 0201 	orr.w	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d106      	bne.n	80063f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e00b      	b.n	8006410 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e001      	b.n	8006410 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e003      	b.n	8006418 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006410:	2032      	movs	r0, #50	; 0x32
 8006412:	f7fb fe9b 	bl	800214c <HAL_Delay>

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006420:	b084      	sub	sp, #16
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800642e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	e009      	b.n	8006454 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3340      	adds	r3, #64	; 0x40
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	3301      	adds	r3, #1
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b0e      	cmp	r3, #14
 8006458:	d9f2      	bls.n	8006440 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800645a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11c      	bne.n	800649a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646e:	f043 0302 	orr.w	r3, r3, #2
 8006472:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
 8006498:	e00b      	b.n	80064b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064b8:	461a      	mov	r2, r3
 80064ba:	2300      	movs	r3, #0
 80064bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	4619      	mov	r1, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064cc:	461a      	mov	r2, r3
 80064ce:	680b      	ldr	r3, [r1, #0]
 80064d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10c      	bne.n	80064f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f949 	bl	8006778 <USB_SetDevSpeed>
 80064e6:	e008      	b.n	80064fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064e8:	2101      	movs	r1, #1
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f944 	bl	8006778 <USB_SetDevSpeed>
 80064f0:	e003      	b.n	80064fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064f2:	2103      	movs	r1, #3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f93f 	bl	8006778 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064fa:	2110      	movs	r1, #16
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f8f3 	bl	80066e8 <USB_FlushTxFifo>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f911 	bl	8006734 <USB_FlushRxFifo>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	461a      	mov	r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e043      	b.n	80065ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655c:	d118      	bne.n	8006590 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	461a      	mov	r2, r3
 8006572:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e013      	b.n	80065a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	461a      	mov	r2, r3
 8006588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	e008      	b.n	80065a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659c:	461a      	mov	r2, r3
 800659e:	2300      	movs	r3, #0
 80065a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ae:	461a      	mov	r2, r3
 80065b0:	2300      	movs	r3, #0
 80065b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c0:	461a      	mov	r2, r3
 80065c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	3301      	adds	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d3b7      	bcc.n	8006546 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e043      	b.n	8006664 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f2:	d118      	bne.n	8006626 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	461a      	mov	r2, r3
 8006608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e013      	b.n	8006638 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e008      	b.n	8006638 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	461a      	mov	r2, r3
 8006658:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800665c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	429a      	cmp	r2, r3
 800666a:	d3b7      	bcc.n	80065dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800668c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f043 0210 	orr.w	r2, r3, #16
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <USB_DevInit+0x2c4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 0208 	orr.w	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d107      	bne.n	80066d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066cc:	f043 0304 	orr.w	r3, r3, #4
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066e0:	b004      	add	sp, #16
 80066e2:	4770      	bx	lr
 80066e4:	803c3800 	.word	0x803c3800

080066e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	019b      	lsls	r3, r3, #6
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a09      	ldr	r2, [pc, #36]	; (8006730 <USB_FlushTxFifo+0x48>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d901      	bls.n	8006714 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d0f0      	beq.n	8006702 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	00030d40 	.word	0x00030d40

08006734 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2210      	movs	r2, #16
 8006744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <USB_FlushRxFifo+0x40>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e006      	b.n	8006766 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b10      	cmp	r3, #16
 8006762:	d0f0      	beq.n	8006746 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	00030d40 	.word	0x00030d40

08006778 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006798:	4313      	orrs	r3, r2
 800679a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0306 	and.w	r3, r3, #6
 80067c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75fb      	strb	r3, [r7, #23]
 80067ce:	e00a      	b.n	80067e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d002      	beq.n	80067dc <USB_GetDevSpeed+0x32>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b06      	cmp	r3, #6
 80067da:	d102      	bne.n	80067e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067dc:	2302      	movs	r3, #2
 80067de:	75fb      	strb	r3, [r7, #23]
 80067e0:	e001      	b.n	80067e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067e2:	230f      	movs	r3, #15
 80067e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d13a      	bne.n	8006886 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	68f9      	ldr	r1, [r7, #12]
 800682a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800682e:	4313      	orrs	r3, r2
 8006830:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d155      	bne.n	80068f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006864:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	059b      	lsls	r3, r3, #22
 800686a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800686c:	4313      	orrs	r3, r2
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e036      	b.n	80068f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	2101      	movs	r1, #1
 8006898:	fa01 f303 	lsl.w	r3, r1, r3
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11a      	bne.n	80068f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	78db      	ldrb	r3, [r3, #3]
 80068d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068da:	430b      	orrs	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d161      	bne.n	80069e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006936:	d11f      	bne.n	8006978 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006956:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	440a      	add	r2, r1
 800696e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006976:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	2101      	movs	r1, #1
 800698a:	fa01 f303 	lsl.w	r3, r1, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	43db      	mvns	r3, r3
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006998:	4013      	ands	r3, r2
 800699a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	0159      	lsls	r1, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	440b      	add	r3, r1
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	4619      	mov	r1, r3
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <USB_DeactivateEndpoint+0x1b0>)
 80069de:	4013      	ands	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]
 80069e2:	e060      	b.n	8006aa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fa:	d11f      	bne.n	8006a3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	43db      	mvns	r3, r3
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	69da      	ldr	r2, [r3, #28]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a80:	4013      	ands	r3, r2
 8006a82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	0159      	lsls	r1, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	440b      	add	r3, r1
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <USB_DeactivateEndpoint+0x1b4>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	ec337800 	.word	0xec337800
 8006ab8:	eff37800 	.word	0xeff37800

08006abc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 815c 	bne.w	8006d96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d132      	bne.n	8006b4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	69fa      	ldr	r2, [r7, #28]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b44:	0cdb      	lsrs	r3, r3, #19
 8006b46:	04db      	lsls	r3, r3, #19
 8006b48:	6113      	str	r3, [r2, #16]
 8006b4a:	e074      	b.n	8006c36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b66:	0cdb      	lsrs	r3, r3, #19
 8006b68:	04db      	lsls	r3, r3, #19
 8006b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6959      	ldr	r1, [r3, #20]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	1e59      	subs	r1, r3, #1
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bb2:	04d9      	lsls	r1, r3, #19
 8006bb4:	4b9d      	ldr	r3, [pc, #628]	; (8006e2c <USB_EPStartXfer+0x370>)
 8006bb6:	400b      	ands	r3, r1
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	0148      	lsls	r0, r1, #5
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	4401      	add	r1, r0
 8006bc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bde:	69b9      	ldr	r1, [r7, #24]
 8006be0:	0148      	lsls	r0, r1, #5
 8006be2:	69f9      	ldr	r1, [r7, #28]
 8006be4:	4401      	add	r1, r0
 8006be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bea:	4313      	orrs	r3, r2
 8006bec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d11f      	bne.n	8006c36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d14b      	bne.n	8006cd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d128      	bne.n	8006cb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d110      	bne.n	8006c92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e00f      	b.n	8006cb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	69fa      	ldr	r2, [r7, #28]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	0151      	lsls	r1, r2, #5
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	440a      	add	r2, r1
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	e12f      	b.n	8006f34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	78db      	ldrb	r3, [r3, #3]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d015      	beq.n	8006d28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8117 	beq.w	8006f34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	2101      	movs	r1, #1
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	69f9      	ldr	r1, [r7, #28]
 8006d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d22:	4313      	orrs	r3, r2
 8006d24:	634b      	str	r3, [r1, #52]	; 0x34
 8006d26:	e105      	b.n	8006f34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d110      	bne.n	8006d5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e00f      	b.n	8006d7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	68d9      	ldr	r1, [r3, #12]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	b298      	uxth	r0, r3
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fa2b 	bl	80071ea <USB_WritePacket>
 8006d94:	e0ce      	b.n	8006f34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db0:	0cdb      	lsrs	r3, r3, #19
 8006db2:	04db      	lsls	r3, r3, #19
 8006db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d126      	bne.n	8006e30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	0148      	lsls	r0, r1, #5
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	4401      	add	r1, r0
 8006e00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e04:	4313      	orrs	r3, r2
 8006e06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e26:	6113      	str	r3, [r2, #16]
 8006e28:	e036      	b.n	8006e98 <USB_EPStartXfer+0x3dc>
 8006e2a:	bf00      	nop
 8006e2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	4413      	add	r3, r2
 8006e3a:	1e5a      	subs	r2, r3, #1
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	691a      	ldr	r2, [r3, #16]
 8006e54:	8afb      	ldrh	r3, [r7, #22]
 8006e56:	04d9      	lsls	r1, r3, #19
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <USB_EPStartXfer+0x484>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	69b9      	ldr	r1, [r7, #24]
 8006e5e:	0148      	lsls	r0, r1, #5
 8006e60:	69f9      	ldr	r1, [r7, #28]
 8006e62:	4401      	add	r1, r0
 8006e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	8af9      	ldrh	r1, [r7, #22]
 8006e80:	fb01 f303 	mul.w	r3, r1, r3
 8006e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e88:	69b9      	ldr	r1, [r7, #24]
 8006e8a:	0148      	lsls	r0, r1, #5
 8006e8c:	69f9      	ldr	r1, [r7, #28]
 8006e8e:	4401      	add	r1, r0
 8006e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e94:	4313      	orrs	r3, r2
 8006e96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10d      	bne.n	8006eba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	68d9      	ldr	r1, [r3, #12]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	460a      	mov	r2, r1
 8006eb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d128      	bne.n	8006f14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d110      	bne.n	8006ef4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e00f      	b.n	8006f14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	1ff80000 	.word	0x1ff80000

08006f44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f040 80cd 	bne.w	8007100 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d132      	bne.n	8006fd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fcc:	0cdb      	lsrs	r3, r3, #19
 8006fce:	04db      	lsls	r3, r3, #19
 8006fd0:	6113      	str	r3, [r2, #16]
 8006fd2:	e04e      	b.n	8007072 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fee:	0cdb      	lsrs	r3, r3, #19
 8006ff0:	04db      	lsls	r3, r3, #19
 8006ff2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007012:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007016:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	429a      	cmp	r2, r3
 8007022:	d903      	bls.n	800702c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800704a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007062:	6939      	ldr	r1, [r7, #16]
 8007064:	0148      	lsls	r0, r1, #5
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	4401      	add	r1, r0
 800706a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d11e      	bne.n	80070b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	461a      	mov	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e092      	b.n	80071dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d07e      	beq.n	80071dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	2101      	movs	r1, #1
 80070f0:	fa01 f303 	lsl.w	r3, r1, r3
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fa:	4313      	orrs	r3, r2
 80070fc:	634b      	str	r3, [r1, #52]	; 0x34
 80070fe:	e06d      	b.n	80071dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	0cdb      	lsrs	r3, r3, #19
 800711c:	04db      	lsls	r3, r3, #19
 800711e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800713e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007142:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718a:	6939      	ldr	r1, [r7, #16]
 800718c:	0148      	lsls	r0, r1, #5
 800718e:	6979      	ldr	r1, [r7, #20]
 8007190:	4401      	add	r1, r0
 8007192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007196:	4313      	orrs	r3, r2
 8007198:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10d      	bne.n	80071bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68d9      	ldr	r1, [r3, #12]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b8:	460a      	mov	r2, r1
 80071ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b089      	sub	sp, #36	; 0x24
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	4611      	mov	r1, r2
 80071f6:	461a      	mov	r2, r3
 80071f8:	460b      	mov	r3, r1
 80071fa:	71fb      	strb	r3, [r7, #7]
 80071fc:	4613      	mov	r3, r2
 80071fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007208:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11a      	bne.n	8007246 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007210:	88bb      	ldrh	r3, [r7, #4]
 8007212:	3303      	adds	r3, #3
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007218:	2300      	movs	r3, #0
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	e00f      	b.n	800723e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	031a      	lsls	r2, r3, #12
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722a:	461a      	mov	r2, r3
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3304      	adds	r3, #4
 8007236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	3301      	adds	r3, #1
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d3eb      	bcc.n	800721e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3724      	adds	r7, #36	; 0x24
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	; 0x24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	3303      	adds	r3, #3
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	e00b      	b.n	8007290 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	601a      	str	r2, [r3, #0]
    pDest++;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3304      	adds	r3, #4
 8007288:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3301      	adds	r3, #1
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d3ef      	bcc.n	8007278 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007298:	69fb      	ldr	r3, [r7, #28]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3724      	adds	r7, #36	; 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d12c      	bne.n	800731c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db12      	blt.n	80072fa <USB_EPSetStall+0x54>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00f      	beq.n	80072fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	0151      	lsls	r1, r2, #5
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	440a      	add	r2, r1
 8007310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e02b      	b.n	8007374 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	db12      	blt.n	8007354 <USB_EPSetStall+0xae>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00f      	beq.n	8007354 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007352:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d128      	bne.n	80073f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	78db      	ldrb	r3, [r3, #3]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d003      	beq.n	80073ce <USB_EPClearStall+0x4c>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d138      	bne.n	8007440 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e027      	b.n	8007440 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800740e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	78db      	ldrb	r3, [r3, #3]
 8007414:	2b03      	cmp	r3, #3
 8007416:	d003      	beq.n	8007420 <USB_EPClearStall+0x9e>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	78db      	ldrb	r3, [r3, #3]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d10f      	bne.n	8007440 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007470:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007488:	4313      	orrs	r3, r2
 800748a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c8:	f023 0302 	bic.w	r3, r3, #2
 80074cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750a:	f043 0302 	orr.w	r3, r3, #2
 800750e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4013      	ands	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	4013      	ands	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	0c1b      	lsrs	r3, r3, #16
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4013      	ands	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	b29b      	uxth	r3, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075da:	68bb      	ldr	r3, [r7, #8]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	01db      	lsls	r3, r3, #7
 800761a:	b2db      	uxtb	r3, r3
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4013      	ands	r3, r2
 8007634:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007636:	68bb      	ldr	r3, [r7, #8]
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0301 	and.w	r3, r3, #1
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800767e:	f023 0307 	bic.w	r3, r3, #7
 8007682:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007696:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	460b      	mov	r3, r1
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	333c      	adds	r3, #60	; 0x3c
 80076be:	3304      	adds	r3, #4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <USB_EP0_OutStart+0xb8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d90a      	bls.n	80076e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076dc:	d101      	bne.n	80076e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e037      	b.n	8007752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	461a      	mov	r2, r3
 80076ea:	2300      	movs	r3, #0
 80076ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007710:	f043 0318 	orr.w	r3, r3, #24
 8007714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10f      	bne.n	8007750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800774e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	4f54300a 	.word	0x4f54300a

08007764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <USB_CoreReset+0x64>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d901      	bls.n	8007782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e01b      	b.n	80077ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	daf2      	bge.n	8007770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <USB_CoreReset+0x64>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d901      	bls.n	80077ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e006      	b.n	80077ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d0f0      	beq.n	800779a <USB_CoreReset+0x36>

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	00030d40 	.word	0x00030d40

080077cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077dc:	f002 fa68 	bl	8009cb0 <USBD_static_malloc>
 80077e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077f0:	2302      	movs	r3, #2
 80077f2:	e066      	b.n	80078c2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7c1b      	ldrb	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d119      	bne.n	8007838 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007808:	2202      	movs	r2, #2
 800780a:	2181      	movs	r1, #129	; 0x81
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f002 f92c 	bl	8009a6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800781c:	2202      	movs	r2, #2
 800781e:	2101      	movs	r1, #1
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f002 f922 	bl	8009a6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2210      	movs	r2, #16
 8007832:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007836:	e016      	b.n	8007866 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007838:	2340      	movs	r3, #64	; 0x40
 800783a:	2202      	movs	r2, #2
 800783c:	2181      	movs	r1, #129	; 0x81
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f002 f913 	bl	8009a6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800784a:	2340      	movs	r3, #64	; 0x40
 800784c:	2202      	movs	r2, #2
 800784e:	2101      	movs	r1, #1
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f002 f90a 	bl	8009a6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2210      	movs	r2, #16
 8007862:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007866:	2308      	movs	r3, #8
 8007868:	2203      	movs	r2, #3
 800786a:	2182      	movs	r1, #130	; 0x82
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f002 f8fc 	bl	8009a6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7c1b      	ldrb	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a6:	2101      	movs	r1, #1
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 f9cd 	bl	8009c48 <USBD_LL_PrepareReceive>
 80078ae:	e007      	b.n	80078c0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b6:	2340      	movs	r3, #64	; 0x40
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 f9c4 	bl	8009c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078d6:	2181      	movs	r1, #129	; 0x81
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f002 f8ec 	bl	8009ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078e4:	2101      	movs	r1, #1
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f002 f8e5 	bl	8009ab6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078f4:	2182      	movs	r1, #130	; 0x82
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f002 f8dd 	bl	8009ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007926:	4618      	mov	r0, r3
 8007928:	f002 f9d0 	bl	8009ccc <USBD_static_free>
    pdev->pClassData = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007950:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007964:	2303      	movs	r3, #3
 8007966:	e0af      	b.n	8007ac8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007970:	2b00      	cmp	r3, #0
 8007972:	d03f      	beq.n	80079f4 <USBD_CDC_Setup+0xb4>
 8007974:	2b20      	cmp	r3, #32
 8007976:	f040 809f 	bne.w	8007ab8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	88db      	ldrh	r3, [r3, #6]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d02e      	beq.n	80079e0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b25b      	sxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	da16      	bge.n	80079ba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007998:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	88d2      	ldrh	r2, [r2, #6]
 800799e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	88db      	ldrh	r3, [r3, #6]
 80079a4:	2b07      	cmp	r3, #7
 80079a6:	bf28      	it	cs
 80079a8:	2307      	movcs	r3, #7
 80079aa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	89fa      	ldrh	r2, [r7, #14]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fb19 	bl	8008fea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80079b8:	e085      	b.n	8007ac6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	785a      	ldrb	r2, [r3, #1]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	88db      	ldrh	r3, [r3, #6]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079d0:	6939      	ldr	r1, [r7, #16]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88db      	ldrh	r3, [r3, #6]
 80079d6:	461a      	mov	r2, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 fb32 	bl	8009042 <USBD_CtlPrepareRx>
      break;
 80079de:	e072      	b.n	8007ac6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	7850      	ldrb	r0, [r2, #1]
 80079ec:	2200      	movs	r2, #0
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	4798      	blx	r3
      break;
 80079f2:	e068      	b.n	8007ac6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b0b      	cmp	r3, #11
 80079fa:	d852      	bhi.n	8007aa2 <USBD_CDC_Setup+0x162>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USBD_CDC_Setup+0xc4>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a35 	.word	0x08007a35
 8007a08:	08007ab1 	.word	0x08007ab1
 8007a0c:	08007aa3 	.word	0x08007aa3
 8007a10:	08007aa3 	.word	0x08007aa3
 8007a14:	08007aa3 	.word	0x08007aa3
 8007a18:	08007aa3 	.word	0x08007aa3
 8007a1c:	08007aa3 	.word	0x08007aa3
 8007a20:	08007aa3 	.word	0x08007aa3
 8007a24:	08007aa3 	.word	0x08007aa3
 8007a28:	08007aa3 	.word	0x08007aa3
 8007a2c:	08007a5f 	.word	0x08007a5f
 8007a30:	08007a89 	.word	0x08007a89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d107      	bne.n	8007a50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a40:	f107 030a 	add.w	r3, r7, #10
 8007a44:	2202      	movs	r2, #2
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 face 	bl	8008fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a4e:	e032      	b.n	8007ab6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fa58 	bl	8008f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a5c:	e02b      	b.n	8007ab6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d107      	bne.n	8007a7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a6a:	f107 030d 	add.w	r3, r7, #13
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fab9 	bl	8008fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a78:	e01d      	b.n	8007ab6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fa43 	bl	8008f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a82:	2303      	movs	r3, #3
 8007a84:	75fb      	strb	r3, [r7, #23]
          break;
 8007a86:	e016      	b.n	8007ab6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d00f      	beq.n	8007ab4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fa36 	bl	8008f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007aa0:	e008      	b.n	8007ab4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fa2f 	bl	8008f08 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	75fb      	strb	r3, [r7, #23]
          break;
 8007aae:	e002      	b.n	8007ab6 <USBD_CDC_Setup+0x176>
          break;
 8007ab0:	bf00      	nop
 8007ab2:	e008      	b.n	8007ac6 <USBD_CDC_Setup+0x186>
          break;
 8007ab4:	bf00      	nop
      }
      break;
 8007ab6:	e006      	b.n	8007ac6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 fa24 	bl	8008f08 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e04f      	b.n	8007b92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007af8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	3318      	adds	r3, #24
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d029      	beq.n	8007b64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3318      	adds	r3, #24
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	78f9      	ldrb	r1, [r7, #3]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	460b      	mov	r3, r1
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	1a5b      	subs	r3, r3, r1
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4403      	add	r3, r0
 8007b30:	3344      	adds	r3, #68	; 0x44
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b38:	fb03 f301 	mul.w	r3, r3, r1
 8007b3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d110      	bne.n	8007b64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	3318      	adds	r3, #24
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b56:	78f9      	ldrb	r1, [r7, #3]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f002 f852 	bl	8009c06 <USBD_LL_Transmit>
 8007b62:	e015      	b.n	8007b90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e015      	b.n	8007be8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f002 f862 	bl	8009c8a <USBD_LL_GetRxDataSize>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007be2:	4611      	mov	r1, r2
 8007be4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e01b      	b.n	8007c42 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d015      	beq.n	8007c40 <USBD_CDC_EP0_RxReady+0x50>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c1a:	2bff      	cmp	r3, #255	; 0xff
 8007c1c:	d010      	beq.n	8007c40 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c34:	b292      	uxth	r2, r2
 8007c36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2243      	movs	r2, #67	; 0x43
 8007c58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c5a:	4b03      	ldr	r3, [pc, #12]	; (8007c68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	200000f0 	.word	0x200000f0

08007c6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2243      	movs	r2, #67	; 0x43
 8007c78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c7a:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	200000ac 	.word	0x200000ac

08007c8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2243      	movs	r2, #67	; 0x43
 8007c98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c9a:	4b03      	ldr	r3, [pc, #12]	; (8007ca8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	20000134 	.word	0x20000134

08007cac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cba:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	20000068 	.word	0x20000068

08007ccc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e004      	b.n	8007cea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b087      	sub	sp, #28
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d08:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e008      	b.n	8007d26 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e004      	b.n	8007d58 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e01a      	b.n	8007dbc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d114      	bne.n	8007dba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007dae:	2181      	movs	r1, #129	; 0x81
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 ff28 	bl	8009c06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e016      	b.n	8007e10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7c1b      	ldrb	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df4:	2101      	movs	r1, #1
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 ff26 	bl	8009c48 <USBD_LL_PrepareReceive>
 8007dfc:	e007      	b.n	8007e0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	2101      	movs	r1, #1
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 ff1d 	bl	8009c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e01f      	b.n	8007e70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f001 fd99 	bl	800999c <USBD_LL_Init>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e016      	b.n	8007ebe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	f107 020e 	add.w	r2, r7, #14
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fdb0 	bl	8009a34 <USBD_LL_Start>
 8007ed4:	4603      	mov	r3, r0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
  }

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ff90 	bl	8008e94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d01a      	beq.n	8007fce <USBD_LL_SetupStage+0x72>
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d822      	bhi.n	8007fe2 <USBD_LL_SetupStage+0x86>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <USBD_LL_SetupStage+0x4a>
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d00a      	beq.n	8007fba <USBD_LL_SetupStage+0x5e>
 8007fa4:	e01d      	b.n	8007fe2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa62 	bl	8008478 <USBD_StdDevReq>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb8:	e020      	b.n	8007ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fac6 	bl	8008554 <USBD_StdItfReq>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
      break;
 8007fcc:	e016      	b.n	8007ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb05 	bl	80085e6 <USBD_StdEPReq>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe0:	e00c      	b.n	8007ffc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fd7f 	bl	8009af4 <USBD_LL_StallEP>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffa:	bf00      	nop
  }

  return ret;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b086      	sub	sp, #24
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	460b      	mov	r3, r1
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008014:	7afb      	ldrb	r3, [r7, #11]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d138      	bne.n	800808c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008028:	2b03      	cmp	r3, #3
 800802a:	d14a      	bne.n	80080c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	429a      	cmp	r2, r3
 8008036:	d913      	bls.n	8008060 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	1ad2      	subs	r2, r2, r3
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	4293      	cmp	r3, r2
 8008050:	bf28      	it	cs
 8008052:	4613      	movcs	r3, r2
 8008054:	461a      	mov	r2, r3
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f001 f80f 	bl	800907c <USBD_CtlContinueRx>
 800805e:	e030      	b.n	80080c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b03      	cmp	r3, #3
 800806a:	d10b      	bne.n	8008084 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f001 f80a 	bl	800909e <USBD_CtlSendStatus>
 800808a:	e01a      	b.n	80080c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b03      	cmp	r3, #3
 8008096:	d114      	bne.n	80080c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	7afa      	ldrb	r2, [r7, #11]
 80080ae:	4611      	mov	r1, r2
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	4798      	blx	r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	e000      	b.n	80080c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	460b      	mov	r3, r1
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d16b      	bne.n	80081b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3314      	adds	r3, #20
 80080e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d156      	bne.n	800819e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d914      	bls.n	8008126 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	1ad2      	subs	r2, r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	461a      	mov	r2, r3
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 ff84 	bl	8009020 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008118:	2300      	movs	r3, #0
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f001 fd92 	bl	8009c48 <USBD_LL_PrepareReceive>
 8008124:	e03b      	b.n	800819e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d11c      	bne.n	800816c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800813a:	429a      	cmp	r2, r3
 800813c:	d316      	bcc.n	800816c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008148:	429a      	cmp	r2, r3
 800814a:	d20f      	bcs.n	800816c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 ff65 	bl	8009020 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f001 fd6f 	bl	8009c48 <USBD_LL_PrepareReceive>
 800816a:	e018      	b.n	800819e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b03      	cmp	r3, #3
 8008176:	d10b      	bne.n	8008190 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008190:	2180      	movs	r1, #128	; 0x80
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f001 fcae 	bl	8009af4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 ff93 	bl	80090c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d122      	bne.n	80081ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff fe98 	bl	8007ede <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081b6:	e01a      	b.n	80081ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d114      	bne.n	80081ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00e      	beq.n	80081ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	4611      	mov	r1, r2
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	4798      	blx	r3
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	e000      	b.n	80081f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	e02f      	b.n	800828c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6852      	ldr	r2, [r2, #4]
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	4611      	mov	r1, r2
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008256:	2340      	movs	r3, #64	; 0x40
 8008258:	2200      	movs	r2, #0
 800825a:	2100      	movs	r1, #0
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fc04 	bl	8009a6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2240      	movs	r2, #64	; 0x40
 800826e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008272:	2340      	movs	r3, #64	; 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fbf6 	bl	8009a6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2240      	movs	r2, #64	; 0x40
 8008288:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2204      	movs	r2, #4
 80082ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d106      	bne.n	8008302 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	e012      	b.n	800834c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b03      	cmp	r3, #3
 8008330:	d10b      	bne.n	800834a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008344:	69db      	ldr	r3, [r3, #28]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800836a:	2303      	movs	r3, #3
 800836c:	e014      	b.n	8008398 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b03      	cmp	r3, #3
 8008378:	d10d      	bne.n	8008396 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e014      	b.n	80083e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d10d      	bne.n	80083e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6852      	ldr	r2, [r2, #4]
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	4611      	mov	r1, r2
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
  }

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800843a:	b480      	push	{r7}
 800843c:	b087      	sub	sp, #28
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3301      	adds	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008458:	8a3b      	ldrh	r3, [r7, #16]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b21a      	sxth	r2, r3
 800845e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008462:	4313      	orrs	r3, r2
 8008464:	b21b      	sxth	r3, r3
 8008466:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008468:	89fb      	ldrh	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d005      	beq.n	800849e <USBD_StdDevReq+0x26>
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	d853      	bhi.n	800853e <USBD_StdDevReq+0xc6>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00b      	beq.n	80084b2 <USBD_StdDevReq+0x3a>
 800849a:	2b20      	cmp	r3, #32
 800849c:	d14f      	bne.n	800853e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	4798      	blx	r3
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e04a      	b.n	8008548 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b09      	cmp	r3, #9
 80084b8:	d83b      	bhi.n	8008532 <USBD_StdDevReq+0xba>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <USBD_StdDevReq+0x48>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008529 	.word	0x08008529
 80084c8:	08008533 	.word	0x08008533
 80084cc:	0800851f 	.word	0x0800851f
 80084d0:	08008533 	.word	0x08008533
 80084d4:	080084f3 	.word	0x080084f3
 80084d8:	080084e9 	.word	0x080084e9
 80084dc:	08008533 	.word	0x08008533
 80084e0:	0800850b 	.word	0x0800850b
 80084e4:	080084fd 	.word	0x080084fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9de 	bl	80088ac <USBD_GetDescriptor>
          break;
 80084f0:	e024      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb43 	bl	8008b80 <USBD_SetAddress>
          break;
 80084fa:	e01f      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fb82 	bl	8008c08 <USBD_SetConfig>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
          break;
 8008508:	e018      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc21 	bl	8008d54 <USBD_GetConfig>
          break;
 8008512:	e013      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fc52 	bl	8008dc0 <USBD_GetStatus>
          break;
 800851c:	e00e      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc81 	bl	8008e28 <USBD_SetFeature>
          break;
 8008526:	e009      	b.n	800853c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fc90 	bl	8008e50 <USBD_ClrFeature>
          break;
 8008530:	e004      	b.n	800853c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fce7 	bl	8008f08 <USBD_CtlError>
          break;
 800853a:	bf00      	nop
      }
      break;
 800853c:	e004      	b.n	8008548 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fce1 	bl	8008f08 <USBD_CtlError>
      break;
 8008546:	bf00      	nop
  }

  return ret;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop

08008554 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d005      	beq.n	800857a <USBD_StdItfReq+0x26>
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d82f      	bhi.n	80085d2 <USBD_StdItfReq+0x7e>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <USBD_StdItfReq+0x26>
 8008576:	2b20      	cmp	r3, #32
 8008578:	d12b      	bne.n	80085d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	2b02      	cmp	r3, #2
 8008586:	d81d      	bhi.n	80085c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	889b      	ldrh	r3, [r3, #4]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b01      	cmp	r3, #1
 8008590:	d813      	bhi.n	80085ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	88db      	ldrh	r3, [r3, #6]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d110      	bne.n	80085ce <USBD_StdItfReq+0x7a>
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10d      	bne.n	80085ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fd73 	bl	800909e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085b8:	e009      	b.n	80085ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fca3 	bl	8008f08 <USBD_CtlError>
          break;
 80085c2:	e004      	b.n	80085ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fc9e 	bl	8008f08 <USBD_CtlError>
          break;
 80085cc:	e000      	b.n	80085d0 <USBD_StdItfReq+0x7c>
          break;
 80085ce:	bf00      	nop
      }
      break;
 80085d0:	e004      	b.n	80085dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fc97 	bl	8008f08 <USBD_CtlError>
      break;
 80085da:	bf00      	nop
  }

  return ret;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	889b      	ldrh	r3, [r3, #4]
 80085f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d007      	beq.n	8008616 <USBD_StdEPReq+0x30>
 8008606:	2b40      	cmp	r3, #64	; 0x40
 8008608:	f200 8145 	bhi.w	8008896 <USBD_StdEPReq+0x2b0>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00c      	beq.n	800862a <USBD_StdEPReq+0x44>
 8008610:	2b20      	cmp	r3, #32
 8008612:	f040 8140 	bne.w	8008896 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	4798      	blx	r3
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]
      break;
 8008628:	e13a      	b.n	80088a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	2b03      	cmp	r3, #3
 8008630:	d007      	beq.n	8008642 <USBD_StdEPReq+0x5c>
 8008632:	2b03      	cmp	r3, #3
 8008634:	f300 8129 	bgt.w	800888a <USBD_StdEPReq+0x2a4>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d07f      	beq.n	800873c <USBD_StdEPReq+0x156>
 800863c:	2b01      	cmp	r3, #1
 800863e:	d03c      	beq.n	80086ba <USBD_StdEPReq+0xd4>
 8008640:	e123      	b.n	800888a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d002      	beq.n	8008654 <USBD_StdEPReq+0x6e>
 800864e:	2b03      	cmp	r3, #3
 8008650:	d016      	beq.n	8008680 <USBD_StdEPReq+0x9a>
 8008652:	e02c      	b.n	80086ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <USBD_StdEPReq+0x90>
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b80      	cmp	r3, #128	; 0x80
 800865e:	d00a      	beq.n	8008676 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fa45 	bl	8009af4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800866a:	2180      	movs	r1, #128	; 0x80
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fa41 	bl	8009af4 <USBD_LL_StallEP>
 8008672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008674:	e020      	b.n	80086b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fc45 	bl	8008f08 <USBD_CtlError>
              break;
 800867e:	e01b      	b.n	80086b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	885b      	ldrh	r3, [r3, #2]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10e      	bne.n	80086a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <USBD_StdEPReq+0xc0>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d008      	beq.n	80086a6 <USBD_StdEPReq+0xc0>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	88db      	ldrh	r3, [r3, #6]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fa27 	bl	8009af4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fcf9 	bl	800909e <USBD_CtlSendStatus>

              break;
 80086ac:	e004      	b.n	80086b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc29 	bl	8008f08 <USBD_CtlError>
              break;
 80086b6:	bf00      	nop
          }
          break;
 80086b8:	e0ec      	b.n	8008894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d002      	beq.n	80086cc <USBD_StdEPReq+0xe6>
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d016      	beq.n	80086f8 <USBD_StdEPReq+0x112>
 80086ca:	e030      	b.n	800872e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00d      	beq.n	80086ee <USBD_StdEPReq+0x108>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b80      	cmp	r3, #128	; 0x80
 80086d6:	d00a      	beq.n	80086ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fa09 	bl	8009af4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086e2:	2180      	movs	r1, #128	; 0x80
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fa05 	bl	8009af4 <USBD_LL_StallEP>
 80086ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086ec:	e025      	b.n	800873a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc09 	bl	8008f08 <USBD_CtlError>
              break;
 80086f6:	e020      	b.n	800873a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	885b      	ldrh	r3, [r3, #2]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d11b      	bne.n	8008738 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fa0f 	bl	8009b32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fcc2 	bl	800909e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800872c:	e004      	b.n	8008738 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fbe9 	bl	8008f08 <USBD_CtlError>
              break;
 8008736:	e000      	b.n	800873a <USBD_StdEPReq+0x154>
              break;
 8008738:	bf00      	nop
          }
          break;
 800873a:	e0ab      	b.n	8008894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d002      	beq.n	800874e <USBD_StdEPReq+0x168>
 8008748:	2b03      	cmp	r3, #3
 800874a:	d032      	beq.n	80087b2 <USBD_StdEPReq+0x1cc>
 800874c:	e097      	b.n	800887e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <USBD_StdEPReq+0x17e>
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b80      	cmp	r3, #128	; 0x80
 8008758:	d004      	beq.n	8008764 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fbd3 	bl	8008f08 <USBD_CtlError>
                break;
 8008762:	e091      	b.n	8008888 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da0b      	bge.n	8008784 <USBD_StdEPReq+0x19e>
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	3310      	adds	r3, #16
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4413      	add	r3, r2
 8008780:	3304      	adds	r3, #4
 8008782:	e00b      	b.n	800879c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	3304      	adds	r3, #4
 800879c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2202      	movs	r2, #2
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc1d 	bl	8008fea <USBD_CtlSendData>
              break;
 80087b0:	e06a      	b.n	8008888 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da11      	bge.n	80087de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	f003 020f 	and.w	r2, r3, #15
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d117      	bne.n	8008804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb96 	bl	8008f08 <USBD_CtlError>
                  break;
 80087dc:	e054      	b.n	8008888 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fb83 	bl	8008f08 <USBD_CtlError>
                  break;
 8008802:	e041      	b.n	8008888 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008808:	2b00      	cmp	r3, #0
 800880a:	da0b      	bge.n	8008824 <USBD_StdEPReq+0x23e>
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	3310      	adds	r3, #16
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4413      	add	r3, r2
 8008820:	3304      	adds	r3, #4
 8008822:	e00b      	b.n	800883c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	3304      	adds	r3, #4
 800883c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <USBD_StdEPReq+0x264>
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	d103      	bne.n	8008852 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e00e      	b.n	8008870 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f98a 	bl	8009b70 <USBD_LL_IsStallEP>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2201      	movs	r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e002      	b.n	8008870 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	2202      	movs	r2, #2
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fbb7 	bl	8008fea <USBD_CtlSendData>
              break;
 800887c:	e004      	b.n	8008888 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fb41 	bl	8008f08 <USBD_CtlError>
              break;
 8008886:	bf00      	nop
          }
          break;
 8008888:	e004      	b.n	8008894 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fb3b 	bl	8008f08 <USBD_CtlError>
          break;
 8008892:	bf00      	nop
      }
      break;
 8008894:	e004      	b.n	80088a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fb35 	bl	8008f08 <USBD_CtlError>
      break;
 800889e:	bf00      	nop
  }

  return ret;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	0a1b      	lsrs	r3, r3, #8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	f200 8128 	bhi.w	8008b22 <USBD_GetDescriptor+0x276>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <USBD_GetDescriptor+0x2c>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088f5 	.word	0x080088f5
 80088dc:	0800890d 	.word	0x0800890d
 80088e0:	0800894d 	.word	0x0800894d
 80088e4:	08008b23 	.word	0x08008b23
 80088e8:	08008b23 	.word	0x08008b23
 80088ec:	08008ac3 	.word	0x08008ac3
 80088f0:	08008aef 	.word	0x08008aef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	7c12      	ldrb	r2, [r2, #16]
 8008900:	f107 0108 	add.w	r1, r7, #8
 8008904:	4610      	mov	r0, r2
 8008906:	4798      	blx	r3
 8008908:	60f8      	str	r0, [r7, #12]
      break;
 800890a:	e112      	b.n	8008b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7c1b      	ldrb	r3, [r3, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10d      	bne.n	8008930 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f107 0208 	add.w	r2, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	2202      	movs	r2, #2
 800892c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800892e:	e100      	b.n	8008b32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	f107 0208 	add.w	r2, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	2202      	movs	r2, #2
 8008948:	701a      	strb	r2, [r3, #0]
      break;
 800894a:	e0f2      	b.n	8008b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	885b      	ldrh	r3, [r3, #2]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b05      	cmp	r3, #5
 8008954:	f200 80ac 	bhi.w	8008ab0 <USBD_GetDescriptor+0x204>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBD_GetDescriptor+0xb4>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008979 	.word	0x08008979
 8008964:	080089ad 	.word	0x080089ad
 8008968:	080089e1 	.word	0x080089e1
 800896c:	08008a15 	.word	0x08008a15
 8008970:	08008a49 	.word	0x08008a49
 8008974:	08008a7d 	.word	0x08008a7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	7c12      	ldrb	r2, [r2, #16]
 8008990:	f107 0108 	add.w	r1, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899a:	e091      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fab2 	bl	8008f08 <USBD_CtlError>
            err++;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	3301      	adds	r3, #1
 80089a8:	72fb      	strb	r3, [r7, #11]
          break;
 80089aa:	e089      	b.n	8008ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7c12      	ldrb	r2, [r2, #16]
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ce:	e077      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa98 	bl	8008f08 <USBD_CtlError>
            err++;
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	3301      	adds	r3, #1
 80089dc:	72fb      	strb	r3, [r7, #11]
          break;
 80089de:	e06f      	b.n	8008ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7c12      	ldrb	r2, [r2, #16]
 80089f8:	f107 0108 	add.w	r1, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a02:	e05d      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa7e 	bl	8008f08 <USBD_CtlError>
            err++;
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	72fb      	strb	r3, [r7, #11]
          break;
 8008a12:	e055      	b.n	8008ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	7c12      	ldrb	r2, [r2, #16]
 8008a2c:	f107 0108 	add.w	r1, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a36:	e043      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa64 	bl	8008f08 <USBD_CtlError>
            err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
          break;
 8008a46:	e03b      	b.n	8008ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6a:	e029      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa4a 	bl	8008f08 <USBD_CtlError>
            err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7a:	e021      	b.n	8008ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a9e:	e00f      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa30 	bl	8008f08 <USBD_CtlError>
            err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
          break;
 8008aae:	e007      	b.n	8008ac0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa28 	bl	8008f08 <USBD_CtlError>
          err++;
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	3301      	adds	r3, #1
 8008abc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008abe:	bf00      	nop
      }
      break;
 8008ac0:	e037      	b.n	8008b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7c1b      	ldrb	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d109      	bne.n	8008ade <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	f107 0208 	add.w	r2, r7, #8
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4798      	blx	r3
 8008ada:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008adc:	e029      	b.n	8008b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fa11 	bl	8008f08 <USBD_CtlError>
        err++;
 8008ae6:	7afb      	ldrb	r3, [r7, #11]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	72fb      	strb	r3, [r7, #11]
      break;
 8008aec:	e021      	b.n	8008b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7c1b      	ldrb	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afe:	f107 0208 	add.w	r2, r7, #8
 8008b02:	4610      	mov	r0, r2
 8008b04:	4798      	blx	r3
 8008b06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	2207      	movs	r2, #7
 8008b0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b10:	e00f      	b.n	8008b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9f7 	bl	8008f08 <USBD_CtlError>
        err++;
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b20:	e007      	b.n	8008b32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f9ef 	bl	8008f08 <USBD_CtlError>
      err++;
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b30:	bf00      	nop
  }

  if (err != 0U)
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d11e      	bne.n	8008b76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	88db      	ldrh	r3, [r3, #6]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d016      	beq.n	8008b6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b40:	893b      	ldrh	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00e      	beq.n	8008b64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88da      	ldrh	r2, [r3, #6]
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b56:	893b      	ldrh	r3, [r7, #8]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa44 	bl	8008fea <USBD_CtlSendData>
 8008b62:	e009      	b.n	8008b78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f9ce 	bl	8008f08 <USBD_CtlError>
 8008b6c:	e004      	b.n	8008b78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fa95 	bl	800909e <USBD_CtlSendStatus>
 8008b74:	e000      	b.n	8008b78 <USBD_GetDescriptor+0x2cc>
    return;
 8008b76:	bf00      	nop
  }
}
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop

08008b80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	889b      	ldrh	r3, [r3, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d131      	bne.n	8008bf6 <USBD_SetAddress+0x76>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88db      	ldrh	r3, [r3, #6]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d12d      	bne.n	8008bf6 <USBD_SetAddress+0x76>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	885b      	ldrh	r3, [r3, #2]
 8008b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba0:	d829      	bhi.n	8008bf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	885b      	ldrh	r3, [r3, #2]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d104      	bne.n	8008bc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f9a3 	bl	8008f08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e01d      	b.n	8008c00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7bfa      	ldrb	r2, [r7, #15]
 8008bc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fff9 	bl	8009bc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa61 	bl	800909e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bea:	e009      	b.n	8008c00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf4:	e004      	b.n	8008c00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f985 	bl	8008f08 <USBD_CtlError>
  }
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	885b      	ldrh	r3, [r3, #2]
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	4b4c      	ldr	r3, [pc, #304]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c20:	4b4b      	ldr	r3, [pc, #300]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d905      	bls.n	8008c34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f96c 	bl	8008f08 <USBD_CtlError>
    return USBD_FAIL;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e088      	b.n	8008d46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d002      	beq.n	8008c46 <USBD_SetConfig+0x3e>
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d025      	beq.n	8008c90 <USBD_SetConfig+0x88>
 8008c44:	e071      	b.n	8008d2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c46:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d01c      	beq.n	8008c88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008c4e:	4b40      	ldr	r3, [pc, #256]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c58:	4b3d      	ldr	r3, [pc, #244]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff f948 	bl	8007ef4 <USBD_SetClassConfig>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d004      	beq.n	8008c78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f949 	bl	8008f08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c76:	e065      	b.n	8008d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa10 	bl	800909e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2203      	movs	r2, #3
 8008c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c86:	e05d      	b.n	8008d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa08 	bl	800909e <USBD_CtlSendStatus>
      break;
 8008c8e:	e059      	b.n	8008d44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c90:	4b2f      	ldr	r3, [pc, #188]	; (8008d50 <USBD_SetConfig+0x148>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d112      	bne.n	8008cbe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <USBD_SetConfig+0x148>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008caa:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <USBD_SetConfig+0x148>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f93b 	bl	8007f2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f9f1 	bl	800909e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cbc:	e042      	b.n	8008d44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <USBD_SetConfig+0x148>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d02a      	beq.n	8008d22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff f929 	bl	8007f2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <USBD_SetConfig+0x148>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <USBD_SetConfig+0x148>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff f902 	bl	8007ef4 <USBD_SetClassConfig>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00f      	beq.n	8008d1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f903 	bl	8008f08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f90e 	bl	8007f2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d18:	e014      	b.n	8008d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f9bf 	bl	800909e <USBD_CtlSendStatus>
      break;
 8008d20:	e010      	b.n	8008d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f9bb 	bl	800909e <USBD_CtlSendStatus>
      break;
 8008d28:	e00c      	b.n	8008d44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f8eb 	bl	8008f08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d32:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <USBD_SetConfig+0x148>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff f8f7 	bl	8007f2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	73fb      	strb	r3, [r7, #15]
      break;
 8008d42:	bf00      	nop
  }

  return ret;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000268 	.word	0x20000268

08008d54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d004      	beq.n	8008d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8cd 	bl	8008f08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d6e:	e023      	b.n	8008db8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	dc02      	bgt.n	8008d82 <USBD_GetConfig+0x2e>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dc03      	bgt.n	8008d88 <USBD_GetConfig+0x34>
 8008d80:	e015      	b.n	8008dae <USBD_GetConfig+0x5a>
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d00b      	beq.n	8008d9e <USBD_GetConfig+0x4a>
 8008d86:	e012      	b.n	8008dae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3308      	adds	r3, #8
 8008d92:	2201      	movs	r2, #1
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f927 	bl	8008fea <USBD_CtlSendData>
        break;
 8008d9c:	e00c      	b.n	8008db8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3304      	adds	r3, #4
 8008da2:	2201      	movs	r2, #1
 8008da4:	4619      	mov	r1, r3
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f91f 	bl	8008fea <USBD_CtlSendData>
        break;
 8008dac:	e004      	b.n	8008db8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f8a9 	bl	8008f08 <USBD_CtlError>
        break;
 8008db6:	bf00      	nop
}
 8008db8:	bf00      	nop
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d81e      	bhi.n	8008e16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	88db      	ldrh	r3, [r3, #6]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d004      	beq.n	8008dea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f890 	bl	8008f08 <USBD_CtlError>
        break;
 8008de8:	e01a      	b.n	8008e20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f043 0202 	orr.w	r2, r3, #2
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	330c      	adds	r3, #12
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f8eb 	bl	8008fea <USBD_CtlSendData>
      break;
 8008e14:	e004      	b.n	8008e20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f875 	bl	8008f08 <USBD_CtlError>
      break;
 8008e1e:	bf00      	nop
  }
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	885b      	ldrh	r3, [r3, #2]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d106      	bne.n	8008e48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f92b 	bl	800909e <USBD_CtlSendStatus>
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d80b      	bhi.n	8008e80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	885b      	ldrh	r3, [r3, #2]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10c      	bne.n	8008e8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f910 	bl	800909e <USBD_CtlSendStatus>
      }
      break;
 8008e7e:	e004      	b.n	8008e8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f840 	bl	8008f08 <USBD_CtlError>
      break;
 8008e88:	e000      	b.n	8008e8c <USBD_ClrFeature+0x3c>
      break;
 8008e8a:	bf00      	nop
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff fabb 	bl	800843a <SWAPBYTE>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff faae 	bl	800843a <SWAPBYTE>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff faa1 	bl	800843a <SWAPBYTE>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	80da      	strh	r2, [r3, #6]
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f12:	2180      	movs	r1, #128	; 0x80
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fded 	bl	8009af4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fde9 	bl	8009af4 <USBD_LL_StallEP>
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b086      	sub	sp, #24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d036      	beq.n	8008fae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f44:	6938      	ldr	r0, [r7, #16]
 8008f46:	f000 f836 	bl	8008fb6 <USBD_GetLen>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	3301      	adds	r3, #1
 8008f68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	4413      	add	r3, r2
 8008f70:	2203      	movs	r2, #3
 8008f72:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	3301      	adds	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f7a:	e013      	b.n	8008fa4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	7812      	ldrb	r2, [r2, #0]
 8008f86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	613b      	str	r3, [r7, #16]
    idx++;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	3301      	adds	r3, #1
 8008f92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	4413      	add	r3, r2
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e7      	bne.n	8008f7c <USBD_GetString+0x52>
 8008fac:	e000      	b.n	8008fb0 <USBD_GetString+0x86>
    return;
 8008fae:	bf00      	nop
  }
}
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fc6:	e005      	b.n	8008fd4 <USBD_GetLen+0x1e>
  {
    len++;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f5      	bne.n	8008fc8 <USBD_GetLen+0x12>
  }

  return len;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	2100      	movs	r1, #0
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 fdf8 	bl	8009c06 <USBD_LL_Transmit>

  return USBD_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	2100      	movs	r1, #0
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 fde7 	bl	8009c06 <USBD_LL_Transmit>

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2203      	movs	r2, #3
 8009052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	2100      	movs	r1, #0
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 fdeb 	bl	8009c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	2100      	movs	r1, #0
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fdda 	bl	8009c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2204      	movs	r2, #4
 80090aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090ae:	2300      	movs	r3, #0
 80090b0:	2200      	movs	r2, #0
 80090b2:	2100      	movs	r1, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fda6 	bl	8009c06 <USBD_LL_Transmit>

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2205      	movs	r2, #5
 80090d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d4:	2300      	movs	r3, #0
 80090d6:	2200      	movs	r2, #0
 80090d8:	2100      	movs	r1, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fdb4 	bl	8009c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090f0:	2200      	movs	r2, #0
 80090f2:	4912      	ldr	r1, [pc, #72]	; (800913c <MX_USB_DEVICE_Init+0x50>)
 80090f4:	4812      	ldr	r0, [pc, #72]	; (8009140 <MX_USB_DEVICE_Init+0x54>)
 80090f6:	f7fe fe8f 	bl	8007e18 <USBD_Init>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009100:	f7f7 fe0e 	bl	8000d20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009104:	490f      	ldr	r1, [pc, #60]	; (8009144 <MX_USB_DEVICE_Init+0x58>)
 8009106:	480e      	ldr	r0, [pc, #56]	; (8009140 <MX_USB_DEVICE_Init+0x54>)
 8009108:	f7fe feb6 	bl	8007e78 <USBD_RegisterClass>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009112:	f7f7 fe05 	bl	8000d20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009116:	490c      	ldr	r1, [pc, #48]	; (8009148 <MX_USB_DEVICE_Init+0x5c>)
 8009118:	4809      	ldr	r0, [pc, #36]	; (8009140 <MX_USB_DEVICE_Init+0x54>)
 800911a:	f7fe fdd7 	bl	8007ccc <USBD_CDC_RegisterInterface>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009124:	f7f7 fdfc 	bl	8000d20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009128:	4805      	ldr	r0, [pc, #20]	; (8009140 <MX_USB_DEVICE_Init+0x54>)
 800912a:	f7fe fecc 	bl	8007ec6 <USBD_Start>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009134:	f7f7 fdf4 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009138:	bf00      	nop
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000194 	.word	0x20000194
 8009140:	200005a0 	.word	0x200005a0
 8009144:	20000074 	.word	0x20000074
 8009148:	20000180 	.word	0x20000180

0800914c <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	2101      	movs	r1, #1
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fd6f 	bl	8009c48 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e000      	b.n	8009170 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 800916e:	2303      	movs	r3, #3
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 800917c:	480e      	ldr	r0, [pc, #56]	; (80091b8 <CDC_Init_FS+0x40>)
 800917e:	f7f8 fc53 	bl	8001a28 <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 8009182:	480e      	ldr	r0, [pc, #56]	; (80091bc <CDC_Init_FS+0x44>)
 8009184:	f7f8 fd30 	bl	8001be8 <CDC_ReceiveQueue_Init>
  receivePended = true;
 8009188:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <CDC_Init_FS+0x48>)
 800918a:	2201      	movs	r2, #1
 800918c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 800918e:	480b      	ldr	r0, [pc, #44]	; (80091bc <CDC_Init_FS+0x44>)
 8009190:	f7f8 fd40 	bl	8001c14 <CDC_ReceiveQueue_ReserveBlock>
 8009194:	4603      	mov	r3, r0
 8009196:	4619      	mov	r1, r3
 8009198:	480a      	ldr	r0, [pc, #40]	; (80091c4 <CDC_Init_FS+0x4c>)
 800919a:	f7fe fdca 	bl	8007d32 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800919e:	2200      	movs	r2, #0
 80091a0:	4909      	ldr	r1, [pc, #36]	; (80091c8 <CDC_Init_FS+0x50>)
 80091a2:	4808      	ldr	r0, [pc, #32]	; (80091c4 <CDC_Init_FS+0x4c>)
 80091a4:	f7fe fda7 	bl	8007cf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091a8:	4908      	ldr	r1, [pc, #32]	; (80091cc <CDC_Init_FS+0x54>)
 80091aa:	4806      	ldr	r0, [pc, #24]	; (80091c4 <CDC_Init_FS+0x4c>)
 80091ac:	f7fe fdc1 	bl	8007d32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091b0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000870 	.word	0x20000870
 80091bc:	200018f8 	.word	0x200018f8
 80091c0:	20000177 	.word	0x20000177
 80091c4:	200005a0 	.word	0x200005a0
 80091c8:	200010f8 	.word	0x200010f8
 80091cc:	200008f8 	.word	0x200008f8

080091d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	4613      	mov	r3, r2
 80091ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	2b23      	cmp	r3, #35	; 0x23
 80091f4:	f200 80ac 	bhi.w	8009350 <CDC_Control_FS+0x170>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <CDC_Control_FS+0x20>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009351 	.word	0x08009351
 8009204:	08009351 	.word	0x08009351
 8009208:	08009351 	.word	0x08009351
 800920c:	08009351 	.word	0x08009351
 8009210:	08009351 	.word	0x08009351
 8009214:	08009351 	.word	0x08009351
 8009218:	08009351 	.word	0x08009351
 800921c:	08009351 	.word	0x08009351
 8009220:	08009351 	.word	0x08009351
 8009224:	08009351 	.word	0x08009351
 8009228:	08009351 	.word	0x08009351
 800922c:	08009351 	.word	0x08009351
 8009230:	08009351 	.word	0x08009351
 8009234:	08009351 	.word	0x08009351
 8009238:	08009351 	.word	0x08009351
 800923c:	08009351 	.word	0x08009351
 8009240:	08009351 	.word	0x08009351
 8009244:	08009351 	.word	0x08009351
 8009248:	08009351 	.word	0x08009351
 800924c:	08009351 	.word	0x08009351
 8009250:	08009351 	.word	0x08009351
 8009254:	08009351 	.word	0x08009351
 8009258:	08009351 	.word	0x08009351
 800925c:	08009351 	.word	0x08009351
 8009260:	08009351 	.word	0x08009351
 8009264:	08009351 	.word	0x08009351
 8009268:	08009351 	.word	0x08009351
 800926c:	08009351 	.word	0x08009351
 8009270:	08009351 	.word	0x08009351
 8009274:	08009351 	.word	0x08009351
 8009278:	08009351 	.word	0x08009351
 800927c:	08009351 	.word	0x08009351
 8009280:	08009291 	.word	0x08009291
 8009284:	080092d5 	.word	0x080092d5
 8009288:	08009329 	.word	0x08009329
 800928c:	08009351 	.word	0x08009351
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	461a      	mov	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	3302      	adds	r3, #2
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80092a8:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	3303      	adds	r3, #3
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	061b      	lsls	r3, r3, #24
 80092b2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80092b4:	461a      	mov	r2, r3
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <CDC_Control_FS+0x184>)
 80092b8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	791a      	ldrb	r2, [r3, #4]
 80092be:	4b29      	ldr	r3, [pc, #164]	; (8009364 <CDC_Control_FS+0x184>)
 80092c0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	795a      	ldrb	r2, [r3, #5]
 80092c6:	4b27      	ldr	r3, [pc, #156]	; (8009364 <CDC_Control_FS+0x184>)
 80092c8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	799a      	ldrb	r2, [r3, #6]
 80092ce:	4b25      	ldr	r3, [pc, #148]	; (8009364 <CDC_Control_FS+0x184>)
 80092d0:	719a      	strb	r2, [r3, #6]
    break;
 80092d2:	e040      	b.n	8009356 <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80092d4:	4b23      	ldr	r3, [pc, #140]	; (8009364 <CDC_Control_FS+0x184>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80092de:	4b21      	ldr	r3, [pc, #132]	; (8009364 <CDC_Control_FS+0x184>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	0a1a      	lsrs	r2, r3, #8
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	3301      	adds	r3, #1
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80092ec:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <CDC_Control_FS+0x184>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	0c1a      	lsrs	r2, r3, #16
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3302      	adds	r3, #2
 80092f6:	b2d2      	uxtb	r2, r2
 80092f8:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80092fa:	4b1a      	ldr	r3, [pc, #104]	; (8009364 <CDC_Control_FS+0x184>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	0e1a      	lsrs	r2, r3, #24
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	3303      	adds	r3, #3
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	3304      	adds	r3, #4
 800930c:	4a15      	ldr	r2, [pc, #84]	; (8009364 <CDC_Control_FS+0x184>)
 800930e:	7912      	ldrb	r2, [r2, #4]
 8009310:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	3305      	adds	r3, #5
 8009316:	4a13      	ldr	r2, [pc, #76]	; (8009364 <CDC_Control_FS+0x184>)
 8009318:	7952      	ldrb	r2, [r2, #5]
 800931a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	3306      	adds	r3, #6
 8009320:	4a10      	ldr	r2, [pc, #64]	; (8009364 <CDC_Control_FS+0x184>)
 8009322:	7992      	ldrb	r2, [r2, #6]
 8009324:	701a      	strb	r2, [r3, #0]
    break;
 8009326:	e016      	b.n	8009356 <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	461a      	mov	r2, r3
      lineState =
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <CDC_Control_FS+0x188>)
 800933e:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 8009340:	4b09      	ldr	r3, [pc, #36]	; (8009368 <CDC_Control_FS+0x188>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <CDC_Control_FS+0x174>
              transmitStart = 0;
 8009348:	4b08      	ldr	r3, [pc, #32]	; (800936c <CDC_Control_FS+0x18c>)
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800934e:	e001      	b.n	8009354 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009350:	bf00      	nop
 8009352:	e000      	b.n	8009356 <CDC_Control_FS+0x176>
    break;
 8009354:	bf00      	nop
  }

  return (USBD_OK);
 8009356:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20000178 	.word	0x20000178
 8009368:	2000026c 	.word	0x2000026c
 800936c:	20000270 	.word	0x20000270

08009370 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	4619      	mov	r1, r3
 8009382:	480b      	ldr	r0, [pc, #44]	; (80093b0 <CDC_Receive_FS+0x40>)
 8009384:	f7f8 fc9b 	bl	8001cbe <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <CDC_Receive_FS+0x44>)
 800938a:	2200      	movs	r2, #0
 800938c:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 800938e:	f000 f86f 	bl	8009470 <CDC_resume_receive>
 8009392:	4603      	mov	r3, r0
 8009394:	f083 0301 	eor.w	r3, r3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d002      	beq.n	80093a4 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 800939e:	4806      	ldr	r0, [pc, #24]	; (80093b8 <CDC_Receive_FS+0x48>)
 80093a0:	f7ff fed4 	bl	800914c <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 80093a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200018f8 	.word	0x200018f8
 80093b4:	20000177 	.word	0x20000177
 80093b8:	200005a0 	.word	0x200005a0

080093bc <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 80093c2:	4b11      	ldr	r3, [pc, #68]	; (8009408 <CDC_connected+0x4c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 80093ce:	f7f8 feb1 	bl	8002134 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <CDC_connected+0x50>)
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e0:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d108      	bne.n	80093f8 <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d805      	bhi.n	80093f8 <CDC_connected+0x3c>
         && lineState;
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <CDC_connected+0x54>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <CDC_connected+0x3c>
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <CDC_connected+0x3e>
 80093f8:	2300      	movs	r3, #0
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	b2db      	uxtb	r3, r3
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000270 	.word	0x20000270
 800940c:	200005a0 	.word	0x200005a0
 8009410:	2000026c 	.word	0x2000026c

08009414 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800941a:	4b12      	ldr	r3, [pc, #72]	; (8009464 <CDC_continue_transmit+0x50>)
 800941c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009420:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009428:	2b00      	cmp	r3, #0
 800942a:	d116      	bne.n	800945a <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 800942c:	1dbb      	adds	r3, r7, #6
 800942e:	4619      	mov	r1, r3
 8009430:	480d      	ldr	r0, [pc, #52]	; (8009468 <CDC_continue_transmit+0x54>)
 8009432:	f7f8 fb88 	bl	8001b46 <CDC_TransmitQueue_ReadBlock>
 8009436:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 8009438:	88fb      	ldrh	r3, [r7, #6]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 800943e:	f7f8 fe79 	bl	8002134 <HAL_GetTick>
 8009442:	4603      	mov	r3, r0
 8009444:	4a09      	ldr	r2, [pc, #36]	; (800946c <CDC_continue_transmit+0x58>)
 8009446:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	461a      	mov	r2, r3
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <CDC_continue_transmit+0x50>)
 8009450:	f7fe fc51 	bl	8007cf6 <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009454:	4803      	ldr	r0, [pc, #12]	; (8009464 <CDC_continue_transmit+0x50>)
 8009456:	f7fe fc85 	bl	8007d64 <USBD_CDC_TransmitPacket>
    }
  }
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	200005a0 	.word	0x200005a0
 8009468:	20000870 	.word	0x20000870
 800946c:	20000270 	.word	0x20000270

08009470 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <CDC_resume_receive+0x48>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f083 0301 	eor.w	r3, r3, #1
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d012      	beq.n	80094ac <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 8009486:	480d      	ldr	r0, [pc, #52]	; (80094bc <CDC_resume_receive+0x4c>)
 8009488:	f7f8 fbc4 	bl	8001c14 <CDC_ReceiveQueue_ReserveBlock>
 800948c:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <CDC_resume_receive+0x3c>
      receivePended = true;
 8009494:	4b08      	ldr	r3, [pc, #32]	; (80094b8 <CDC_resume_receive+0x48>)
 8009496:	2201      	movs	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4808      	ldr	r0, [pc, #32]	; (80094c0 <CDC_resume_receive+0x50>)
 800949e:	f7fe fc48 	bl	8007d32 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094a2:	4807      	ldr	r0, [pc, #28]	; (80094c0 <CDC_resume_receive+0x50>)
 80094a4:	f7fe fc8e 	bl	8007dc4 <USBD_CDC_ReceivePacket>
      return true;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <CDC_resume_receive+0x3e>
    }
  }
  return false;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000177 	.word	0x20000177
 80094bc:	200018f8 	.word	0x200018f8
 80094c0:	200005a0 	.word	0x200005a0

080094c4 <CDC_init>:

int8_t CDC_init(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 80094c8:	f7ff fe56 	bl	8009178 <CDC_Init_FS>
 80094cc:	4603      	mov	r3, r0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 80094d6:	f7ff fe7b 	bl	80091d0 <CDC_DeInit_FS>
 80094da:	4603      	mov	r3, r0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	af00      	add	r7, sp, #0
  transmitStart = 0;
 80094e4:	4b05      	ldr	r3, [pc, #20]	; (80094fc <USBD_CDC_Transferred+0x1c>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 80094ea:	4805      	ldr	r0, [pc, #20]	; (8009500 <USBD_CDC_Transferred+0x20>)
 80094ec:	f7f8 fb62 	bl	8001bb4 <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 80094f0:	f7ff ff90 	bl	8009414 <CDC_continue_transmit>
  return (USBD_OK);
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000270 	.word	0x20000270
 8009500:	20000870 	.word	0x20000870

08009504 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2212      	movs	r2, #18
 8009514:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009516:	4b03      	ldr	r3, [pc, #12]	; (8009524 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	200001b0 	.word	0x200001b0

08009528 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2204      	movs	r2, #4
 8009538:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800953a:	4b03      	ldr	r3, [pc, #12]	; (8009548 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	200001c4 	.word	0x200001c4

0800954c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4907      	ldr	r1, [pc, #28]	; (8009580 <USBD_FS_ProductStrDescriptor+0x34>)
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <USBD_FS_ProductStrDescriptor+0x38>)
 8009564:	f7ff fce1 	bl	8008f2a <USBD_GetString>
 8009568:	e004      	b.n	8009574 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_FS_ProductStrDescriptor+0x34>)
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <USBD_FS_ProductStrDescriptor+0x38>)
 8009570:	f7ff fcdb 	bl	8008f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200019c0 	.word	0x200019c0
 8009584:	0800a6b0 	.word	0x0800a6b0

08009588 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	4904      	ldr	r1, [pc, #16]	; (80095a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009598:	4804      	ldr	r0, [pc, #16]	; (80095ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800959a:	f7ff fcc6 	bl	8008f2a <USBD_GetString>
  return USBD_StrDesc;
 800959e:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	200019c0 	.word	0x200019c0
 80095ac:	0800a6c8 	.word	0x0800a6c8

080095b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	221a      	movs	r2, #26
 80095c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095c2:	f000 f843 	bl	800964c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095c6:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200001c8 	.word	0x200001c8

080095d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d105      	bne.n	80095f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4907      	ldr	r1, [pc, #28]	; (8009608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ea:	4808      	ldr	r0, [pc, #32]	; (800960c <USBD_FS_ConfigStrDescriptor+0x38>)
 80095ec:	f7ff fc9d 	bl	8008f2a <USBD_GetString>
 80095f0:	e004      	b.n	80095fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	4904      	ldr	r1, [pc, #16]	; (8009608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095f6:	4805      	ldr	r0, [pc, #20]	; (800960c <USBD_FS_ConfigStrDescriptor+0x38>)
 80095f8:	f7ff fc97 	bl	8008f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200019c0 	.word	0x200019c0
 800960c:	0800a6dc 	.word	0x0800a6dc

08009610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4907      	ldr	r1, [pc, #28]	; (8009644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009626:	4808      	ldr	r0, [pc, #32]	; (8009648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009628:	f7ff fc7f 	bl	8008f2a <USBD_GetString>
 800962c:	e004      	b.n	8009638 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	4904      	ldr	r1, [pc, #16]	; (8009644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009632:	4805      	ldr	r0, [pc, #20]	; (8009648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009634:	f7ff fc79 	bl	8008f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200019c0 	.word	0x200019c0
 8009648:	0800a6e8 	.word	0x0800a6e8

0800964c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <Get_SerialNum+0x44>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009658:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <Get_SerialNum+0x48>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800965e:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <Get_SerialNum+0x4c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4413      	add	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009672:	2208      	movs	r2, #8
 8009674:	4909      	ldr	r1, [pc, #36]	; (800969c <Get_SerialNum+0x50>)
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f814 	bl	80096a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800967c:	2204      	movs	r2, #4
 800967e:	4908      	ldr	r1, [pc, #32]	; (80096a0 <Get_SerialNum+0x54>)
 8009680:	68b8      	ldr	r0, [r7, #8]
 8009682:	f000 f80f 	bl	80096a4 <IntToUnicode>
  }
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	1fff7a10 	.word	0x1fff7a10
 8009694:	1fff7a14 	.word	0x1fff7a14
 8009698:	1fff7a18 	.word	0x1fff7a18
 800969c:	200001ca 	.word	0x200001ca
 80096a0:	200001da 	.word	0x200001da

080096a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]
 80096ba:	e027      	b.n	800970c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	0f1b      	lsrs	r3, r3, #28
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d80b      	bhi.n	80096dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	0f1b      	lsrs	r3, r3, #28
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4619      	mov	r1, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	440b      	add	r3, r1
 80096d4:	3230      	adds	r2, #48	; 0x30
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	e00a      	b.n	80096f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0f1b      	lsrs	r3, r3, #28
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	4619      	mov	r1, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	440b      	add	r3, r1
 80096ec:	3237      	adds	r2, #55	; 0x37
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	3301      	adds	r3, #1
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	4413      	add	r3, r2
 8009702:	2200      	movs	r2, #0
 8009704:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	3301      	adds	r3, #1
 800970a:	75fb      	strb	r3, [r7, #23]
 800970c:	7dfa      	ldrb	r2, [r7, #23]
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	429a      	cmp	r2, r3
 8009712:	d3d3      	bcc.n	80096bc <IntToUnicode+0x18>
  }
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800972c:	f107 0314 	add.w	r3, r7, #20
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009744:	d13a      	bne.n	80097bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	6313      	str	r3, [r2, #48]	; 0x30
 8009756:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009768:	2302      	movs	r3, #2
 800976a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976c:	2300      	movs	r3, #0
 800976e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009770:	2303      	movs	r3, #3
 8009772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009774:	230a      	movs	r3, #10
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009778:	f107 0314 	add.w	r3, r7, #20
 800977c:	4619      	mov	r1, r3
 800977e:	4812      	ldr	r0, [pc, #72]	; (80097c8 <HAL_PCD_MspInit+0xa4>)
 8009780:	f7f8 fe1a 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009784:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 8009786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009788:	4a0e      	ldr	r2, [pc, #56]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 800978a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978e:	6353      	str	r3, [r2, #52]	; 0x34
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 8009796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009798:	4a0a      	ldr	r2, [pc, #40]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 800979a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800979e:	6453      	str	r3, [r2, #68]	; 0x44
 80097a0:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <HAL_PCD_MspInit+0xa0>)
 80097a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097ac:	2200      	movs	r2, #0
 80097ae:	2100      	movs	r1, #0
 80097b0:	2043      	movs	r0, #67	; 0x43
 80097b2:	f7f8 fdca 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097b6:	2043      	movs	r0, #67	; 0x43
 80097b8:	f7f8 fde3 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097bc:	bf00      	nop
 80097be:	3728      	adds	r7, #40	; 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	40023800 	.word	0x40023800
 80097c8:	40020000 	.word	0x40020000

080097cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f7fe fbba 	bl	8007f5c <USBD_LL_SetupStage>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	4619      	mov	r1, r3
 800981a:	f7fe fbf4 	bl	8008006 <USBD_LL_DataOutStage>
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3348      	adds	r3, #72	; 0x48
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	4619      	mov	r1, r3
 800984e:	f7fe fc3d 	bl	80080cc <USBD_LL_DataInStage>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe fd51 	bl	8008310 <USBD_LL_SOF>
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800987e:	2301      	movs	r3, #1
 8009880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d001      	beq.n	800988e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800988a:	f7f7 fa49 	bl	8000d20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009894:	7bfa      	ldrb	r2, [r7, #15]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7fe fcfb 	bl	8008294 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fca7 	bl	80081f8 <USBD_LL_Reset>
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fcf6 	bl	80082b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e8:	4b04      	ldr	r3, [pc, #16]	; (80098fc <HAL_PCD_SuspendCallback+0x48>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	4a03      	ldr	r2, [pc, #12]	; (80098fc <HAL_PCD_SuspendCallback+0x48>)
 80098ee:	f043 0306 	orr.w	r3, r3, #6
 80098f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	e000ed00 	.word	0xe000ed00

08009900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fce6 	bl	80082e0 <USBD_LL_Resume>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fd34 	bl	80083a0 <USBD_LL_IsoOUTIncomplete>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	460b      	mov	r3, r1
 800994a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe fcfc 	bl	8008354 <USBD_LL_IsoINIncomplete>
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fd3a 	bl	80083ec <USBD_LL_DevConnected>
}
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fd37 	bl	8008402 <USBD_LL_DevDisconnected>
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d13c      	bne.n	8009a26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099ac:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <USBD_LL_Init+0x94>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <USBD_LL_Init+0x94>)
 80099b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80099bc:	4b1c      	ldr	r3, [pc, #112]	; (8009a30 <USBD_LL_Init+0x94>)
 80099be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80099c4:	4b1a      	ldr	r3, [pc, #104]	; (8009a30 <USBD_LL_Init+0x94>)
 80099c6:	2204      	movs	r2, #4
 80099c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80099ca:	4b19      	ldr	r3, [pc, #100]	; (8009a30 <USBD_LL_Init+0x94>)
 80099cc:	2202      	movs	r2, #2
 80099ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80099d0:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <USBD_LL_Init+0x94>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <USBD_LL_Init+0x94>)
 80099d8:	2202      	movs	r2, #2
 80099da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099dc:	4b14      	ldr	r3, [pc, #80]	; (8009a30 <USBD_LL_Init+0x94>)
 80099de:	2200      	movs	r2, #0
 80099e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <USBD_LL_Init+0x94>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <USBD_LL_Init+0x94>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099ee:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <USBD_LL_Init+0x94>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099f4:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <USBD_LL_Init+0x94>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099fa:	480d      	ldr	r0, [pc, #52]	; (8009a30 <USBD_LL_Init+0x94>)
 80099fc:	f7f9 ff6f 	bl	80038de <HAL_PCD_Init>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a06:	f7f7 f98b 	bl	8000d20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a0a:	2180      	movs	r1, #128	; 0x80
 8009a0c:	4808      	ldr	r0, [pc, #32]	; (8009a30 <USBD_LL_Init+0x94>)
 8009a0e:	f7fb f8cc 	bl	8004baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	2100      	movs	r1, #0
 8009a16:	4806      	ldr	r0, [pc, #24]	; (8009a30 <USBD_LL_Init+0x94>)
 8009a18:	f7fb f880 	bl	8004b1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a1c:	2280      	movs	r2, #128	; 0x80
 8009a1e:	2101      	movs	r1, #1
 8009a20:	4803      	ldr	r0, [pc, #12]	; (8009a30 <USBD_LL_Init+0x94>)
 8009a22:	f7fb f87b 	bl	8004b1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20001bc0 	.word	0x20001bc0

08009a34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fa f864 	bl	8003b18 <HAL_PCD_Start>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f942 	bl	8009ce0 <USBD_Get_USB_Status>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	461a      	mov	r2, r3
 8009a78:	4603      	mov	r3, r0
 8009a7a:	70fb      	strb	r3, [r7, #3]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70bb      	strb	r3, [r7, #2]
 8009a80:	4613      	mov	r3, r2
 8009a82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a92:	78bb      	ldrb	r3, [r7, #2]
 8009a94:	883a      	ldrh	r2, [r7, #0]
 8009a96:	78f9      	ldrb	r1, [r7, #3]
 8009a98:	f7fa fc48 	bl	800432c <HAL_PCD_EP_Open>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 f91c 	bl	8009ce0 <USBD_Get_USB_Status>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fa fc91 	bl	80043fc <HAL_PCD_EP_Close>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f8fd 	bl	8009ce0 <USBD_Get_USB_Status>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b0e:	78fa      	ldrb	r2, [r7, #3]
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fa fd69 	bl	80045ea <HAL_PCD_EP_SetStall>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f8de 	bl	8009ce0 <USBD_Get_USB_Status>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fa fdae 	bl	80046b2 <HAL_PCD_EP_ClrStall>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 f8bf 	bl	8009ce0 <USBD_Get_USB_Status>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	da0b      	bge.n	8009ba4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b92:	68f9      	ldr	r1, [r7, #12]
 8009b94:	4613      	mov	r3, r2
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	440b      	add	r3, r1
 8009b9e:	333e      	adds	r3, #62	; 0x3e
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	e00b      	b.n	8009bbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	4613      	mov	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009bba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fa fb7b 	bl	80042e2 <HAL_PCD_SetAddress>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f874 	bl	8009ce0 <USBD_Get_USB_Status>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]
 8009c12:	460b      	mov	r3, r1
 8009c14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c24:	7af9      	ldrb	r1, [r7, #11]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	f7fa fc94 	bl	8004556 <HAL_PCD_EP_Transmit>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f853 	bl	8009ce0 <USBD_Get_USB_Status>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	460b      	mov	r3, r1
 8009c56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c66:	7af9      	ldrb	r1, [r7, #11]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	f7fa fc10 	bl	8004490 <HAL_PCD_EP_Receive>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c74:	7dfb      	ldrb	r3, [r7, #23]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f832 	bl	8009ce0 <USBD_Get_USB_Status>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	460b      	mov	r3, r1
 8009c94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fa fc40 	bl	8004526 <HAL_PCD_EP_GetRxCount>
 8009ca6:	4603      	mov	r3, r0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cb8:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <USBD_static_malloc+0x18>)
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20000274 	.word	0x20000274

08009ccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d817      	bhi.n	8009d24 <USBD_Get_USB_Status+0x44>
 8009cf4:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <USBD_Get_USB_Status+0x1c>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d13 	.word	0x08009d13
 8009d04:	08009d19 	.word	0x08009d19
 8009d08:	08009d1f 	.word	0x08009d1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d10:	e00b      	b.n	8009d2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d12:	2303      	movs	r3, #3
 8009d14:	73fb      	strb	r3, [r7, #15]
    break;
 8009d16:	e008      	b.n	8009d2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d1c:	e005      	b.n	8009d2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	73fb      	strb	r3, [r7, #15]
    break;
 8009d22:	e002      	b.n	8009d2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d24:	2303      	movs	r3, #3
 8009d26:	73fb      	strb	r3, [r7, #15]
    break;
 8009d28:	bf00      	nop
  }
  return usb_status;
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <__errno>:
 8009d38:	4b01      	ldr	r3, [pc, #4]	; (8009d40 <__errno+0x8>)
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	200001e4 	.word	0x200001e4

08009d44 <__libc_init_array>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	4d0d      	ldr	r5, [pc, #52]	; (8009d7c <__libc_init_array+0x38>)
 8009d48:	4c0d      	ldr	r4, [pc, #52]	; (8009d80 <__libc_init_array+0x3c>)
 8009d4a:	1b64      	subs	r4, r4, r5
 8009d4c:	10a4      	asrs	r4, r4, #2
 8009d4e:	2600      	movs	r6, #0
 8009d50:	42a6      	cmp	r6, r4
 8009d52:	d109      	bne.n	8009d68 <__libc_init_array+0x24>
 8009d54:	4d0b      	ldr	r5, [pc, #44]	; (8009d84 <__libc_init_array+0x40>)
 8009d56:	4c0c      	ldr	r4, [pc, #48]	; (8009d88 <__libc_init_array+0x44>)
 8009d58:	f000 fc5e 	bl	800a618 <_init>
 8009d5c:	1b64      	subs	r4, r4, r5
 8009d5e:	10a4      	asrs	r4, r4, #2
 8009d60:	2600      	movs	r6, #0
 8009d62:	42a6      	cmp	r6, r4
 8009d64:	d105      	bne.n	8009d72 <__libc_init_array+0x2e>
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6c:	4798      	blx	r3
 8009d6e:	3601      	adds	r6, #1
 8009d70:	e7ee      	b.n	8009d50 <__libc_init_array+0xc>
 8009d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d76:	4798      	blx	r3
 8009d78:	3601      	adds	r6, #1
 8009d7a:	e7f2      	b.n	8009d62 <__libc_init_array+0x1e>
 8009d7c:	0800a760 	.word	0x0800a760
 8009d80:	0800a760 	.word	0x0800a760
 8009d84:	0800a760 	.word	0x0800a760
 8009d88:	0800a764 	.word	0x0800a764

08009d8c <malloc>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <malloc+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b871 	b.w	8009e78 <_malloc_r>
 8009d96:	bf00      	nop
 8009d98:	200001e4 	.word	0x200001e4

08009d9c <free>:
 8009d9c:	4b02      	ldr	r3, [pc, #8]	; (8009da8 <free+0xc>)
 8009d9e:	4601      	mov	r1, r0
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	f000 b819 	b.w	8009dd8 <_free_r>
 8009da6:	bf00      	nop
 8009da8:	200001e4 	.word	0x200001e4

08009dac <memcpy>:
 8009dac:	440a      	add	r2, r1
 8009dae:	4291      	cmp	r1, r2
 8009db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009db4:	d100      	bne.n	8009db8 <memcpy+0xc>
 8009db6:	4770      	bx	lr
 8009db8:	b510      	push	{r4, lr}
 8009dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	d1f9      	bne.n	8009dba <memcpy+0xe>
 8009dc6:	bd10      	pop	{r4, pc}

08009dc8 <memset>:
 8009dc8:	4402      	add	r2, r0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <_free_r>:
 8009dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d048      	beq.n	8009e70 <_free_r+0x98>
 8009dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de2:	9001      	str	r0, [sp, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dea:	bfb8      	it	lt
 8009dec:	18e4      	addlt	r4, r4, r3
 8009dee:	f000 f8cd 	bl	8009f8c <__malloc_lock>
 8009df2:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <_free_r+0x9c>)
 8009df4:	9801      	ldr	r0, [sp, #4]
 8009df6:	6813      	ldr	r3, [r2, #0]
 8009df8:	4615      	mov	r5, r2
 8009dfa:	b933      	cbnz	r3, 8009e0a <_free_r+0x32>
 8009dfc:	6063      	str	r3, [r4, #4]
 8009dfe:	6014      	str	r4, [r2, #0]
 8009e00:	b003      	add	sp, #12
 8009e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e06:	f000 b8c7 	b.w	8009f98 <__malloc_unlock>
 8009e0a:	42a3      	cmp	r3, r4
 8009e0c:	d90b      	bls.n	8009e26 <_free_r+0x4e>
 8009e0e:	6821      	ldr	r1, [r4, #0]
 8009e10:	1862      	adds	r2, r4, r1
 8009e12:	4293      	cmp	r3, r2
 8009e14:	bf04      	itt	eq
 8009e16:	681a      	ldreq	r2, [r3, #0]
 8009e18:	685b      	ldreq	r3, [r3, #4]
 8009e1a:	6063      	str	r3, [r4, #4]
 8009e1c:	bf04      	itt	eq
 8009e1e:	1852      	addeq	r2, r2, r1
 8009e20:	6022      	streq	r2, [r4, #0]
 8009e22:	602c      	str	r4, [r5, #0]
 8009e24:	e7ec      	b.n	8009e00 <_free_r+0x28>
 8009e26:	461a      	mov	r2, r3
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	b10b      	cbz	r3, 8009e30 <_free_r+0x58>
 8009e2c:	42a3      	cmp	r3, r4
 8009e2e:	d9fa      	bls.n	8009e26 <_free_r+0x4e>
 8009e30:	6811      	ldr	r1, [r2, #0]
 8009e32:	1855      	adds	r5, r2, r1
 8009e34:	42a5      	cmp	r5, r4
 8009e36:	d10b      	bne.n	8009e50 <_free_r+0x78>
 8009e38:	6824      	ldr	r4, [r4, #0]
 8009e3a:	4421      	add	r1, r4
 8009e3c:	1854      	adds	r4, r2, r1
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	6011      	str	r1, [r2, #0]
 8009e42:	d1dd      	bne.n	8009e00 <_free_r+0x28>
 8009e44:	681c      	ldr	r4, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	6053      	str	r3, [r2, #4]
 8009e4a:	4421      	add	r1, r4
 8009e4c:	6011      	str	r1, [r2, #0]
 8009e4e:	e7d7      	b.n	8009e00 <_free_r+0x28>
 8009e50:	d902      	bls.n	8009e58 <_free_r+0x80>
 8009e52:	230c      	movs	r3, #12
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	e7d3      	b.n	8009e00 <_free_r+0x28>
 8009e58:	6825      	ldr	r5, [r4, #0]
 8009e5a:	1961      	adds	r1, r4, r5
 8009e5c:	428b      	cmp	r3, r1
 8009e5e:	bf04      	itt	eq
 8009e60:	6819      	ldreq	r1, [r3, #0]
 8009e62:	685b      	ldreq	r3, [r3, #4]
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	bf04      	itt	eq
 8009e68:	1949      	addeq	r1, r1, r5
 8009e6a:	6021      	streq	r1, [r4, #0]
 8009e6c:	6054      	str	r4, [r2, #4]
 8009e6e:	e7c7      	b.n	8009e00 <_free_r+0x28>
 8009e70:	b003      	add	sp, #12
 8009e72:	bd30      	pop	{r4, r5, pc}
 8009e74:	20000494 	.word	0x20000494

08009e78 <_malloc_r>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	1ccd      	adds	r5, r1, #3
 8009e7c:	f025 0503 	bic.w	r5, r5, #3
 8009e80:	3508      	adds	r5, #8
 8009e82:	2d0c      	cmp	r5, #12
 8009e84:	bf38      	it	cc
 8009e86:	250c      	movcc	r5, #12
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	db01      	blt.n	8009e92 <_malloc_r+0x1a>
 8009e8e:	42a9      	cmp	r1, r5
 8009e90:	d903      	bls.n	8009e9a <_malloc_r+0x22>
 8009e92:	230c      	movs	r3, #12
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	2000      	movs	r0, #0
 8009e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9a:	f000 f877 	bl	8009f8c <__malloc_lock>
 8009e9e:	4921      	ldr	r1, [pc, #132]	; (8009f24 <_malloc_r+0xac>)
 8009ea0:	680a      	ldr	r2, [r1, #0]
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	b99c      	cbnz	r4, 8009ece <_malloc_r+0x56>
 8009ea6:	4f20      	ldr	r7, [pc, #128]	; (8009f28 <_malloc_r+0xb0>)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	b923      	cbnz	r3, 8009eb6 <_malloc_r+0x3e>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 f83c 	bl	8009f2c <_sbrk_r>
 8009eb4:	6038      	str	r0, [r7, #0]
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f000 f837 	bl	8009f2c <_sbrk_r>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d123      	bne.n	8009f0a <_malloc_r+0x92>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	6033      	str	r3, [r6, #0]
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f000 f866 	bl	8009f98 <__malloc_unlock>
 8009ecc:	e7e3      	b.n	8009e96 <_malloc_r+0x1e>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	1b5b      	subs	r3, r3, r5
 8009ed2:	d417      	bmi.n	8009f04 <_malloc_r+0x8c>
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	d903      	bls.n	8009ee0 <_malloc_r+0x68>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	441c      	add	r4, r3
 8009edc:	6025      	str	r5, [r4, #0]
 8009ede:	e004      	b.n	8009eea <_malloc_r+0x72>
 8009ee0:	6863      	ldr	r3, [r4, #4]
 8009ee2:	42a2      	cmp	r2, r4
 8009ee4:	bf0c      	ite	eq
 8009ee6:	600b      	streq	r3, [r1, #0]
 8009ee8:	6053      	strne	r3, [r2, #4]
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f854 	bl	8009f98 <__malloc_unlock>
 8009ef0:	f104 000b 	add.w	r0, r4, #11
 8009ef4:	1d23      	adds	r3, r4, #4
 8009ef6:	f020 0007 	bic.w	r0, r0, #7
 8009efa:	1ac2      	subs	r2, r0, r3
 8009efc:	d0cc      	beq.n	8009e98 <_malloc_r+0x20>
 8009efe:	1a1b      	subs	r3, r3, r0
 8009f00:	50a3      	str	r3, [r4, r2]
 8009f02:	e7c9      	b.n	8009e98 <_malloc_r+0x20>
 8009f04:	4622      	mov	r2, r4
 8009f06:	6864      	ldr	r4, [r4, #4]
 8009f08:	e7cc      	b.n	8009ea4 <_malloc_r+0x2c>
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d0e3      	beq.n	8009edc <_malloc_r+0x64>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4630      	mov	r0, r6
 8009f18:	f000 f808 	bl	8009f2c <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d1dd      	bne.n	8009edc <_malloc_r+0x64>
 8009f20:	e7cf      	b.n	8009ec2 <_malloc_r+0x4a>
 8009f22:	bf00      	nop
 8009f24:	20000494 	.word	0x20000494
 8009f28:	20000498 	.word	0x20000498

08009f2c <_sbrk_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	; (8009f48 <_sbrk_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f7 f81c 	bl	8000f74 <_sbrk>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_sbrk_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_sbrk_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20001fc8 	.word	0x20001fc8

08009f4c <siprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b500      	push	{lr}
 8009f50:	b09c      	sub	sp, #112	; 0x70
 8009f52:	ab1d      	add	r3, sp, #116	; 0x74
 8009f54:	9002      	str	r0, [sp, #8]
 8009f56:	9006      	str	r0, [sp, #24]
 8009f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f5c:	4809      	ldr	r0, [pc, #36]	; (8009f84 <siprintf+0x38>)
 8009f5e:	9107      	str	r1, [sp, #28]
 8009f60:	9104      	str	r1, [sp, #16]
 8009f62:	4909      	ldr	r1, [pc, #36]	; (8009f88 <siprintf+0x3c>)
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	a902      	add	r1, sp, #8
 8009f70:	f000 f874 	bl	800a05c <_svfiprintf_r>
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	b01c      	add	sp, #112	; 0x70
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	200001e4 	.word	0x200001e4
 8009f88:	ffff0208 	.word	0xffff0208

08009f8c <__malloc_lock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_lock+0x8>)
 8009f8e:	f000 baf9 	b.w	800a584 <__retarget_lock_acquire_recursive>
 8009f92:	bf00      	nop
 8009f94:	20001fd0 	.word	0x20001fd0

08009f98 <__malloc_unlock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_unlock+0x8>)
 8009f9a:	f000 baf4 	b.w	800a586 <__retarget_lock_release_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	20001fd0 	.word	0x20001fd0

08009fa4 <__ssputs_r>:
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	688e      	ldr	r6, [r1, #8]
 8009faa:	429e      	cmp	r6, r3
 8009fac:	4682      	mov	sl, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4690      	mov	r8, r2
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	d838      	bhi.n	800a028 <__ssputs_r+0x84>
 8009fb6:	898a      	ldrh	r2, [r1, #12]
 8009fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fbc:	d032      	beq.n	800a024 <__ssputs_r+0x80>
 8009fbe:	6825      	ldr	r5, [r4, #0]
 8009fc0:	6909      	ldr	r1, [r1, #16]
 8009fc2:	eba5 0901 	sub.w	r9, r5, r1
 8009fc6:	6965      	ldr	r5, [r4, #20]
 8009fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	444b      	add	r3, r9
 8009fd4:	106d      	asrs	r5, r5, #1
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	bf38      	it	cc
 8009fda:	461d      	movcc	r5, r3
 8009fdc:	0553      	lsls	r3, r2, #21
 8009fde:	d531      	bpl.n	800a044 <__ssputs_r+0xa0>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f7ff ff49 	bl	8009e78 <_malloc_r>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b950      	cbnz	r0, 800a000 <__ssputs_r+0x5c>
 8009fea:	230c      	movs	r3, #12
 8009fec:	f8ca 3000 	str.w	r3, [sl]
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a000:	6921      	ldr	r1, [r4, #16]
 800a002:	464a      	mov	r2, r9
 800a004:	f7ff fed2 	bl	8009dac <memcpy>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a012:	81a3      	strh	r3, [r4, #12]
 800a014:	6126      	str	r6, [r4, #16]
 800a016:	6165      	str	r5, [r4, #20]
 800a018:	444e      	add	r6, r9
 800a01a:	eba5 0509 	sub.w	r5, r5, r9
 800a01e:	6026      	str	r6, [r4, #0]
 800a020:	60a5      	str	r5, [r4, #8]
 800a022:	463e      	mov	r6, r7
 800a024:	42be      	cmp	r6, r7
 800a026:	d900      	bls.n	800a02a <__ssputs_r+0x86>
 800a028:	463e      	mov	r6, r7
 800a02a:	4632      	mov	r2, r6
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	4641      	mov	r1, r8
 800a030:	f000 faaa 	bl	800a588 <memmove>
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	6822      	ldr	r2, [r4, #0]
 800a038:	1b9b      	subs	r3, r3, r6
 800a03a:	4432      	add	r2, r6
 800a03c:	60a3      	str	r3, [r4, #8]
 800a03e:	6022      	str	r2, [r4, #0]
 800a040:	2000      	movs	r0, #0
 800a042:	e7db      	b.n	8009ffc <__ssputs_r+0x58>
 800a044:	462a      	mov	r2, r5
 800a046:	f000 fab9 	bl	800a5bc <_realloc_r>
 800a04a:	4606      	mov	r6, r0
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d1e1      	bne.n	800a014 <__ssputs_r+0x70>
 800a050:	6921      	ldr	r1, [r4, #16]
 800a052:	4650      	mov	r0, sl
 800a054:	f7ff fec0 	bl	8009dd8 <_free_r>
 800a058:	e7c7      	b.n	8009fea <__ssputs_r+0x46>
	...

0800a05c <_svfiprintf_r>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	4698      	mov	r8, r3
 800a062:	898b      	ldrh	r3, [r1, #12]
 800a064:	061b      	lsls	r3, r3, #24
 800a066:	b09d      	sub	sp, #116	; 0x74
 800a068:	4607      	mov	r7, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	d50e      	bpl.n	800a08e <_svfiprintf_r+0x32>
 800a070:	690b      	ldr	r3, [r1, #16]
 800a072:	b963      	cbnz	r3, 800a08e <_svfiprintf_r+0x32>
 800a074:	2140      	movs	r1, #64	; 0x40
 800a076:	f7ff feff 	bl	8009e78 <_malloc_r>
 800a07a:	6028      	str	r0, [r5, #0]
 800a07c:	6128      	str	r0, [r5, #16]
 800a07e:	b920      	cbnz	r0, 800a08a <_svfiprintf_r+0x2e>
 800a080:	230c      	movs	r3, #12
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	e0d1      	b.n	800a22e <_svfiprintf_r+0x1d2>
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	616b      	str	r3, [r5, #20]
 800a08e:	2300      	movs	r3, #0
 800a090:	9309      	str	r3, [sp, #36]	; 0x24
 800a092:	2320      	movs	r3, #32
 800a094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a098:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09c:	2330      	movs	r3, #48	; 0x30
 800a09e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a248 <_svfiprintf_r+0x1ec>
 800a0a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a6:	f04f 0901 	mov.w	r9, #1
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	469a      	mov	sl, r3
 800a0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b2:	b10a      	cbz	r2, 800a0b8 <_svfiprintf_r+0x5c>
 800a0b4:	2a25      	cmp	r2, #37	; 0x25
 800a0b6:	d1f9      	bne.n	800a0ac <_svfiprintf_r+0x50>
 800a0b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0bc:	d00b      	beq.n	800a0d6 <_svfiprintf_r+0x7a>
 800a0be:	465b      	mov	r3, fp
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff ff6d 	bl	8009fa4 <__ssputs_r>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f000 80aa 	beq.w	800a224 <_svfiprintf_r+0x1c8>
 800a0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d2:	445a      	add	r2, fp
 800a0d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 80a2 	beq.w	800a224 <_svfiprintf_r+0x1c8>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ea:	f10a 0a01 	add.w	sl, sl, #1
 800a0ee:	9304      	str	r3, [sp, #16]
 800a0f0:	9307      	str	r3, [sp, #28]
 800a0f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f8:	4654      	mov	r4, sl
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a100:	4851      	ldr	r0, [pc, #324]	; (800a248 <_svfiprintf_r+0x1ec>)
 800a102:	f7f6 f875 	bl	80001f0 <memchr>
 800a106:	9a04      	ldr	r2, [sp, #16]
 800a108:	b9d8      	cbnz	r0, 800a142 <_svfiprintf_r+0xe6>
 800a10a:	06d0      	lsls	r0, r2, #27
 800a10c:	bf44      	itt	mi
 800a10e:	2320      	movmi	r3, #32
 800a110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a114:	0711      	lsls	r1, r2, #28
 800a116:	bf44      	itt	mi
 800a118:	232b      	movmi	r3, #43	; 0x2b
 800a11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11e:	f89a 3000 	ldrb.w	r3, [sl]
 800a122:	2b2a      	cmp	r3, #42	; 0x2a
 800a124:	d015      	beq.n	800a152 <_svfiprintf_r+0xf6>
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	4654      	mov	r4, sl
 800a12a:	2000      	movs	r0, #0
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	4621      	mov	r1, r4
 800a132:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a136:	3b30      	subs	r3, #48	; 0x30
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d94e      	bls.n	800a1da <_svfiprintf_r+0x17e>
 800a13c:	b1b0      	cbz	r0, 800a16c <_svfiprintf_r+0x110>
 800a13e:	9207      	str	r2, [sp, #28]
 800a140:	e014      	b.n	800a16c <_svfiprintf_r+0x110>
 800a142:	eba0 0308 	sub.w	r3, r0, r8
 800a146:	fa09 f303 	lsl.w	r3, r9, r3
 800a14a:	4313      	orrs	r3, r2
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	46a2      	mov	sl, r4
 800a150:	e7d2      	b.n	800a0f8 <_svfiprintf_r+0x9c>
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	1d19      	adds	r1, r3, #4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	9103      	str	r1, [sp, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfbb      	ittet	lt
 800a15e:	425b      	neglt	r3, r3
 800a160:	f042 0202 	orrlt.w	r2, r2, #2
 800a164:	9307      	strge	r3, [sp, #28]
 800a166:	9307      	strlt	r3, [sp, #28]
 800a168:	bfb8      	it	lt
 800a16a:	9204      	strlt	r2, [sp, #16]
 800a16c:	7823      	ldrb	r3, [r4, #0]
 800a16e:	2b2e      	cmp	r3, #46	; 0x2e
 800a170:	d10c      	bne.n	800a18c <_svfiprintf_r+0x130>
 800a172:	7863      	ldrb	r3, [r4, #1]
 800a174:	2b2a      	cmp	r3, #42	; 0x2a
 800a176:	d135      	bne.n	800a1e4 <_svfiprintf_r+0x188>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9203      	str	r2, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfb8      	it	lt
 800a184:	f04f 33ff 	movlt.w	r3, #4294967295
 800a188:	3402      	adds	r4, #2
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a258 <_svfiprintf_r+0x1fc>
 800a190:	7821      	ldrb	r1, [r4, #0]
 800a192:	2203      	movs	r2, #3
 800a194:	4650      	mov	r0, sl
 800a196:	f7f6 f82b 	bl	80001f0 <memchr>
 800a19a:	b140      	cbz	r0, 800a1ae <_svfiprintf_r+0x152>
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	eba0 000a 	sub.w	r0, r0, sl
 800a1a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	4303      	orrs	r3, r0
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b2:	4826      	ldr	r0, [pc, #152]	; (800a24c <_svfiprintf_r+0x1f0>)
 800a1b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b8:	2206      	movs	r2, #6
 800a1ba:	f7f6 f819 	bl	80001f0 <memchr>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d038      	beq.n	800a234 <_svfiprintf_r+0x1d8>
 800a1c2:	4b23      	ldr	r3, [pc, #140]	; (800a250 <_svfiprintf_r+0x1f4>)
 800a1c4:	bb1b      	cbnz	r3, 800a20e <_svfiprintf_r+0x1b2>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	3307      	adds	r3, #7
 800a1ca:	f023 0307 	bic.w	r3, r3, #7
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	4433      	add	r3, r6
 800a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d8:	e767      	b.n	800a0aa <_svfiprintf_r+0x4e>
 800a1da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1de:	460c      	mov	r4, r1
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e7a5      	b.n	800a130 <_svfiprintf_r+0xd4>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	3401      	adds	r4, #1
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f04f 0c0a 	mov.w	ip, #10
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f6:	3a30      	subs	r2, #48	; 0x30
 800a1f8:	2a09      	cmp	r2, #9
 800a1fa:	d903      	bls.n	800a204 <_svfiprintf_r+0x1a8>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0c5      	beq.n	800a18c <_svfiprintf_r+0x130>
 800a200:	9105      	str	r1, [sp, #20]
 800a202:	e7c3      	b.n	800a18c <_svfiprintf_r+0x130>
 800a204:	fb0c 2101 	mla	r1, ip, r1, r2
 800a208:	4604      	mov	r4, r0
 800a20a:	2301      	movs	r3, #1
 800a20c:	e7f0      	b.n	800a1f0 <_svfiprintf_r+0x194>
 800a20e:	ab03      	add	r3, sp, #12
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	462a      	mov	r2, r5
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <_svfiprintf_r+0x1f8>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	4638      	mov	r0, r7
 800a21a:	f3af 8000 	nop.w
 800a21e:	1c42      	adds	r2, r0, #1
 800a220:	4606      	mov	r6, r0
 800a222:	d1d6      	bne.n	800a1d2 <_svfiprintf_r+0x176>
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	065b      	lsls	r3, r3, #25
 800a228:	f53f af2c 	bmi.w	800a084 <_svfiprintf_r+0x28>
 800a22c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22e:	b01d      	add	sp, #116	; 0x74
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4b06      	ldr	r3, [pc, #24]	; (800a254 <_svfiprintf_r+0x1f8>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4638      	mov	r0, r7
 800a240:	f000 f87a 	bl	800a338 <_printf_i>
 800a244:	e7eb      	b.n	800a21e <_svfiprintf_r+0x1c2>
 800a246:	bf00      	nop
 800a248:	0800a724 	.word	0x0800a724
 800a24c:	0800a72e 	.word	0x0800a72e
 800a250:	00000000 	.word	0x00000000
 800a254:	08009fa5 	.word	0x08009fa5
 800a258:	0800a72a 	.word	0x0800a72a

0800a25c <_printf_common>:
 800a25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a260:	4616      	mov	r6, r2
 800a262:	4699      	mov	r9, r3
 800a264:	688a      	ldr	r2, [r1, #8]
 800a266:	690b      	ldr	r3, [r1, #16]
 800a268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a26c:	4293      	cmp	r3, r2
 800a26e:	bfb8      	it	lt
 800a270:	4613      	movlt	r3, r2
 800a272:	6033      	str	r3, [r6, #0]
 800a274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a278:	4607      	mov	r7, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	b10a      	cbz	r2, 800a282 <_printf_common+0x26>
 800a27e:	3301      	adds	r3, #1
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	0699      	lsls	r1, r3, #26
 800a286:	bf42      	ittt	mi
 800a288:	6833      	ldrmi	r3, [r6, #0]
 800a28a:	3302      	addmi	r3, #2
 800a28c:	6033      	strmi	r3, [r6, #0]
 800a28e:	6825      	ldr	r5, [r4, #0]
 800a290:	f015 0506 	ands.w	r5, r5, #6
 800a294:	d106      	bne.n	800a2a4 <_printf_common+0x48>
 800a296:	f104 0a19 	add.w	sl, r4, #25
 800a29a:	68e3      	ldr	r3, [r4, #12]
 800a29c:	6832      	ldr	r2, [r6, #0]
 800a29e:	1a9b      	subs	r3, r3, r2
 800a2a0:	42ab      	cmp	r3, r5
 800a2a2:	dc26      	bgt.n	800a2f2 <_printf_common+0x96>
 800a2a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2a8:	1e13      	subs	r3, r2, #0
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	bf18      	it	ne
 800a2ae:	2301      	movne	r3, #1
 800a2b0:	0692      	lsls	r2, r2, #26
 800a2b2:	d42b      	bmi.n	800a30c <_printf_common+0xb0>
 800a2b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	47c0      	blx	r8
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d01e      	beq.n	800a300 <_printf_common+0xa4>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	68e5      	ldr	r5, [r4, #12]
 800a2c6:	6832      	ldr	r2, [r6, #0]
 800a2c8:	f003 0306 	and.w	r3, r3, #6
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	bf08      	it	eq
 800a2d0:	1aad      	subeq	r5, r5, r2
 800a2d2:	68a3      	ldr	r3, [r4, #8]
 800a2d4:	6922      	ldr	r2, [r4, #16]
 800a2d6:	bf0c      	ite	eq
 800a2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2dc:	2500      	movne	r5, #0
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bfc4      	itt	gt
 800a2e2:	1a9b      	subgt	r3, r3, r2
 800a2e4:	18ed      	addgt	r5, r5, r3
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	341a      	adds	r4, #26
 800a2ea:	42b5      	cmp	r5, r6
 800a2ec:	d11a      	bne.n	800a324 <_printf_common+0xc8>
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	e008      	b.n	800a304 <_printf_common+0xa8>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4652      	mov	r2, sl
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	47c0      	blx	r8
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d103      	bne.n	800a308 <_printf_common+0xac>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a308:	3501      	adds	r5, #1
 800a30a:	e7c6      	b.n	800a29a <_printf_common+0x3e>
 800a30c:	18e1      	adds	r1, r4, r3
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	2030      	movs	r0, #48	; 0x30
 800a312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a316:	4422      	add	r2, r4
 800a318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a31c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a320:	3302      	adds	r3, #2
 800a322:	e7c7      	b.n	800a2b4 <_printf_common+0x58>
 800a324:	2301      	movs	r3, #1
 800a326:	4622      	mov	r2, r4
 800a328:	4649      	mov	r1, r9
 800a32a:	4638      	mov	r0, r7
 800a32c:	47c0      	blx	r8
 800a32e:	3001      	adds	r0, #1
 800a330:	d0e6      	beq.n	800a300 <_printf_common+0xa4>
 800a332:	3601      	adds	r6, #1
 800a334:	e7d9      	b.n	800a2ea <_printf_common+0x8e>
	...

0800a338 <_printf_i>:
 800a338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a33c:	460c      	mov	r4, r1
 800a33e:	4691      	mov	r9, r2
 800a340:	7e27      	ldrb	r7, [r4, #24]
 800a342:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a344:	2f78      	cmp	r7, #120	; 0x78
 800a346:	4680      	mov	r8, r0
 800a348:	469a      	mov	sl, r3
 800a34a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a34e:	d807      	bhi.n	800a360 <_printf_i+0x28>
 800a350:	2f62      	cmp	r7, #98	; 0x62
 800a352:	d80a      	bhi.n	800a36a <_printf_i+0x32>
 800a354:	2f00      	cmp	r7, #0
 800a356:	f000 80d8 	beq.w	800a50a <_printf_i+0x1d2>
 800a35a:	2f58      	cmp	r7, #88	; 0x58
 800a35c:	f000 80a3 	beq.w	800a4a6 <_printf_i+0x16e>
 800a360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a368:	e03a      	b.n	800a3e0 <_printf_i+0xa8>
 800a36a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a36e:	2b15      	cmp	r3, #21
 800a370:	d8f6      	bhi.n	800a360 <_printf_i+0x28>
 800a372:	a001      	add	r0, pc, #4	; (adr r0, 800a378 <_printf_i+0x40>)
 800a374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a378:	0800a3d1 	.word	0x0800a3d1
 800a37c:	0800a3e5 	.word	0x0800a3e5
 800a380:	0800a361 	.word	0x0800a361
 800a384:	0800a361 	.word	0x0800a361
 800a388:	0800a361 	.word	0x0800a361
 800a38c:	0800a361 	.word	0x0800a361
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a361 	.word	0x0800a361
 800a398:	0800a361 	.word	0x0800a361
 800a39c:	0800a361 	.word	0x0800a361
 800a3a0:	0800a361 	.word	0x0800a361
 800a3a4:	0800a4f1 	.word	0x0800a4f1
 800a3a8:	0800a415 	.word	0x0800a415
 800a3ac:	0800a4d3 	.word	0x0800a4d3
 800a3b0:	0800a361 	.word	0x0800a361
 800a3b4:	0800a361 	.word	0x0800a361
 800a3b8:	0800a513 	.word	0x0800a513
 800a3bc:	0800a361 	.word	0x0800a361
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a361 	.word	0x0800a361
 800a3c8:	0800a361 	.word	0x0800a361
 800a3cc:	0800a4db 	.word	0x0800a4db
 800a3d0:	680b      	ldr	r3, [r1, #0]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	600a      	str	r2, [r1, #0]
 800a3d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0a3      	b.n	800a52c <_printf_i+0x1f4>
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	6808      	ldr	r0, [r1, #0]
 800a3e8:	062e      	lsls	r6, r5, #24
 800a3ea:	f100 0304 	add.w	r3, r0, #4
 800a3ee:	d50a      	bpl.n	800a406 <_printf_i+0xce>
 800a3f0:	6805      	ldr	r5, [r0, #0]
 800a3f2:	600b      	str	r3, [r1, #0]
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	da03      	bge.n	800a400 <_printf_i+0xc8>
 800a3f8:	232d      	movs	r3, #45	; 0x2d
 800a3fa:	426d      	negs	r5, r5
 800a3fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a400:	485e      	ldr	r0, [pc, #376]	; (800a57c <_printf_i+0x244>)
 800a402:	230a      	movs	r3, #10
 800a404:	e019      	b.n	800a43a <_printf_i+0x102>
 800a406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a40a:	6805      	ldr	r5, [r0, #0]
 800a40c:	600b      	str	r3, [r1, #0]
 800a40e:	bf18      	it	ne
 800a410:	b22d      	sxthne	r5, r5
 800a412:	e7ef      	b.n	800a3f4 <_printf_i+0xbc>
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	6825      	ldr	r5, [r4, #0]
 800a418:	1d18      	adds	r0, r3, #4
 800a41a:	6008      	str	r0, [r1, #0]
 800a41c:	0628      	lsls	r0, r5, #24
 800a41e:	d501      	bpl.n	800a424 <_printf_i+0xec>
 800a420:	681d      	ldr	r5, [r3, #0]
 800a422:	e002      	b.n	800a42a <_printf_i+0xf2>
 800a424:	0669      	lsls	r1, r5, #25
 800a426:	d5fb      	bpl.n	800a420 <_printf_i+0xe8>
 800a428:	881d      	ldrh	r5, [r3, #0]
 800a42a:	4854      	ldr	r0, [pc, #336]	; (800a57c <_printf_i+0x244>)
 800a42c:	2f6f      	cmp	r7, #111	; 0x6f
 800a42e:	bf0c      	ite	eq
 800a430:	2308      	moveq	r3, #8
 800a432:	230a      	movne	r3, #10
 800a434:	2100      	movs	r1, #0
 800a436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a43a:	6866      	ldr	r6, [r4, #4]
 800a43c:	60a6      	str	r6, [r4, #8]
 800a43e:	2e00      	cmp	r6, #0
 800a440:	bfa2      	ittt	ge
 800a442:	6821      	ldrge	r1, [r4, #0]
 800a444:	f021 0104 	bicge.w	r1, r1, #4
 800a448:	6021      	strge	r1, [r4, #0]
 800a44a:	b90d      	cbnz	r5, 800a450 <_printf_i+0x118>
 800a44c:	2e00      	cmp	r6, #0
 800a44e:	d04d      	beq.n	800a4ec <_printf_i+0x1b4>
 800a450:	4616      	mov	r6, r2
 800a452:	fbb5 f1f3 	udiv	r1, r5, r3
 800a456:	fb03 5711 	mls	r7, r3, r1, r5
 800a45a:	5dc7      	ldrb	r7, [r0, r7]
 800a45c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a460:	462f      	mov	r7, r5
 800a462:	42bb      	cmp	r3, r7
 800a464:	460d      	mov	r5, r1
 800a466:	d9f4      	bls.n	800a452 <_printf_i+0x11a>
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d10b      	bne.n	800a484 <_printf_i+0x14c>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	07df      	lsls	r7, r3, #31
 800a470:	d508      	bpl.n	800a484 <_printf_i+0x14c>
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	6861      	ldr	r1, [r4, #4]
 800a476:	4299      	cmp	r1, r3
 800a478:	bfde      	ittt	le
 800a47a:	2330      	movle	r3, #48	; 0x30
 800a47c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a480:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a484:	1b92      	subs	r2, r2, r6
 800a486:	6122      	str	r2, [r4, #16]
 800a488:	f8cd a000 	str.w	sl, [sp]
 800a48c:	464b      	mov	r3, r9
 800a48e:	aa03      	add	r2, sp, #12
 800a490:	4621      	mov	r1, r4
 800a492:	4640      	mov	r0, r8
 800a494:	f7ff fee2 	bl	800a25c <_printf_common>
 800a498:	3001      	adds	r0, #1
 800a49a:	d14c      	bne.n	800a536 <_printf_i+0x1fe>
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a0:	b004      	add	sp, #16
 800a4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a6:	4835      	ldr	r0, [pc, #212]	; (800a57c <_printf_i+0x244>)
 800a4a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	680e      	ldr	r6, [r1, #0]
 800a4b0:	061f      	lsls	r7, r3, #24
 800a4b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4b6:	600e      	str	r6, [r1, #0]
 800a4b8:	d514      	bpl.n	800a4e4 <_printf_i+0x1ac>
 800a4ba:	07d9      	lsls	r1, r3, #31
 800a4bc:	bf44      	itt	mi
 800a4be:	f043 0320 	orrmi.w	r3, r3, #32
 800a4c2:	6023      	strmi	r3, [r4, #0]
 800a4c4:	b91d      	cbnz	r5, 800a4ce <_printf_i+0x196>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	f023 0320 	bic.w	r3, r3, #32
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	e7b0      	b.n	800a434 <_printf_i+0xfc>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	f043 0320 	orr.w	r3, r3, #32
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	2378      	movs	r3, #120	; 0x78
 800a4dc:	4828      	ldr	r0, [pc, #160]	; (800a580 <_printf_i+0x248>)
 800a4de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4e2:	e7e3      	b.n	800a4ac <_printf_i+0x174>
 800a4e4:	065e      	lsls	r6, r3, #25
 800a4e6:	bf48      	it	mi
 800a4e8:	b2ad      	uxthmi	r5, r5
 800a4ea:	e7e6      	b.n	800a4ba <_printf_i+0x182>
 800a4ec:	4616      	mov	r6, r2
 800a4ee:	e7bb      	b.n	800a468 <_printf_i+0x130>
 800a4f0:	680b      	ldr	r3, [r1, #0]
 800a4f2:	6826      	ldr	r6, [r4, #0]
 800a4f4:	6960      	ldr	r0, [r4, #20]
 800a4f6:	1d1d      	adds	r5, r3, #4
 800a4f8:	600d      	str	r5, [r1, #0]
 800a4fa:	0635      	lsls	r5, r6, #24
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	d501      	bpl.n	800a504 <_printf_i+0x1cc>
 800a500:	6018      	str	r0, [r3, #0]
 800a502:	e002      	b.n	800a50a <_printf_i+0x1d2>
 800a504:	0671      	lsls	r1, r6, #25
 800a506:	d5fb      	bpl.n	800a500 <_printf_i+0x1c8>
 800a508:	8018      	strh	r0, [r3, #0]
 800a50a:	2300      	movs	r3, #0
 800a50c:	6123      	str	r3, [r4, #16]
 800a50e:	4616      	mov	r6, r2
 800a510:	e7ba      	b.n	800a488 <_printf_i+0x150>
 800a512:	680b      	ldr	r3, [r1, #0]
 800a514:	1d1a      	adds	r2, r3, #4
 800a516:	600a      	str	r2, [r1, #0]
 800a518:	681e      	ldr	r6, [r3, #0]
 800a51a:	6862      	ldr	r2, [r4, #4]
 800a51c:	2100      	movs	r1, #0
 800a51e:	4630      	mov	r0, r6
 800a520:	f7f5 fe66 	bl	80001f0 <memchr>
 800a524:	b108      	cbz	r0, 800a52a <_printf_i+0x1f2>
 800a526:	1b80      	subs	r0, r0, r6
 800a528:	6060      	str	r0, [r4, #4]
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	6123      	str	r3, [r4, #16]
 800a52e:	2300      	movs	r3, #0
 800a530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a534:	e7a8      	b.n	800a488 <_printf_i+0x150>
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	4632      	mov	r2, r6
 800a53a:	4649      	mov	r1, r9
 800a53c:	4640      	mov	r0, r8
 800a53e:	47d0      	blx	sl
 800a540:	3001      	adds	r0, #1
 800a542:	d0ab      	beq.n	800a49c <_printf_i+0x164>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	079b      	lsls	r3, r3, #30
 800a548:	d413      	bmi.n	800a572 <_printf_i+0x23a>
 800a54a:	68e0      	ldr	r0, [r4, #12]
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	4298      	cmp	r0, r3
 800a550:	bfb8      	it	lt
 800a552:	4618      	movlt	r0, r3
 800a554:	e7a4      	b.n	800a4a0 <_printf_i+0x168>
 800a556:	2301      	movs	r3, #1
 800a558:	4632      	mov	r2, r6
 800a55a:	4649      	mov	r1, r9
 800a55c:	4640      	mov	r0, r8
 800a55e:	47d0      	blx	sl
 800a560:	3001      	adds	r0, #1
 800a562:	d09b      	beq.n	800a49c <_printf_i+0x164>
 800a564:	3501      	adds	r5, #1
 800a566:	68e3      	ldr	r3, [r4, #12]
 800a568:	9903      	ldr	r1, [sp, #12]
 800a56a:	1a5b      	subs	r3, r3, r1
 800a56c:	42ab      	cmp	r3, r5
 800a56e:	dcf2      	bgt.n	800a556 <_printf_i+0x21e>
 800a570:	e7eb      	b.n	800a54a <_printf_i+0x212>
 800a572:	2500      	movs	r5, #0
 800a574:	f104 0619 	add.w	r6, r4, #25
 800a578:	e7f5      	b.n	800a566 <_printf_i+0x22e>
 800a57a:	bf00      	nop
 800a57c:	0800a735 	.word	0x0800a735
 800a580:	0800a746 	.word	0x0800a746

0800a584 <__retarget_lock_acquire_recursive>:
 800a584:	4770      	bx	lr

0800a586 <__retarget_lock_release_recursive>:
 800a586:	4770      	bx	lr

0800a588 <memmove>:
 800a588:	4288      	cmp	r0, r1
 800a58a:	b510      	push	{r4, lr}
 800a58c:	eb01 0402 	add.w	r4, r1, r2
 800a590:	d902      	bls.n	800a598 <memmove+0x10>
 800a592:	4284      	cmp	r4, r0
 800a594:	4623      	mov	r3, r4
 800a596:	d807      	bhi.n	800a5a8 <memmove+0x20>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	42a1      	cmp	r1, r4
 800a59c:	d008      	beq.n	800a5b0 <memmove+0x28>
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a6:	e7f8      	b.n	800a59a <memmove+0x12>
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	428a      	cmp	r2, r1
 800a5ae:	d100      	bne.n	800a5b2 <memmove+0x2a>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ba:	e7f7      	b.n	800a5ac <memmove+0x24>

0800a5bc <_realloc_r>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4607      	mov	r7, r0
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	460e      	mov	r6, r1
 800a5c4:	b921      	cbnz	r1, 800a5d0 <_realloc_r+0x14>
 800a5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ca:	4611      	mov	r1, r2
 800a5cc:	f7ff bc54 	b.w	8009e78 <_malloc_r>
 800a5d0:	b922      	cbnz	r2, 800a5dc <_realloc_r+0x20>
 800a5d2:	f7ff fc01 	bl	8009dd8 <_free_r>
 800a5d6:	4625      	mov	r5, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5dc:	f000 f814 	bl	800a608 <_malloc_usable_size_r>
 800a5e0:	42a0      	cmp	r0, r4
 800a5e2:	d20f      	bcs.n	800a604 <_realloc_r+0x48>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	f7ff fc46 	bl	8009e78 <_malloc_r>
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0f2      	beq.n	800a5d8 <_realloc_r+0x1c>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	f7ff fbd9 	bl	8009dac <memcpy>
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7ff fbeb 	bl	8009dd8 <_free_r>
 800a602:	e7e9      	b.n	800a5d8 <_realloc_r+0x1c>
 800a604:	4635      	mov	r5, r6
 800a606:	e7e7      	b.n	800a5d8 <_realloc_r+0x1c>

0800a608 <_malloc_usable_size_r>:
 800a608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60c:	1f18      	subs	r0, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfbc      	itt	lt
 800a612:	580b      	ldrlt	r3, [r1, r0]
 800a614:	18c0      	addlt	r0, r0, r3
 800a616:	4770      	bx	lr

0800a618 <_init>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	bf00      	nop
 800a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61e:	bc08      	pop	{r3}
 800a620:	469e      	mov	lr, r3
 800a622:	4770      	bx	lr

0800a624 <_fini>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	bf00      	nop
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr
