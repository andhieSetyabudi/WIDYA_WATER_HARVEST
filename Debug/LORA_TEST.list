
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e67c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800e81c  0800e81c  0001e81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebe0  0800ebe0  00020574  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebe0  0800ebe0  0001ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebe8  0800ebe8  00020574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebe8  0800ebe8  0001ebe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebec  0800ebec  0001ebec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000574  20000000  0800ebf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001edc  20000574  0800f164  00020574  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002450  0800f164  00022450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003258d  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006530  00000000  00000000  00052b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00059068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  0005af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5c9  00000000  00000000  0005cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027591  00000000  00000000  0007c1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02cb  00000000  00000000  000a3782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143a4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087bc  00000000  00000000  00143aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000574 	.word	0x20000574
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e804 	.word	0x0800e804

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000578 	.word	0x20000578
 80001dc:	0800e804 	.word	0x0800e804

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <digitalToggle>:
{
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	463b      	mov	r3, r7
 8000948:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa25 	bl	8004da2 <HAL_GPIO_TogglePin>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <b0PopCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void b0PopCallback(void *ptr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	char buffer[100] = {0};
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	2260      	movs	r2, #96	; 0x60
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f00d f9fd 	bl	800dd74 <memset>
    uint16_t len;
    uint16_t number;
    NexObject_var *btn = (NexObject_var *)ptr;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	677b      	str	r3, [r7, #116]	; 0x74
    memset(buffer, 0, sizeof(buffer));
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	2264      	movs	r2, #100	; 0x64
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f00d f9f4 	bl	800dd74 <memset>

    /* Get the text value of button component [the value is string type]. */
    NexButton.getText(btn, buffer, 100);
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <b0PopCallback+0x9c>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000998:	4798      	blx	r3
    USBSerial.print(buffer);
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <b0PopCallback+0xa0>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f107 020c 	add.w	r2, r7, #12
 80009a2:	4610      	mov	r0, r2
 80009a4:	4798      	blx	r3
//    btn->getText(buffer, sizeof(buffer));?

    number = atoi(buffer);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00d f97c 	bl	800dca8 <atoi>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    number += 1;
 80009b6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

    memset(buffer, 0, sizeof(buffer));
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00d f9d3 	bl	800dd74 <memset>
    itoa(number, buffer, 10);
 80009ce:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80009d2:	f107 010c 	add.w	r1, r7, #12
 80009d6:	220a      	movs	r2, #10
 80009d8:	4618      	mov	r0, r3
 80009da:	f00d f9ab 	bl	800dd34 <itoa>

    /* Set the text value of button component [the value is string type]. */
    NexButton.setText(btn,buffer);
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <b0PopCallback+0x9c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	4611      	mov	r1, r2
 80009e8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80009ea:	4798      	blx	r3
    HAL_Delay(1000);
 80009ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f0:	f003 fd44 	bl	800447c <HAL_Delay>
//    btn->setText(buffer);
}
 80009f4:	bf00      	nop
 80009f6:	3778      	adds	r7, #120	; 0x78
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000034 	.word	0x20000034
 8000a00:	20000340 	.word	0x20000340

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b0d9      	sub	sp, #356	; 0x164
 8000a08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f003 fcc5 	bl	8004398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f8e5 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 fa5d 	bl	8000ed0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a16:	f000 fa07 	bl	8000e28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a1a:	f000 f9b5 	bl	8000d88 <MX_TIM1_Init>
  MX_RTC_Init();
 8000a1e:	f000 f98d 	bl	8000d3c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000a22:	f00c fb1b 	bl	800d05c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000a26:	f000 f95b 	bl	8000ce0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a2a:	f000 fa27 	bl	8000e7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 8000a2e:	4a57      	ldr	r2, [pc, #348]	; (8000b8c <main+0x188>)
 8000a30:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a38:	6018      	str	r0, [r3, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <main+0x18c>)
 8000a40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a48:	6018      	str	r0, [r3, #0]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 8000a4e:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <main+0x190>)
 8000a50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a58:	6018      	str	r0, [r3, #0]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  SGP40_var VOC_sensor;
  SGP40.halt = HAL_Delay;
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <main+0x194>)
 8000a60:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <main+0x198>)
 8000a62:	601a      	str	r2, [r3, #0]

  USBSerial.begin();
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <main+0x19c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4798      	blx	r3
  Serial1.begin(9600);
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <main+0x1a0>)
 8000a6c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000a70:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000a74:	4798      	blx	r3
  delay_microsInit();
 8000a76:	f000 ff29 	bl	80018cc <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <main+0x1a4>)
 8000a7c:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <main+0x1a8>)
 8000a7e:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 8000a80:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <main+0x1a4>)
 8000a82:	685c      	ldr	r4, [r3, #4]
 8000a84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8000a88:	2319      	movs	r3, #25
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 8000a90:	f8ad 3000 	strh.w	r3, [sp]
 8000a94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000a98:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000a9c:	ca06      	ldmia	r2, {r1, r2}
 8000a9e:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);

  AHT10.halt = HAL_Delay;
 8000aa0:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <main+0x1ac>)
 8000aa2:	4a3e      	ldr	r2, [pc, #248]	; (8000b9c <main+0x198>)
 8000aa4:	601a      	str	r2, [r3, #0]
  AHT10.getTick = HAL_GetTick;
 8000aa6:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <main+0x1ac>)
 8000aa8:	4a42      	ldr	r2, [pc, #264]	; (8000bb4 <main+0x1b0>)
 8000aaa:	605a      	str	r2, [r3, #4]
  AHT10_var AHT1;
  AHT10.begin(&AHT1, &hi2c1,0x38);
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <main+0x1ac>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000ab4:	2238      	movs	r2, #56	; 0x38
 8000ab6:	4940      	ldr	r1, [pc, #256]	; (8000bb8 <main+0x1b4>)
 8000ab8:	4798      	blx	r3

  SGP40.begin(&VOC_sensor, &hi2c1,DFRobot_SGP40_ICC_ADDR, 10000UL);
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <main+0x194>)
 8000abc:	685c      	ldr	r4, [r3, #4]
 8000abe:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000ac2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ac6:	2259      	movs	r2, #89	; 0x59
 8000ac8:	493b      	ldr	r1, [pc, #236]	; (8000bb8 <main+0x1b4>)
 8000aca:	47a0      	blx	r4
  char txt[20]="halloooo \n";
 8000acc:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <main+0x1b8>)
 8000ace:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad4:	c303      	stmia	r3!, {r0, r1}
 8000ad6:	801a      	strh	r2, [r3, #0]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	0c12      	lsrs	r2, r2, #16
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	721a      	strb	r2, [r3, #8]
  char tmp[64];

  NexObject_var button_nextion;
  NexHardware.nex_serial = &Serial1;
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <main+0x1bc>)
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <main+0x1a0>)
 8000aee:	601a      	str	r2, [r3, #0]
  NexHardware.delay = HAL_Delay;
 8000af0:	4b33      	ldr	r3, [pc, #204]	; (8000bc0 <main+0x1bc>)
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <main+0x198>)
 8000af4:	605a      	str	r2, [r3, #4]
  NexButton.create(&button_nextion, 0, 1, "b0");
 8000af6:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <main+0x1c0>)
 8000af8:	681c      	ldr	r4, [r3, #0]
 8000afa:	f107 0018 	add.w	r0, r7, #24
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <main+0x1c4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	2100      	movs	r1, #0
 8000b04:	47a0      	blx	r4
  NexObject_var *nex_listen_list[] =
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	f107 0218 	add.w	r2, r7, #24
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  {
      &button_nextion,
      NULL
  };
  NexHardware.init();
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <main+0x1bc>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4798      	blx	r3
//  NexButton.setText(&button_nextion, (const char*)"1");
  NexObject.attachPop(&button_nextion,b0PopCallback, &button_nextion);
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <main+0x1c8>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f107 0218 	add.w	r2, r7, #24
 8000b26:	f107 0018 	add.w	r0, r7, #24
 8000b2a:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <main+0x1cc>)
 8000b2c:	4798      	blx	r3
  uint8_t num=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NexHardware.loop(nex_listen_list);
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <main+0x1bc>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4798      	blx	r3
	  char num_val[10];
	  sprintf(num_val, "nilai %d", num);
 8000b40:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <main+0x1d0>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00d f9d5 	bl	800def8 <siprintf>
	  if(NexButton.setText(&button_nextion, (const char*)num_val) )
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <main+0x1c0>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	1d39      	adds	r1, r7, #4
 8000b54:	f107 0218 	add.w	r2, r7, #24
 8000b58:	4610      	mov	r0, r2
 8000b5a:	4798      	blx	r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <main+0x166>
		  USBSerial.print((const char*)"success\r\n");
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <main+0x19c>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <main+0x1d4>)
 8000b68:	4798      	blx	r3
	  num++;
 8000b6a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	  {
		  sprintf(tmp, "VOC = %i \n\r", voc_index);
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }
*/
	  HAL_Delay(5000);
 8000b74:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b78:	f003 fc80 	bl	800447c <HAL_Delay>
	  digitalToggle(LED_pin_);
 8000b7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000b80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b84:	f7ff fedc 	bl	8000940 <digitalToggle>
  {
 8000b88:	e7d4      	b.n	8000b34 <main+0x130>
 8000b8a:	bf00      	nop
 8000b8c:	0800e854 	.word	0x0800e854
 8000b90:	0800e85c 	.word	0x0800e85c
 8000b94:	0800e864 	.word	0x0800e864
 8000b98:	20000378 	.word	0x20000378
 8000b9c:	0800447d 	.word	0x0800447d
 8000ba0:	20000340 	.word	0x20000340
 8000ba4:	200000e4 	.word	0x200000e4
 8000ba8:	20000020 	.word	0x20000020
 8000bac:	08001921 	.word	0x08001921
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	08004465 	.word	0x08004465
 8000bb8:	200007d0 	.word	0x200007d0
 8000bbc:	0800e86c 	.word	0x0800e86c
 8000bc0:	20000098 	.word	0x20000098
 8000bc4:	20000034 	.word	0x20000034
 8000bc8:	0800e838 	.word	0x0800e838
 8000bcc:	200000b8 	.word	0x200000b8
 8000bd0:	08000961 	.word	0x08000961
 8000bd4:	0800e83c 	.word	0x0800e83c
 8000bd8:	0800e848 	.word	0x0800e848

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09a      	sub	sp, #104	; 0x68
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be6:	2230      	movs	r2, #48	; 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d f8c2 	bl	800dd74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <SystemClock_Config+0xfc>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <SystemClock_Config+0xfc>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <SystemClock_Config+0xfc>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <SystemClock_Config+0x100>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a29      	ldr	r2, [pc, #164]	; (8000cdc <SystemClock_Config+0x100>)
 8000c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <SystemClock_Config+0x100>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c62:	230f      	movs	r3, #15
 8000c64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c66:	2390      	movs	r3, #144	; 0x90
 8000c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 faf4 	bl	8007264 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c82:	f000 f9a9 	bl	8000fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 fd56 	bl	8007754 <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000cae:	f000 f993 	bl	8000fd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f006 ff17 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000ccc:	f000 f984 	bl	8000fd8 <Error_Handler>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3768      	adds	r7, #104	; 0x68
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f004 f85b 	bl	8004dd8 <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f956 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200007d0 	.word	0x200007d0
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <MX_RTC_Init+0x48>)
 8000d44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d4e:	227f      	movs	r2, #127	; 0x7f
 8000d50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_RTC_Init+0x44>)
 8000d6c:	f006 ffb2 	bl	8007cd4 <HAL_RTC_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d76:	f000 f92f 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000868 	.word	0x20000868
 8000d84:	40002800 	.word	0x40002800

08000d88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <MX_TIM1_Init+0x9c>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dac:	2247      	movs	r2, #71	; 0x47
 8000dae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000db8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dd2:	f007 f864 	bl	8007e9e <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f8fc 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000dee:	f007 f8a5 	bl	8007f3c <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000df8:	f000 f8ee 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM1_Init+0x98>)
 8000e0a:	f007 fa75 	bl	80082f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e14:	f000 f8e0 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000888 	.word	0x20000888
 8000e24:	40010000 	.word	0x40010000

08000e28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_USART1_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART1_UART_Init+0x4c>)
 8000e60:	f007 fab8 	bl	80083d4 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f8b5 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000824 	.word	0x20000824
 8000e78:	40011000 	.word	0x40011000

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_USART2_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f007 fa8e 	bl	80083d4 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 f88b 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200008d0 	.word	0x200008d0
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <MX_GPIO_Init+0xfc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_GPIO_Init+0x100>)
 8000f5e:	f003 ff07 	bl	8004d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000f6a:	f003 ff01 	bl	8004d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <MX_GPIO_Init+0x100>)
 8000f88:	f003 fc72 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000fa6:	f003 fc63 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_GPIO_Init+0x104>)
 8000fc0:	f003 fc56 	bl	8004870 <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_I2C_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_I2C_MspInit+0x88>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001076:	2312      	movs	r3, #18
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001082:	2304      	movs	r3, #4
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <HAL_I2C_MspInit+0x8c>)
 800108e:	f003 fbef 	bl	8004870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0x88>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0x88>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400

080010c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_RTC_MspInit+0x24>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d102      	bne.n	80010dc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_RTC_MspInit+0x28>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40002800 	.word	0x40002800
 80010ec:	42470e3c 	.word	0x42470e3c

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_TIM_Base_MspInit+0x3c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10d      	bne.n	800111e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_TIM_Base_MspInit+0x40>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_TIM_Base_MspInit+0x40>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_TIM_Base_MspInit+0x40>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40010000 	.word	0x40010000
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a3a      	ldr	r2, [pc, #232]	; (800123c <HAL_UART_MspInit+0x108>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d135      	bne.n	80011c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <HAL_UART_MspInit+0x10c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a38      	ldr	r2, [pc, #224]	; (8001240 <HAL_UART_MspInit+0x10c>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_UART_MspInit+0x10c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <HAL_UART_MspInit+0x10c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_UART_MspInit+0x10c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_UART_MspInit+0x10c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800118e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a0:	2307      	movs	r3, #7
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <HAL_UART_MspInit+0x110>)
 80011ac:	f003 fb60 	bl	8004870 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2025      	movs	r0, #37	; 0x25
 80011b6:	f003 fa84 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ba:	2025      	movs	r0, #37	; 0x25
 80011bc:	f003 fa9d 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c0:	e038      	b.n	8001234 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <HAL_UART_MspInit+0x114>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d133      	bne.n	8001234 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a1a      	ldr	r2, [pc, #104]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x10c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001204:	230c      	movs	r3, #12
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001214:	2307      	movs	r3, #7
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0x110>)
 8001220:	f003 fb26 	bl	8004870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2026      	movs	r0, #38	; 0x26
 800122a:	f003 fa4a 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122e:	2026      	movs	r0, #38	; 0x26
 8001230:	f003 fa63 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40011000 	.word	0x40011000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40004400 	.word	0x40004400

0800124c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <HAL_UART_MspDeInit+0x5c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10e      	bne.n	800127c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_UART_MspDeInit+0x60>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_UART_MspDeInit+0x60>)
 8001264:	f023 0310 	bic.w	r3, r3, #16
 8001268:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800126a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800126e:	4810      	ldr	r0, [pc, #64]	; (80012b0 <HAL_UART_MspDeInit+0x64>)
 8001270:	f003 fc82 	bl	8004b78 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001274:	2025      	movs	r0, #37	; 0x25
 8001276:	f003 fa4e 	bl	8004716 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800127a:	e011      	b.n	80012a0 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_UART_MspDeInit+0x68>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10c      	bne.n	80012a0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_UART_MspDeInit+0x60>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_UART_MspDeInit+0x60>)
 800128c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001292:	210c      	movs	r1, #12
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <HAL_UART_MspDeInit+0x64>)
 8001296:	f003 fc6f 	bl	8004b78 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f003 fa3b 	bl	8004716 <HAL_NVIC_DisableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40004400 	.word	0x40004400

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f003 f89a 	bl	800443c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <USART1_IRQHandler+0x10>)
 8001312:	f007 f951 	bl	80085b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000824 	.word	0x20000824

08001320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART2_IRQHandler+0x10>)
 8001326:	f007 f947 	bl	80085b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200008d0 	.word	0x200008d0

08001334 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <OTG_FS_IRQHandler+0x10>)
 800133a:	f004 ff60 	bl	80061fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20002038 	.word	0x20002038

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f00c fc9a 	bl	800dcb0 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	20000590 	.word	0x20000590
 80013b0:	20002450 	.word	0x20002450

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f00c fc59 	bl	800dcbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fafb 	bl	8000a04 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000574 	.word	0x20000574
  ldr r2, =_sidata
 800141c:	0800ebf0 	.word	0x0800ebf0
  ldr r2, =_sbss
 8001420:	20000574 	.word	0x20000574
  ldr r4, =_ebss
 8001424:	20002450 	.word	0x20002450

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <AHT10_delay>:


#include "AHT10.h"

static void AHT10_delay(uint32_t time_)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(AHT10.halt != NULL)
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <AHT10_delay+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <AHT10_delay+0x1a>
		AHT10.halt(time_);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <AHT10_delay+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
	else
		HAL_Delay(time_);
}
 8001444:	e002      	b.n	800144c <AHT10_delay+0x20>
		HAL_Delay(time_);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 f818 	bl	800447c <HAL_Delay>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000004 	.word	0x20000004

08001458 <AHT10_getTick>:

static uint32_t AHT10_getTick(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	if(AHT10.getTick != NULL)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <AHT10_getTick+0x20>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <AHT10_getTick+0x16>
		return AHT10.getTick();
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <AHT10_getTick+0x20>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4798      	blx	r3
 800146a:	4603      	mov	r3, r0
 800146c:	e002      	b.n	8001474 <AHT10_getTick+0x1c>
	else
		return HAL_GetTick();
 800146e:	f002 fff9 	bl	8004464 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000004 	.word	0x20000004

0800147c <AHT10_read>:

static AHT10_status AHT10_read(AHT10_var* var, uint8_t *buffer, size_t len, uint32_t timeout_)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
    if (len > _maxBufferSize)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b20      	cmp	r3, #32
 800148e:	d901      	bls.n	8001494 <AHT10_read+0x18>
        return AHT10_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e00d      	b.n	80014b0 <AHT10_read+0x34>
//    HAL_I2C
    return HAL_I2C_Master_Receive(var->i2c, var->address, buffer, len, timeout_);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	b299      	uxth	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4613      	mov	r3, r2
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	f003 fed7 	bl	800525c <HAL_I2C_Master_Receive>
 80014ae:	4603      	mov	r3, r0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <AHT10_write>:

static AHT10_status AHT10_write(AHT10_var* var, const uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
	 if ( len > _maxBufferSize )
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d901      	bls.n	80014d0 <AHT10_write+0x18>
	        return AHT10_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00d      	b.n	80014ec <AHT10_write+0x34>
	 return HAL_I2C_Master_Transmit(var->i2c, var->address, buffer, len, timeout_);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	7b1b      	ldrb	r3, [r3, #12]
 80014d8:	b299      	uxth	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	f003 fdbb 	bl	8005060 <HAL_I2C_Master_Transmit>
 80014ea:	4603      	mov	r3, r0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <AHT10_detect>:

static AHT10_status AHT10_detect(AHT10_var* var)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	if( var->i2c == NULL )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <AHT10_detect+0x14>
		return false;
 8001504:	2300      	movs	r3, #0
 8001506:	e00b      	b.n	8001520 <AHT10_detect+0x2c>
	uint8_t ret =  HAL_I2C_IsDeviceReady(var->i2c, var->address, 5, 100);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7b1b      	ldrb	r3, [r3, #12]
 8001510:	b299      	uxth	r1, r3
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	2205      	movs	r2, #5
 8001516:	f004 f8c7 	bl	80056a8 <HAL_I2C_IsDeviceReady>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
	return (AHT10_status)ret;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <AHT10_begin>:

static AHT10_status AHT10_begin(AHT10_var* var, I2C_HandleTypeDef *i2c_, uint8_t address)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	71fb      	strb	r3, [r7, #7]
	var->i2c 			= i2c_;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
	var->address 		= address<<1;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	731a      	strb	r2, [r3, #12]
	var->temperature 	= 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
	var->humidity 		= 0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
	uint8_t ret = AHT10_detect(var);
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7ff ffcc 	bl	80014f4 <AHT10_detect>
 800155c:	4603      	mov	r3, r0
 800155e:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 8001560:	7ffb      	ldrb	r3, [r7, #31]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <AHT10_begin+0x42>
		return ret;
 8001566:	7ffb      	ldrb	r3, [r7, #31]
 8001568:	e063      	b.n	8001632 <AHT10_begin+0x10a>
	uint8_t *cmd = malloc(3 * sizeof(*cmd));
 800156a:	2003      	movs	r0, #3
 800156c:	f00c fbe4 	bl	800dd38 <malloc>
 8001570:	4603      	mov	r3, r0
 8001572:	61bb      	str	r3, [r7, #24]
	if ( cmd != NULL )
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <AHT10_begin+0x5c>
		memset(cmd,0,3);
 800157a:	2203      	movs	r2, #3
 800157c:	2100      	movs	r1, #0
 800157e:	69b8      	ldr	r0, [r7, #24]
 8001580:	f00c fbf8 	bl	800dd74 <memset>
	cmd[0] = AHTX0_CMD_SOFTRESET;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	22ba      	movs	r2, #186	; 0xba
 8001588:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var,cmd,1);
 800158a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800158e:	2201      	movs	r2, #1
 8001590:	69b9      	ldr	r1, [r7, #24]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ff90 	bl	80014b8 <AHT10_write>
 8001598:	4603      	mov	r3, r0
 800159a:	77fb      	strb	r3, [r7, #31]
	if( ret != AHT10_OK )
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <AHT10_begin+0x7e>
		return ret;
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	e045      	b.n	8001632 <AHT10_begin+0x10a>
	AHT10_delay(20);	// time for module to warming up
 80015a6:	2014      	movs	r0, #20
 80015a8:	f7ff ff40 	bl	800142c <AHT10_delay>

	cmd[0] = AHTX0_CMD_CALIBRATE;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	22e1      	movs	r2, #225	; 0xe1
 80015b0:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x08;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	3301      	adds	r3, #1
 80015b6:	2208      	movs	r2, #8
 80015b8:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x00;
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	3302      	adds	r3, #2
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var, cmd, 3);
 80015c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c6:	2203      	movs	r2, #3
 80015c8:	69b9      	ldr	r1, [r7, #24]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff ff74 	bl	80014b8 <AHT10_write>
 80015d0:	4603      	mov	r3, r0
 80015d2:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 80015d4:	7ffb      	ldrb	r3, [r7, #31]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <AHT10_begin+0xb6>
		return ret;
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	e029      	b.n	8001632 <AHT10_begin+0x10a>
	uint32_t ts = AHT10_getTick();
 80015de:	f7ff ff3b 	bl	8001458 <AHT10_getTick>
 80015e2:	6178      	str	r0, [r7, #20]
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 80015e4:	e010      	b.n	8001608 <AHT10_begin+0xe0>
	{
		AHT10_delay(5);
 80015e6:	2005      	movs	r0, #5
 80015e8:	f7ff ff20 	bl	800142c <AHT10_delay>
		if( ts - AHT10_getTick() >= 5000 )
 80015ec:	f7ff ff34 	bl	8001458 <AHT10_getTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	f241 3287 	movw	r2, #4999	; 0x1387
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d904      	bls.n	8001608 <AHT10_begin+0xe0>
		{
			free(cmd);
 80015fe:	69b8      	ldr	r0, [r7, #24]
 8001600:	f00c fba2 	bl	800dd48 <free>
			return AHT10_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e014      	b.n	8001632 <AHT10_begin+0x10a>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f92b 	bl	8001864 <AHT10_getStatus>
 800160e:	4603      	mov	r3, r0
 8001610:	b25b      	sxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	dbe7      	blt.n	80015e6 <AHT10_begin+0xbe>
		}
	};
	free(cmd);
 8001616:	69b8      	ldr	r0, [r7, #24]
 8001618:	f00c fb96 	bl	800dd48 <free>
	// load last status to clearing buffer
	if (!(AHT10_getStatus(var) & AHTX0_STATUS_CALIBRATED))
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f921 	bl	8001864 <AHT10_getStatus>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <AHT10_begin+0x108>
		return AHT10_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <AHT10_begin+0x10a>
	else
		return AHT10_OK;
 8001630:	2300      	movs	r3, #0

}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <AHT10_getEvent>:

static AHT10_status AHT10_getEvent(AHT10_var* var, uint32_t timeout_)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	if (var->error_counter >= AHT10_MAX_TRIAL)   // didn't get reply yet from AHT10
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7b5b      	ldrb	r3, [r3, #13]
 800164a:	2b09      	cmp	r3, #9
 800164c:	d91b      	bls.n	8001686 <AHT10_getEvent+0x4a>
	{
		// need to restart module
		uint8_t address_ = var->address>>1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7b1b      	ldrb	r3, [r3, #12]
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		I2C_HandleTypeDef *i2c_ = var->i2c;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
		ret = AHT10_begin(var, i2c_, address_);
 800165e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001662:	461a      	mov	r2, r3
 8001664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff5e 	bl	8001528 <AHT10_begin>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ( ret != AHT10_OK )
 8001672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <AHT10_getEvent+0x44>
			return ret;
 800167a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800167e:	e0e3      	b.n	8001848 <AHT10_getEvent+0x20c>
		var->error_counter = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	735a      	strb	r2, [r3, #13]
	}
	uint8_t cmd_TRIGGER[3] = {AHTX0_CMD_TRIGGER, 0x33, 0};
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <AHT10_getEvent+0x214>)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	4611      	mov	r1, r2
 8001690:	8019      	strh	r1, [r3, #0]
 8001692:	3302      	adds	r3, #2
 8001694:	0c12      	lsrs	r2, r2, #16
 8001696:	701a      	strb	r2, [r3, #0]
	// read the data and store it!
	uint8_t *cmd_ptr = malloc(3 * sizeof(*cmd_ptr));
 8001698:	2003      	movs	r0, #3
 800169a:	f00c fb4d 	bl	800dd38 <malloc>
 800169e:	4603      	mov	r3, r0
 80016a0:	61fb      	str	r3, [r7, #28]
	if (cmd_ptr != NULL)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <AHT10_getEvent+0xb0>
	{
		cmd_ptr[0] = AHTX0_CMD_TRIGGER;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	22ac      	movs	r2, #172	; 0xac
 80016ac:	701a      	strb	r2, [r3, #0]
		cmd_ptr[1] = 0x33;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	2233      	movs	r2, #51	; 0x33
 80016b4:	701a      	strb	r2, [r3, #0]
		cmd_ptr[2] = 0;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3302      	adds	r3, #2
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
		ret = AHT10_write(var, cmd_ptr, 3);
 80016be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c2:	2203      	movs	r2, #3
 80016c4:	69f9      	ldr	r1, [r7, #28]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fef6 	bl	80014b8 <AHT10_write>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != AHT10_OK )
 80016d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <AHT10_getEvent+0xb4>
		{
			var->error_counter++;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7b5b      	ldrb	r3, [r3, #13]
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	735a      	strb	r2, [r3, #13]
			return ret;
 80016e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ea:	e0ad      	b.n	8001848 <AHT10_getEvent+0x20c>
		}
	}
	else
		return AHT10_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0ab      	b.n	8001848 <AHT10_getEvent+0x20c>
	free(cmd_ptr);
 80016f0:	69f8      	ldr	r0, [r7, #28]
 80016f2:	f00c fb29 	bl	800dd48 <free>
	unsigned long t = AHT10_getTick();
 80016f6:	f7ff feaf 	bl	8001458 <AHT10_getTick>
 80016fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 80016fc:	e01b      	b.n	8001736 <AHT10_getEvent+0xfa>
	{
		AHT10_delay(10);
 80016fe:	200a      	movs	r0, #10
 8001700:	f7ff fe94 	bl	800142c <AHT10_delay>
		uint32_t rollOver = AHT10_getTick();
 8001704:	f7ff fea8 	bl	8001458 <AHT10_getTick>
 8001708:	60f8      	str	r0, [r7, #12]
		if (rollOver < t)
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	429a      	cmp	r2, r3
 8001710:	d201      	bcs.n	8001716 <AHT10_getEvent+0xda>
			t = rollOver;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (AHT10_getTick() - t >= timeout_)
 8001716:	f7ff fe9f 	bl	8001458 <AHT10_getTick>
 800171a:	4602      	mov	r2, r0
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d807      	bhi.n	8001736 <AHT10_getEvent+0xfa>
		{
			var->error_counter++;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7b5b      	ldrb	r3, [r3, #13]
 800172a:	3301      	adds	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	735a      	strb	r2, [r3, #13]
			return AHT10_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e088      	b.n	8001848 <AHT10_getEvent+0x20c>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f894 	bl	8001864 <AHT10_getStatus>
 800173c:	4603      	mov	r3, r0
 800173e:	b25b      	sxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	dbdc      	blt.n	80016fe <AHT10_getEvent+0xc2>
		};
	}

	uint8_t *data = malloc(6 * sizeof(*data));
 8001744:	2006      	movs	r0, #6
 8001746:	f00c faf7 	bl	800dd38 <malloc>
 800174a:	4603      	mov	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]
	if (data != NULL)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <AHT10_getEvent+0x122>
	{
		// clear the data
		memset(data,0,6);
 8001754:	2206      	movs	r2, #6
 8001756:	2100      	movs	r1, #0
 8001758:	69b8      	ldr	r0, [r7, #24]
 800175a:	f00c fb0b 	bl	800dd74 <memset>
	}

	ret = AHT10_read(var, data, 6, timeout_);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2206      	movs	r2, #6
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe89 	bl	800147c <AHT10_read>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != AHT10_OK )
 8001770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00b      	beq.n	8001790 <AHT10_getEvent+0x154>
	{
		var->error_counter++;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7b5b      	ldrb	r3, [r3, #13]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	735a      	strb	r2, [r3, #13]
		free(data);
 8001784:	69b8      	ldr	r0, [r7, #24]
 8001786:	f00c fadf 	bl	800dd48 <free>
		return ret;
 800178a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800178e:	e05b      	b.n	8001848 <AHT10_getEvent+0x20c>
	}

	uint32_t h = data[1];
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	3301      	adds	r3, #1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	617b      	str	r3, [r7, #20]
	h <<= 8;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	617b      	str	r3, [r7, #20]
	h |= data[2];
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	3302      	adds	r3, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
	h <<= 4;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	617b      	str	r3, [r7, #20]
	h |= data[3] >> 4;
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	3303      	adds	r3, #3
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
	var->humidity = ((float)h * 100) / 0x100000;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001854 <AHT10_getEvent+0x218>
 80017d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001858 <AHT10_getEvent+0x21c>
 80017da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edc3 7a02 	vstr	s15, [r3, #8]

	uint32_t tdata = data[3] & 0x0F;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	3303      	adds	r3, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	613b      	str	r3, [r7, #16]
	tdata |= data[4];
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	3304      	adds	r3, #4
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	613b      	str	r3, [r7, #16]
	tdata |= data[5];
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	3305      	adds	r3, #5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
	var->temperature = ((float)tdata * 200 / 0x100000) - 50;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001822:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800185c <AHT10_getEvent+0x220>
 8001826:	ee27 7a87 	vmul.f32	s14, s15, s14
 800182a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001858 <AHT10_getEvent+0x21c>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001860 <AHT10_getEvent+0x224>
 8001836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edc3 7a01 	vstr	s15, [r3, #4]
	free(data);
 8001840:	69b8      	ldr	r0, [r7, #24]
 8001842:	f00c fa81 	bl	800dd48 <free>
	return AHT10_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	0800e880 	.word	0x0800e880
 8001854:	42c80000 	.word	0x42c80000
 8001858:	49800000 	.word	0x49800000
 800185c:	43480000 	.word	0x43480000
 8001860:	42480000 	.word	0x42480000

08001864 <AHT10_getStatus>:

static uint8_t AHT10_getStatus(AHT10_var* var)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	if ( AHT10_read(var, &ret, 1) != AHT10_OK )
 800186c:	f107 010f 	add.w	r1, r7, #15
 8001870:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001874:	2201      	movs	r2, #1
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fe00 	bl	800147c <AHT10_read>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <AHT10_getStatus+0x22>
		return 0xFF;
 8001882:	23ff      	movs	r3, #255	; 0xff
 8001884:	e000      	b.n	8001888 <AHT10_getStatus+0x24>
	else
		return ret;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <AHT10_getTemperature>:


// extract Temperature value from the struct
static float AHT10_getTemperature (AHT10_var* var)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	return var->temperature;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	ee07 3a90 	vmov	s15, r3
}
 80018a0:	eeb0 0a67 	vmov.f32	s0, s15
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <AHT10_getHumidity>:

// extract Humidity value from the struct
static float AHT10_getHumidity (AHT10_var* var)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return var->humidity;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	ee07 3a90 	vmov	s15, r3
}
 80018be:	eeb0 0a67 	vmov.f32	s0, s15
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <delay_microsInit+0x4c>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10e      	bne.n	80018fa <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <delay_microsInit+0x4c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <delay_microsInit+0x4c>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <delay_microsInit+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <delay_microsInit+0x50>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <delay_microsInit+0x50>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 80018fa:	bf00      	nop
	 __NOP();
 80018fc:	bf00      	nop
	 __NOP();
 80018fe:	bf00      	nop
	 if(DWT->CYCCNT)
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <delay_microsInit+0x50>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 800190c:	2301      	movs	r3, #1
	 }
};
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000edf0 	.word	0xe000edf0
 800191c:	e0001000 	.word	0xe0001000

08001920 <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <delay_microSeconds+0x60>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <delay_microSeconds+0x60>)
 8001930:	685c      	ldr	r4, [r3, #4]
 8001932:	f006 f8ab 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8001936:	4603      	mov	r3, r0
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <delay_microSeconds+0x64>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	4423      	add	r3, r4
 8001948:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	d906      	bls.n	8001960 <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 8001952:	bf00      	nop
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <delay_microSeconds+0x60>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d8fa      	bhi.n	8001954 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 800195e:	e00a      	b.n	8001976 <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8001960:	bf00      	nop
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <delay_microSeconds+0x60>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d3fa      	bcc.n	8001962 <delay_microSeconds+0x42>
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <delay_microSeconds+0x60>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d8f5      	bhi.n	8001962 <delay_microSeconds+0x42>
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	e0001000 	.word	0xe0001000
 8001984:	431bde83 	.word	0x431bde83

08001988 <digitalWrite>:
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	e883 0003 	stmia.w	r3, {r0, r1}
 8001996:	4613      	mov	r3, r2
 8001998:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	89b9      	ldrh	r1, [r7, #12]
 800199e:	79fa      	ldrb	r2, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 f9e5 	bl	8004d70 <HAL_GPIO_WritePin>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <digitalRead>:
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	463b      	mov	r3, r7
 80019b6:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	88ba      	ldrh	r2, [r7, #4]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f9bd 	bl	8004d40 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 80019da:	f002 fd43 	bl	8004464 <HAL_GetTick>
 80019de:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 80019e0:	e023      	b.n	8001a2a <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 80019e2:	f002 fd3f 	bl	8004464 <HAL_GetTick>
 80019e6:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d206      	bcs.n	80019fe <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bfb8      	it	lt
 80019fa:	425b      	neglt	r3, r3
 80019fc:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 80019fe:	f002 fd31 	bl	8004464 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d801      	bhi.n	8001a12 <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e01f      	b.n	8001a52 <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HX710BIsReady+0x8c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HX710BIsReady+0x8c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	200a      	movs	r0, #10
 8001a20:	4798      	blx	r3
 8001a22:	e002      	b.n	8001a2a <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8001a24:	2005      	movs	r0, #5
 8001a26:	f002 fd29 	bl	800447c <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4611      	mov	r1, r2
 8001a34:	7a9a      	ldrb	r2, [r3, #10]
 8001a36:	7adb      	ldrb	r3, [r3, #11]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f362 030f 	bfi	r3, r2, #0, #16
 8001a42:	4608      	mov	r0, r1
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff ffb2 	bl	80019ae <digitalRead>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1c8      	bne.n	80019e2 <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000020 	.word	0x20000020

08001a60 <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2100      	movs	r1, #0
 8001a72:	4611      	mov	r1, r2
 8001a74:	791a      	ldrb	r2, [r3, #4]
 8001a76:	795b      	ldrb	r3, [r3, #5]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f362 030f 	bfi	r3, r2, #0, #16
 8001a82:	2200      	movs	r2, #0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff ff7e 	bl	8001988 <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff ff9e 	bl	80019d0 <HX710BIsReady>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d169      	bne.n	8001b6e <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	e045      	b.n	8001b34 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	791a      	ldrb	r2, [r3, #4]
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	431a      	orrs	r2, r3
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f362 030f 	bfi	r3, r2, #0, #16
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff ff5d 	bl	8001988 <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001ace:	bf00      	nop
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4611      	mov	r1, r2
 8001adc:	791a      	ldrb	r2, [r3, #4]
 8001ade:	795b      	ldrb	r3, [r3, #5]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f362 030f 	bfi	r3, r2, #0, #16
 8001aea:	2200      	movs	r2, #0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff ff4a 	bl	8001988 <digitalWrite>
			if ( i < 24)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b17      	cmp	r3, #23
 8001af8:	d819      	bhi.n	8001b2e <HX710BRead+0xce>
			{
				raw = raw << 1;
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001b06:	2100      	movs	r1, #0
 8001b08:	4611      	mov	r1, r2
 8001b0a:	7a9a      	ldrb	r2, [r3, #10]
 8001b0c:	7adb      	ldrb	r3, [r3, #11]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	431a      	orrs	r2, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	f362 030f 	bfi	r3, r2, #0, #16
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff ff47 	bl	80019ae <digitalRead>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d103      	bne.n	8001b2e <HX710BRead+0xce>
						raw= raw | 0x01;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	3301      	adds	r3, #1
 8001b32:	75fb      	strb	r3, [r7, #23]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	7b1b      	ldrb	r3, [r3, #12]
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3b4      	bcc.n	8001aa8 <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2100      	movs	r1, #0
 8001b44:	4611      	mov	r1, r2
 8001b46:	791a      	ldrb	r2, [r3, #4]
 8001b48:	795b      	ldrb	r3, [r3, #5]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f362 030f 	bfi	r3, r2, #0, #16
 8001b54:	2201      	movs	r2, #1
 8001b56:	4608      	mov	r0, r1
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff ff15 	bl	8001988 <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HX710BSetMode>:


HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
 8001b84:	4613      	mov	r3, r2
 8001b86:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff66 	bl	8001a60 <HX710BRead>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HX710BInit>:


HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	1d38      	adds	r0, r7, #4
 8001baa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bae:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	f107 021c 	add.w	r2, r7, #28
 8001bb8:	6810      	ldr	r0, [r2, #0]
 8001bba:	6018      	str	r0, [r3, #0]
 8001bbc:	8892      	ldrh	r2, [r2, #4]
 8001bbe:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	6010      	str	r0, [r2, #0]
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001bd4:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8001bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bda:	22f4      	movs	r2, #244	; 0xf4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff ffca 	bl	8001b78 <HX710BSetMode>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bf0:	b002      	add	sp, #8
 8001bf2:	4770      	bx	lr

08001bf4 <NexButton_create>:
#include "NexButton.h"
#include "string.h"
#include "stdlib.h"

void NexButton_create(NexObject_var *obj, uint8_t pid, uint8_t cid, const char *name)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	72fb      	strb	r3, [r7, #11]
 8001c02:	4613      	mov	r3, r2
 8001c04:	72bb      	strb	r3, [r7, #10]
	NexObject.create(obj, pid, cid, name);
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <NexButton_create+0x28>)
 8001c08:	681c      	ldr	r4, [r3, #0]
 8001c0a:	7aba      	ldrb	r2, [r7, #10]
 8001c0c:	7af9      	ldrb	r1, [r7, #11]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	47a0      	blx	r4
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	200000b8 	.word	0x200000b8

08001c20 <NexButton_getText>:


uint16_t NexButton_getText(NexObject_var *obj, char *buffer, uint16_t len)
{
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
 8001c2e:	466b      	mov	r3, sp
 8001c30:	461d      	mov	r5, r3
	size_t len_ = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
	len_ = strlen(obj->__name)+10;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fad0 	bl	80001e0 <strlen>
 8001c40:	4603      	mov	r3, r0
 8001c42:	330a      	adds	r3, #10
 8001c44:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001c46:	69fc      	ldr	r4, [r7, #28]
 8001c48:	4623      	mov	r3, r4
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	00cb      	lsls	r3, r1, #3
 8001c5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c62:	00c2      	lsls	r2, r0, #3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	00cb      	lsls	r3, r1, #3
 8001c74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c78:	00c2      	lsls	r2, r0, #3
 8001c7a:	1de3      	adds	r3, r4, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	466b      	mov	r3, sp
 8001c86:	3300      	adds	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
	sprintf(cmd,"get %s.txt", obj->__name);
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	461a      	mov	r2, r3
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <NexButton_getText+0x9c>)
 8001c94:	f00c f930 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <NexButton_getText+0xa0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3
	return NexHardware.recvRetString(buffer, len, 100UL);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <NexButton_getText+0xa0>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	88f9      	ldrh	r1, [r7, #6]
 8001ca8:	2264      	movs	r2, #100	; 0x64
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	4798      	blx	r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	46ad      	mov	sp, r5
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	0800e884 	.word	0x0800e884
 8001cc0:	20000098 	.word	0x20000098

08001cc4 <NexButton_setText>:

bool NexButton_setText(NexObject_var *obj, const char *buffer)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	466b      	mov	r3, sp
 8001cd0:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+(size_t)8+strlen(buffer);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa82 	bl	80001e0 <strlen>
 8001cdc:	4604      	mov	r4, r0
 8001cde:	6838      	ldr	r0, [r7, #0]
 8001ce0:	f7fe fa7e 	bl	80001e0 <strlen>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4423      	add	r3, r4
 8001ce8:	3308      	adds	r3, #8
 8001cea:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001cec:	697c      	ldr	r4, [r7, #20]
 8001cee:	4623      	mov	r3, r4
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	00cb      	lsls	r3, r1, #3
 8001d04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d08:	00c2      	lsls	r2, r0, #3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	00cb      	lsls	r3, r1, #3
 8001d1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d1e:	00c2      	lsls	r2, r0, #3
 8001d20:	1de3      	adds	r3, r4, #7
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	ebad 0d03 	sub.w	sp, sp, r3
 8001d2a:	466b      	mov	r3, sp
 8001d2c:	3300      	adds	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
	sprintf(cmd,"%s.txt=\"%s\"", obj->__name, buffer);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4909      	ldr	r1, [pc, #36]	; (8001d60 <NexButton_setText+0x9c>)
 8001d3a:	f00c f8dd 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <NexButton_setText+0xa0>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4610      	mov	r0, r2
 8001d46:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(1000UL);
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <NexButton_setText+0xa0>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d50:	4798      	blx	r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	46ad      	mov	sp, r5
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0800e890 	.word	0x0800e890
 8001d64:	20000098 	.word	0x20000098

08001d68 <NexButton_Get_background_color_bco>:

uint32_t NexButton_Get_background_color_bco(NexObject_var *obj, uint32_t *number)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	466b      	mov	r3, sp
 8001d74:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+10;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fa30 	bl	80001e0 <strlen>
 8001d80:	4603      	mov	r3, r0
 8001d82:	330a      	adds	r3, #10
 8001d84:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001d86:	697c      	ldr	r4, [r7, #20]
 8001d88:	4623      	mov	r3, r4
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f04f 0100 	mov.w	r1, #0
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	00cb      	lsls	r3, r1, #3
 8001d9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001da2:	00c2      	lsls	r2, r0, #3
 8001da4:	4620      	mov	r0, r4
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	00cb      	lsls	r3, r1, #3
 8001db4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001db8:	00c2      	lsls	r2, r0, #3
 8001dba:	1de3      	adds	r3, r4, #7
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	ebad 0d03 	sub.w	sp, sp, r3
 8001dc4:	466b      	mov	r3, sp
 8001dc6:	3300      	adds	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
	sprintf(cmd,"get %s.bco", obj->__name);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4909      	ldr	r1, [pc, #36]	; (8001df8 <NexButton_Get_background_color_bco+0x90>)
 8001dd4:	f00c f890 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <NexButton_Get_background_color_bco+0x94>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4610      	mov	r0, r2
 8001de0:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <NexButton_Get_background_color_bco+0x94>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2164      	movs	r1, #100	; 0x64
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	4798      	blx	r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	46ad      	mov	sp, r5
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}
 8001df8:	0800e89c 	.word	0x0800e89c
 8001dfc:	20000098 	.word	0x20000098

08001e00 <NexButton_Set_background_color_bco>:

bool NexButton_Set_background_color_bco(NexObject_var *obj, uint32_t number)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	466b      	mov	r3, sp
 8001e0c:	461d      	mov	r5, r3
	char buf[10] = {0};
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9dd 	bl	80001e0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	3314      	adds	r3, #20
 8001e2a:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001e2c:	69fc      	ldr	r4, [r7, #28]
 8001e2e:	4623      	mov	r3, r4
 8001e30:	3b01      	subs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	4620      	mov	r0, r4
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	00cb      	lsls	r3, r1, #3
 8001e44:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e48:	00c2      	lsls	r2, r0, #3
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00cb      	lsls	r3, r1, #3
 8001e5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e5e:	00c2      	lsls	r2, r0, #3
 8001e60:	1de3      	adds	r3, r4, #7
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	ebad 0d03 	sub.w	sp, sp, r3
 8001e6a:	466b      	mov	r3, sp
 8001e6c:	3300      	adds	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
// create bco
	utoa(number, buf, 10);
 8001e70:	f107 0308 	add.w	r3, r7, #8
 8001e74:	220a      	movs	r2, #10
 8001e76:	4619      	mov	r1, r3
 8001e78:	6838      	ldr	r0, [r7, #0]
 8001e7a:	f00c f941 	bl	800e100 <utoa>
	sprintf(cmd, "%s.bco=%s", obj->__name, buf);
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	4911      	ldr	r1, [pc, #68]	; (8001ed0 <NexButton_Set_background_color_bco+0xd0>)
 8001e8a:	f00c f835 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <NexButton_Set_background_color_bco+0xd4>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4610      	mov	r0, r2
 8001e96:	4798      	blx	r3
	memset(cmd,'\0', len_);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f00b ff68 	bl	800dd74 <memset>
// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <NexButton_Set_background_color_bco+0xd8>)
 8001eae:	f00c f823 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <NexButton_Set_background_color_bco+0xd4>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <NexButton_Set_background_color_bco+0xd4>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	46ad      	mov	sp, r5
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	0800e8a8 	.word	0x0800e8a8
 8001ed4:	20000098 	.word	0x20000098
 8001ed8:	0800e8b4 	.word	0x0800e8b4

08001edc <NexButton_Get_press_background_color_bco2>:

uint32_t NexButton_Get_press_background_color_bco2(NexObject_var *obj, uint32_t *number)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	466b      	mov	r3, sp
 8001ee8:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name) + 12;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f976 	bl	80001e0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 8001efa:	697c      	ldr	r4, [r7, #20]
 8001efc:	4623      	mov	r3, r4
 8001efe:	3b01      	subs	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4620      	mov	r0, r4
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	00cb      	lsls	r3, r1, #3
 8001f12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f16:	00c2      	lsls	r2, r0, #3
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f2c:	00c2      	lsls	r2, r0, #3
 8001f2e:	1de3      	adds	r3, r4, #7
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	ebad 0d03 	sub.w	sp, sp, r3
 8001f38:	466b      	mov	r3, sp
 8001f3a:	3300      	adds	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.bco2", obj->__name);
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4909      	ldr	r1, [pc, #36]	; (8001f6c <NexButton_Get_press_background_color_bco2+0x90>)
 8001f48:	f00b ffd6 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <NexButton_Get_press_background_color_bco2+0x94>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4610      	mov	r0, r2
 8001f54:	4798      	blx	r3
	return NexHardware.recvRetNumber(number,100UL);
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <NexButton_Get_press_background_color_bco2+0x94>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2164      	movs	r1, #100	; 0x64
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	4798      	blx	r3
 8001f60:	4603      	mov	r3, r0
 8001f62:	46ad      	mov	sp, r5
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6c:	0800e8bc 	.word	0x0800e8bc
 8001f70:	20000098 	.word	0x20000098

08001f74 <NexButton_Set_press_background_color_bco2>:

bool NexButton_Set_press_background_color_bco2(NexObject_var *obj, uint32_t number)
{
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	466b      	mov	r3, sp
 8001f80:	461d      	mov	r5, r3
	char buf[10] = {0};
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f923 	bl	80001e0 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8001fa0:	69fc      	ldr	r4, [r7, #28]
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f04f 0100 	mov.w	r1, #0
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	00cb      	lsls	r3, r1, #3
 8001fb8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fbc:	00c2      	lsls	r2, r0, #3
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	00cb      	lsls	r3, r1, #3
 8001fce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fd2:	00c2      	lsls	r2, r0, #3
 8001fd4:	1de3      	adds	r3, r4, #7
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	ebad 0d03 	sub.w	sp, sp, r3
 8001fde:	466b      	mov	r3, sp
 8001fe0:	3300      	adds	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

	// create bco2
	utoa(number, buf, 10);
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	220a      	movs	r2, #10
 8001fea:	4619      	mov	r1, r3
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f00c f887 	bl	800e100 <utoa>
	sprintf(cmd,"%s.bco=%s", obj->__name, buf);
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4911      	ldr	r1, [pc, #68]	; (8002044 <NexButton_Set_press_background_color_bco2+0xd0>)
 8001ffe:	f00b ff7b 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <NexButton_Set_press_background_color_bco2+0xd4>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4610      	mov	r0, r2
 800200a:	4798      	blx	r3
	memset(cmd, '\0', len_);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f00b feae 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd,"ref %s", obj->__name);
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	461a      	mov	r2, r3
 8002020:	490a      	ldr	r1, [pc, #40]	; (800204c <NexButton_Set_press_background_color_bco2+0xd8>)
 8002022:	f00b ff69 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <NexButton_Set_press_background_color_bco2+0xd4>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4610      	mov	r0, r2
 800202e:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <NexButton_Set_press_background_color_bco2+0xd4>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2064      	movs	r0, #100	; 0x64
 8002036:	4798      	blx	r3
 8002038:	4603      	mov	r3, r0
 800203a:	46ad      	mov	sp, r5
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bdb0      	pop	{r4, r5, r7, pc}
 8002044:	0800e8a8 	.word	0x0800e8a8
 8002048:	20000098 	.word	0x20000098
 800204c:	0800e8b4 	.word	0x0800e8b4

08002050 <NexButton_Get_font_color_pco>:

uint32_t NexButton_Get_font_color_pco(NexObject_var *obj, uint32_t *number)
{
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	466b      	mov	r3, sp
 800205c:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name) + 12;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f8bc 	bl	80001e0 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	330c      	adds	r3, #12
 800206c:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 800206e:	697c      	ldr	r4, [r7, #20]
 8002070:	4623      	mov	r3, r4
 8002072:	3b01      	subs	r3, #1
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4620      	mov	r0, r4
 8002078:	f04f 0100 	mov.w	r1, #0
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	00cb      	lsls	r3, r1, #3
 8002086:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800208a:	00c2      	lsls	r2, r0, #3
 800208c:	4620      	mov	r0, r4
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	00cb      	lsls	r3, r1, #3
 800209c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80020a0:	00c2      	lsls	r2, r0, #3
 80020a2:	1de3      	adds	r3, r4, #7
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	ebad 0d03 	sub.w	sp, sp, r3
 80020ac:	466b      	mov	r3, sp
 80020ae:	3300      	adds	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.pco", obj->__name);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4909      	ldr	r1, [pc, #36]	; (80020e0 <NexButton_Get_font_color_pco+0x90>)
 80020bc:	f00b ff1c 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <NexButton_Get_font_color_pco+0x94>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4610      	mov	r0, r2
 80020c8:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <NexButton_Get_font_color_pco+0x94>)
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2164      	movs	r1, #100	; 0x64
 80020d0:	6838      	ldr	r0, [r7, #0]
 80020d2:	4798      	blx	r3
 80020d4:	4603      	mov	r3, r0
 80020d6:	46ad      	mov	sp, r5
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdb0      	pop	{r4, r5, r7, pc}
 80020e0:	0800e8c8 	.word	0x0800e8c8
 80020e4:	20000098 	.word	0x20000098

080020e8 <NexButton_Set_font_color_pco>:

bool NexButton_Set_font_color_pco(NexObject_var *obj, uint32_t number)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	466b      	mov	r3, sp
 80020f4:	461d      	mov	r5, r3
	char buf[10] = {0};
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f869 	bl	80001e0 <strlen>
 800210e:	4603      	mov	r3, r0
 8002110:	3314      	adds	r3, #20
 8002112:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002114:	69fc      	ldr	r4, [r7, #28]
 8002116:	4623      	mov	r3, r4
 8002118:	3b01      	subs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4620      	mov	r0, r4
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	00cb      	lsls	r3, r1, #3
 800212c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002130:	00c2      	lsls	r2, r0, #3
 8002132:	4620      	mov	r0, r4
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	00cb      	lsls	r3, r1, #3
 8002142:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002146:	00c2      	lsls	r2, r0, #3
 8002148:	1de3      	adds	r3, r4, #7
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	ebad 0d03 	sub.w	sp, sp, r3
 8002152:	466b      	mov	r3, sp
 8002154:	3300      	adds	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

	// create pco
	utoa(number, buf, 10);
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	220a      	movs	r2, #10
 800215e:	4619      	mov	r1, r3
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f00b ffcd 	bl	800e100 <utoa>
	sprintf(cmd, "%s.pco=%s", obj->__name, buf);
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	4911      	ldr	r1, [pc, #68]	; (80021b8 <NexButton_Set_font_color_pco+0xd0>)
 8002172:	f00b fec1 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <NexButton_Set_font_color_pco+0xd4>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4610      	mov	r0, r2
 800217e:	4798      	blx	r3
	memset(cmd, '\0', len_);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f00b fdf4 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s",obj->__name);
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	490a      	ldr	r1, [pc, #40]	; (80021c0 <NexButton_Set_font_color_pco+0xd8>)
 8002196:	f00b feaf 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <NexButton_Set_font_color_pco+0xd4>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4610      	mov	r0, r2
 80021a2:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <NexButton_Set_font_color_pco+0xd4>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	4798      	blx	r3
 80021ac:	4603      	mov	r3, r0
 80021ae:	46ad      	mov	sp, r5
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}
 80021b8:	0800e8d4 	.word	0x0800e8d4
 80021bc:	20000098 	.word	0x20000098
 80021c0:	0800e8b4 	.word	0x0800e8b4

080021c4 <NexButton_Get_press_font_color_pco2>:

uint32_t NexButton_Get_press_font_color_pco2(NexObject_var *obj, uint32_t *number)
{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	466b      	mov	r3, sp
 80021d0:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+12;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f802 	bl	80001e0 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	330c      	adds	r3, #12
 80021e0:	617b      	str	r3, [r7, #20]
	char cmd[len_];
 80021e2:	697c      	ldr	r4, [r7, #20]
 80021e4:	4623      	mov	r3, r4
 80021e6:	3b01      	subs	r3, #1
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4620      	mov	r0, r4
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	00cb      	lsls	r3, r1, #3
 80021fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80021fe:	00c2      	lsls	r2, r0, #3
 8002200:	4620      	mov	r0, r4
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	00cb      	lsls	r3, r1, #3
 8002210:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002214:	00c2      	lsls	r2, r0, #3
 8002216:	1de3      	adds	r3, r4, #7
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	ebad 0d03 	sub.w	sp, sp, r3
 8002220:	466b      	mov	r3, sp
 8002222:	3300      	adds	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
	sprintf(cmd, "get %s.pco2", obj->__name);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	4909      	ldr	r1, [pc, #36]	; (8002254 <NexButton_Get_press_font_color_pco2+0x90>)
 8002230:	f00b fe62 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <NexButton_Get_press_font_color_pco2+0x94>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4610      	mov	r0, r2
 800223c:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <NexButton_Get_press_font_color_pco2+0x94>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	4798      	blx	r3
 8002248:	4603      	mov	r3, r0
 800224a:	46ad      	mov	sp, r5
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	0800e8e0 	.word	0x0800e8e0
 8002258:	20000098 	.word	0x20000098

0800225c <NexButton_Set_press_font_color_pco2>:

bool NexButton_Set_press_font_color_pco2(NexObject_var *obj, uint32_t number)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	466b      	mov	r3, sp
 8002268:	461d      	mov	r5, r3
	char buf[10] = {0};
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fd ffaf 	bl	80001e0 <strlen>
 8002282:	4603      	mov	r3, r0
 8002284:	3314      	adds	r3, #20
 8002286:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002288:	69fc      	ldr	r4, [r7, #28]
 800228a:	4623      	mov	r3, r4
 800228c:	3b01      	subs	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	4620      	mov	r0, r4
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	00cb      	lsls	r3, r1, #3
 80022a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022a4:	00c2      	lsls	r2, r0, #3
 80022a6:	4620      	mov	r0, r4
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	00cb      	lsls	r3, r1, #3
 80022b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80022ba:	00c2      	lsls	r2, r0, #3
 80022bc:	1de3      	adds	r3, r4, #7
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	ebad 0d03 	sub.w	sp, sp, r3
 80022c6:	466b      	mov	r3, sp
 80022c8:	3300      	adds	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
	// create pco2
	utoa(number, buf, 10);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	220a      	movs	r2, #10
 80022d2:	4619      	mov	r1, r3
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f00b ff13 	bl	800e100 <utoa>
	sprintf(cmd,"%s.pco2=%s", obj->__name, buf);
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	4911      	ldr	r1, [pc, #68]	; (800232c <NexButton_Set_press_font_color_pco2+0xd0>)
 80022e6:	f00b fe07 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <NexButton_Set_press_font_color_pco2+0xd4>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
	memset(cmd,'\0',len_);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f00b fd3a 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	490a      	ldr	r1, [pc, #40]	; (8002334 <NexButton_Set_press_font_color_pco2+0xd8>)
 800230a:	f00b fdf5 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <NexButton_Set_press_font_color_pco2+0xd4>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <NexButton_Set_press_font_color_pco2+0xd4>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2064      	movs	r0, #100	; 0x64
 800231e:	4798      	blx	r3
 8002320:	4603      	mov	r3, r0
 8002322:	46ad      	mov	sp, r5
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	0800e8ec 	.word	0x0800e8ec
 8002330:	20000098 	.word	0x20000098
 8002334:	0800e8b4 	.word	0x0800e8b4

08002338 <NexButton_Get_place_xcen>:

uint32_t NexButton_Get_place_xcen(NexObject_var *obj, uint32_t *number)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	466b      	mov	r3, sp
 8002344:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fd ff48 	bl	80001e0 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	f103 040c 	add.w	r4, r3, #12
 8002356:	4623      	mov	r3, r4
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4620      	mov	r0, r4
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	00cb      	lsls	r3, r1, #3
 800236c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002370:	00c2      	lsls	r2, r0, #3
 8002372:	4620      	mov	r0, r4
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	00cb      	lsls	r3, r1, #3
 8002382:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002386:	00c2      	lsls	r2, r0, #3
 8002388:	1de3      	adds	r3, r4, #7
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	ebad 0d03 	sub.w	sp, sp, r3
 8002392:	466b      	mov	r3, sp
 8002394:	3300      	adds	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.xcen", obj->__name);
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	4909      	ldr	r1, [pc, #36]	; (80023c8 <NexButton_Get_place_xcen+0x90>)
 80023a2:	f00b fda9 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <NexButton_Get_place_xcen+0x94>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4610      	mov	r0, r2
 80023ae:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <NexButton_Get_place_xcen+0x94>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2164      	movs	r1, #100	; 0x64
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	4798      	blx	r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	46ad      	mov	sp, r5
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800e8f8 	.word	0x0800e8f8
 80023cc:	20000098 	.word	0x20000098

080023d0 <NexButton_Set_place_xcen>:

bool NexButton_Set_place_xcen(NexObject_var *obj, uint32_t number)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	466b      	mov	r3, sp
 80023dc:	461d      	mov	r5, r3
	char buf[10] = {0};
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name) + 20;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fd fef5 	bl	80001e0 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	3314      	adds	r3, #20
 80023fa:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 80023fc:	69fc      	ldr	r4, [r7, #28]
 80023fe:	4623      	mov	r3, r4
 8002400:	3b01      	subs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	4620      	mov	r0, r4
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	00cb      	lsls	r3, r1, #3
 8002414:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002418:	00c2      	lsls	r2, r0, #3
 800241a:	4620      	mov	r0, r4
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	00cb      	lsls	r3, r1, #3
 800242a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800242e:	00c2      	lsls	r2, r0, #3
 8002430:	1de3      	adds	r3, r4, #7
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	ebad 0d03 	sub.w	sp, sp, r3
 800243a:	466b      	mov	r3, sp
 800243c:	3300      	adds	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
	// create xcen
	utoa(number, buf, 10);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	220a      	movs	r2, #10
 8002446:	4619      	mov	r1, r3
 8002448:	6838      	ldr	r0, [r7, #0]
 800244a:	f00b fe59 	bl	800e100 <utoa>
	sprintf(cmd, "%s.xcen=%s", obj->__name, buf);
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	4911      	ldr	r1, [pc, #68]	; (80024a0 <NexButton_Set_place_xcen+0xd0>)
 800245a:	f00b fd4d 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <NexButton_Set_place_xcen+0xd4>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4610      	mov	r0, r2
 8002466:	4798      	blx	r3
	memset(cmd, '\0',len_);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f00b fc80 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	490a      	ldr	r1, [pc, #40]	; (80024a8 <NexButton_Set_place_xcen+0xd8>)
 800247e:	f00b fd3b 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <NexButton_Set_place_xcen+0xd4>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4610      	mov	r0, r2
 800248a:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <NexButton_Set_place_xcen+0xd4>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	4798      	blx	r3
 8002494:	4603      	mov	r3, r0
 8002496:	46ad      	mov	sp, r5
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bdb0      	pop	{r4, r5, r7, pc}
 80024a0:	0800e904 	.word	0x0800e904
 80024a4:	20000098 	.word	0x20000098
 80024a8:	0800e8b4 	.word	0x0800e8b4

080024ac <NexButton_Get_place_ycen>:

uint32_t NexButton_Get_place_ycen(NexObject_var *obj, uint32_t *number)
{
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	466b      	mov	r3, sp
 80024b8:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f103 040c 	add.w	r4, r3, #12
 80024ca:	4623      	mov	r3, r4
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4620      	mov	r0, r4
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	00cb      	lsls	r3, r1, #3
 80024e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024e4:	00c2      	lsls	r2, r0, #3
 80024e6:	4620      	mov	r0, r4
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	00cb      	lsls	r3, r1, #3
 80024f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024fa:	00c2      	lsls	r2, r0, #3
 80024fc:	1de3      	adds	r3, r4, #7
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	ebad 0d03 	sub.w	sp, sp, r3
 8002506:	466b      	mov	r3, sp
 8002508:	3300      	adds	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.ycen", obj->__name);
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	4909      	ldr	r1, [pc, #36]	; (800253c <NexButton_Get_place_ycen+0x90>)
 8002516:	f00b fcef 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <NexButton_Get_place_ycen+0x94>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <NexButton_Get_place_ycen+0x94>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2164      	movs	r1, #100	; 0x64
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	4798      	blx	r3
 800252e:	4603      	mov	r3, r0
 8002530:	46ad      	mov	sp, r5
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	bf00      	nop
 800253c:	0800e910 	.word	0x0800e910
 8002540:	20000098 	.word	0x20000098

08002544 <NexButton_Set_place_ycen>:

bool NexButton_Set_place_ycen(NexObject_var *obj, uint32_t number)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	466b      	mov	r3, sp
 8002550:	461d      	mov	r5, r3
	 char buf[10] = {0};
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	809a      	strh	r2, [r3, #4]
	 size_t len_ = strlen(obj->__name) + 20;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd fe3b 	bl	80001e0 <strlen>
 800256a:	4603      	mov	r3, r0
 800256c:	3314      	adds	r3, #20
 800256e:	61fb      	str	r3, [r7, #28]
	 char cmd[len_];
 8002570:	69fc      	ldr	r4, [r7, #28]
 8002572:	4623      	mov	r3, r4
 8002574:	3b01      	subs	r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	4620      	mov	r0, r4
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800258c:	00c2      	lsls	r2, r0, #3
 800258e:	4620      	mov	r0, r4
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	00cb      	lsls	r3, r1, #3
 800259e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025a2:	00c2      	lsls	r2, r0, #3
 80025a4:	1de3      	adds	r3, r4, #7
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	ebad 0d03 	sub.w	sp, sp, r3
 80025ae:	466b      	mov	r3, sp
 80025b0:	3300      	adds	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
	 //create ycen
	 utoa(number, buf, 10);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	220a      	movs	r2, #10
 80025ba:	4619      	mov	r1, r3
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f00b fd9f 	bl	800e100 <utoa>
	 sprintf(cmd, "%s.ycen=%s", obj->__name,buf);
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4911      	ldr	r1, [pc, #68]	; (8002614 <NexButton_Set_place_ycen+0xd0>)
 80025ce:	f00b fc93 	bl	800def8 <siprintf>
	 NexHardware.sendCommand(cmd);
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <NexButton_Set_place_ycen+0xd4>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4610      	mov	r0, r2
 80025da:	4798      	blx	r3
	 memset(cmd, '\0', len_);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f00b fbc6 	bl	800dd74 <memset>
	 //create ref
	 sprintf(cmd,"ref %s", obj->__name);
 80025e8:	6978      	ldr	r0, [r7, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	490a      	ldr	r1, [pc, #40]	; (800261c <NexButton_Set_place_ycen+0xd8>)
 80025f2:	f00b fc81 	bl	800def8 <siprintf>
	 NexHardware.sendCommand(cmd);
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <NexButton_Set_place_ycen+0xd4>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4610      	mov	r0, r2
 80025fe:	4798      	blx	r3
	 return NexHardware.recvRetCommandFinished(100UL);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <NexButton_Set_place_ycen+0xd4>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	4798      	blx	r3
 8002608:	4603      	mov	r3, r0
 800260a:	46ad      	mov	sp, r5
}
 800260c:	4618      	mov	r0, r3
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	0800e91c 	.word	0x0800e91c
 8002618:	20000098 	.word	0x20000098
 800261c:	0800e8b4 	.word	0x0800e8b4

08002620 <NexButton_getFont>:

uint32_t NexButton_getFont(NexObject_var *obj, uint32_t *number)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	466b      	mov	r3, sp
 800262c:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fdd4 	bl	80001e0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	f103 040c 	add.w	r4, r3, #12
 800263e:	4623      	mov	r3, r4
 8002640:	3b01      	subs	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4620      	mov	r0, r4
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	00cb      	lsls	r3, r1, #3
 8002654:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002658:	00c2      	lsls	r2, r0, #3
 800265a:	4620      	mov	r0, r4
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	00cb      	lsls	r3, r1, #3
 800266a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800266e:	00c2      	lsls	r2, r0, #3
 8002670:	1de3      	adds	r3, r4, #7
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	ebad 0d03 	sub.w	sp, sp, r3
 800267a:	466b      	mov	r3, sp
 800267c:	3300      	adds	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.font", obj->__name);
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	461a      	mov	r2, r3
 8002688:	4909      	ldr	r1, [pc, #36]	; (80026b0 <NexButton_getFont+0x90>)
 800268a:	f00b fc35 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <NexButton_getFont+0x94>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	4610      	mov	r0, r2
 8002696:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <NexButton_getFont+0x94>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2164      	movs	r1, #100	; 0x64
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	4798      	blx	r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	46ad      	mov	sp, r5
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800e928 	.word	0x0800e928
 80026b4:	20000098 	.word	0x20000098

080026b8 <NexButton_setFont>:

bool NexButton_setFont(NexObject_var *obj, uint32_t number)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	466b      	mov	r3, sp
 80026c4:	461d      	mov	r5, r3
	char buf[10] = {0};
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fd81 	bl	80001e0 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	3314      	adds	r3, #20
 80026e2:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 80026e4:	69fc      	ldr	r4, [r7, #28]
 80026e6:	4623      	mov	r3, r4
 80026e8:	3b01      	subs	r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	4620      	mov	r0, r4
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	00cb      	lsls	r3, r1, #3
 80026fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002700:	00c2      	lsls	r2, r0, #3
 8002702:	4620      	mov	r0, r4
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00cb      	lsls	r3, r1, #3
 8002712:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002716:	00c2      	lsls	r2, r0, #3
 8002718:	1de3      	adds	r3, r4, #7
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	ebad 0d03 	sub.w	sp, sp, r3
 8002722:	466b      	mov	r3, sp
 8002724:	3300      	adds	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
	// create .font
	utoa(number, buf, 10);
 8002728:	f107 0308 	add.w	r3, r7, #8
 800272c:	220a      	movs	r2, #10
 800272e:	4619      	mov	r1, r3
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f00b fce5 	bl	800e100 <utoa>
	sprintf(cmd,"%s.font=%s", obj->__name, buf);
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4911      	ldr	r1, [pc, #68]	; (8002788 <NexButton_setFont+0xd0>)
 8002742:	f00b fbd9 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <NexButton_setFont+0xd4>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4610      	mov	r0, r2
 800274e:	4798      	blx	r3
	memset(cmd,'\0', len_);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f00b fb0c 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	490a      	ldr	r1, [pc, #40]	; (8002790 <NexButton_setFont+0xd8>)
 8002766:	f00b fbc7 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <NexButton_setFont+0xd4>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <NexButton_setFont+0xd4>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2064      	movs	r0, #100	; 0x64
 800277a:	4798      	blx	r3
 800277c:	4603      	mov	r3, r0
 800277e:	46ad      	mov	sp, r5
}
 8002780:	4618      	mov	r0, r3
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bdb0      	pop	{r4, r5, r7, pc}
 8002788:	0800e934 	.word	0x0800e934
 800278c:	20000098 	.word	0x20000098
 8002790:	0800e8b4 	.word	0x0800e8b4

08002794 <NexButton_Get_background_crop_picc>:

uint32_t NexButton_Get_background_crop_picc(NexObject_var *obj, uint32_t *number)
{
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	466b      	mov	r3, sp
 80027a0:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fd1a 	bl	80001e0 <strlen>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f103 040c 	add.w	r4, r3, #12
 80027b2:	4623      	mov	r3, r4
 80027b4:	3b01      	subs	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	4620      	mov	r0, r4
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	00cb      	lsls	r3, r1, #3
 80027c8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027cc:	00c2      	lsls	r2, r0, #3
 80027ce:	4620      	mov	r0, r4
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	00cb      	lsls	r3, r1, #3
 80027de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027e2:	00c2      	lsls	r2, r0, #3
 80027e4:	1de3      	adds	r3, r4, #7
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	ebad 0d03 	sub.w	sp, sp, r3
 80027ee:	466b      	mov	r3, sp
 80027f0:	3300      	adds	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.picc", obj->__name);
 80027f4:	68b8      	ldr	r0, [r7, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4909      	ldr	r1, [pc, #36]	; (8002824 <NexButton_Get_background_crop_picc+0x90>)
 80027fe:	f00b fb7b 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <NexButton_Get_background_crop_picc+0x94>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4610      	mov	r0, r2
 800280a:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <NexButton_Get_background_crop_picc+0x94>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2164      	movs	r1, #100	; 0x64
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	4798      	blx	r3
 8002816:	4603      	mov	r3, r0
 8002818:	46ad      	mov	sp, r5
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bdb0      	pop	{r4, r5, r7, pc}
 8002822:	bf00      	nop
 8002824:	0800e940 	.word	0x0800e940
 8002828:	20000098 	.word	0x20000098

0800282c <NexButton_Set_background_crop_picc>:

bool NexButton_Set_background_crop_picc(NexObject_var *obj, uint32_t number)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	466b      	mov	r3, sp
 8002838:	461d      	mov	r5, r3
	size_t len_ = strlen(obj->__name)+20;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fcce 	bl	80001e0 <strlen>
 8002844:	4603      	mov	r3, r0
 8002846:	3314      	adds	r3, #20
 8002848:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 800284a:	69fc      	ldr	r4, [r7, #28]
 800284c:	4623      	mov	r3, r4
 800284e:	3b01      	subs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	4620      	mov	r0, r4
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	00cb      	lsls	r3, r1, #3
 8002862:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002866:	00c2      	lsls	r2, r0, #3
 8002868:	4620      	mov	r0, r4
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	00cb      	lsls	r3, r1, #3
 8002878:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800287c:	00c2      	lsls	r2, r0, #3
 800287e:	1de3      	adds	r3, r4, #7
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	ebad 0d03 	sub.w	sp, sp, r3
 8002888:	466b      	mov	r3, sp
 800288a:	3300      	adds	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
    char buf[10] = {0};
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	809a      	strh	r2, [r3, #4]
    // create .picc
    utoa(number, buf, 10);
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	220a      	movs	r2, #10
 80028a2:	4619      	mov	r1, r3
 80028a4:	6838      	ldr	r0, [r7, #0]
 80028a6:	f00b fc2b 	bl	800e100 <utoa>
    sprintf(cmd,"%s.picc=%s", obj->__name, buf);
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4911      	ldr	r1, [pc, #68]	; (80028fc <NexButton_Set_background_crop_picc+0xd0>)
 80028b6:	f00b fb1f 	bl	800def8 <siprintf>
    NexHardware.sendCommand(cmd);
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <NexButton_Set_background_crop_picc+0xd4>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4610      	mov	r0, r2
 80028c2:	4798      	blx	r3
    memset(cmd,'\0', len_);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f00b fa52 	bl	800dd74 <memset>
    // create ref
    sprintf(cmd,"ref %s", obj->__name);
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	490a      	ldr	r1, [pc, #40]	; (8002904 <NexButton_Set_background_crop_picc+0xd8>)
 80028da:	f00b fb0d 	bl	800def8 <siprintf>
    NexHardware.sendCommand(cmd);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <NexButton_Set_background_crop_picc+0xd4>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4610      	mov	r0, r2
 80028e6:	4798      	blx	r3
    return NexHardware.recvRetCommandFinished(100UL);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <NexButton_Set_background_crop_picc+0xd4>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	4798      	blx	r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	46ad      	mov	sp, r5
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bdb0      	pop	{r4, r5, r7, pc}
 80028fc:	0800e94c 	.word	0x0800e94c
 8002900:	20000098 	.word	0x20000098
 8002904:	0800e8b4 	.word	0x0800e8b4

08002908 <NexButton_Get_press_background_crop_picc2>:

uint32_t NexButton_Get_press_background_crop_picc2(NexObject_var *obj, uint32_t *number)
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	466b      	mov	r3, sp
 8002914:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fc60 	bl	80001e0 <strlen>
 8002920:	4603      	mov	r3, r0
 8002922:	f103 040c 	add.w	r4, r3, #12
 8002926:	4623      	mov	r3, r4
 8002928:	3b01      	subs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4620      	mov	r0, r4
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	00cb      	lsls	r3, r1, #3
 800293c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002940:	00c2      	lsls	r2, r0, #3
 8002942:	4620      	mov	r0, r4
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	00cb      	lsls	r3, r1, #3
 8002952:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002956:	00c2      	lsls	r2, r0, #3
 8002958:	1de3      	adds	r3, r4, #7
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	ebad 0d03 	sub.w	sp, sp, r3
 8002962:	466b      	mov	r3, sp
 8002964:	3300      	adds	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
	sprintf(cmd, "get %s.picc2", obj->__name);
 8002968:	68b8      	ldr	r0, [r7, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	4909      	ldr	r1, [pc, #36]	; (8002998 <NexButton_Get_press_background_crop_picc2+0x90>)
 8002972:	f00b fac1 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <NexButton_Get_press_background_crop_picc2+0x94>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4610      	mov	r0, r2
 800297e:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <NexButton_Get_press_background_crop_picc2+0x94>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2164      	movs	r1, #100	; 0x64
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	4798      	blx	r3
 800298a:	4603      	mov	r3, r0
 800298c:	46ad      	mov	sp, r5
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bdb0      	pop	{r4, r5, r7, pc}
 8002996:	bf00      	nop
 8002998:	0800e958 	.word	0x0800e958
 800299c:	20000098 	.word	0x20000098

080029a0 <NexButton_Set_press_background_crop_picc2>:

bool NexButton_Set_press_background_crop_picc2(NexObject_var *obj, uint32_t number)
{
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	466b      	mov	r3, sp
 80029ac:	461d      	mov	r5, r3
	char buf[10] = {0};
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fc0d 	bl	80001e0 <strlen>
 80029c6:	4603      	mov	r3, r0
 80029c8:	3314      	adds	r3, #20
 80029ca:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 80029cc:	69fc      	ldr	r4, [r7, #28]
 80029ce:	4623      	mov	r3, r4
 80029d0:	3b01      	subs	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	4620      	mov	r0, r4
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	00cb      	lsls	r3, r1, #3
 80029e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029e8:	00c2      	lsls	r2, r0, #3
 80029ea:	4620      	mov	r0, r4
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00cb      	lsls	r3, r1, #3
 80029fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029fe:	00c2      	lsls	r2, r0, #3
 8002a00:	1de3      	adds	r3, r4, #7
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	ebad 0d03 	sub.w	sp, sp, r3
 8002a0a:	466b      	mov	r3, sp
 8002a0c:	3300      	adds	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
	// create .picc2
	utoa(number, buf, 10);
 8002a10:	f107 0308 	add.w	r3, r7, #8
 8002a14:	220a      	movs	r2, #10
 8002a16:	4619      	mov	r1, r3
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f00b fb71 	bl	800e100 <utoa>
	sprintf(cmd, "%s.picc2=%s", obj->__name, buf);
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	4911      	ldr	r1, [pc, #68]	; (8002a70 <NexButton_Set_press_background_crop_picc2+0xd0>)
 8002a2a:	f00b fa65 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
	memset(cmd, '\0', len_);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f00b f998 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002a44:	6978      	ldr	r0, [r7, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	490a      	ldr	r1, [pc, #40]	; (8002a78 <NexButton_Set_press_background_crop_picc2+0xd8>)
 8002a4e:	f00b fa53 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <NexButton_Set_press_background_crop_picc2+0xd4>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	4798      	blx	r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	46ad      	mov	sp, r5
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	0800e968 	.word	0x0800e968
 8002a74:	20000098 	.word	0x20000098
 8002a78:	0800e8b4 	.word	0x0800e8b4

08002a7c <NexButton_Get_background_image_pic>:

uint32_t NexButton_Get_background_image_pic(NexObject_var *obj, uint32_t *number)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	466b      	mov	r3, sp
 8002a88:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fba6 	bl	80001e0 <strlen>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f103 040c 	add.w	r4, r3, #12
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ab4:	00c2      	lsls	r2, r0, #3
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	00cb      	lsls	r3, r1, #3
 8002ac6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002aca:	00c2      	lsls	r2, r0, #3
 8002acc:	1de3      	adds	r3, r4, #7
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	ebad 0d03 	sub.w	sp, sp, r3
 8002ad6:	466b      	mov	r3, sp
 8002ad8:	3300      	adds	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.pic", obj->__name);
 8002adc:	68b8      	ldr	r0, [r7, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4909      	ldr	r1, [pc, #36]	; (8002b0c <NexButton_Get_background_image_pic+0x90>)
 8002ae6:	f00b fa07 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <NexButton_Get_background_image_pic+0x94>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
	return NexHardware.recvRetNumber(number, 100UL);
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <NexButton_Get_background_image_pic+0x94>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	4798      	blx	r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	46ad      	mov	sp, r5
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	0800e974 	.word	0x0800e974
 8002b10:	20000098 	.word	0x20000098

08002b14 <NexButton_Set_background_image_pic>:

bool NexButton_Set_background_image_pic(NexObject_var *obj, uint32_t number)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	466b      	mov	r3, sp
 8002b20:	461d      	mov	r5, r3
    char buf[10] = {0};
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	809a      	strh	r2, [r3, #4]
    size_t len_ = strlen(obj->__name)+20;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb53 	bl	80001e0 <strlen>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	61fb      	str	r3, [r7, #28]
    char cmd[len_];
 8002b40:	69fc      	ldr	r4, [r7, #28]
 8002b42:	4623      	mov	r3, r4
 8002b44:	3b01      	subs	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	00cb      	lsls	r3, r1, #3
 8002b58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b5c:	00c2      	lsls	r2, r0, #3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	00cb      	lsls	r3, r1, #3
 8002b6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b72:	00c2      	lsls	r2, r0, #3
 8002b74:	1de3      	adds	r3, r4, #7
 8002b76:	08db      	lsrs	r3, r3, #3
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	ebad 0d03 	sub.w	sp, sp, r3
 8002b7e:	466b      	mov	r3, sp
 8002b80:	3300      	adds	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
    // create .pic
    utoa(number, buf, 10);
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	220a      	movs	r2, #10
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f00b fab7 	bl	800e100 <utoa>
    sprintf(cmd, "%s.pic=%s", obj->__name, buf);
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4911      	ldr	r1, [pc, #68]	; (8002be4 <NexButton_Set_background_image_pic+0xd0>)
 8002b9e:	f00b f9ab 	bl	800def8 <siprintf>
    NexHardware.sendCommand(cmd);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <NexButton_Set_background_image_pic+0xd4>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4798      	blx	r3
    memset(cmd, '\0', len_);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00b f8de 	bl	800dd74 <memset>
    // create ref
    sprintf(cmd, "ref %s", obj->__name);
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	490a      	ldr	r1, [pc, #40]	; (8002bec <NexButton_Set_background_image_pic+0xd8>)
 8002bc2:	f00b f999 	bl	800def8 <siprintf>
    NexHardware.sendCommand(cmd);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <NexButton_Set_background_image_pic+0xd4>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
    return NexHardware.recvRetCommandFinished(100UL);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <NexButton_Set_background_image_pic+0xd4>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2064      	movs	r0, #100	; 0x64
 8002bd6:	4798      	blx	r3
 8002bd8:	4603      	mov	r3, r0
 8002bda:	46ad      	mov	sp, r5
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	0800e980 	.word	0x0800e980
 8002be8:	20000098 	.word	0x20000098
 8002bec:	0800e8b4 	.word	0x0800e8b4

08002bf0 <NexButton_Get_press_background_image_pic2>:

uint32_t NexButton_Get_press_background_image_pic2(NexObject_var *obj, uint32_t *number)
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	466b      	mov	r3, sp
 8002bfc:	461d      	mov	r5, r3
	char cmd[strlen(obj->__name)+12];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd faec 	bl	80001e0 <strlen>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f103 040c 	add.w	r4, r3, #12
 8002c0e:	4623      	mov	r3, r4
 8002c10:	3b01      	subs	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	4620      	mov	r0, r4
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c28:	00c2      	lsls	r2, r0, #3
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	00cb      	lsls	r3, r1, #3
 8002c3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c3e:	00c2      	lsls	r2, r0, #3
 8002c40:	1de3      	adds	r3, r4, #7
 8002c42:	08db      	lsrs	r3, r3, #3
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	ebad 0d03 	sub.w	sp, sp, r3
 8002c4a:	466b      	mov	r3, sp
 8002c4c:	3300      	adds	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
	sprintf(cmd,"get %s.pic2", obj->__name);
 8002c50:	68b8      	ldr	r0, [r7, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4909      	ldr	r1, [pc, #36]	; (8002c80 <NexButton_Get_press_background_image_pic2+0x90>)
 8002c5a:	f00b f94d 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <NexButton_Get_press_background_image_pic2+0x94>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4610      	mov	r0, r2
 8002c66:	4798      	blx	r3
    return NexHardware.recvRetNumber(number, 100UL);
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <NexButton_Get_press_background_image_pic2+0x94>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2164      	movs	r1, #100	; 0x64
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	4798      	blx	r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	46ad      	mov	sp, r5
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	0800e98c 	.word	0x0800e98c
 8002c84:	20000098 	.word	0x20000098

08002c88 <NexButton_Set_press_background_image_pic2>:


bool NexButton_Set_press_background_image_pic2(NexObject_var *obj, uint32_t number)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	466b      	mov	r3, sp
 8002c94:	461d      	mov	r5, r3
	char buf[10] = {0};
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	809a      	strh	r2, [r3, #4]
	size_t len_ = strlen(obj->__name)+20;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fa99 	bl	80001e0 <strlen>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	61fb      	str	r3, [r7, #28]
	char cmd[len_];
 8002cb4:	69fc      	ldr	r4, [r7, #28]
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	00cb      	lsls	r3, r1, #3
 8002ccc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cd0:	00c2      	lsls	r2, r0, #3
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00cb      	lsls	r3, r1, #3
 8002ce2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ce6:	00c2      	lsls	r2, r0, #3
 8002ce8:	1de3      	adds	r3, r4, #7
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	ebad 0d03 	sub.w	sp, sp, r3
 8002cf2:	466b      	mov	r3, sp
 8002cf4:	3300      	adds	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
	// create .pic2
	utoa(number, buf, 10);
 8002cf8:	f107 0308 	add.w	r3, r7, #8
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f00b f9fd 	bl	800e100 <utoa>
	sprintf(cmd,"%s.pic2=%s", obj->__name, buf);
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	4911      	ldr	r1, [pc, #68]	; (8002d58 <NexButton_Set_press_background_image_pic2+0xd0>)
 8002d12:	f00b f8f1 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
	memset(cmd,'\0',len_);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f00b f824 	bl	800dd74 <memset>
	// create ref
	sprintf(cmd, "ref %s", obj->__name);
 8002d2c:	6978      	ldr	r0, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	490a      	ldr	r1, [pc, #40]	; (8002d60 <NexButton_Set_press_background_image_pic2+0xd8>)
 8002d36:	f00b f8df 	bl	800def8 <siprintf>
	NexHardware.sendCommand(cmd);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4610      	mov	r0, r2
 8002d42:	4798      	blx	r3
	return NexHardware.recvRetCommandFinished(100UL);
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <NexButton_Set_press_background_image_pic2+0xd4>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	2064      	movs	r0, #100	; 0x64
 8002d4a:	4798      	blx	r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	46ad      	mov	sp, r5
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}
 8002d58:	0800e998 	.word	0x0800e998
 8002d5c:	20000098 	.word	0x20000098
 8002d60:	0800e8b4 	.word	0x0800e8b4

08002d64 <nex_halt>:
		.sendCommand	= 	nex_sendCommand,
		.recvRetCommandFinished = nex_recvRetCommandFinished,
};

void nex_halt(uint32_t t)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	if(NexHardware.delay == NULL)
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <nex_halt+0x28>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <nex_halt+0x18>
		HAL_Delay(t);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f001 fb81 	bl	800447c <HAL_Delay>
	else
		NexHardware.delay(t);
}
 8002d7a:	e003      	b.n	8002d84 <nex_halt+0x20>
		NexHardware.delay(t);
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <nex_halt+0x28>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000098 	.word	0x20000098

08002d90 <nex_recvRetNumber>:
 * @retval true - success.
 * @retval false - failed.
 *
 */
bool nex_recvRetNumber(uint32_t *number, uint32_t timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
	if  ( NexHardware.nex_serial == NULL )
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <nex_recvRetNumber+0x90>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <nex_recvRetNumber+0x16>
		return false;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e037      	b.n	8002e16 <nex_recvRetNumber+0x86>
	uint8_t temp[8] = {0};
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
	if (!number)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <nex_recvRetNumber+0x28>
		return false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e02e      	b.n	8002e16 <nex_recvRetNumber+0x86>
	NexHardware.nex_serial->setTimeout(timeout);
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <nex_recvRetNumber+0x90>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	4798      	blx	r3
	if (sizeof(temp) != NexHardware.nex_serial->readBytes((char *)temp, sizeof(temp)))
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <nex_recvRetNumber+0x90>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8002dcc:	f107 0208 	add.w	r2, r7, #8
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4798      	blx	r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d001      	beq.n	8002de0 <nex_recvRetNumber+0x50>
		return false;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e01a      	b.n	8002e16 <nex_recvRetNumber+0x86>

	if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5] == 0xFF && temp[6] == 0xFF && temp[7] == 0xFF)
 8002de0:	7a3b      	ldrb	r3, [r7, #8]
 8002de2:	2b71      	cmp	r3, #113	; 0x71
 8002de4:	d116      	bne.n	8002e14 <nex_recvRetNumber+0x84>
 8002de6:	7b7b      	ldrb	r3, [r7, #13]
 8002de8:	2bff      	cmp	r3, #255	; 0xff
 8002dea:	d113      	bne.n	8002e14 <nex_recvRetNumber+0x84>
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d110      	bne.n	8002e14 <nex_recvRetNumber+0x84>
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2bff      	cmp	r3, #255	; 0xff
 8002df6:	d10d      	bne.n	8002e14 <nex_recvRetNumber+0x84>
	{
		*number = ((uint32_t)temp[4] << 24) | ((uint32_t)temp[3] << 16) | (temp[2] << 8) | (temp[1]);
 8002df8:	7b3b      	ldrb	r3, [r7, #12]
 8002dfa:	061a      	lsls	r2, r3, #24
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	7aba      	ldrb	r2, [r7, #10]
 8002e04:	0212      	lsls	r2, r2, #8
 8002e06:	4313      	orrs	r3, r2
 8002e08:	7a7a      	ldrb	r2, [r7, #9]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
		return true;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <nex_recvRetNumber+0x86>
	}
    return false;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000098 	.word	0x20000098

08002e24 <nex_recvRetString>:
 *
 * @return the length of string buffer.
 *
 */
uint16_t nex_recvRetString(char *buffer, uint16_t len, uint32_t timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b098      	sub	sp, #96	; 0x60
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	817b      	strh	r3, [r7, #10]
	if  ( NexHardware.nex_serial == NULL )
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <nex_recvRetString+0x11c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <nex_recvRetString+0x1a>
		return 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e07b      	b.n	8002f36 <nex_recvRetString+0x112>
	if (!buffer || len == 0)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <nex_recvRetString+0x26>
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <nex_recvRetString+0x2a>
		return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e073      	b.n	8002f36 <nex_recvRetString+0x112>
	uint16_t ret = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	bool str_start_flag = false;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t cnt_0xff = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	char temp[MAX_BUFF_COUNT];
	uint8_t c = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	long start;

	uint8_t id_tmp = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	start = HAL_GetTick();
 8002e6c:	f001 fafa 	bl	8004464 <HAL_GetTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
	while (HAL_GetTick() - start <= timeout)
 8002e74:	e03b      	b.n	8002eee <nex_recvRetString+0xca>
	{
		while (NexHardware.nex_serial->available())
		{
			c = NexHardware.nex_serial->read();
 8002e76:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <nex_recvRetString+0x11c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002e7e:	4798      	blx	r3
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			if (str_start_flag)
 8002e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01c      	beq.n	8002ec8 <nex_recvRetString+0xa4>
			{
				if (0xFF == c)
 8002e8e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d109      	bne.n	8002eaa <nex_recvRetString+0x86>
				{
					cnt_0xff++;
 8002e96:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					if (cnt_0xff >= 3)
 8002ea0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d916      	bls.n	8002ed6 <nex_recvRetString+0xb2>
					{
						break;
 8002ea8:	e01d      	b.n	8002ee6 <nex_recvRetString+0xc2>
					}
				}
				else
				{
					temp[id_tmp] = (char) c;
 8002eaa:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002eae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8002eb8:	f803 2c4c 	strb.w	r2, [r3, #-76]
					id_tmp++;
 8002ebc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002ec6:	e006      	b.n	8002ed6 <nex_recvRetString+0xb2>
//					temp+=1;
//					temp += (char)c;
				}
			}
			else if (NEX_RET_STRING_HEAD == c)
 8002ec8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d102      	bne.n	8002ed6 <nex_recvRetString+0xb2>
			{
				str_start_flag = true;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (NexHardware.nex_serial->available())
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <nex_recvRetString+0x11c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002ede:	4798      	blx	r3
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1c7      	bne.n	8002e76 <nex_recvRetString+0x52>
			}
		}

		if (cnt_0xff >= 3)
 8002ee6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d808      	bhi.n	8002f00 <nex_recvRetString+0xdc>
	while (HAL_GetTick() - start <= timeout)
 8002eee:	f001 fab9 	bl	8004464 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d2eb      	bcs.n	8002ed6 <nex_recvRetString+0xb2>
 8002efe:	e000      	b.n	8002f02 <nex_recvRetString+0xde>
		{
			break;
 8002f00:	bf00      	nop
		}
	}

	ret = strlen(temp);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd f96a 	bl	80001e0 <strlen>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	ret = ret > len ? len : ret;
 8002f12:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf28      	it	cs
 8002f1c:	4613      	movcs	r3, r2
 8002f1e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	strncpy(buffer, temp, ret);
 8002f22:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f00b f803 	bl	800df38 <strncpy>
	return ret;
 8002f32:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3760      	adds	r7, #96	; 0x60
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000098 	.word	0x20000098

08002f44 <nex_sendCommand>:
 * Send command to Nextion.
 *
 * @param cmd - the string of command.
 */
void nex_sendCommand(const char* cmd)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
//	if  ( NexHardware.nex_serial == NULL )
//		return;
	while (NexHardware.nex_serial->available())
 8002f4c:	e004      	b.n	8002f58 <nex_sendCommand+0x14>
	{
		NexHardware.nex_serial->read();
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <nex_sendCommand+0x70>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002f56:	4798      	blx	r3
	while (NexHardware.nex_serial->available())
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <nex_sendCommand+0x70>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002f60:	4798      	blx	r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f2      	bne.n	8002f4e <nex_sendCommand+0xa>
	}
	NexHardware.nex_serial->puts(cmd, strlen(cmd));
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <nex_sendCommand+0x70>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8d3 423c 	ldr.w	r4, [r3, #572]	; 0x23c
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fd f935 	bl	80001e0 <strlen>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	47a0      	blx	r4
	USBSerial.print("%s\r\n",cmd);
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <nex_sendCommand+0x74>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	480d      	ldr	r0, [pc, #52]	; (8002fbc <nex_sendCommand+0x78>)
 8002f86:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <nex_sendCommand+0x70>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002f90:	20ff      	movs	r0, #255	; 0xff
 8002f92:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <nex_sendCommand+0x70>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002f9c:	20ff      	movs	r0, #255	; 0xff
 8002f9e:	4798      	blx	r3
	NexHardware.nex_serial->write(0xFF);
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <nex_sendCommand+0x70>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002fa8:	20ff      	movs	r0, #255	; 0xff
 8002faa:	4798      	blx	r3
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	20000098 	.word	0x20000098
 8002fb8:	20000340 	.word	0x20000340
 8002fbc:	0800e9a4 	.word	0x0800e9a4

08002fc0 <nex_recvRetCommandFinished>:
 * @retval true - success.
 * @retval false - failed.
 *
 */
bool nex_recvRetCommandFinished(uint32_t timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[4] = {0};
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]

	NexHardware.nex_serial->setTimeout(timeout);
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <nex_recvRetCommandFinished+0x6c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
	if (4 != NexHardware.nex_serial->readBytes(temp, sizeof(temp)))
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <nex_recvRetCommandFinished+0x6c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8002fe4:	f107 0208 	add.w	r2, r7, #8
 8002fe8:	2104      	movs	r1, #4
 8002fea:	4610      	mov	r0, r2
 8002fec:	4798      	blx	r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d001      	beq.n	8002ff8 <nex_recvRetCommandFinished+0x38>
		return false;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e015      	b.n	8003024 <nex_recvRetCommandFinished+0x64>
	USBSerial.puts(temp, sizeof(temp));
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <nex_recvRetCommandFinished+0x70>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	2104      	movs	r1, #4
 8003002:	4610      	mov	r0, r2
 8003004:	4798      	blx	r3
	if (temp[0] == NEX_RET_CMD_FINISHED	&& temp[1] == 0xFF && temp[2] == 0xFF && temp[3] == 0xFF)
 8003006:	7a3b      	ldrb	r3, [r7, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10a      	bne.n	8003022 <nex_recvRetCommandFinished+0x62>
 800300c:	7a7b      	ldrb	r3, [r7, #9]
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d107      	bne.n	8003022 <nex_recvRetCommandFinished+0x62>
 8003012:	7abb      	ldrb	r3, [r7, #10]
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d104      	bne.n	8003022 <nex_recvRetCommandFinished+0x62>
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	d101      	bne.n	8003022 <nex_recvRetCommandFinished+0x62>
		return true;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <nex_recvRetCommandFinished+0x64>
	return false;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000098 	.word	0x20000098
 8003030:	20000340 	.word	0x20000340

08003034 <nex_HWInit>:

bool nex_HWInit(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
    bool ret1 = false;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
    bool ret2 = false;
 800303e:	2300      	movs	r3, #0
 8003040:	71bb      	strb	r3, [r7, #6]
    nex_sendCommand("");
 8003042:	4811      	ldr	r0, [pc, #68]	; (8003088 <nex_HWInit+0x54>)
 8003044:	f7ff ff7e 	bl	8002f44 <nex_sendCommand>
    nex_sendCommand("bkcmd=1");
 8003048:	4810      	ldr	r0, [pc, #64]	; (800308c <nex_HWInit+0x58>)
 800304a:	f7ff ff7b 	bl	8002f44 <nex_sendCommand>
    ret1 = nex_recvRetCommandFinished(100UL);
 800304e:	2064      	movs	r0, #100	; 0x64
 8003050:	f7ff ffb6 	bl	8002fc0 <nex_recvRetCommandFinished>
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
    nex_sendCommand("page 0");
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <nex_HWInit+0x5c>)
 800305a:	f7ff ff73 	bl	8002f44 <nex_sendCommand>
    ret2 = nex_recvRetCommandFinished(100UL);
 800305e:	2064      	movs	r0, #100	; 0x64
 8003060:	f7ff ffae 	bl	8002fc0 <nex_recvRetCommandFinished>
 8003064:	4603      	mov	r3, r0
 8003066:	71bb      	strb	r3, [r7, #6]
    return ret1 && ret2;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <nex_HWInit+0x44>
 800306e:	79bb      	ldrb	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <nex_HWInit+0x44>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <nex_HWInit+0x46>
 8003078:	2300      	movs	r3, #0
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0800e9ac 	.word	0x0800e9ac
 800308c:	0800e9b0 	.word	0x0800e9b0
 8003090:	0800e9b8 	.word	0x0800e9b8

08003094 <nex_HWLoop>:


void nex_HWLoop(NexObject_var *nex_listen_list[])
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	static uint8_t __buffer[10];

	    uint16_t i;
	    uint8_t c;

	    while (NexHardware.nex_serial->available() > 0)
 800309c:	e052      	b.n	8003144 <nex_HWLoop+0xb0>
	    {
	    	nex_halt(10);
 800309e:	200a      	movs	r0, #10
 80030a0:	f7ff fe60 	bl	8002d64 <nex_halt>
	        c = NexHardware.nex_serial->read();
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <nex_HWLoop+0xcc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80030ac:	4798      	blx	r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	737b      	strb	r3, [r7, #13]
	        USBSerial.print("%02X",c);
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <nex_HWLoop+0xd0>)
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	7b7a      	ldrb	r2, [r7, #13]
 80030b8:	4611      	mov	r1, r2
 80030ba:	482b      	ldr	r0, [pc, #172]	; (8003168 <nex_HWLoop+0xd4>)
 80030bc:	4798      	blx	r3
	        if (NEX_RET_EVENT_TOUCH_HEAD == c)
 80030be:	7b7b      	ldrb	r3, [r7, #13]
 80030c0:	2b65      	cmp	r3, #101	; 0x65
 80030c2:	d13f      	bne.n	8003144 <nex_HWLoop+0xb0>
	        {
	            if (NexHardware.nex_serial->available() >= 6)
 80030c4:	4b26      	ldr	r3, [pc, #152]	; (8003160 <nex_HWLoop+0xcc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80030cc:	4798      	blx	r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	dd37      	ble.n	8003144 <nex_HWLoop+0xb0>
	            {
	                __buffer[0] = c;
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <nex_HWLoop+0xd8>)
 80030d6:	7b7b      	ldrb	r3, [r7, #13]
 80030d8:	7013      	strb	r3, [r2, #0]
	                for (i = 1; i < 7; i++)
 80030da:	2301      	movs	r3, #1
 80030dc:	81fb      	strh	r3, [r7, #14]
 80030de:	e014      	b.n	800310a <nex_HWLoop+0x76>
	                {
	                    __buffer[i] = NexHardware.nex_serial->read();
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <nex_HWLoop+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80030e8:	4798      	blx	r3
 80030ea:	4602      	mov	r2, r0
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	b2d1      	uxtb	r1, r2
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <nex_HWLoop+0xd8>)
 80030f2:	54d1      	strb	r1, [r2, r3]
	                    USBSerial.print("%02X",__buffer[i]);
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <nex_HWLoop+0xd0>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	89fa      	ldrh	r2, [r7, #14]
 80030fa:	491c      	ldr	r1, [pc, #112]	; (800316c <nex_HWLoop+0xd8>)
 80030fc:	5c8a      	ldrb	r2, [r1, r2]
 80030fe:	4611      	mov	r1, r2
 8003100:	4819      	ldr	r0, [pc, #100]	; (8003168 <nex_HWLoop+0xd4>)
 8003102:	4798      	blx	r3
	                for (i = 1; i < 7; i++)
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	3301      	adds	r3, #1
 8003108:	81fb      	strh	r3, [r7, #14]
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	2b06      	cmp	r3, #6
 800310e:	d9e7      	bls.n	80030e0 <nex_HWLoop+0x4c>
	                }
	                __buffer[i] = 0x00;
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <nex_HWLoop+0xd8>)
 8003114:	2100      	movs	r1, #0
 8003116:	54d1      	strb	r1, [r2, r3]

	                if (0xFF == __buffer[4] && 0xFF == __buffer[5] && 0xFF == __buffer[6])
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <nex_HWLoop+0xd8>)
 800311a:	791b      	ldrb	r3, [r3, #4]
 800311c:	2bff      	cmp	r3, #255	; 0xff
 800311e:	d111      	bne.n	8003144 <nex_HWLoop+0xb0>
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <nex_HWLoop+0xd8>)
 8003122:	795b      	ldrb	r3, [r3, #5]
 8003124:	2bff      	cmp	r3, #255	; 0xff
 8003126:	d10d      	bne.n	8003144 <nex_HWLoop+0xb0>
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <nex_HWLoop+0xd8>)
 800312a:	799b      	ldrb	r3, [r3, #6]
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	d109      	bne.n	8003144 <nex_HWLoop+0xb0>
	                {
	                	NexObject.iterate(nex_listen_list, __buffer[1], __buffer[2], (int32_t)__buffer[3]);
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <nex_HWLoop+0xdc>)
 8003132:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <nex_HWLoop+0xd8>)
 8003136:	7859      	ldrb	r1, [r3, #1]
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <nex_HWLoop+0xd8>)
 800313a:	789a      	ldrb	r2, [r3, #2]
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <nex_HWLoop+0xd8>)
 800313e:	78db      	ldrb	r3, [r3, #3]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	47a0      	blx	r4
	    while (NexHardware.nex_serial->available() > 0)
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <nex_HWLoop+0xcc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800314c:	4798      	blx	r3
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	dca4      	bgt.n	800309e <nex_HWLoop+0xa>
//				if (0xFF == __buffer[3] && 0xFF == __buffer[4] && 0xFF == __buffer[5])
//
//			};
//		};
//    };
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	20000098 	.word	0x20000098
 8003164:	20000340 	.word	0x20000340
 8003168:	0800e9c0 	.word	0x0800e9c0
 800316c:	20000594 	.word	0x20000594
 8003170:	200000b8 	.word	0x200000b8

08003174 <nex_createObject>:
	void *__cbpop_ptr;
}NexObject_var;


static __inline__ void nex_createObject (NexObject_var * this, uint8_t pid, uint8_t cid, const char *name)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	72fb      	strb	r3, [r7, #11]
 8003182:	4613      	mov	r3, r2
 8003184:	72bb      	strb	r3, [r7, #10]
    this->__pid 	= pid;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	7afa      	ldrb	r2, [r7, #11]
 800318a:	701a      	strb	r2, [r3, #0]
    this->__cid 	= cid;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	7aba      	ldrb	r2, [r7, #10]
 8003190:	705a      	strb	r2, [r3, #1]
    this->__name 	= name;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	605a      	str	r2, [r3, #4]
    this->__cb_pop 	= NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
    this->__cb_push = NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
    this->__cbpop_ptr  = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
    this->__cbpush_ptr = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <nex_getObjPid>:

static __inline__ uint8_t nex_getObjPid(NexObject_var this)
{
 80031bc:	b084      	sub	sp, #16
 80031be:	b490      	push	{r4, r7}
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	f107 0408 	add.w	r4, r7, #8
 80031c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__pid;
 80031ca:	7a3b      	ldrb	r3, [r7, #8]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc90      	pop	{r4, r7}
 80031d2:	b004      	add	sp, #16
 80031d4:	4770      	bx	lr

080031d6 <nex_getObjCid>:

static __inline__ uint8_t nex_getObjCid(NexObject_var this)
{
 80031d6:	b084      	sub	sp, #16
 80031d8:	b490      	push	{r4, r7}
 80031da:	af00      	add	r7, sp, #0
 80031dc:	f107 0408 	add.w	r4, r7, #8
 80031e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__cid;
 80031e4:	7a7b      	ldrb	r3, [r7, #9]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc90      	pop	{r4, r7}
 80031ec:	b004      	add	sp, #16
 80031ee:	4770      	bx	lr

080031f0 <nex_getObjName>:

static __inline__ const char* nex_getObjName(NexObject_var this)
{
 80031f0:	b084      	sub	sp, #16
 80031f2:	b490      	push	{r4, r7}
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	f107 0408 	add.w	r4, r7, #8
 80031fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return this.__name;
 80031fe:	68fb      	ldr	r3, [r7, #12]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	bc90      	pop	{r4, r7}
 8003206:	b004      	add	sp, #16
 8003208:	4770      	bx	lr

0800320a <nex_attachPush>:
#include "NexObject.h"



void nex_attachPush(NexObject_var * this, NexTouchEventCb push, void *ptr)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
    this->__cb_push = push;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
    this->__cbpush_ptr = ptr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	60da      	str	r2, [r3, #12]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <nex_detachPush>:

void nex_detachPush(NexObject_var * this)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
    this->__cb_push = NULL;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    this->__cbpush_ptr = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <nex_attachPop>:

void nex_attachPop(NexObject_var * this, NexTouchEventCb pop, void *ptr)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
    this->__cb_pop = pop;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	611a      	str	r2, [r3, #16]
    this->__cbpop_ptr = ptr;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	615a      	str	r2, [r3, #20]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <nex_detachPop>:

void nex_detachPop(NexObject_var * this)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
    this->__cb_pop = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
    this->__cbpop_ptr = NULL;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <nex_push>:

void nex_push(NexObject_var * this)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
    if (this->__cb_push != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <nex_push+0x1c>
    {
        this->__cb_push(this->__cbpush_ptr);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	4610      	mov	r0, r2
 80032ac:	4798      	blx	r3
    }
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <nex_pop>:

void nex_pop(NexObject_var * this)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
    if (this->__cb_pop != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <nex_pop+0x1c>
    {
    	this->__cb_pop(this->__cbpop_ptr);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6952      	ldr	r2, [r2, #20]
 80032ce:	4610      	mov	r0, r2
 80032d0:	4798      	blx	r3
    }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <nex_iterate>:

#include "SerialUSB.h"

void nex_iterate(NexObject_var **list, uint8_t pid, uint8_t cid, int32_t event)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	72fb      	strb	r3, [r7, #11]
 80032ea:	4613      	mov	r3, r2
 80032ec:	72bb      	strb	r3, [r7, #10]
	NexObject_var *e = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
    uint16_t i = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	82fb      	strh	r3, [r7, #22]

    USBSerial.print("pid: %d \t cid: %d \t event: %d", pid, cid, event);
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <nex_iterate+0xa0>)
 80032f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80032fa:	7af9      	ldrb	r1, [r7, #11]
 80032fc:	7aba      	ldrb	r2, [r7, #10]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	481f      	ldr	r0, [pc, #124]	; (8003380 <nex_iterate+0xa4>)
 8003302:	47a0      	blx	r4
    if (list==NULL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <nex_iterate+0x38>
    {
    	USBSerial.print("list kosong");
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <nex_iterate+0xa0>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	481d      	ldr	r0, [pc, #116]	; (8003384 <nex_iterate+0xa8>)
 8003310:	4798      	blx	r3
        return;
 8003312:	e02f      	b.n	8003374 <nex_iterate+0x98>
    }

    for(i = 0; (e = list[i]) != NULL; i++)
 8003314:	2300      	movs	r3, #0
 8003316:	82fb      	strh	r3, [r7, #22]
 8003318:	e021      	b.n	800335e <nex_iterate+0x82>
    {
        if (e->__pid == pid && e->__cid == cid)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	7afa      	ldrb	r2, [r7, #11]
 8003320:	429a      	cmp	r2, r3
 8003322:	d119      	bne.n	8003358 <nex_iterate+0x7c>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	7aba      	ldrb	r2, [r7, #10]
 800332a:	429a      	cmp	r2, r3
 800332c:	d114      	bne.n	8003358 <nex_iterate+0x7c>
        {
        	USBSerial.print("name: %s\r\n",e->__name);
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <nex_iterate+0xa0>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	6852      	ldr	r2, [r2, #4]
 8003336:	4611      	mov	r1, r2
 8003338:	4813      	ldr	r0, [pc, #76]	; (8003388 <nex_iterate+0xac>)
 800333a:	4798      	blx	r3
            if (NEX_EVENT_PUSH == event)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d103      	bne.n	800334a <nex_iterate+0x6e>
            {
            	nex_push(e);
 8003342:	6938      	ldr	r0, [r7, #16]
 8003344:	f7ff ffa5 	bl	8003292 <nex_push>
            {
            	nex_pop(e);
//                e->pop();
            }

            break;
 8003348:	e013      	b.n	8003372 <nex_iterate+0x96>
            else if (NEX_EVENT_POP == event)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d110      	bne.n	8003372 <nex_iterate+0x96>
            	nex_pop(e);
 8003350:	6938      	ldr	r0, [r7, #16]
 8003352:	f7ff ffb0 	bl	80032b6 <nex_pop>
            break;
 8003356:	e00c      	b.n	8003372 <nex_iterate+0x96>
    for(i = 0; (e = list[i]) != NULL; i++)
 8003358:	8afb      	ldrh	r3, [r7, #22]
 800335a:	3301      	adds	r3, #1
 800335c:	82fb      	strh	r3, [r7, #22]
 800335e:	8afb      	ldrh	r3, [r7, #22]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1d4      	bne.n	800331a <nex_iterate+0x3e>
 8003370:	e000      	b.n	8003374 <nex_iterate+0x98>
            break;
 8003372:	bf00      	nop
        }
    }
}
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	20000340 	.word	0x20000340
 8003380:	0800e9c8 	.word	0x0800e9c8
 8003384:	0800e9e8 	.word	0x0800e9e8
 8003388:	0800e9f4 	.word	0x0800e9f4

0800338c <Serial1_begin>:
//===================================
//===================================
#define  begin() begin(9600)

static void Serial1_begin(uint32_t baudrate)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HALSerial__construct (&Serial1.serialParam, &huart1);
 8003394:	4916      	ldr	r1, [pc, #88]	; (80033f0 <Serial1_begin+0x64>)
 8003396:	4817      	ldr	r0, [pc, #92]	; (80033f4 <Serial1_begin+0x68>)
 8003398:	f000 f940 	bl	800361c <HALSerial__construct>
  Serial1.serialParam._written = FALSE;
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <Serial1_begin+0x68>)
 800339e:	2200      	movs	r2, #0
 80033a0:	741a      	strb	r2, [r3, #16]
//  HAL_UART_Init(this->huart);
  while(HAL_UART_Receive_IT(Serial1.serialParam.huart/*&huart1*/, Serial1.serialParam._rx_buffer + Serial1.serialParam._rx_buffer_head, 1) == HAL_BUSY);
 80033a2:	bf00      	nop
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <Serial1_begin+0x68>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <Serial1_begin+0x68>)
 80033aa:	7c52      	ldrb	r2, [r2, #17]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <Serial1_begin+0x6c>)
 80033b2:	4411      	add	r1, r2
 80033b4:	2201      	movs	r2, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 f8cd 	bl	8008556 <HAL_UART_Receive_IT>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d0f0      	beq.n	80033a4 <Serial1_begin+0x18>

  Serial1.serialParam.huart->Init.BaudRate = baudrate;
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <Serial1_begin+0x68>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	605a      	str	r2, [r3, #4]
  HALSerial_begin(&Serial1.serialParam);
 80033ca:	480a      	ldr	r0, [pc, #40]	; (80033f4 <Serial1_begin+0x68>)
 80033cc:	f000 f9ae 	bl	800372c <HALSerial_begin>
  HAL_UART_Receive_IT(&Serial1.serialParam.huart, Serial1.serialParam._rx_buffer, HALSERIAL_RX_BUFFER_SIZE);
 80033d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d4:	4908      	ldr	r1, [pc, #32]	; (80033f8 <Serial1_begin+0x6c>)
 80033d6:	4809      	ldr	r0, [pc, #36]	; (80033fc <Serial1_begin+0x70>)
 80033d8:	f005 f8bd 	bl	8008556 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&Serial1.serialParam.huart, Serial1.serialParam._tx_buffer, HALSERIAL_TX_BUFFER_SIZE);
 80033dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033e0:	4907      	ldr	r1, [pc, #28]	; (8003400 <Serial1_begin+0x74>)
 80033e2:	4806      	ldr	r0, [pc, #24]	; (80033fc <Serial1_begin+0x70>)
 80033e4:	f005 f872 	bl	80084cc <HAL_UART_Transmit_IT>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000824 	.word	0x20000824
 80033f4:	200000e4 	.word	0x200000e4
 80033f8:	20000104 	.word	0x20000104
 80033fc:	200000f0 	.word	0x200000f0
 8003400:	20000204 	.word	0x20000204

08003404 <Serial1_setTimeout>:

static void Serial1_setTimeout(uint32_t timeout)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  Serial1.serialParam._timeout = timeout;
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <Serial1_setTimeout+0x1c>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6053      	str	r3, [r2, #4]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	200000e4 	.word	0x200000e4

08003424 <Serial1_end>:

static void Serial1_end(void)	 			{HALSerial_end(&Serial1.serialParam);}
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <Serial1_end+0x10>)
 800342a:	f000 f9a0 	bl	800376e <HALSerial_end>
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200000e4 	.word	0x200000e4

08003438 <Serial1_available>:
static int Serial1_available(void)			{return HALSerial_available(&Serial1.serialParam);}
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <Serial1_available+0x10>)
 800343e:	f000 f9a6 	bl	800378e <HALSerial_available>
 8003442:	4603      	mov	r3, r0
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000e4 	.word	0x200000e4

0800344c <Serial1_peek>:
static int Serial1_peek(void)				{return HALSerial_peek(&Serial1.serialParam);}
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <Serial1_peek+0x10>)
 8003452:	f000 f9b0 	bl	80037b6 <HALSerial_peek>
 8003456:	4603      	mov	r3, r0
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200000e4 	.word	0x200000e4

08003460 <Serial1_availableForWrite>:
static int Serial1_availableForWrite(void)	{return HALSerial_availableForWrite(&Serial1.serialParam);}
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <Serial1_availableForWrite+0x10>)
 8003466:	f000 f9e9 	bl	800383c <HALSerial_availableForWrite>
 800346a:	4603      	mov	r3, r0
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200000e4 	.word	0x200000e4

08003474 <Serial1_flush>:
static void Serial1_flush(void)				{HALSerial_flush(&Serial1.serialParam);}
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <Serial1_flush+0x10>)
 800347a:	f000 f9fd 	bl	8003878 <HALSerial_flush>
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200000e4 	.word	0x200000e4

08003488 <Serial1_write>:
static size_t Serial1_write(uint8_t c)		{return HALSerial_writeByte(&Serial1.serialParam, c);}
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	71fb      	strb	r3, [r7, #7]
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4619      	mov	r1, r3
 8003496:	4804      	ldr	r0, [pc, #16]	; (80034a8 <Serial1_write+0x20>)
 8003498:	f000 fa15 	bl	80038c6 <HALSerial_writeByte>
 800349c:	4603      	mov	r3, r0
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200000e4 	.word	0x200000e4

080034ac <Serial1_puts>:
static size_t Serial1_puts(const uint8_t *str, size_t size) {return HALSerial_write(&Serial1.serialParam, str, size);}
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4804      	ldr	r0, [pc, #16]	; (80034cc <Serial1_puts+0x20>)
 80034bc:	f000 fa4f 	bl	800395e <HALSerial_write>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200000e4 	.word	0x200000e4

080034d0 <Serial1_read>:
static int Serial1_read(void)				{return HALSerial_read(&Serial1.serialParam);}
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <Serial1_read+0x10>)
 80034d6:	f000 f98b 	bl	80037f0 <HALSerial_read>
 80034da:	4603      	mov	r3, r0
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200000e4 	.word	0x200000e4

080034e4 <Serial1_readUntil>:
static size_t Serial1_readUntil(char terminator, char *buffer, size_t length) {return HALSerial_readBytesUntil(&Serial1.serialParam,terminator,buffer, length);}
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	7bf9      	ldrb	r1, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <Serial1_readUntil+0x24>)
 80034fa:	f000 fabe 	bl	8003a7a <HALSerial_readBytesUntil>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200000e4 	.word	0x200000e4

0800350c <Serial1_readTimeout>:
static int Serial1_readTimeout(void)		{return HALSerial_timedRead(&Serial1.serialParam);}
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <Serial1_readTimeout+0x10>)
 8003512:	f000 fa66 	bl	80039e2 <HALSerial_timedRead>
 8003516:	4603      	mov	r3, r0
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	200000e4 	.word	0x200000e4

08003520 <Serial1_gets>:
static size_t Serial1_gets(char* buffer, size_t len) {return HALSerial_readBytes(&Serial1.serialParam, buffer, len);}
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4804      	ldr	r0, [pc, #16]	; (8003540 <Serial1_gets+0x20>)
 8003530:	f000 fa7f 	bl	8003a32 <HALSerial_readBytes>
 8003534:	4603      	mov	r3, r0
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200000e4 	.word	0x200000e4

08003544 <Serial1_readbytes>:

static size_t Serial1_readbytes(char* buffer, size_t len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
	return Serial1_readUntil(NULL,buffer, len);
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	2000      	movs	r0, #0
 8003554:	f7ff ffc6 	bl	80034e4 <Serial1_readUntil>
 8003558:	4603      	mov	r3, r0
//	return HALSerial_readBytes(&Serial1.serialParam, buffer, len);
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <Serial1_print>:

char serial_buffer_print[256];
static size_t Serial1_print(const char fmt[], ...)
{
 8003564:	b40f      	push	{r0, r1, r2, r3}
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	603b      	str	r3, [r7, #0]
  vsnprintf(serial_buffer_print, sizeof(serial_buffer_print), fmt, args);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	f44f 7180 	mov.w	r1, #256	; 0x100
 800357a:	480a      	ldr	r0, [pc, #40]	; (80035a4 <Serial1_print+0x40>)
 800357c:	f00a fdee 	bl	800e15c <vsniprintf>
  va_end(args);
  size_t ret = Serial1_puts(serial_buffer_print, strlen(serial_buffer_print));
 8003580:	4808      	ldr	r0, [pc, #32]	; (80035a4 <Serial1_print+0x40>)
 8003582:	f7fc fe2d 	bl	80001e0 <strlen>
 8003586:	4603      	mov	r3, r0
 8003588:	4619      	mov	r1, r3
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <Serial1_print+0x40>)
 800358c:	f7ff ff8e 	bl	80034ac <Serial1_puts>
 8003590:	6078      	str	r0, [r7, #4]
  return ret;
 8003592:	687b      	ldr	r3, [r7, #4]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800359e:	b004      	add	sp, #16
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000914 	.word	0x20000914

080035a8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	if( huart != NULL )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00f      	beq.n	80035d6 <HAL_UART_RxCpltCallback+0x2e>
	{
		if (huart->Instance == USART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_UART_RxCpltCallback+0x38>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d102      	bne.n	80035c6 <HAL_UART_RxCpltCallback+0x1e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 80035c0:	4808      	ldr	r0, [pc, #32]	; (80035e4 <HAL_UART_RxCpltCallback+0x3c>)
 80035c2:	f000 f846 	bl	8003652 <HALSerial__rx_complete_irq>
		if (huart->Instance == USART2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <HAL_UART_RxCpltCallback+0x40>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_UART_RxCpltCallback+0x2e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 80035d0:	4804      	ldr	r0, [pc, #16]	; (80035e4 <HAL_UART_RxCpltCallback+0x3c>)
 80035d2:	f000 f83e 	bl	8003652 <HALSerial__rx_complete_irq>
	}

}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40011000 	.word	0x40011000
 80035e4:	200000e4 	.word	0x200000e4
 80035e8:	40004400 	.word	0x40004400

080035ec <HAL_UART_TxCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	if ( huart == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_UART_TxCpltCallback+0x20>
		return;
  if (huart->Instance == USART1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_UART_TxCpltCallback+0x28>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d104      	bne.n	800360e <HAL_UART_TxCpltCallback+0x22>
	HALSerial__tx_complete_irq(&Serial1.serialParam);
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <HAL_UART_TxCpltCallback+0x2c>)
 8003606:	f000 f84f 	bl	80036a8 <HALSerial__tx_complete_irq>
 800360a:	e000      	b.n	800360e <HAL_UART_TxCpltCallback+0x22>
		return;
 800360c:	bf00      	nop
}
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40011000 	.word	0x40011000
 8003618:	200000e4 	.word	0x200000e4

0800361c <HALSerial__construct>:


void HALSerial__construct(HALSerial *this, UART_HandleTypeDef *huart_)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  Stream___construct((Stream *)this);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa5c 	bl	8003ae4 <Stream___construct>
  this->_rx_buffer_head = 0;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	745a      	strb	r2, [r3, #17]
  this->_rx_buffer_tail = 0;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	749a      	strb	r2, [r3, #18]
  this->_tx_buffer_head = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	74da      	strb	r2, [r3, #19]
  this->_tx_buffer_tail = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	751a      	strb	r2, [r3, #20]
  this-> huart = huart_;//&huart1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	60da      	str	r2, [r3, #12]
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HALSerial__rx_complete_irq>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

static void HALSerial__rx_complete_irq(HALSerial *this)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  hal_rx_buffer_index_t i = ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->huart->pRxBuffPtr - this->_rx_buffer)) % HALSERIAL_RX_BUFFER_SIZE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3320      	adds	r3, #32
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	73fb      	strb	r3, [r7, #15]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != this->_rx_buffer_tail)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7c9b      	ldrb	r3, [r3, #18]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	429a      	cmp	r2, r3
 8003676:	d002      	beq.n	800367e <HALSerial__rx_complete_irq+0x2c>
    this->_rx_buffer_head = i;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	745a      	strb	r2, [r3, #17]
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 800367e:	bf00      	nop
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68d8      	ldr	r0, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3320      	adds	r3, #32
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	7c52      	ldrb	r2, [r2, #17]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4413      	add	r3, r2
 8003690:	2201      	movs	r2, #1
 8003692:	4619      	mov	r1, r3
 8003694:	f004 ff5f 	bl	8008556 <HAL_UART_Receive_IT>
 8003698:	4603      	mov	r3, r0
 800369a:	2b02      	cmp	r3, #2
 800369c:	d0f0      	beq.n	8003680 <HALSerial__rx_complete_irq+0x2e>
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HALSerial__tx_complete_irq>:

static void HALSerial__tx_complete_irq(HALSerial *this) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  this->_tx_buffer_tail = ((unsigned int)(HALSERIAL_TX_BUFFER_SIZE + this->huart->pTxBuffPtr - this->_tx_buffer)) % HALSERIAL_TX_BUFFER_SIZE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	751a      	strb	r2, [r3, #20]

  uint16_t size;
  if (this->_tx_buffer_head < this->_tx_buffer_tail)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7cdb      	ldrb	r3, [r3, #19]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7d1b      	ldrb	r3, [r3, #20]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <HALSerial__tx_complete_irq+0x40>
    size = HALSERIAL_TX_BUFFER_SIZE - this->_tx_buffer_tail;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7d1b      	ldrb	r3, [r3, #20]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036e4:	81fb      	strh	r3, [r7, #14]
 80036e6:	e009      	b.n	80036fc <HALSerial__tx_complete_irq+0x54>
  else
    size = this->_tx_buffer_head - this->_tx_buffer_tail;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7cdb      	ldrb	r3, [r3, #19]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7d1b      	ldrb	r3, [r3, #20]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	81fb      	strh	r3, [r7, #14]

  if (size > 0)
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d010      	beq.n	8003724 <HALSerial__tx_complete_irq+0x7c>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, size) == HAL_BUSY);
 8003702:	bf00      	nop
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68d8      	ldr	r0, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	7d12      	ldrb	r2, [r2, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4413      	add	r3, r2
 8003716:	89fa      	ldrh	r2, [r7, #14]
 8003718:	4619      	mov	r1, r3
 800371a:	f004 fed7 	bl	80084cc <HAL_UART_Transmit_IT>
 800371e:	4603      	mov	r3, r0
 8003720:	2b02      	cmp	r3, #2
 8003722:	d0ef      	beq.n	8003704 <HALSerial__tx_complete_irq+0x5c>
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HALSerial_begin>:

// Public Methods //////////////////////////////////////////////////////////////

void HALSerial_begin(HALSerial *this)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  this->_written = FALSE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	741a      	strb	r2, [r3, #16]
  HAL_UART_Init(this->huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fe48 	bl	80083d4 <HAL_UART_Init>
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8003744:	bf00      	nop
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68d8      	ldr	r0, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3320      	adds	r3, #32
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	7c52      	ldrb	r2, [r2, #17]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4413      	add	r3, r2
 8003756:	2201      	movs	r2, #1
 8003758:	4619      	mov	r1, r3
 800375a:	f004 fefc 	bl	8008556 <HAL_UART_Receive_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	2b02      	cmp	r3, #2
 8003762:	d0f0      	beq.n	8003746 <HALSerial_begin+0x1a>
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HALSerial_end>:

void HALSerial_end(HALSerial *this)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  // wait for transmission of outgoing data
  HALSerial_flush(this);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f87e 	bl	8003878 <HALSerial_flush>

  HAL_UART_DeInit(this->huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fe74 	bl	800846e <HAL_UART_DeInit>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HALSerial_available>:

int __attribute__((weak)) HALSerial_available(HALSerial *this)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  return ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->_rx_buffer_head - this->_rx_buffer_tail)) % HALSERIAL_RX_BUFFER_SIZE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7c5b      	ldrb	r3, [r3, #17]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	7c92      	ldrb	r2, [r2, #18]
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	b2db      	uxtb	r3, r3
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HALSerial_peek>:

int __attribute__((weak)) HALSerial_peek(HALSerial *this)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7c5b      	ldrb	r3, [r3, #17]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7c9b      	ldrb	r3, [r3, #18]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d102      	bne.n	80037d4 <HALSerial_peek+0x1e>
  {
    return -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e007      	b.n	80037e4 <HALSerial_peek+0x2e>
  }
  else
  {
    return this->_rx_buffer[this->_rx_buffer_tail];
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7c9b      	ldrb	r3, [r3, #18]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	f893 3020 	ldrb.w	r3, [r3, #32]
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HALSerial_read>:

int __attribute__((weak)) HALSerial_read(HALSerial *this)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  // if the head isn't ahead of the tail, we don't have any characters
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7c5b      	ldrb	r3, [r3, #17]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7c9b      	ldrb	r3, [r3, #18]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	429a      	cmp	r2, r3
 8003806:	d102      	bne.n	800380e <HALSerial_read+0x1e>
  {
    return -1;
 8003808:	f04f 33ff 	mov.w	r3, #4294967295
 800380c:	e010      	b.n	8003830 <HALSerial_read+0x40>
  }
  else
  {
    unsigned char c = this->_rx_buffer[this->_rx_buffer_tail];
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7c9b      	ldrb	r3, [r3, #18]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381e:	73fb      	strb	r3, [r7, #15]
    this->_rx_buffer_tail = (hal_rx_buffer_index_t)(this->_rx_buffer_tail + 1) % HALSERIAL_RX_BUFFER_SIZE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7c9b      	ldrb	r3, [r3, #18]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3301      	adds	r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	749a      	strb	r2, [r3, #18]
    return c;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HALSerial_availableForWrite>:

int __attribute__((weak)) HALSerial_availableForWrite(HALSerial *this)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  hal_tx_buffer_index_t head;
  hal_tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = this->_tx_buffer_head;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7cdb      	ldrb	r3, [r3, #19]
 8003848:	73fb      	strb	r3, [r7, #15]
    tail = this->_tx_buffer_tail;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	7d1b      	ldrb	r3, [r3, #20]
 800384e:	73bb      	strb	r3, [r7, #14]
  }
  if (head >= tail)
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	429a      	cmp	r2, r3
 8003856:	d305      	bcc.n	8003864 <HALSerial_availableForWrite+0x28>
    return HALSERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	4413      	add	r3, r2
 8003862:	e003      	b.n	800386c <HALSerial_availableForWrite+0x30>
  return tail - head - 1;
 8003864:	7bba      	ldrb	r2, [r7, #14]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	3b01      	subs	r3, #1
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HALSerial_flush>:

void __attribute__((weak)) HALSerial_flush(HALSerial *this)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!this->_written)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7c1b      	ldrb	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01a      	beq.n	80038be <HALSerial_flush+0x46>
    return;

  unsigned long ticks = HALSerial_millis(this);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f890 	bl	80039ae <HALSerial_millis>
 800388e:	60f8      	str	r0, [r7, #12]
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 8003890:	e003      	b.n	800389a <HALSerial_flush+0x22>
    HALSerial_delay(this, 1);
 8003892:	2101      	movs	r1, #1
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f896 	bl	80039c6 <HALSerial_delay>
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	7cdb      	ldrb	r3, [r3, #19]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7d1b      	ldrb	r3, [r3, #20]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d00a      	beq.n	80038c0 <HALSerial_flush+0x48>
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f87f 	bl	80039ae <HALSerial_millis>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ba:	d3ea      	bcc.n	8003892 <HALSerial_flush+0x1a>
 80038bc:	e000      	b.n	80038c0 <HALSerial_flush+0x48>
    return;
 80038be:	bf00      	nop
  }
}
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HALSerial_writeByte>:

size_t __attribute__((weak)) HALSerial_writeByte(HALSerial *this, uint8_t c)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]
  this->_written = TRUE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	741a      	strb	r2, [r3, #16]

  hal_tx_buffer_index_t i = (this->_tx_buffer_head + 1) % HALSERIAL_TX_BUFFER_SIZE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7cdb      	ldrb	r3, [r3, #19]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	425a      	negs	r2, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	bf58      	it	pl
 80038e8:	4253      	negpl	r3, r2
 80038ea:	73fb      	strb	r3, [r7, #15]

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == this->_tx_buffer_tail) {
 80038ec:	e003      	b.n	80038f6 <HALSerial_writeByte+0x30>
    HALSerial_delay(this, 1);
 80038ee:	2101      	movs	r1, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f868 	bl	80039c6 <HALSerial_delay>
  while (i == this->_tx_buffer_tail) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7d1b      	ldrb	r3, [r3, #20]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d0f5      	beq.n	80038ee <HALSerial_writeByte+0x28>
  }

  this->_tx_buffer[this->_tx_buffer_head] = c;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7cdb      	ldrb	r3, [r3, #19]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  if (this->_tx_buffer_head == this->_tx_buffer_tail) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7cdb      	ldrb	r3, [r3, #19]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7d1b      	ldrb	r3, [r3, #20]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	429a      	cmp	r2, r3
 8003922:	d114      	bne.n	800394e <HALSerial_writeByte+0x88>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 8003924:	e003      	b.n	800392e <HALSerial_writeByte+0x68>
      HALSerial_delay(this, 1);
 8003926:	2101      	movs	r1, #1
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f84c 	bl	80039c6 <HALSerial_delay>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68d8      	ldr	r0, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	7d12      	ldrb	r2, [r2, #20]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4413      	add	r3, r2
 8003940:	2201      	movs	r2, #1
 8003942:	4619      	mov	r1, r3
 8003944:	f004 fdc2 	bl	80084cc <HAL_UART_Transmit_IT>
 8003948:	4603      	mov	r3, r0
 800394a:	2b02      	cmp	r3, #2
 800394c:	d0eb      	beq.n	8003926 <HALSerial_writeByte+0x60>
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  TX_BUFFER_ATOMIC
  {
    this->_tx_buffer_head = i;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	74da      	strb	r2, [r3, #19]
  }

  return 1;
 8003954:	2301      	movs	r3, #1
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HALSerial_write>:

size_t HALSerial_write(HALSerial *this, const uint8_t *buffer, size_t size)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
  if (buffer == NULL)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HALSerial_write+0x16>
    return 0;
 8003970:	2300      	movs	r3, #0
 8003972:	e018      	b.n	80039a6 <HALSerial_write+0x48>
  size_t n = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  while (size--)
 8003978:	e00d      	b.n	8003996 <HALSerial_write+0x38>
  {
    if (HALSerial_writeByte(this, *buffer++))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	60ba      	str	r2, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff ff9e 	bl	80038c6 <HALSerial_writeByte>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HALSerial_write+0x44>
      n++;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while (size--)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ec      	bne.n	800397a <HALSerial_write+0x1c>
 80039a0:	e000      	b.n	80039a4 <HALSerial_write+0x46>
    else
      break;
 80039a2:	bf00      	nop
  }
//  HAL_UART_Transmit(this->huart, buffer, size, 100);
//  HALSerial__rx_complete_irq(this); // ini tadi lupa di comment
  return n;
 80039a4:	697b      	ldr	r3, [r7, #20]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HALSerial_millis>:

/* Parent */

unsigned long HALSerial_millis(HALSerial *this) {
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return this->millis();
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	4798      	blx	r3
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HALSerial_delay>:

unsigned char HALSerial_delay(HALSerial *this, unsigned long value) {
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  return this->delay(value);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	6838      	ldr	r0, [r7, #0]
 80039d6:	4798      	blx	r3
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HALSerial_timedRead>:

// protected method to read stream with timeout
int HALSerial_timedRead(HALSerial *this)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  int c;
  this->_startMillis = HALSerial_millis(this);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ffdf 	bl	80039ae <HALSerial_millis>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
  do
  {
    c = HALSerial_read(this);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fefa 	bl	80037f0 <HALSerial_read>
 80039fc:	60f8      	str	r0, [r7, #12]
    if (c >= 0)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db01      	blt.n	8003a08 <HALSerial_timedRead+0x26>
      return c;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	e010      	b.n	8003a2a <HALSerial_timedRead+0x48>
    else HALSerial_delay(this, 1);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffdb 	bl	80039c6 <HALSerial_delay>
  } while (HALSerial_millis(this) - this->_startMillis < this->_timeout);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffcc 	bl	80039ae <HALSerial_millis>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	1ad2      	subs	r2, r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3e7      	bcc.n	80039f6 <HALSerial_timedRead+0x14>
  return -1; // -1 indicates timeout
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HALSerial_readBytes>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t HALSerial_readBytes(HALSerial *this, char *buffer, size_t length)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
  size_t count = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  while (count < length)
 8003a42:	e00f      	b.n	8003a64 <HALSerial_readBytes+0x32>
  {
    int c = HALSerial_timedRead(this);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ffcc 	bl	80039e2 <HALSerial_timedRead>
 8003a4a:	6138      	str	r0, [r7, #16]
    if (c < 0)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	db0d      	blt.n	8003a6e <HALSerial_readBytes+0x3c>
      break;
    *buffer++ = (char)c;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]
    count++;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	3301      	adds	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
  while (count < length)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3eb      	bcc.n	8003a44 <HALSerial_readBytes+0x12>
 8003a6c:	e000      	b.n	8003a70 <HALSerial_readBytes+0x3e>
      break;
 8003a6e:	bf00      	nop
  }
  return count;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HALSerial_readBytesUntil>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t HALSerial_readBytesUntil(HALSerial *this, char terminator, char *buffer, size_t length)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	460b      	mov	r3, r1
 8003a88:	72fb      	strb	r3, [r7, #11]
  size_t index = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  while (index < length)
 8003a8e:	e013      	b.n	8003ab8 <HALSerial_readBytesUntil+0x3e>
  {
    int c = HALSerial_timedRead(this);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff ffa6 	bl	80039e2 <HALSerial_timedRead>
 8003a96:	6138      	str	r0, [r7, #16]
    if (c < 0 || c == terminator)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db10      	blt.n	8003ac0 <HALSerial_readBytesUntil+0x46>
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d00c      	beq.n	8003ac0 <HALSerial_readBytesUntil+0x46>
      break;
    *buffer++ = (char)c;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
    index++;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
  while (index < length)
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3e7      	bcc.n	8003a90 <HALSerial_readBytesUntil+0x16>
  }
  return index; // return number of characters, not including null terminator
 8003ac0:	697b      	ldr	r3, [r7, #20]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <Print___construct>:
}

// Public Methods //////////////////////////////////////////////////////////////

void Print___construct(Print *this)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  this->write_error = 0;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <Stream___construct>:
// These overload exists for compatibility with any class that has derived
// Stream and used parseFloat/Int with a custom ignore character. To keep
// the public API simple, these overload remains protected.

void Stream___construct(Stream *this)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  Print___construct((Print *)this);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ffec 	bl	8003aca <Print___construct>
  this->_timeout = 1000;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003af8:	605a      	str	r2, [r3, #4]
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	af00      	add	r7, sp, #0
  CDC_init();
 8003b06:	f009 fc95 	bl	800d434 <CDC_init>
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <SerialUSB_end>:

static void SerialUSB_end(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
  CDC_DeInit();
 8003b12:	f009 fc96 	bl	800d442 <CDC_DeInit>
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <SerialUSB_availableForWrite+0x10>)
 8003b22:	f000 f92c 	bl	8003d7e <CDC_TransmitQueue_WriteSize>
 8003b26:	4603      	mov	r3, r0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000ce8 	.word	0x20000ce8

08003b30 <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 8003b3a:	1dfb      	adds	r3, r7, #7
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f806 	bl	8003b50 <SerialUSB_puts>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 8003b5e:	e01c      	b.n	8003b9a <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8003b60:	4815      	ldr	r0, [pc, #84]	; (8003bb8 <SerialUSB_puts+0x68>)
 8003b62:	f000 f90c 	bl	8003d7e <CDC_TransmitQueue_WriteSize>
 8003b66:	4603      	mov	r3, r0
 8003b68:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d201      	bcs.n	8003b76 <SerialUSB_puts+0x26>
        portion = rest;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <SerialUSB_puts+0x68>)
 8003b82:	f000 f933 	bl	8003dec <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
        buf += portion;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4413      	add	r3, r2
 8003b94:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 8003b96:	f009 fbf5 	bl	800d384 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <SerialUSB_puts+0x5a>
 8003ba0:	f009 fbc4 	bl	800d32c <CDC_connected>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1da      	bne.n	8003b60 <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000ce8 	.word	0x20000ce8

08003bbc <SerialUSB_available>:

static int SerialUSB_available(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <SerialUSB_available+0x10>)
 8003bc2:	f000 fa43 	bl	800404c <CDC_ReceiveQueue_ReadSize>
 8003bc6:	4603      	mov	r3, r0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20001d70 	.word	0x20001d70

08003bd0 <SerialUSB_read>:

static int SerialUSB_read(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 8003bd6:	4805      	ldr	r0, [pc, #20]	; (8003bec <SerialUSB_read+0x1c>)
 8003bd8:	f000 fa68 	bl	80040ac <CDC_ReceiveQueue_Dequeue>
 8003bdc:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 8003bde:	f009 fbff 	bl	800d3e0 <CDC_resume_receive>
  return ch;
 8003be2:	687b      	ldr	r3, [r7, #4]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20001d70 	.word	0x20001d70

08003bf0 <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 8003c00:	f000 fc30 	bl	8004464 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4811      	ldr	r0, [pc, #68]	; (8003c54 <SerialUSB_readbytes+0x64>)
 8003c10:	f000 fac3 	bl	800419a <CDC_ReceiveQueue_Read>
 8003c14:	4603      	mov	r3, r0
 8003c16:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 8003c18:	f009 fbe2 	bl	800d3e0 <CDC_resume_receive>
      rest -= read;
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	617b      	str	r3, [r7, #20]
      buffer += read;
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <SerialUSB_readbytes+0x46>
        return length;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	e009      	b.n	8003c4a <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 8003c36:	f000 fc15 	bl	8004464 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b31      	cmp	r3, #49	; 0x31
 8003c42:	d9e0      	bls.n	8003c06 <SerialUSB_readbytes+0x16>
    return length - rest;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20001d70 	.word	0x20001d70

08003c58 <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	4603      	mov	r3, r0
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 8003c6c:	f000 fbfa 	bl	8004464 <HAL_GetTick>
 8003c70:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	7bf9      	ldrb	r1, [r7, #15]
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4815      	ldr	r0, [pc, #84]	; (8003cd8 <SerialUSB_readBytesUntil+0x80>)
 8003c84:	f000 faec 	bl	8004260 <CDC_ReceiveQueue_ReadUntil>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 8003c8c:	f009 fba8 	bl	800d3e0 <CDC_resume_receive>
      rest -= read;
 8003c90:	8abb      	ldrh	r3, [r7, #20]
 8003c92:	461a      	mov	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	61fb      	str	r3, [r7, #28]
      buffer += read;
 8003c9a:	8abb      	ldrh	r3, [r7, #20]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
      if (found) {
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	e00e      	b.n	8003cd0 <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <SerialUSB_readBytesUntil+0x64>
        return length;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	e009      	b.n	8003cd0 <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 8003cbc:	f000 fbd2 	bl	8004464 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b31      	cmp	r3, #49	; 0x31
 8003cc8:	d9d3      	bls.n	8003c72 <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20001d70 	.word	0x20001d70

08003cdc <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 8003ce0:	4802      	ldr	r0, [pc, #8]	; (8003cec <SerialUSB_peek+0x10>)
 8003ce2:	f000 fa28 	bl	8004136 <CDC_ReceiveQueue_Peek>
 8003ce6:	4603      	mov	r3, r0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20001d70 	.word	0x20001d70

08003cf0 <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 8003cf4:	bf00      	nop
 8003cf6:	4804      	ldr	r0, [pc, #16]	; (8003d08 <SerialUSB_flush+0x18>)
 8003cf8:	f000 f85d 	bl	8003db6 <CDC_TransmitQueue_ReadSize>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dcf9      	bgt.n	8003cf6 <SerialUSB_flush+0x6>
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000ce8 	.word	0x20000ce8

08003d0c <SerialUSB_print>:



static size_t SerialUSB_print(const char fmt[], ...)
{
 8003d0c:	b40f      	push	{r0, r1, r2, r3}
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b0c2      	sub	sp, #264	; 0x108
 8003d12:	af00      	add	r7, sp, #0
	char serialusb_buffer_print[256];
	va_list args;
	va_start(args, fmt);
 8003d14:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003d18:	463b      	mov	r3, r7
 8003d1a:	601a      	str	r2, [r3, #0]
	vsnprintf(serialusb_buffer_print, sizeof(serialusb_buffer_print), fmt, args);
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	1d38      	adds	r0, r7, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d2a:	f00a fa17 	bl	800e15c <vsniprintf>
	va_end(args);
	size_t ret = SerialUSB_puts(serialusb_buffer_print, strlen(serialusb_buffer_print));
 8003d2e:	1d3b      	adds	r3, r7, #4
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa55 	bl	80001e0 <strlen>
 8003d36:	4602      	mov	r2, r0
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff07 	bl	8003b50 <SerialUSB_puts>
 8003d42:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	return ret;
 8003d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d56:	b004      	add	sp, #16
 8003d58:	4770      	bx	lr

08003d5a <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3380      	adds	r3, #128	; 0x80
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8003d96:	b292      	uxth	r2, r2
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8003d9c:	425a      	negs	r2, r3
 8003d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da6:	bf58      	it	pl
 8003da8:	4253      	negpl	r3, r2
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3380      	adds	r3, #128	; 0x80
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8003dd2:	425a      	negs	r2, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ddc:	bf58      	it	pl
 8003dde:	4253      	negpl	r3, r2
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003e04:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d90c      	bls.n	8003e28 <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f009 ff99 	bl	800dd58 <memcpy>
 8003e26:	e015      	b.n	8003e54 <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f009 ff8c 	bl	800dd58 <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	18d1      	adds	r1, r2, r3
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f009 ff82 	bl	800dd58 <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 8003e70:	bf00      	nop
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d30c      	bcc.n	8003eb0 <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	e008      	b.n	8003ec2 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4413      	add	r3, r2
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	22c0      	movs	r2, #192	; 0xc0
 8003f36:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003f58:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	89ba      	ldrh	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d82c      	bhi.n	8003fc2 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	89fa      	ldrh	r2, [r7, #14]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d809      	bhi.n	8003f8a <CDC_ReceiveQueue_ReserveBlock+0x44>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	89fa      	ldrh	r2, [r7, #14]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d109      	bne.n	8003f98 <CDC_ReceiveQueue_ReserveBlock+0x52>
 8003f84:	89bb      	ldrh	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003f92:	b292      	uxth	r2, r2
 8003f94:	4413      	add	r3, r2
 8003f96:	e025      	b.n	8003fe4 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 8003f98:	89bb      	ldrh	r3, [r7, #12]
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d921      	bls.n	8003fe2 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	e010      	b.n	8003fe4 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003fce:	89bb      	ldrh	r3, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d206      	bcs.n	8003fe2 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	4413      	add	r3, r2
 8003fe0:	e000      	b.n	8003fe4 <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004002:	b29a      	uxth	r2, r3
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	4413      	add	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800401e:	b29b      	uxth	r3, r3
 8004020:	429a      	cmp	r2, r3
 8004022:	d303      	bcc.n	800402c <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	22c0      	movs	r2, #192	; 0xc0
 8004028:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004032:	b29b      	uxth	r3, r3
 8004034:	2bbf      	cmp	r3, #191	; 0xbf
 8004036:	d903      	bls.n	8004040 <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800405a:	b29b      	uxth	r3, r3
 800405c:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004064:	b29b      	uxth	r3, r3
 8004066:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800406e:	b29a      	uxth	r2, r3
 8004070:	89fb      	ldrh	r3, [r7, #14]
 8004072:	b29b      	uxth	r3, r3
 8004074:	429a      	cmp	r2, r3
 8004076:	d808      	bhi.n	800408a <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004084:	b29b      	uxth	r3, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	e00a      	b.n	80040a0 <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 800408a:	89bb      	ldrh	r3, [r7, #12]
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	89fb      	ldrh	r3, [r7, #14]
 8004092:	b29b      	uxth	r3, r3
 8004094:	4413      	add	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 800409c:	b292      	uxth	r2, r2
 800409e:	1a9b      	subs	r3, r3, r2
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	897b      	ldrh	r3, [r7, #10]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d103      	bne.n	80040e0 <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	89bb      	ldrh	r3, [r7, #12]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d102      	bne.n	80040f6 <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	e019      	b.n	800412a <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	b291      	uxth	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 8004108:	461a      	mov	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	5c9b      	ldrb	r3, [r3, r2]
 800410e:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004116:	b29a      	uxth	r2, r3
 8004118:	897b      	ldrh	r3, [r7, #10]
 800411a:	b29b      	uxth	r3, r3
 800411c:	429a      	cmp	r2, r3
 800411e:	d303      	bcc.n	8004128 <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 8004136:	b480      	push	{r7}
 8004138:	b085      	sub	sp, #20
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004144:	b29b      	uxth	r3, r3
 8004146:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 800414e:	b29b      	uxth	r3, r3
 8004150:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004158:	b29a      	uxth	r2, r3
 800415a:	89bb      	ldrh	r3, [r7, #12]
 800415c:	b29b      	uxth	r3, r3
 800415e:	429a      	cmp	r2, r3
 8004160:	d303      	bcc.n	800416a <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004170:	b29a      	uxth	r2, r3
 8004172:	89fb      	ldrh	r3, [r7, #14]
 8004174:	b29b      	uxth	r3, r3
 8004176:	429a      	cmp	r2, r3
 8004178:	d102      	bne.n	8004180 <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	e006      	b.n	800418e <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	5c9b      	ldrb	r3, [r3, r2]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	8a7b      	ldrh	r3, [r7, #18]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d303      	bcc.n	80041d4 <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041da:	b29a      	uxth	r2, r3
 80041dc:	8abb      	ldrh	r3, [r7, #20]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d808      	bhi.n	80041f6 <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 80041e4:	8abb      	ldrh	r3, [r7, #20]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	82fb      	strh	r3, [r7, #22]
 80041f4:	e007      	b.n	8004206 <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 80041f6:	8a7b      	ldrh	r3, [r7, #18]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004200:	b29b      	uxth	r3, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 8004206:	8afa      	ldrh	r2, [r7, #22]
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	429a      	cmp	r2, r3
 800420c:	d201      	bcs.n	8004212 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 800420e:	8afb      	ldrh	r3, [r7, #22]
 8004210:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	4619      	mov	r1, r3
 8004224:	68b8      	ldr	r0, [r7, #8]
 8004226:	f009 fd97 	bl	800dd58 <memcpy>
  queue->read = queue->read + size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004230:	b29a      	uxth	r2, r3
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	4413      	add	r3, r2
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004244:	b29a      	uxth	r2, r3
 8004246:	8a7b      	ldrh	r3, [r7, #18]
 8004248:	b29b      	uxth	r3, r3
 800424a:	429a      	cmp	r2, r3
 800424c:	d303      	bcc.n	8004256 <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 8004256:	88fb      	ldrh	r3, [r7, #6]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	461a      	mov	r2, r3
 800426c:	460b      	mov	r3, r1
 800426e:	72fb      	strb	r3, [r7, #11]
 8004270:	4613      	mov	r3, r2
 8004272:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800427a:	b29b      	uxth	r3, r3
 800427c:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004284:	b29b      	uxth	r3, r3
 8004286:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800428e:	b29a      	uxth	r2, r3
 8004290:	8a7b      	ldrh	r3, [r7, #18]
 8004292:	b29b      	uxth	r3, r3
 8004294:	429a      	cmp	r2, r3
 8004296:	d303      	bcc.n	80042a0 <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	8abb      	ldrh	r3, [r7, #20]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d808      	bhi.n	80042c2 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 80042b0:	8abb      	ldrh	r3, [r7, #20]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	83fb      	strh	r3, [r7, #30]
 80042c0:	e007      	b.n	80042d2 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 80042c2:	8a7b      	ldrh	r3, [r7, #18]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 80042d2:	8bfa      	ldrh	r2, [r7, #30]
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 80042da:	8bfb      	ldrh	r3, [r7, #30]
 80042dc:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 80042ee:	2300      	movs	r3, #0
 80042f0:	83bb      	strh	r3, [r7, #28]
 80042f2:	e02d      	b.n	8004350 <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 80042f4:	8bbb      	ldrh	r3, [r7, #28]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 80042fe:	7dfa      	ldrb	r2, [r7, #23]
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	429a      	cmp	r2, r3
 8004304:	d11c      	bne.n	8004340 <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800430c:	b29a      	uxth	r2, r3
 800430e:	8bbb      	ldrh	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004324:	b29a      	uxth	r2, r3
 8004326:	8a7b      	ldrh	r3, [r7, #18]
 8004328:	b29b      	uxth	r3, r3
 800432a:	429a      	cmp	r2, r3
 800432c:	d303      	bcc.n	8004336 <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	8bba      	ldrh	r2, [r7, #28]
 800433a:	801a      	strh	r2, [r3, #0]
      return true;
 800433c:	2301      	movs	r3, #1
 800433e:	e025      	b.n	800438c <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 8004340:	8bbb      	ldrh	r3, [r7, #28]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	7dfa      	ldrb	r2, [r7, #23]
 8004348:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 800434a:	8bbb      	ldrh	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	83bb      	strh	r3, [r7, #28]
 8004350:	8bba      	ldrh	r2, [r7, #28]
 8004352:	893b      	ldrh	r3, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d3cd      	bcc.n	80042f4 <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	893a      	ldrh	r2, [r7, #8]
 800435c:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004364:	b29a      	uxth	r2, r3
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	4413      	add	r3, r2
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004378:	b29a      	uxth	r2, r3
 800437a:	8a7b      	ldrh	r3, [r7, #18]
 800437c:	b29b      	uxth	r3, r3
 800437e:	429a      	cmp	r2, r3
 8004380:	d303      	bcc.n	800438a <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3724      	adds	r7, #36	; 0x24
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <HAL_Init+0x40>)
 80043a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_Init+0x40>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_Init+0x40>)
 80043ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_Init+0x40>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_Init+0x40>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c0:	2003      	movs	r0, #3
 80043c2:	f000 f973 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f000 f808 	bl	80043dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043cc:	f7fc fe0a 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40023c00 	.word	0x40023c00

080043dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_InitTick+0x54>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_InitTick+0x58>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f999 	bl	8004732 <HAL_SYSTICK_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00e      	b.n	8004428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d80a      	bhi.n	8004426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004410:	2200      	movs	r2, #0
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f000 f953 	bl	80046c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800441c:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_InitTick+0x5c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000000 	.word	0x20000000
 8004434:	20000374 	.word	0x20000374
 8004438:	20000370 	.word	0x20000370

0800443c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_IncTick+0x20>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_IncTick+0x24>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4413      	add	r3, r2
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <HAL_IncTick+0x24>)
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000374 	.word	0x20000374
 8004460:	20000a14 	.word	0x20000a14

08004464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return uwTick;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_GetTick+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000a14 	.word	0x20000a14

0800447c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7ff ffee 	bl	8004464 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d005      	beq.n	80044a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <HAL_Delay+0x44>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044a2:	bf00      	nop
 80044a4:	f7ff ffde 	bl	8004464 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d8f7      	bhi.n	80044a4 <HAL_Delay+0x28>
  {
  }
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000374 	.word	0x20000374

080044c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f6:	4a04      	ldr	r2, [pc, #16]	; (8004508 <__NVIC_SetPriorityGrouping+0x44>)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	60d3      	str	r3, [r2, #12]
}
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <__NVIC_GetPriorityGrouping+0x18>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0307 	and.w	r3, r3, #7
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000ed00 	.word	0xe000ed00

08004528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db0b      	blt.n	8004552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4907      	ldr	r1, [pc, #28]	; (8004560 <__NVIC_EnableIRQ+0x38>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2001      	movs	r0, #1
 800454a:	fa00 f202 	lsl.w	r2, r0, r2
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	e000e100 	.word	0xe000e100

08004564 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	db12      	blt.n	800459c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	f003 021f 	and.w	r2, r3, #31
 800457c:	490a      	ldr	r1, [pc, #40]	; (80045a8 <__NVIC_DisableIRQ+0x44>)
 800457e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2001      	movs	r0, #1
 8004586:	fa00 f202 	lsl.w	r2, r0, r2
 800458a:	3320      	adds	r3, #32
 800458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004590:	f3bf 8f4f 	dsb	sy
}
 8004594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004596:	f3bf 8f6f 	isb	sy
}
 800459a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000e100 	.word	0xe000e100

080045ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db0a      	blt.n	80045d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	490c      	ldr	r1, [pc, #48]	; (80045f8 <__NVIC_SetPriority+0x4c>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	440b      	add	r3, r1
 80045d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d4:	e00a      	b.n	80045ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <__NVIC_SetPriority+0x50>)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3b04      	subs	r3, #4
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	440b      	add	r3, r1
 80045ea:	761a      	strb	r2, [r3, #24]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f1c3 0307 	rsb	r3, r3, #7
 800461a:	2b04      	cmp	r3, #4
 800461c:	bf28      	it	cs
 800461e:	2304      	movcs	r3, #4
 8004620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3304      	adds	r3, #4
 8004626:	2b06      	cmp	r3, #6
 8004628:	d902      	bls.n	8004630 <NVIC_EncodePriority+0x30>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3b03      	subs	r3, #3
 800462e:	e000      	b.n	8004632 <NVIC_EncodePriority+0x32>
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	401a      	ands	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	43d9      	mvns	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	4313      	orrs	r3, r2
         );
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff8e 	bl	80045ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff05 	bl	80044c4 <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff1a 	bl	800450c <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff8e 	bl	8004600 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff5d 	bl	80045ac <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff0d 	bl	8004528 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	4603      	mov	r3, r0
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff1d 	bl	8004564 <__NVIC_DisableIRQ>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ff94 	bl	8004668 <SysTick_Config>
 8004740:	4603      	mov	r3, r0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004758:	f7ff fe84 	bl	8004464 <HAL_GetTick>
 800475c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d008      	beq.n	800477c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e052      	b.n	8004822 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0216 	bic.w	r2, r2, #22
 800478a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800479a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <HAL_DMA_Abort+0x62>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0208 	bic.w	r2, r2, #8
 80047ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047cc:	e013      	b.n	80047f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ce:	f7ff fe49 	bl	8004464 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d90c      	bls.n	80047f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e015      	b.n	8004822 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e4      	bne.n	80047ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	223f      	movs	r2, #63	; 0x3f
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e00c      	b.n	8004862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2205      	movs	r2, #5
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e159      	b.n	8004b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800488c:	2201      	movs	r2, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	f040 8148 	bne.w	8004b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d005      	beq.n	80048c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d130      	bne.n	8004924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2203      	movs	r2, #3
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048f8:	2201      	movs	r2, #1
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 0201 	and.w	r2, r3, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b03      	cmp	r3, #3
 800492e:	d017      	beq.n	8004960 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d123      	bne.n	80049b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	08da      	lsrs	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3208      	adds	r2, #8
 8004974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	220f      	movs	r2, #15
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3208      	adds	r2, #8
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2203      	movs	r2, #3
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0203 	and.w	r2, r3, #3
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a2 	beq.w	8004b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <HAL_GPIO_Init+0x2e8>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	4a56      	ldr	r2, [pc, #344]	; (8004b58 <HAL_GPIO_Init+0x2e8>)
 8004a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a04:	6453      	str	r3, [r2, #68]	; 0x44
 8004a06:	4b54      	ldr	r3, [pc, #336]	; (8004b58 <HAL_GPIO_Init+0x2e8>)
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a12:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_GPIO_Init+0x2ec>)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	3302      	adds	r3, #2
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a49      	ldr	r2, [pc, #292]	; (8004b60 <HAL_GPIO_Init+0x2f0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d019      	beq.n	8004a72 <HAL_GPIO_Init+0x202>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a48      	ldr	r2, [pc, #288]	; (8004b64 <HAL_GPIO_Init+0x2f4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_GPIO_Init+0x1fe>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a47      	ldr	r2, [pc, #284]	; (8004b68 <HAL_GPIO_Init+0x2f8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00d      	beq.n	8004a6a <HAL_GPIO_Init+0x1fa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a46      	ldr	r2, [pc, #280]	; (8004b6c <HAL_GPIO_Init+0x2fc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <HAL_GPIO_Init+0x1f6>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a45      	ldr	r2, [pc, #276]	; (8004b70 <HAL_GPIO_Init+0x300>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <HAL_GPIO_Init+0x1f2>
 8004a5e:	2304      	movs	r3, #4
 8004a60:	e008      	b.n	8004a74 <HAL_GPIO_Init+0x204>
 8004a62:	2307      	movs	r3, #7
 8004a64:	e006      	b.n	8004a74 <HAL_GPIO_Init+0x204>
 8004a66:	2303      	movs	r3, #3
 8004a68:	e004      	b.n	8004a74 <HAL_GPIO_Init+0x204>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e002      	b.n	8004a74 <HAL_GPIO_Init+0x204>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_GPIO_Init+0x204>
 8004a72:	2300      	movs	r3, #0
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	f002 0203 	and.w	r2, r2, #3
 8004a7a:	0092      	lsls	r2, r2, #2
 8004a7c:	4093      	lsls	r3, r2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a84:	4935      	ldr	r1, [pc, #212]	; (8004b5c <HAL_GPIO_Init+0x2ec>)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a92:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004abc:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b10:	4b18      	ldr	r3, [pc, #96]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b34:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <HAL_GPIO_Init+0x304>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	f67f aea2 	bls.w	800488c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3724      	adds	r7, #36	; 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40020000 	.word	0x40020000
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40013c00 	.word	0x40013c00

08004b78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e0bb      	b.n	8004d0c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b94:	2201      	movs	r2, #1
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f040 80ab 	bne.w	8004d06 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004bb0:	4a5c      	ldr	r2, [pc, #368]	; (8004d24 <HAL_GPIO_DeInit+0x1ac>)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	220f      	movs	r2, #15
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	; (8004d28 <HAL_GPIO_DeInit+0x1b0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_GPIO_DeInit+0x96>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a53      	ldr	r2, [pc, #332]	; (8004d2c <HAL_GPIO_DeInit+0x1b4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_DeInit+0x92>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a52      	ldr	r2, [pc, #328]	; (8004d30 <HAL_GPIO_DeInit+0x1b8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00d      	beq.n	8004c06 <HAL_GPIO_DeInit+0x8e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a51      	ldr	r2, [pc, #324]	; (8004d34 <HAL_GPIO_DeInit+0x1bc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_DeInit+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a50      	ldr	r2, [pc, #320]	; (8004d38 <HAL_GPIO_DeInit+0x1c0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_GPIO_DeInit+0x86>
 8004bfa:	2304      	movs	r3, #4
 8004bfc:	e008      	b.n	8004c10 <HAL_GPIO_DeInit+0x98>
 8004bfe:	2307      	movs	r3, #7
 8004c00:	e006      	b.n	8004c10 <HAL_GPIO_DeInit+0x98>
 8004c02:	2303      	movs	r3, #3
 8004c04:	e004      	b.n	8004c10 <HAL_GPIO_DeInit+0x98>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e002      	b.n	8004c10 <HAL_GPIO_DeInit+0x98>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_GPIO_DeInit+0x98>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	f002 0203 	and.w	r2, r2, #3
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	4093      	lsls	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d132      	bne.n	8004c86 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c20:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	4944      	ldr	r1, [pc, #272]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c2e:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	4941      	ldr	r1, [pc, #260]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c3c:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	493d      	ldr	r1, [pc, #244]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c4a:	4b3c      	ldr	r3, [pc, #240]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	493a      	ldr	r1, [pc, #232]	; (8004d3c <HAL_GPIO_DeInit+0x1c4>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004c68:	4a2e      	ldr	r2, [pc, #184]	; (8004d24 <HAL_GPIO_DeInit+0x1ac>)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3302      	adds	r3, #2
 8004c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	482a      	ldr	r0, [pc, #168]	; (8004d24 <HAL_GPIO_DeInit+0x1ac>)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	400a      	ands	r2, r1
 8004c80:	3302      	adds	r3, #2
 8004c82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2103      	movs	r1, #3
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	08da      	lsrs	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3208      	adds	r2, #8
 8004ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	220f      	movs	r2, #15
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	08d2      	lsrs	r2, r2, #3
 8004cbc:	4019      	ands	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	2103      	movs	r1, #3
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	401a      	ands	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	f67f af40 	bls.w	8004b94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40013800 	.word	0x40013800
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	40020800 	.word	0x40020800
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40013c00 	.word	0x40013c00

08004d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	4013      	ands	r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
 8004d5c:	e001      	b.n	8004d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d80:	787b      	ldrb	r3, [r7, #1]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d8c:	e003      	b.n	8004d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	041a      	lsls	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	619a      	str	r2, [r3, #24]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004db4:	887a      	ldrh	r2, [r7, #2]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4013      	ands	r3, r2
 8004dba:	041a      	lsls	r2, r3, #16
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	43d9      	mvns	r1, r3
 8004dc0:	887b      	ldrh	r3, [r7, #2]
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e12b      	b.n	8005042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc f918 	bl	8001034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f002 fe32 	bl	8007aa4 <HAL_RCC_GetPCLK1Freq>
 8004e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4a81      	ldr	r2, [pc, #516]	; (800504c <HAL_I2C_Init+0x274>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d807      	bhi.n	8004e5c <HAL_I2C_Init+0x84>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a80      	ldr	r2, [pc, #512]	; (8005050 <HAL_I2C_Init+0x278>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	bf94      	ite	ls
 8004e54:	2301      	movls	r3, #1
 8004e56:	2300      	movhi	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e006      	b.n	8004e6a <HAL_I2C_Init+0x92>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a7d      	ldr	r2, [pc, #500]	; (8005054 <HAL_I2C_Init+0x27c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bf94      	ite	ls
 8004e64:	2301      	movls	r3, #1
 8004e66:	2300      	movhi	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0e7      	b.n	8005042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a78      	ldr	r2, [pc, #480]	; (8005058 <HAL_I2C_Init+0x280>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0c9b      	lsrs	r3, r3, #18
 8004e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a6a      	ldr	r2, [pc, #424]	; (800504c <HAL_I2C_Init+0x274>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d802      	bhi.n	8004eac <HAL_I2C_Init+0xd4>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	e009      	b.n	8004ec0 <HAL_I2C_Init+0xe8>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	4a69      	ldr	r2, [pc, #420]	; (800505c <HAL_I2C_Init+0x284>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	495c      	ldr	r1, [pc, #368]	; (800504c <HAL_I2C_Init+0x274>)
 8004edc:	428b      	cmp	r3, r1
 8004ede:	d819      	bhi.n	8004f14 <HAL_I2C_Init+0x13c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1e59      	subs	r1, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eee:	1c59      	adds	r1, r3, #1
 8004ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_I2C_Init+0x138>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1e59      	subs	r1, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f08:	3301      	adds	r3, #1
 8004f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0e:	e051      	b.n	8004fb4 <HAL_I2C_Init+0x1dc>
 8004f10:	2304      	movs	r3, #4
 8004f12:	e04f      	b.n	8004fb4 <HAL_I2C_Init+0x1dc>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <HAL_I2C_Init+0x168>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1e58      	subs	r0, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	440b      	add	r3, r1
 8004f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e012      	b.n	8004f66 <HAL_I2C_Init+0x18e>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1e58      	subs	r0, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6859      	ldr	r1, [r3, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	0099      	lsls	r1, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_I2C_Init+0x196>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e022      	b.n	8004fb4 <HAL_I2C_Init+0x1dc>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10e      	bne.n	8004f94 <HAL_I2C_Init+0x1bc>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1e58      	subs	r0, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6859      	ldr	r1, [r3, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	440b      	add	r3, r1
 8004f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	e00f      	b.n	8004fb4 <HAL_I2C_Init+0x1dc>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1e58      	subs	r0, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	0099      	lsls	r1, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004faa:	3301      	adds	r3, #1
 8004fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	6809      	ldr	r1, [r1, #0]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6911      	ldr	r1, [r2, #16]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	000186a0 	.word	0x000186a0
 8005050:	001e847f 	.word	0x001e847f
 8005054:	003d08ff 	.word	0x003d08ff
 8005058:	431bde83 	.word	0x431bde83
 800505c:	10624dd3 	.word	0x10624dd3

08005060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	460b      	mov	r3, r1
 800506e:	817b      	strh	r3, [r7, #10]
 8005070:	4613      	mov	r3, r2
 8005072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005074:	f7ff f9f6 	bl	8004464 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b20      	cmp	r3, #32
 8005084:	f040 80e0 	bne.w	8005248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2319      	movs	r3, #25
 800508e:	2201      	movs	r2, #1
 8005090:	4970      	ldr	r1, [pc, #448]	; (8005254 <HAL_I2C_Master_Transmit+0x1f4>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fd86 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	e0d3      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_I2C_Master_Transmit+0x50>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0cc      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d007      	beq.n	80050d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2221      	movs	r2, #33	; 0x21
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a50      	ldr	r2, [pc, #320]	; (8005258 <HAL_I2C_Master_Transmit+0x1f8>)
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fbf0 	bl	8005904 <I2C_MasterRequestWrite>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e08d      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005144:	e066      	b.n	8005214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fe00 	bl	8005d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d107      	bne.n	800516e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e06b      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d11b      	bne.n	80051e8 <HAL_I2C_Master_Transmit+0x188>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d017      	beq.n	80051e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	6a39      	ldr	r1, [r7, #32]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fdf0 	bl	8005dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d107      	bne.n	8005210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01a      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d194      	bne.n	8005146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	00100002 	.word	0x00100002
 8005258:	ffff0000 	.word	0xffff0000

0800525c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	; 0x30
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	460b      	mov	r3, r1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	4613      	mov	r3, r2
 800526e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005270:	f7ff f8f8 	bl	8004464 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b20      	cmp	r3, #32
 8005280:	f040 820b 	bne.w	800569a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2319      	movs	r3, #25
 800528a:	2201      	movs	r2, #1
 800528c:	497c      	ldr	r1, [pc, #496]	; (8005480 <HAL_I2C_Master_Receive+0x224>)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fc88 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	e1fe      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_I2C_Master_Receive+0x50>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e1f7      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d007      	beq.n	80052d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2222      	movs	r2, #34	; 0x22
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2210      	movs	r2, #16
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	893a      	ldrh	r2, [r7, #8]
 8005302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a5c      	ldr	r2, [pc, #368]	; (8005484 <HAL_I2C_Master_Receive+0x228>)
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005314:	8979      	ldrh	r1, [r7, #10]
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fb74 	bl	8005a08 <I2C_MasterRequestRead>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e1b8      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d113      	bne.n	800535a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005332:	2300      	movs	r3, #0
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e18c      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	2b01      	cmp	r3, #1
 8005360:	d11b      	bne.n	800539a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e16c      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d11b      	bne.n	80053da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	e14c      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005400:	e138      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	2b03      	cmp	r3, #3
 8005408:	f200 80f1 	bhi.w	80055ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b01      	cmp	r3, #1
 8005412:	d123      	bne.n	800545c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fd1b 	bl	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e139      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a
 800545a:	e10b      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	2b02      	cmp	r3, #2
 8005462:	d14e      	bne.n	8005502 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	2200      	movs	r2, #0
 800546c:	4906      	ldr	r1, [pc, #24]	; (8005488 <HAL_I2C_Master_Receive+0x22c>)
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fb98 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e10e      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
 800547e:	bf00      	nop
 8005480:	00100002 	.word	0x00100002
 8005484:	ffff0000 	.word	0xffff0000
 8005488:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005500:	e0b8      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2200      	movs	r2, #0
 800550a:	4966      	ldr	r1, [pc, #408]	; (80056a4 <HAL_I2C_Master_Receive+0x448>)
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fb49 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0bf      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	494f      	ldr	r1, [pc, #316]	; (80056a4 <HAL_I2C_Master_Receive+0x448>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fb1b 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e091      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055ec:	e042      	b.n	8005674 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fc2e 	bl	8005e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e04c      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b04      	cmp	r3, #4
 8005640:	d118      	bne.n	8005674 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	f47f aec2 	bne.w	8005402 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3728      	adds	r7, #40	; 0x28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	00010004 	.word	0x00010004

080056a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	460b      	mov	r3, r1
 80056b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056b8:	f7fe fed4 	bl	8004464 <HAL_GetTick>
 80056bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80056be:	2301      	movs	r3, #1
 80056c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	f040 8111 	bne.w	80058f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2319      	movs	r3, #25
 80056d6:	2201      	movs	r2, #1
 80056d8:	4988      	ldr	r1, [pc, #544]	; (80058fc <HAL_I2C_IsDeviceReady+0x254>)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa62 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
 80056e8:	e104      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_I2C_IsDeviceReady+0x50>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e0fd      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d007      	beq.n	800571e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2224      	movs	r2, #36	; 0x24
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a70      	ldr	r2, [pc, #448]	; (8005900 <HAL_I2C_IsDeviceReady+0x258>)
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005750:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2200      	movs	r2, #0
 800575a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fa20 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005778:	d103      	bne.n	8005782 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0b6      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005794:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005796:	f7fe fe65 	bl	8004464 <HAL_GetTick>
 800579a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	bf0c      	ite	eq
 80057aa:	2301      	moveq	r3, #1
 80057ac:	2300      	movne	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057ca:	e025      	b.n	8005818 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fe fe4a 	bl	8004464 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <HAL_I2C_IsDeviceReady+0x13a>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	22a0      	movs	r2, #160	; 0xa0
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2ba0      	cmp	r3, #160	; 0xa0
 8005822:	d005      	beq.n	8005830 <HAL_I2C_IsDeviceReady+0x188>
 8005824:	7dfb      	ldrb	r3, [r7, #23]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_I2C_IsDeviceReady+0x188>
 800582a:	7dbb      	ldrb	r3, [r7, #22]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0cd      	beq.n	80057cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d129      	bne.n	800589a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005854:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2319      	movs	r3, #25
 8005872:	2201      	movs	r2, #1
 8005874:	4921      	ldr	r1, [pc, #132]	; (80058fc <HAL_I2C_IsDeviceReady+0x254>)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f994 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e036      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e02c      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2319      	movs	r3, #25
 80058ba:	2201      	movs	r2, #1
 80058bc:	490f      	ldr	r1, [pc, #60]	; (80058fc <HAL_I2C_IsDeviceReady+0x254>)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f970 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e012      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3301      	adds	r3, #1
 80058d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	f4ff af32 	bcc.w	8005742 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	00100002 	.word	0x00100002
 8005900:	ffff0000 	.word	0xffff0000

08005904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	460b      	mov	r3, r1
 8005912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d006      	beq.n	800592e <I2C_MasterRequestWrite+0x2a>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d003      	beq.n	800592e <I2C_MasterRequestWrite+0x2a>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800592c:	d108      	bne.n	8005940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e00b      	b.n	8005958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	2b12      	cmp	r3, #18
 8005946:	d107      	bne.n	8005958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f91d 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00d      	beq.n	800598c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597e:	d103      	bne.n	8005988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e035      	b.n	80059f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005994:	d108      	bne.n	80059a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a4:	611a      	str	r2, [r3, #16]
 80059a6:	e01b      	b.n	80059e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059a8:	897b      	ldrh	r3, [r7, #10]
 80059aa:	11db      	asrs	r3, r3, #7
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0306 	and.w	r3, r3, #6
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f063 030f 	orn	r3, r3, #15
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <I2C_MasterRequestWrite+0xfc>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f943 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e010      	b.n	80059f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059d6:	897b      	ldrh	r3, [r7, #10]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4907      	ldr	r1, [pc, #28]	; (8005a04 <I2C_MasterRequestWrite+0x100>)
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f933 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	00010008 	.word	0x00010008
 8005a04:	00010002 	.word	0x00010002

08005a08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	460b      	mov	r3, r1
 8005a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d006      	beq.n	8005a42 <I2C_MasterRequestRead+0x3a>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d003      	beq.n	8005a42 <I2C_MasterRequestRead+0x3a>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a40:	d108      	bne.n	8005a54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e00b      	b.n	8005a6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	2b11      	cmp	r3, #17
 8005a5a:	d107      	bne.n	8005a6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f893 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d103      	bne.n	8005a9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e079      	b.n	8005b94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa8:	d108      	bne.n	8005abc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e05f      	b.n	8005b7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	11db      	asrs	r3, r3, #7
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0306 	and.w	r3, r3, #6
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f063 030f 	orn	r3, r3, #15
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4930      	ldr	r1, [pc, #192]	; (8005b9c <I2C_MasterRequestRead+0x194>)
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8b9 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e054      	b.n	8005b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4929      	ldr	r1, [pc, #164]	; (8005ba0 <I2C_MasterRequestRead+0x198>)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f8a9 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e044      	b.n	8005b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f831 	bl	8005ba4 <I2C_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00d      	beq.n	8005b64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	d103      	bne.n	8005b60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e017      	b.n	8005b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b64:	897b      	ldrh	r3, [r7, #10]
 8005b66:	11db      	asrs	r3, r3, #7
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f003 0306 	and.w	r3, r3, #6
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f063 030e 	orn	r3, r3, #14
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4907      	ldr	r1, [pc, #28]	; (8005ba0 <I2C_MasterRequestRead+0x198>)
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f865 	bl	8005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	00010008 	.word	0x00010008
 8005ba0:	00010002 	.word	0x00010002

08005ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb4:	e025      	b.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d021      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fe fc51 	bl	8004464 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d116      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e023      	b.n	8005c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10d      	bne.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	43da      	mvns	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4013      	ands	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	e00c      	b.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0b6      	beq.n	8005bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
 8005c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c60:	e051      	b.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d123      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f043 0204 	orr.w	r2, r3, #4
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e046      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d021      	beq.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc2:	f7fe fbcf 	bl	8004464 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e020      	b.n	8005d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0c1b      	lsrs	r3, r3, #16
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d10c      	bne.n	8005d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e00b      	b.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	43da      	mvns	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d18d      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d5c:	e02d      	b.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8ce 	bl	8005f00 <I2C_IsAcknowledgeFailed>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d021      	beq.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fe fb75 	bl	8004464 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0220 	orr.w	r2, r3, #32
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e007      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d1ca      	bne.n	8005d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dde:	e02d      	b.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f88d 	bl	8005f00 <I2C_IsAcknowledgeFailed>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d021      	beq.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fe fb34 	bl	8004464 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d116      	bne.n	8005e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f043 0220 	orr.w	r2, r3, #32
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e007      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d1ca      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e60:	e042      	b.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d119      	bne.n	8005ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0210 	mvn.w	r2, #16
 8005e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e029      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea4:	f7fe fade 	bl	8004464 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e007      	b.n	8005ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d1b5      	bne.n	8005e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f16:	d11b      	bne.n	8005f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f043 0204 	orr.w	r2, r3, #4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f60:	b08f      	sub	sp, #60	; 0x3c
 8005f62:	af0a      	add	r7, sp, #40	; 0x28
 8005f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e10f      	b.n	8006190 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f007 fb82 	bl	800d694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2203      	movs	r2, #3
 8005f94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f003 f91b 	bl	80091ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	687e      	ldr	r6, [r7, #4]
 8005fbc:	466d      	mov	r5, sp
 8005fbe:	f106 0410 	add.w	r4, r6, #16
 8005fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fd2:	1d33      	adds	r3, r6, #4
 8005fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fd6:	6838      	ldr	r0, [r7, #0]
 8005fd8:	f002 fff2 	bl	8008fc0 <USB_CoreInit>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0d0      	b.n	8006190 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f003 f909 	bl	800920c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	e04a      	b.n	8006096 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006000:	7bfa      	ldrb	r2, [r7, #15]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	333d      	adds	r3, #61	; 0x3d
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006014:	7bfa      	ldrb	r2, [r7, #15]
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	333c      	adds	r3, #60	; 0x3c
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	b298      	uxth	r0, r3
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	3342      	adds	r3, #66	; 0x42
 800603c:	4602      	mov	r2, r0
 800603e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006040:	7bfa      	ldrb	r2, [r7, #15]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	333f      	adds	r3, #63	; 0x3f
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006054:	7bfa      	ldrb	r2, [r7, #15]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3344      	adds	r3, #68	; 0x44
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3348      	adds	r3, #72	; 0x48
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800607c:	7bfa      	ldrb	r2, [r7, #15]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3350      	adds	r3, #80	; 0x50
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	3301      	adds	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
 8006096:	7bfa      	ldrb	r2, [r7, #15]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d3af      	bcc.n	8006000 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
 80060a4:	e044      	b.n	8006130 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060ce:	7bfa      	ldrb	r2, [r7, #15]
 80060d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060e8:	7bfa      	ldrb	r2, [r7, #15]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060fe:	7bfa      	ldrb	r2, [r7, #15]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006114:	7bfa      	ldrb	r2, [r7, #15]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3301      	adds	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	7bfa      	ldrb	r2, [r7, #15]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d3b5      	bcc.n	80060a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	687e      	ldr	r6, [r7, #4]
 8006142:	466d      	mov	r5, sp
 8006144:	f106 0410 	add.w	r4, r6, #16
 8006148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800614a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800614c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800614e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006154:	e885 0003 	stmia.w	r5, {r0, r1}
 8006158:	1d33      	adds	r3, r6, #4
 800615a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f003 f87f 	bl	8009260 <USB_DevInit>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e00d      	b.n	8006190 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f004 f8c7 	bl	800a31c <USB_DevDisconnect>

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006198 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_PCD_Start+0x1c>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e020      	b.n	80061f6 <HAL_PCD_Start+0x5e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d109      	bne.n	80061d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d005      	beq.n	80061d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 fff3 	bl	80091c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f004 f877 	bl	800a2da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061fe:	b590      	push	{r4, r7, lr}
 8006200:	b08d      	sub	sp, #52	; 0x34
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f004 f935 	bl	800a484 <USB_GetMode>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 839d 	bne.w	800695c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f004 f899 	bl	800a35e <USB_ReadInterrupts>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8393 	beq.w	800695a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f004 f890 	bl	800a35e <USB_ReadInterrupts>
 800623e:	4603      	mov	r3, r0
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d107      	bne.n	8006258 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f002 0202 	and.w	r2, r2, #2
 8006256:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f004 f87e 	bl	800a35e <USB_ReadInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b10      	cmp	r3, #16
 800626a:	d161      	bne.n	8006330 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0210 	bic.w	r2, r2, #16
 800627a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	4613      	mov	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	3304      	adds	r3, #4
 800629a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	0c5b      	lsrs	r3, r3, #17
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d124      	bne.n	80062f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d035      	beq.n	8006320 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	6a38      	ldr	r0, [r7, #32]
 80062c8:	f003 fee4 	bl	800a094 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d8:	441a      	add	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ea:	441a      	add	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	619a      	str	r2, [r3, #24]
 80062f0:	e016      	b.n	8006320 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	0c5b      	lsrs	r3, r3, #17
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d110      	bne.n	8006320 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006304:	2208      	movs	r2, #8
 8006306:	4619      	mov	r1, r3
 8006308:	6a38      	ldr	r0, [r7, #32]
 800630a:	f003 fec3 	bl	800a094 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631a:	441a      	add	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0210 	orr.w	r2, r2, #16
 800632e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f004 f812 	bl	800a35e <USB_ReadInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006340:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006344:	d16e      	bne.n	8006424 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f004 f818 	bl	800a384 <USB_ReadDevAllOutEpInterrupt>
 8006354:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006356:	e062      	b.n	800641e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d057      	beq.n	8006412 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f004 f83d 	bl	800a3ec <USB_ReadDevOutEPInterrupt>
 8006372:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2301      	movs	r3, #1
 800638e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fdb0 	bl	8006ef8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	2308      	movs	r3, #8
 80063b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 feaa 	bl	8007110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	461a      	mov	r2, r3
 80063d4:	2310      	movs	r3, #16
 80063d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	461a      	mov	r2, r3
 80063f0:	2320      	movs	r3, #32
 80063f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006410:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	3301      	adds	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d199      	bne.n	8006358 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f003 ff98 	bl	800a35e <USB_ReadInterrupts>
 800642e:	4603      	mov	r3, r0
 8006430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006438:	f040 80c0 	bne.w	80065bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4618      	mov	r0, r3
 8006442:	f003 ffb9 	bl	800a3b8 <USB_ReadDevAllInEpInterrupt>
 8006446:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800644c:	e0b2      	b.n	80065b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 80a7 	beq.w	80065a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f003 ffdf 	bl	800a428 <USB_ReadDevInEPInterrupt>
 800646a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d057      	beq.n	8006526 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2201      	movs	r2, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	43db      	mvns	r3, r3
 8006490:	69f9      	ldr	r1, [r7, #28]
 8006492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006496:	4013      	ands	r3, r2
 8006498:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	2301      	movs	r3, #1
 80064aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d132      	bne.n	800651a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3348      	adds	r3, #72	; 0x48
 80064c4:	6819      	ldr	r1, [r3, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4403      	add	r3, r0
 80064d4:	3344      	adds	r3, #68	; 0x44
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4419      	add	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	4613      	mov	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4403      	add	r3, r0
 80064e8:	3348      	adds	r3, #72	; 0x48
 80064ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d113      	bne.n	800651a <HAL_PCD_IRQHandler+0x31c>
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	3350      	adds	r3, #80	; 0x50
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006512:	461a      	mov	r2, r3
 8006514:	2101      	movs	r1, #1
 8006516:	f003 ffe7 	bl	800a4e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	b2db      	uxtb	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f007 f938 	bl	800d796 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	2308      	movs	r3, #8
 8006540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	461a      	mov	r2, r3
 800655a:	2310      	movs	r3, #16
 800655c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006574:	461a      	mov	r2, r3
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	461a      	mov	r2, r3
 8006592:	2302      	movs	r3, #2
 8006594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fc1b 	bl	8006dde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	3301      	adds	r3, #1
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f47f af49 	bne.w	800644e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f003 fecc 	bl	800a35e <USB_ReadInterrupts>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d122      	bne.n	8006618 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d108      	bne.n	8006602 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fe26 	bl	800724c <HAL_PCDEx_LPM_Callback>
 8006600:	e002      	b.n	8006608 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f007 f934 	bl	800d870 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695a      	ldr	r2, [r3, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f003 fe9e 	bl	800a35e <USB_ReadInterrupts>
 8006622:	4603      	mov	r3, r0
 8006624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662c:	d112      	bne.n	8006654 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f007 f8f0 	bl	800d824 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006652:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f003 fe80 	bl	800a35e <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	f040 80c7 	bne.w	80067fa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2110      	movs	r1, #16
 8006686:	4618      	mov	r0, r3
 8006688:	f002 ff4e 	bl	8009528 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006690:	e056      	b.n	8006740 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	461a      	mov	r2, r3
 80066a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	461a      	mov	r2, r3
 80066f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006718:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006738:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	3301      	adds	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006746:	429a      	cmp	r2, r3
 8006748:	d3a3      	bcc.n	8006692 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006758:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800675c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006776:	f043 030b 	orr.w	r3, r3, #11
 800677a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f043 030b 	orr.w	r3, r3, #11
 8006790:	6453      	str	r3, [r2, #68]	; 0x44
 8006792:	e015      	b.n	80067c0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80067aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ba:	f043 030b 	orr.w	r3, r3, #11
 80067be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80067e4:	461a      	mov	r2, r3
 80067e6:	f003 fe7f 	bl	800a4e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695a      	ldr	r2, [r3, #20]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f003 fdad 	bl	800a35e <USB_ReadInterrupts>
 8006804:	4603      	mov	r3, r0
 8006806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	d124      	bne.n	800685a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f003 fe43 	bl	800a4a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f002 fee3 	bl	80095ea <USB_GetDevSpeed>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681c      	ldr	r4, [r3, #0]
 8006830:	f001 f92c 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8006834:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800683a:	b2db      	uxtb	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	4620      	mov	r0, r4
 8006840:	f002 fc20 	bl	8009084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f006 ffce 	bl	800d7e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006858:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f003 fd7d 	bl	800a35e <USB_ReadInterrupts>
 8006864:	4603      	mov	r3, r0
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b08      	cmp	r3, #8
 800686c:	d10a      	bne.n	8006884 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f006 ffab 	bl	800d7ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695a      	ldr	r2, [r3, #20]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f002 0208 	and.w	r2, r2, #8
 8006882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f003 fd68 	bl	800a35e <USB_ReadInterrupts>
 800688e:	4603      	mov	r3, r0
 8006890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006898:	d10f      	bne.n	80068ba <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f007 f803 	bl	800d8b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f003 fd4d 	bl	800a35e <USB_ReadInterrupts>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ce:	d10f      	bne.n	80068f0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f006 ffd6 	bl	800d88c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80068ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f003 fd32 	bl	800a35e <USB_ReadInterrupts>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d10a      	bne.n	800691c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f006 ffe4 	bl	800d8d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800691a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f003 fd1c 	bl	800a35e <USB_ReadInterrupts>
 8006926:	4603      	mov	r3, r0
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d115      	bne.n	800695c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f006 ffd4 	bl	800d8f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	e000      	b.n	800695c <HAL_PCD_IRQHandler+0x75e>
      return;
 800695a:	bf00      	nop
    }
  }
}
 800695c:	3734      	adds	r7, #52	; 0x34
 800695e:	46bd      	mov	sp, r7
 8006960:	bd90      	pop	{r4, r7, pc}

08006962 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_PCD_SetAddress+0x1a>
 8006978:	2302      	movs	r3, #2
 800697a:	e013      	b.n	80069a4 <HAL_PCD_SetAddress+0x42>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f003 fc7a 	bl	800a28e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	70fb      	strb	r3, [r7, #3]
 80069be:	460b      	mov	r3, r1
 80069c0:	803b      	strh	r3, [r7, #0]
 80069c2:	4613      	mov	r3, r2
 80069c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da0f      	bge.n	80069f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	4613      	mov	r3, r2
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	3338      	adds	r3, #56	; 0x38
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	3304      	adds	r3, #4
 80069e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	705a      	strb	r2, [r3, #1]
 80069f0:	e00f      	b.n	8006a12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	f003 020f 	and.w	r2, r3, #15
 80069f8:	4613      	mov	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	3304      	adds	r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a1e:	883a      	ldrh	r2, [r7, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	78ba      	ldrb	r2, [r7, #2]
 8006a28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a3c:	78bb      	ldrb	r3, [r7, #2]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d102      	bne.n	8006a48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_PCD_EP_Open+0xaa>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e00e      	b.n	8006a74 <HAL_PCD_EP_Open+0xc8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 fde5 	bl	8009634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a72:	7afb      	ldrb	r3, [r7, #11]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da0f      	bge.n	8006ab0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	f003 020f 	and.w	r2, r3, #15
 8006a96:	4613      	mov	r3, r2
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	3338      	adds	r3, #56	; 0x38
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	705a      	strb	r2, [r3, #1]
 8006aae:	e00f      	b.n	8006ad0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	1a9b      	subs	r3, r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_PCD_EP_Close+0x6e>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	e00e      	b.n	8006b08 <HAL_PCD_EP_Close+0x8c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 fe23 	bl	8009744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	f003 020f 	and.w	r2, r3, #15
 8006b26:	4613      	mov	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	3304      	adds	r3, #4
 8006b38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d102      	bne.n	8006b6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	f003 f8fe 	bl	8009d84 <USB_EP0StartXfer>
 8006b88:	e008      	b.n	8006b9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	6979      	ldr	r1, [r7, #20]
 8006b98:	f002 feb0 	bl	80098fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 020f 	and.w	r2, r3, #15
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006bc8:	681b      	ldr	r3, [r3, #0]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	460b      	mov	r3, r1
 8006be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	4613      	mov	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	3338      	adds	r3, #56	; 0x38
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2201      	movs	r2, #1
 8006c14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d102      	bne.n	8006c30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	6979      	ldr	r1, [r7, #20]
 8006c48:	f003 f89c 	bl	8009d84 <USB_EP0StartXfer>
 8006c4c:	e008      	b.n	8006c60 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6979      	ldr	r1, [r7, #20]
 8006c5c:	f002 fe4e 	bl	80098fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	f003 020f 	and.w	r2, r3, #15
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d901      	bls.n	8006c88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e050      	b.n	8006d2a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	da0f      	bge.n	8006cb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	3338      	adds	r3, #56	; 0x38
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	705a      	strb	r2, [r3, #1]
 8006cae:	e00d      	b.n	8006ccc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_PCD_EP_SetStall+0x82>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e01e      	b.n	8006d2a <HAL_PCD_EP_SetStall+0xc0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68f9      	ldr	r1, [r7, #12]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f003 f9f3 	bl	800a0e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	b2d9      	uxtb	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f003 fbe4 	bl	800a4e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d901      	bls.n	8006d50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e042      	b.n	8006dd6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da0f      	bge.n	8006d78 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	3338      	adds	r3, #56	; 0x38
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	705a      	strb	r2, [r3, #1]
 8006d76:	e00f      	b.n	8006d98 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	4613      	mov	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3304      	adds	r3, #4
 8006d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_PCD_EP_ClrStall+0x86>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e00e      	b.n	8006dd6 <HAL_PCD_EP_ClrStall+0xa4>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f003 f9fb 	bl	800a1c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b08a      	sub	sp, #40	; 0x28
 8006de2:	af02      	add	r7, sp, #8
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	3338      	adds	r3, #56	; 0x38
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	3304      	adds	r3, #4
 8006e04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d901      	bls.n	8006e16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e06c      	b.n	8006ef0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d902      	bls.n	8006e32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3303      	adds	r3, #3
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e3a:	e02b      	b.n	8006e94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d902      	bls.n	8006e58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3303      	adds	r3, #3
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68d9      	ldr	r1, [r3, #12]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	4603      	mov	r3, r0
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f003 f8d7 	bl	800a02a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d809      	bhi.n	8006ebe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d203      	bcs.n	8006ebe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1be      	bne.n	8006e3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	695a      	ldr	r2, [r3, #20]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d811      	bhi.n	8006eee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	6939      	ldr	r1, [r7, #16]
 8006ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eea:	4013      	ands	r3, r2
 8006eec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	333c      	adds	r3, #60	; 0x3c
 8006f10:	3304      	adds	r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	f040 80a0 	bne.w	8007070 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d015      	beq.n	8006f66 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a72      	ldr	r2, [pc, #456]	; (8007108 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	f240 80dd 	bls.w	80070fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80d7 	beq.w	80070fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f62:	6093      	str	r3, [r2, #8]
 8006f64:	e0cb      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	2320      	movs	r3, #32
 8006f80:	6093      	str	r3, [r2, #8]
 8006f82:	e0bc      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 80b7 	bne.w	80070fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a5d      	ldr	r2, [pc, #372]	; (8007108 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d90f      	bls.n	8006fb8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb4:	6093      	str	r3, [r2, #8]
 8006fb6:	e0a2      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006fca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	0159      	lsls	r1, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006fde:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4403      	add	r3, r0
 8006fee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ff2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	1a9b      	subs	r3, r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007006:	6819      	ldr	r1, [r3, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4403      	add	r3, r0
 8007016:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4419      	add	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4403      	add	r3, r0
 800702c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007030:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d114      	bne.n	8007062 <PCD_EP_OutXfrComplete_int+0x16a>
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d108      	bne.n	8007062 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800705a:	461a      	mov	r2, r3
 800705c:	2101      	movs	r1, #1
 800705e:	f003 fa43 	bl	800a4e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f006 fb79 	bl	800d760 <HAL_PCD_DataOutStageCallback>
 800706e:	e046      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a26      	ldr	r2, [pc, #152]	; (800710c <PCD_EP_OutXfrComplete_int+0x214>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d124      	bne.n	80070c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708e:	461a      	mov	r2, r3
 8007090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007094:	6093      	str	r3, [r2, #8]
 8007096:	e032      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	461a      	mov	r2, r3
 80070b0:	2320      	movs	r3, #32
 80070b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f006 fb50 	bl	800d760 <HAL_PCD_DataOutStageCallback>
 80070c0:	e01d      	b.n	80070fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d114      	bne.n	80070f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d108      	bne.n	80070f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070ea:	461a      	mov	r2, r3
 80070ec:	2100      	movs	r1, #0
 80070ee:	f003 f9fb 	bl	800a4e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f006 fb31 	bl	800d760 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	4f54300a 	.word	0x4f54300a
 800710c:	4f54310a 	.word	0x4f54310a

08007110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	333c      	adds	r3, #60	; 0x3c
 8007128:	3304      	adds	r3, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <PCD_EP_OutSetupPacket_int+0x88>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d90e      	bls.n	8007164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	461a      	mov	r2, r3
 800715e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f006 fae9 	bl	800d73c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <PCD_EP_OutSetupPacket_int+0x88>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d90c      	bls.n	800718c <PCD_EP_OutSetupPacket_int+0x7c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d108      	bne.n	800718c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007184:	461a      	mov	r2, r3
 8007186:	2101      	movs	r1, #1
 8007188:	f003 f9ae 	bl	800a4e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	4f54300a 	.word	0x4f54300a

0800719c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
 80071a8:	4613      	mov	r3, r2
 80071aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80071ba:	883b      	ldrh	r3, [r7, #0]
 80071bc:	0419      	lsls	r1, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
 80071c8:	e028      	b.n	800721c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	e00d      	b.n	80071fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	3340      	adds	r3, #64	; 0x40
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	0c1b      	lsrs	r3, r3, #16
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	3301      	adds	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
 80071fa:	7bfa      	ldrb	r2, [r7, #15]
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	3b01      	subs	r3, #1
 8007200:	429a      	cmp	r2, r3
 8007202:	d3ec      	bcc.n	80071de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007204:	883b      	ldrh	r3, [r7, #0]
 8007206:	0418      	lsls	r0, r3, #16
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	3b01      	subs	r3, #1
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	4302      	orrs	r2, r0
 8007214:	3340      	adds	r3, #64	; 0x40
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	887a      	ldrh	r2, [r7, #2]
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e264      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d075      	beq.n	800736e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007282:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b04      	cmp	r3, #4
 800728c:	d00c      	beq.n	80072a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800728e:	4ba0      	ldr	r3, [pc, #640]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007296:	2b08      	cmp	r3, #8
 8007298:	d112      	bne.n	80072c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800729a:	4b9d      	ldr	r3, [pc, #628]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072a8:	4b99      	ldr	r3, [pc, #612]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d05b      	beq.n	800736c <HAL_RCC_OscConfig+0x108>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d157      	bne.n	800736c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e23f      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c8:	d106      	bne.n	80072d8 <HAL_RCC_OscConfig+0x74>
 80072ca:	4b91      	ldr	r3, [pc, #580]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a90      	ldr	r2, [pc, #576]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e01d      	b.n	8007314 <HAL_RCC_OscConfig+0xb0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e0:	d10c      	bne.n	80072fc <HAL_RCC_OscConfig+0x98>
 80072e2:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a8a      	ldr	r2, [pc, #552]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a87      	ldr	r2, [pc, #540]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e00b      	b.n	8007314 <HAL_RCC_OscConfig+0xb0>
 80072fc:	4b84      	ldr	r3, [pc, #528]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a83      	ldr	r2, [pc, #524]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	4b81      	ldr	r3, [pc, #516]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a80      	ldr	r2, [pc, #512]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d013      	beq.n	8007344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800731c:	f7fd f8a2 	bl	8004464 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007324:	f7fd f89e 	bl	8004464 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e204      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007336:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCC_OscConfig+0xc0>
 8007342:	e014      	b.n	800736e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fd f88e 	bl	8004464 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800734c:	f7fd f88a 	bl	8004464 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e1f0      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800735e:	4b6c      	ldr	r3, [pc, #432]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0xe8>
 800736a:	e000      	b.n	800736e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800736c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d063      	beq.n	8007442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800737a:	4b65      	ldr	r3, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007386:	4b62      	ldr	r3, [pc, #392]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800738e:	2b08      	cmp	r3, #8
 8007390:	d11c      	bne.n	80073cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007392:	4b5f      	ldr	r3, [pc, #380]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d116      	bne.n	80073cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739e:	4b5c      	ldr	r3, [pc, #368]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_RCC_OscConfig+0x152>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d001      	beq.n	80073b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e1c4      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b6:	4b56      	ldr	r3, [pc, #344]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4952      	ldr	r1, [pc, #328]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ca:	e03a      	b.n	8007442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d4:	4b4f      	ldr	r3, [pc, #316]	; (8007514 <HAL_RCC_OscConfig+0x2b0>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fd f843 	bl	8004464 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e2:	f7fd f83f 	bl	8004464 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e1a5      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4940      	ldr	r1, [pc, #256]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007410:	4313      	orrs	r3, r2
 8007412:	600b      	str	r3, [r1, #0]
 8007414:	e015      	b.n	8007442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007416:	4b3f      	ldr	r3, [pc, #252]	; (8007514 <HAL_RCC_OscConfig+0x2b0>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fd f822 	bl	8004464 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007424:	f7fd f81e 	bl	8004464 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e184      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d030      	beq.n	80074b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007456:	4b30      	ldr	r3, [pc, #192]	; (8007518 <HAL_RCC_OscConfig+0x2b4>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745c:	f7fd f802 	bl	8004464 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007464:	f7fc fffe 	bl	8004464 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e164      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007476:	4b26      	ldr	r3, [pc, #152]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f0      	beq.n	8007464 <HAL_RCC_OscConfig+0x200>
 8007482:	e015      	b.n	80074b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_RCC_OscConfig+0x2b4>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748a:	f7fc ffeb 	bl	8004464 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007492:	f7fc ffe7 	bl	8004464 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e14d      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a4:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80a0 	beq.w	80075fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10f      	bne.n	80074ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6413      	str	r3, [r2, #64]	; 0x40
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d121      	bne.n	800753e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a07      	ldr	r2, [pc, #28]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 8007500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007506:	f7fc ffad 	bl	8004464 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750c:	e011      	b.n	8007532 <HAL_RCC_OscConfig+0x2ce>
 800750e:	bf00      	nop
 8007510:	40023800 	.word	0x40023800
 8007514:	42470000 	.word	0x42470000
 8007518:	42470e80 	.word	0x42470e80
 800751c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007520:	f7fc ffa0 	bl	8004464 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e106      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCC_OscConfig+0x4e4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0f0      	beq.n	8007520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <HAL_RCC_OscConfig+0x2f0>
 8007546:	4b81      	ldr	r3, [pc, #516]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	4a80      	ldr	r2, [pc, #512]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
 8007552:	e01c      	b.n	800758e <HAL_RCC_OscConfig+0x32a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b05      	cmp	r3, #5
 800755a:	d10c      	bne.n	8007576 <HAL_RCC_OscConfig+0x312>
 800755c:	4b7b      	ldr	r3, [pc, #492]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a7a      	ldr	r2, [pc, #488]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007562:	f043 0304 	orr.w	r3, r3, #4
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
 8007568:	4b78      	ldr	r3, [pc, #480]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a77      	ldr	r2, [pc, #476]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
 8007574:	e00b      	b.n	800758e <HAL_RCC_OscConfig+0x32a>
 8007576:	4b75      	ldr	r3, [pc, #468]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	4a74      	ldr	r2, [pc, #464]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	6713      	str	r3, [r2, #112]	; 0x70
 8007582:	4b72      	ldr	r3, [pc, #456]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	4a71      	ldr	r2, [pc, #452]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007588:	f023 0304 	bic.w	r3, r3, #4
 800758c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d015      	beq.n	80075c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007596:	f7fc ff65 	bl	8004464 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759c:	e00a      	b.n	80075b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fc ff61 	bl	8004464 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0c5      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b4:	4b65      	ldr	r3, [pc, #404]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0ee      	beq.n	800759e <HAL_RCC_OscConfig+0x33a>
 80075c0:	e014      	b.n	80075ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c2:	f7fc ff4f 	bl	8004464 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c8:	e00a      	b.n	80075e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ca:	f7fc ff4b 	bl	8004464 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e0af      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e0:	4b5a      	ldr	r3, [pc, #360]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ee      	bne.n	80075ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f2:	4b56      	ldr	r3, [pc, #344]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	4a55      	ldr	r2, [pc, #340]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 809b 	beq.w	800773e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007608:	4b50      	ldr	r3, [pc, #320]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b08      	cmp	r3, #8
 8007612:	d05c      	beq.n	80076ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d141      	bne.n	80076a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761c:	4b4c      	ldr	r3, [pc, #304]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007622:	f7fc ff1f 	bl	8004464 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800762a:	f7fc ff1b 	bl	8004464 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e081      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763c:	4b43      	ldr	r3, [pc, #268]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f0      	bne.n	800762a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69da      	ldr	r2, [r3, #28]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	019b      	lsls	r3, r3, #6
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	3b01      	subs	r3, #1
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	061b      	lsls	r3, r3, #24
 800766c:	4937      	ldr	r1, [pc, #220]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007672:	4b37      	ldr	r3, [pc, #220]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007678:	f7fc fef4 	bl	8004464 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc fef0 	bl	8004464 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e056      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0f0      	beq.n	8007680 <HAL_RCC_OscConfig+0x41c>
 800769e:	e04e      	b.n	800773e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a6:	f7fc fedd 	bl	8004464 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ae:	f7fc fed9 	bl	8004464 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e03f      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c0:	4b22      	ldr	r3, [pc, #136]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f0      	bne.n	80076ae <HAL_RCC_OscConfig+0x44a>
 80076cc:	e037      	b.n	800773e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e032      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076da:	4b1c      	ldr	r3, [pc, #112]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d028      	beq.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d121      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d11a      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800770a:	4013      	ands	r3, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007710:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007712:	4293      	cmp	r3, r2
 8007714:	d111      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	3b01      	subs	r3, #1
 8007724:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d107      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40007000 	.word	0x40007000
 800774c:	40023800 	.word	0x40023800
 8007750:	42470060 	.word	0x42470060

08007754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0cc      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007768:	4b68      	ldr	r3, [pc, #416]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d90c      	bls.n	8007790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007776:	4b65      	ldr	r3, [pc, #404]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800777e:	4b63      	ldr	r3, [pc, #396]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d001      	beq.n	8007790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0b8      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d020      	beq.n	80077de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077a8:	4b59      	ldr	r3, [pc, #356]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4a58      	ldr	r2, [pc, #352]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077c0:	4b53      	ldr	r3, [pc, #332]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4a52      	ldr	r2, [pc, #328]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077cc:	4b50      	ldr	r3, [pc, #320]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	494d      	ldr	r1, [pc, #308]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d044      	beq.n	8007874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d107      	bne.n	8007802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d119      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e07f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d003      	beq.n	8007812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800780e:	2b03      	cmp	r3, #3
 8007810:	d107      	bne.n	8007822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007812:	4b3f      	ldr	r3, [pc, #252]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e06f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007822:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e067      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007832:	4b37      	ldr	r3, [pc, #220]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f023 0203 	bic.w	r2, r3, #3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	4934      	ldr	r1, [pc, #208]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	4313      	orrs	r3, r2
 8007842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007844:	f7fc fe0e 	bl	8004464 <HAL_GetTick>
 8007848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784a:	e00a      	b.n	8007862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800784c:	f7fc fe0a 	bl	8004464 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f241 3288 	movw	r2, #5000	; 0x1388
 800785a:	4293      	cmp	r3, r2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e04f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 020c 	and.w	r2, r3, #12
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	429a      	cmp	r2, r3
 8007872:	d1eb      	bne.n	800784c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d20c      	bcs.n	800789c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b22      	ldr	r3, [pc, #136]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b20      	ldr	r3, [pc, #128]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e032      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078a8:	4b19      	ldr	r3, [pc, #100]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4916      	ldr	r1, [pc, #88]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078c6:	4b12      	ldr	r3, [pc, #72]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	490e      	ldr	r1, [pc, #56]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078da:	f000 f821 	bl	8007920 <HAL_RCC_GetSysClockFreq>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	091b      	lsrs	r3, r3, #4
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	490a      	ldr	r1, [pc, #40]	; (8007914 <HAL_RCC_ClockConfig+0x1c0>)
 80078ec:	5ccb      	ldrb	r3, [r1, r3]
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <HAL_RCC_ClockConfig+0x1c4>)
 80078f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <HAL_RCC_ClockConfig+0x1c8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fc fd6e 	bl	80043dc <HAL_InitTick>

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40023c00 	.word	0x40023c00
 8007910:	40023800 	.word	0x40023800
 8007914:	0800ea4c 	.word	0x0800ea4c
 8007918:	20000000 	.word	0x20000000
 800791c:	20000370 	.word	0x20000370

08007920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007920:	b5b0      	push	{r4, r5, r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007926:	2100      	movs	r1, #0
 8007928:	6079      	str	r1, [r7, #4]
 800792a:	2100      	movs	r1, #0
 800792c:	60f9      	str	r1, [r7, #12]
 800792e:	2100      	movs	r1, #0
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007932:	2100      	movs	r1, #0
 8007934:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007936:	4952      	ldr	r1, [pc, #328]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8007938:	6889      	ldr	r1, [r1, #8]
 800793a:	f001 010c 	and.w	r1, r1, #12
 800793e:	2908      	cmp	r1, #8
 8007940:	d00d      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0x3e>
 8007942:	2908      	cmp	r1, #8
 8007944:	f200 8094 	bhi.w	8007a70 <HAL_RCC_GetSysClockFreq+0x150>
 8007948:	2900      	cmp	r1, #0
 800794a:	d002      	beq.n	8007952 <HAL_RCC_GetSysClockFreq+0x32>
 800794c:	2904      	cmp	r1, #4
 800794e:	d003      	beq.n	8007958 <HAL_RCC_GetSysClockFreq+0x38>
 8007950:	e08e      	b.n	8007a70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007952:	4b4c      	ldr	r3, [pc, #304]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x164>)
 8007954:	60bb      	str	r3, [r7, #8]
       break;
 8007956:	e08e      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007958:	4b4b      	ldr	r3, [pc, #300]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x168>)
 800795a:	60bb      	str	r3, [r7, #8]
      break;
 800795c:	e08b      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800795e:	4948      	ldr	r1, [pc, #288]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8007960:	6849      	ldr	r1, [r1, #4]
 8007962:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007966:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007968:	4945      	ldr	r1, [pc, #276]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 800796a:	6849      	ldr	r1, [r1, #4]
 800796c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007970:	2900      	cmp	r1, #0
 8007972:	d024      	beq.n	80079be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007974:	4942      	ldr	r1, [pc, #264]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8007976:	6849      	ldr	r1, [r1, #4]
 8007978:	0989      	lsrs	r1, r1, #6
 800797a:	4608      	mov	r0, r1
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007984:	f04f 0500 	mov.w	r5, #0
 8007988:	ea00 0204 	and.w	r2, r0, r4
 800798c:	ea01 0305 	and.w	r3, r1, r5
 8007990:	493d      	ldr	r1, [pc, #244]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x168>)
 8007992:	fb01 f003 	mul.w	r0, r1, r3
 8007996:	2100      	movs	r1, #0
 8007998:	fb01 f102 	mul.w	r1, r1, r2
 800799c:	1844      	adds	r4, r0, r1
 800799e:	493a      	ldr	r1, [pc, #232]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x168>)
 80079a0:	fba2 0101 	umull	r0, r1, r2, r1
 80079a4:	1863      	adds	r3, r4, r1
 80079a6:	4619      	mov	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	f7f8 fe4a 	bl	8000648 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4613      	mov	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e04a      	b.n	8007a54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	461a      	mov	r2, r3
 80079c6:	f04f 0300 	mov.w	r3, #0
 80079ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80079ce:	f04f 0100 	mov.w	r1, #0
 80079d2:	ea02 0400 	and.w	r4, r2, r0
 80079d6:	ea03 0501 	and.w	r5, r3, r1
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	014b      	lsls	r3, r1, #5
 80079e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079ec:	0142      	lsls	r2, r0, #5
 80079ee:	4610      	mov	r0, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	1b00      	subs	r0, r0, r4
 80079f4:	eb61 0105 	sbc.w	r1, r1, r5
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	018b      	lsls	r3, r1, #6
 8007a02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a06:	0182      	lsls	r2, r0, #6
 8007a08:	1a12      	subs	r2, r2, r0
 8007a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a0e:	f04f 0000 	mov.w	r0, #0
 8007a12:	f04f 0100 	mov.w	r1, #0
 8007a16:	00d9      	lsls	r1, r3, #3
 8007a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a1c:	00d0      	lsls	r0, r2, #3
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	1912      	adds	r2, r2, r4
 8007a24:	eb45 0303 	adc.w	r3, r5, r3
 8007a28:	f04f 0000 	mov.w	r0, #0
 8007a2c:	f04f 0100 	mov.w	r1, #0
 8007a30:	0299      	lsls	r1, r3, #10
 8007a32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a36:	0290      	lsls	r0, r2, #10
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	f7f8 fdfe 	bl	8000648 <__aeabi_uldivmod>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4613      	mov	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a54:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	3301      	adds	r3, #1
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6c:	60bb      	str	r3, [r7, #8]
      break;
 8007a6e:	e002      	b.n	8007a76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a70:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x164>)
 8007a72:	60bb      	str	r3, [r7, #8]
      break;
 8007a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a76:	68bb      	ldr	r3, [r7, #8]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	00f42400 	.word	0x00f42400
 8007a88:	017d7840 	.word	0x017d7840

08007a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a92:	681b      	ldr	r3, [r3, #0]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000000 	.word	0x20000000

08007aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa8:	f7ff fff0 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	0a9b      	lsrs	r3, r3, #10
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4903      	ldr	r1, [pc, #12]	; (8007ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	0800ea5c 	.word	0x0800ea5c

08007acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ad0:	f7ff ffdc 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	4b05      	ldr	r3, [pc, #20]	; (8007aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	0b5b      	lsrs	r3, r3, #13
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	4903      	ldr	r1, [pc, #12]	; (8007af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae2:	5ccb      	ldrb	r3, [r1, r3]
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40023800 	.word	0x40023800
 8007af0:	0800ea5c 	.word	0x0800ea5c

08007af4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d105      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d038      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b1c:	4b68      	ldr	r3, [pc, #416]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b22:	f7fc fc9f 	bl	8004464 <HAL_GetTick>
 8007b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b28:	e008      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b2a:	f7fc fc9b 	bl	8004464 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e0bd      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b3c:	4b61      	ldr	r3, [pc, #388]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1f0      	bne.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	019b      	lsls	r3, r3, #6
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	071b      	lsls	r3, r3, #28
 8007b5a:	495a      	ldr	r1, [pc, #360]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b62:	4b57      	ldr	r3, [pc, #348]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b68:	f7fc fc7c 	bl	8004464 <HAL_GetTick>
 8007b6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b70:	f7fc fc78 	bl	8004464 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e09a      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b82:	4b50      	ldr	r3, [pc, #320]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f0      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8083 	beq.w	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	4b48      	ldr	r3, [pc, #288]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	4a47      	ldr	r2, [pc, #284]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007baa:	6413      	str	r3, [r2, #64]	; 0x40
 8007bac:	4b45      	ldr	r3, [pc, #276]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bb8:	4b43      	ldr	r3, [pc, #268]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a42      	ldr	r2, [pc, #264]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc4:	f7fc fc4e 	bl	8004464 <HAL_GetTick>
 8007bc8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bca:	e008      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bcc:	f7fc fc4a 	bl	8004464 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e06c      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bde:	4b3a      	ldr	r3, [pc, #232]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bea:	4b36      	ldr	r3, [pc, #216]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d02f      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d028      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c08:	4b2e      	ldr	r3, [pc, #184]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c12:	4b2e      	ldr	r3, [pc, #184]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c18:	4b2c      	ldr	r3, [pc, #176]	; (8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c1e:	4a29      	ldr	r2, [pc, #164]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c24:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d114      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c30:	f7fc fc18 	bl	8004464 <HAL_GetTick>
 8007c34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c36:	e00a      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c38:	f7fc fc14 	bl	8004464 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e034      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4e:	4b1d      	ldr	r3, [pc, #116]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0ee      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c66:	d10d      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007c68:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7c:	4911      	ldr	r1, [pc, #68]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	608b      	str	r3, [r1, #8]
 8007c82:	e005      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007c84:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a0e      	ldr	r2, [pc, #56]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c8e:	6093      	str	r3, [r2, #8]
 8007c90:	4b0c      	ldr	r3, [pc, #48]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9c:	4909      	ldr	r1, [pc, #36]	; (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7d1a      	ldrb	r2, [r3, #20]
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007cb4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	42470068 	.word	0x42470068
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	40007000 	.word	0x40007000
 8007ccc:	42470e40 	.word	0x42470e40
 8007cd0:	424711e0 	.word	0x424711e0

08007cd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e083      	b.n	8007dee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7f5b      	ldrb	r3, [r3, #29]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7f9 f9e4 	bl	80010c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	22ca      	movs	r2, #202	; 0xca
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2253      	movs	r2, #83	; 0x53
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f897 	bl	8007e46 <RTC_EnterInitMode>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d008      	beq.n	8007d30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	22ff      	movs	r2, #255	; 0xff
 8007d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e05e      	b.n	8007dee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6899      	ldr	r1, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	68d2      	ldr	r2, [r2, #12]
 8007d6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6919      	ldr	r1, [r3, #16]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	041a      	lsls	r2, r3, #16
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10e      	bne.n	8007dbc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f829 	bl	8007df6 <HAL_RTC_WaitForSynchro>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	22ff      	movs	r2, #255	; 0xff
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e018      	b.n	8007dee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	22ff      	movs	r2, #255	; 0xff
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
  }
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e12:	f7fc fb27 	bl	8004464 <HAL_GetTick>
 8007e16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e18:	e009      	b.n	8007e2e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e1a:	f7fc fb23 	bl	8004464 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e28:	d901      	bls.n	8007e2e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e007      	b.n	8007e3e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0ee      	beq.n	8007e1a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d119      	bne.n	8007e94 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e6a:	f7fc fafb 	bl	8004464 <HAL_GetTick>
 8007e6e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e70:	e009      	b.n	8007e86 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e72:	f7fc faf7 	bl	8004464 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e80:	d901      	bls.n	8007e86 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e007      	b.n	8007e96 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0ee      	beq.n	8007e72 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e041      	b.n	8007f34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7f9 f913 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f000 f8f1 	bl	80080c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_TIM_ConfigClockSource+0x18>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e0b3      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x180>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8c:	d03e      	beq.n	800800c <HAL_TIM_ConfigClockSource+0xd0>
 8007f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f92:	f200 8087 	bhi.w	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	f000 8085 	beq.w	80080a8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	d87f      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fa4:	2b70      	cmp	r3, #112	; 0x70
 8007fa6:	d01a      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0xa2>
 8007fa8:	2b70      	cmp	r3, #112	; 0x70
 8007faa:	d87b      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fac:	2b60      	cmp	r3, #96	; 0x60
 8007fae:	d050      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0x116>
 8007fb0:	2b60      	cmp	r3, #96	; 0x60
 8007fb2:	d877      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fb4:	2b50      	cmp	r3, #80	; 0x50
 8007fb6:	d03c      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0xf6>
 8007fb8:	2b50      	cmp	r3, #80	; 0x50
 8007fba:	d873      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d058      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0x136>
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d86f      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fc4:	2b30      	cmp	r3, #48	; 0x30
 8007fc6:	d064      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x156>
 8007fc8:	2b30      	cmp	r3, #48	; 0x30
 8007fca:	d86b      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	d060      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x156>
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d867      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d05c      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x156>
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d05a      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007fdc:	e062      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f000 f963 	bl	80082b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008000:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	609a      	str	r2, [r3, #8]
      break;
 800800a:	e04e      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6899      	ldr	r1, [r3, #8]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f000 f94c 	bl	80082b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800802e:	609a      	str	r2, [r3, #8]
      break;
 8008030:	e03b      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6859      	ldr	r1, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	461a      	mov	r2, r3
 8008040:	f000 f8c0 	bl	80081c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2150      	movs	r1, #80	; 0x50
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f919 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8008050:	e02b      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6859      	ldr	r1, [r3, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	461a      	mov	r2, r3
 8008060:	f000 f8df 	bl	8008222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2160      	movs	r1, #96	; 0x60
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f909 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8008070:	e01b      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	461a      	mov	r2, r3
 8008080:	f000 f8a0 	bl	80081c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2140      	movs	r1, #64	; 0x40
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f8f9 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8008090:	e00b      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f000 f8f0 	bl	8008282 <TIM_ITRx_SetConfig>
        break;
 80080a2:	e002      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a34      	ldr	r2, [pc, #208]	; (80081a8 <TIM_Base_SetConfig+0xe4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00f      	beq.n	80080fc <TIM_Base_SetConfig+0x38>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e2:	d00b      	beq.n	80080fc <TIM_Base_SetConfig+0x38>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a31      	ldr	r2, [pc, #196]	; (80081ac <TIM_Base_SetConfig+0xe8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d007      	beq.n	80080fc <TIM_Base_SetConfig+0x38>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a30      	ldr	r2, [pc, #192]	; (80081b0 <TIM_Base_SetConfig+0xec>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_Base_SetConfig+0x38>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2f      	ldr	r2, [pc, #188]	; (80081b4 <TIM_Base_SetConfig+0xf0>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a25      	ldr	r2, [pc, #148]	; (80081a8 <TIM_Base_SetConfig+0xe4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01b      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811c:	d017      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a22      	ldr	r2, [pc, #136]	; (80081ac <TIM_Base_SetConfig+0xe8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <TIM_Base_SetConfig+0xec>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00f      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <TIM_Base_SetConfig+0xf0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00b      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <TIM_Base_SetConfig+0xf4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d007      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a1e      	ldr	r2, [pc, #120]	; (80081bc <TIM_Base_SetConfig+0xf8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <TIM_Base_SetConfig+0x8a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <TIM_Base_SetConfig+0xfc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d108      	bne.n	8008160 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <TIM_Base_SetConfig+0xe4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d103      	bne.n	8008194 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	615a      	str	r2, [r3, #20]
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40000c00 	.word	0x40000c00
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800

080081c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f023 0201 	bic.w	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f023 030a 	bic.w	r3, r3, #10
 8008200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	f023 0210 	bic.w	r2, r3, #16
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800824c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	031b      	lsls	r3, r3, #12
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800825e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	f043 0307 	orr.w	r3, r3, #7
 80082a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	021a      	lsls	r2, r3, #8
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	431a      	orrs	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4313      	orrs	r3, r2
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	609a      	str	r2, [r3, #8]
}
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800830c:	2302      	movs	r3, #2
 800830e:	e050      	b.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d018      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835c:	d013      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a18      	ldr	r2, [pc, #96]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00e      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a16      	ldr	r2, [pc, #88]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d009      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a15      	ldr	r2, [pc, #84]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d004      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d10c      	bne.n	80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800838c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	4313      	orrs	r3, r2
 8008396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40014000 	.word	0x40014000

080083d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e03f      	b.n	8008466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7f8 fe9a 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2224      	movs	r2, #36	; 0x24
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc09 	bl	8008c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800842c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800843c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800844c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e021      	b.n	80084c4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008496:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7f8 fed7 	bl	800124c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d130      	bne.n	8008548 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_UART_Transmit_IT+0x26>
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e029      	b.n	800854a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_UART_Transmit_IT+0x38>
 8008500:	2302      	movs	r3, #2
 8008502:	e022      	b.n	800854a <HAL_UART_Transmit_IT+0x7e>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2221      	movs	r2, #33	; 0x21
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008542:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008548:	2302      	movs	r3, #2
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	4613      	mov	r3, r2
 8008562:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b20      	cmp	r3, #32
 800856e:	d11d      	bne.n	80085ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UART_Receive_IT+0x26>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e016      	b.n	80085ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <HAL_UART_Receive_IT+0x38>
 800858a:	2302      	movs	r3, #2
 800858c:	e00f      	b.n	80085ae <HAL_UART_Receive_IT+0x58>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	461a      	mov	r2, r3
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 f9ca 	bl	800893c <UART_Start_Receive_IT>
 80085a8:	4603      	mov	r3, r0
 80085aa:	e000      	b.n	80085ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	; 0x28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80085d8:	2300      	movs	r3, #0
 80085da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10d      	bne.n	800860a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <HAL_UART_IRQHandler+0x52>
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa7d 	bl	8008b02 <UART_Receive_IT>
      return;
 8008608:	e17c      	b.n	8008904 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80b1 	beq.w	8008774 <HAL_UART_IRQHandler+0x1bc>
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_UART_IRQHandler+0x70>
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80a6 	beq.w	8008774 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <HAL_UART_IRQHandler+0x90>
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f043 0201 	orr.w	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <HAL_UART_IRQHandler+0xb0>
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d005      	beq.n	8008668 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	f043 0202 	orr.w	r2, r3, #2
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_UART_IRQHandler+0xd0>
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	f043 0204 	orr.w	r2, r3, #4
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00f      	beq.n	80086b2 <HAL_UART_IRQHandler+0xfa>
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <HAL_UART_IRQHandler+0xee>
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f043 0208 	orr.w	r2, r3, #8
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 811f 	beq.w	80088fa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <HAL_UART_IRQHandler+0x11e>
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f003 0320 	and.w	r3, r3, #32
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fa16 	bl	8008b02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	bf0c      	ite	eq
 80086e4:	2301      	moveq	r3, #1
 80086e6:	2300      	movne	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <HAL_UART_IRQHandler+0x146>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d031      	beq.n	8008762 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f956 	bl	80089b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d123      	bne.n	800875a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008720:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d013      	beq.n	8008752 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	4a77      	ldr	r2, [pc, #476]	; (800890c <HAL_UART_IRQHandler+0x354>)
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008736:	4618      	mov	r0, r3
 8008738:	f7fc f877 	bl	800482a <HAL_DMA_Abort_IT>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d016      	beq.n	8008770 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008750:	e00e      	b.n	8008770 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f8dc 	bl	8008910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008758:	e00a      	b.n	8008770 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f8d8 	bl	8008910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	e006      	b.n	8008770 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8d4 	bl	8008910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800876e:	e0c4      	b.n	80088fa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008770:	bf00      	nop
    return;
 8008772:	e0c2      	b.n	80088fa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	2b01      	cmp	r3, #1
 800877a:	f040 80a2 	bne.w	80088c2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 809c 	beq.w	80088c2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8096 	beq.w	80088c2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d14f      	bne.n	800885a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80087c4:	8a3b      	ldrh	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 8099 	beq.w	80088fe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087d0:	8a3a      	ldrh	r2, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	f080 8093 	bcs.w	80088fe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8a3a      	ldrh	r2, [r7, #16]
 80087dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e8:	d02b      	beq.n	8008842 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087f8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	695a      	ldr	r2, [r3, #20]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008818:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0210 	bic.w	r2, r2, #16
 8008836:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	4618      	mov	r0, r3
 800883e:	f7fb ff84 	bl	800474a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884a:	b29b      	uxth	r3, r3
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	b29b      	uxth	r3, r3
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f866 	bl	8008924 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008858:	e051      	b.n	80088fe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008862:	b29b      	uxth	r3, r3
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d047      	beq.n	8008902 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008872:	8a7b      	ldrh	r3, [r7, #18]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d044      	beq.n	8008902 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008886:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695a      	ldr	r2, [r3, #20]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f022 0210 	bic.w	r2, r2, #16
 80088b4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088b6:	8a7b      	ldrh	r3, [r7, #18]
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f832 	bl	8008924 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088c0:	e01f      	b.n	8008902 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d008      	beq.n	80088de <HAL_UART_IRQHandler+0x326>
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8ab 	bl	8008a32 <UART_Transmit_IT>
    return;
 80088dc:	e012      	b.n	8008904 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <HAL_UART_IRQHandler+0x34c>
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d008      	beq.n	8008904 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f8ed 	bl	8008ad2 <UART_EndTransmit_IT>
    return;
 80088f8:	e004      	b.n	8008904 <HAL_UART_IRQHandler+0x34c>
    return;
 80088fa:	bf00      	nop
 80088fc:	e002      	b.n	8008904 <HAL_UART_IRQHandler+0x34c>
      return;
 80088fe:	bf00      	nop
 8008900:	e000      	b.n	8008904 <HAL_UART_IRQHandler+0x34c>
      return;
 8008902:	bf00      	nop
  }
}
 8008904:	3728      	adds	r7, #40	; 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08008a0b 	.word	0x08008a0b

08008910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	88fa      	ldrh	r2, [r7, #6]
 8008954:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2222      	movs	r2, #34	; 0x22
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008980:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695a      	ldr	r2, [r3, #20]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0201 	orr.w	r2, r2, #1
 8008990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0220 	orr.w	r2, r2, #32
 80089a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d107      	bne.n	80089f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0210 	bic.w	r2, r2, #16
 80089ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff ff73 	bl	8008910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b21      	cmp	r3, #33	; 0x21
 8008a44:	d13e      	bne.n	8008ac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d114      	bne.n	8008a7a <UART_Transmit_IT+0x48>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d110      	bne.n	8008a7a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	1c9a      	adds	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	621a      	str	r2, [r3, #32]
 8008a78:	e008      	b.n	8008a8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	1c59      	adds	r1, r3, #1
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6211      	str	r1, [r2, #32]
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10f      	bne.n	8008ac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008abe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e000      	b.n	8008ac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ac4:	2302      	movs	r3, #2
  }
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fa fd7a 	bl	80035ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b22      	cmp	r3, #34	; 0x22
 8008b14:	f040 8087 	bne.w	8008c26 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b20:	d117      	bne.n	8008b52 <UART_Receive_IT+0x50>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d113      	bne.n	8008b52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	1c9a      	adds	r2, r3, #2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8008b50:	e026      	b.n	8008ba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b64:	d007      	beq.n	8008b76 <UART_Receive_IT+0x74>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <UART_Receive_IT+0x82>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e008      	b.n	8008b96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	4619      	mov	r1, r3
 8008bae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d136      	bne.n	8008c22 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0220 	bic.w	r2, r2, #32
 8008bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d10e      	bne.n	8008c12 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0210 	bic.w	r2, r2, #16
 8008c02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff fe8a 	bl	8008924 <HAL_UARTEx_RxEventCallback>
 8008c10:	e002      	b.n	8008c18 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fa fcc8 	bl	80035a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e002      	b.n	8008c28 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e000      	b.n	8008c28 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008c26:	2302      	movs	r3, #2
  }
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	b09f      	sub	sp, #124	; 0x7c
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c46:	68d9      	ldr	r1, [r3, #12]
 8008c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	ea40 0301 	orr.w	r3, r0, r1
 8008c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	431a      	orrs	r2, r3
 8008c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c74:	f021 010c 	bic.w	r1, r1, #12
 8008c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c7e:	430b      	orrs	r3, r1
 8008c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8e:	6999      	ldr	r1, [r3, #24]
 8008c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	ea40 0301 	orr.w	r3, r0, r1
 8008c98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4bc5      	ldr	r3, [pc, #788]	; (8008fb4 <UART_SetConfig+0x384>)
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d004      	beq.n	8008cae <UART_SetConfig+0x7e>
 8008ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	4bc3      	ldr	r3, [pc, #780]	; (8008fb8 <UART_SetConfig+0x388>)
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d103      	bne.n	8008cb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cae:	f7fe ff0d 	bl	8007acc <HAL_RCC_GetPCLK2Freq>
 8008cb2:	6778      	str	r0, [r7, #116]	; 0x74
 8008cb4:	e002      	b.n	8008cbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cb6:	f7fe fef5 	bl	8007aa4 <HAL_RCC_GetPCLK1Freq>
 8008cba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc4:	f040 80b6 	bne.w	8008e34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cca:	461c      	mov	r4, r3
 8008ccc:	f04f 0500 	mov.w	r5, #0
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	1891      	adds	r1, r2, r2
 8008cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8008cd8:	415b      	adcs	r3, r3
 8008cda:	647b      	str	r3, [r7, #68]	; 0x44
 8008cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ce0:	1912      	adds	r2, r2, r4
 8008ce2:	eb45 0303 	adc.w	r3, r5, r3
 8008ce6:	f04f 0000 	mov.w	r0, #0
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	00d9      	lsls	r1, r3, #3
 8008cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cf4:	00d0      	lsls	r0, r2, #3
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	1911      	adds	r1, r2, r4
 8008cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8008cfe:	416b      	adcs	r3, r5
 8008d00:	667b      	str	r3, [r7, #100]	; 0x64
 8008d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	1891      	adds	r1, r2, r2
 8008d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d10:	415b      	adcs	r3, r3
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008d1c:	f7f7 fc94 	bl	8000648 <__aeabi_uldivmod>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4ba5      	ldr	r3, [pc, #660]	; (8008fbc <UART_SetConfig+0x38c>)
 8008d26:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2a:	095b      	lsrs	r3, r3, #5
 8008d2c:	011e      	lsls	r6, r3, #4
 8008d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d30:	461c      	mov	r4, r3
 8008d32:	f04f 0500 	mov.w	r5, #0
 8008d36:	4622      	mov	r2, r4
 8008d38:	462b      	mov	r3, r5
 8008d3a:	1891      	adds	r1, r2, r2
 8008d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d3e:	415b      	adcs	r3, r3
 8008d40:	637b      	str	r3, [r7, #52]	; 0x34
 8008d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d46:	1912      	adds	r2, r2, r4
 8008d48:	eb45 0303 	adc.w	r3, r5, r3
 8008d4c:	f04f 0000 	mov.w	r0, #0
 8008d50:	f04f 0100 	mov.w	r1, #0
 8008d54:	00d9      	lsls	r1, r3, #3
 8008d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d5a:	00d0      	lsls	r0, r2, #3
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	1911      	adds	r1, r2, r4
 8008d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d64:	416b      	adcs	r3, r5
 8008d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	1891      	adds	r1, r2, r2
 8008d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d76:	415b      	adcs	r3, r3
 8008d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008d82:	f7f7 fc61 	bl	8000648 <__aeabi_uldivmod>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4b8c      	ldr	r3, [pc, #560]	; (8008fbc <UART_SetConfig+0x38c>)
 8008d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	2164      	movs	r1, #100	; 0x64
 8008d94:	fb01 f303 	mul.w	r3, r1, r3
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	3332      	adds	r3, #50	; 0x32
 8008d9e:	4a87      	ldr	r2, [pc, #540]	; (8008fbc <UART_SetConfig+0x38c>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dac:	441e      	add	r6, r3
 8008dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008db0:	4618      	mov	r0, r3
 8008db2:	f04f 0100 	mov.w	r1, #0
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	1894      	adds	r4, r2, r2
 8008dbc:	623c      	str	r4, [r7, #32]
 8008dbe:	415b      	adcs	r3, r3
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dc6:	1812      	adds	r2, r2, r0
 8008dc8:	eb41 0303 	adc.w	r3, r1, r3
 8008dcc:	f04f 0400 	mov.w	r4, #0
 8008dd0:	f04f 0500 	mov.w	r5, #0
 8008dd4:	00dd      	lsls	r5, r3, #3
 8008dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dda:	00d4      	lsls	r4, r2, #3
 8008ddc:	4622      	mov	r2, r4
 8008dde:	462b      	mov	r3, r5
 8008de0:	1814      	adds	r4, r2, r0
 8008de2:	653c      	str	r4, [r7, #80]	; 0x50
 8008de4:	414b      	adcs	r3, r1
 8008de6:	657b      	str	r3, [r7, #84]	; 0x54
 8008de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	461a      	mov	r2, r3
 8008dee:	f04f 0300 	mov.w	r3, #0
 8008df2:	1891      	adds	r1, r2, r2
 8008df4:	61b9      	str	r1, [r7, #24]
 8008df6:	415b      	adcs	r3, r3
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008e02:	f7f7 fc21 	bl	8000648 <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4b6c      	ldr	r3, [pc, #432]	; (8008fbc <UART_SetConfig+0x38c>)
 8008e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2164      	movs	r1, #100	; 0x64
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a67      	ldr	r2, [pc, #412]	; (8008fbc <UART_SetConfig+0x38c>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 0207 	and.w	r2, r3, #7
 8008e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4432      	add	r2, r6
 8008e30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e32:	e0b9      	b.n	8008fa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e36:	461c      	mov	r4, r3
 8008e38:	f04f 0500 	mov.w	r5, #0
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	462b      	mov	r3, r5
 8008e40:	1891      	adds	r1, r2, r2
 8008e42:	6139      	str	r1, [r7, #16]
 8008e44:	415b      	adcs	r3, r3
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e4c:	1912      	adds	r2, r2, r4
 8008e4e:	eb45 0303 	adc.w	r3, r5, r3
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f04f 0100 	mov.w	r1, #0
 8008e5a:	00d9      	lsls	r1, r3, #3
 8008e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e60:	00d0      	lsls	r0, r2, #3
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	eb12 0804 	adds.w	r8, r2, r4
 8008e6a:	eb43 0905 	adc.w	r9, r3, r5
 8008e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	f04f 0200 	mov.w	r2, #0
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	008b      	lsls	r3, r1, #2
 8008e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e86:	0082      	lsls	r2, r0, #2
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	f7f7 fbdc 	bl	8000648 <__aeabi_uldivmod>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <UART_SetConfig+0x38c>)
 8008e96:	fba3 2302 	umull	r2, r3, r3, r2
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	011e      	lsls	r6, r3, #4
 8008e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f04f 0100 	mov.w	r1, #0
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	1894      	adds	r4, r2, r2
 8008eac:	60bc      	str	r4, [r7, #8]
 8008eae:	415b      	adcs	r3, r3
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eb6:	1812      	adds	r2, r2, r0
 8008eb8:	eb41 0303 	adc.w	r3, r1, r3
 8008ebc:	f04f 0400 	mov.w	r4, #0
 8008ec0:	f04f 0500 	mov.w	r5, #0
 8008ec4:	00dd      	lsls	r5, r3, #3
 8008ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008eca:	00d4      	lsls	r4, r2, #3
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	1814      	adds	r4, r2, r0
 8008ed2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008ed4:	414b      	adcs	r3, r1
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f04f 0100 	mov.w	r1, #0
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	008b      	lsls	r3, r1, #2
 8008eec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ef0:	0082      	lsls	r2, r0, #2
 8008ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008ef6:	f7f7 fba7 	bl	8000648 <__aeabi_uldivmod>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4b2f      	ldr	r3, [pc, #188]	; (8008fbc <UART_SetConfig+0x38c>)
 8008f00:	fba3 1302 	umull	r1, r3, r3, r2
 8008f04:	095b      	lsrs	r3, r3, #5
 8008f06:	2164      	movs	r1, #100	; 0x64
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	3332      	adds	r3, #50	; 0x32
 8008f12:	4a2a      	ldr	r2, [pc, #168]	; (8008fbc <UART_SetConfig+0x38c>)
 8008f14:	fba2 2303 	umull	r2, r3, r2, r3
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f1e:	441e      	add	r6, r3
 8008f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f22:	4618      	mov	r0, r3
 8008f24:	f04f 0100 	mov.w	r1, #0
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	1894      	adds	r4, r2, r2
 8008f2e:	603c      	str	r4, [r7, #0]
 8008f30:	415b      	adcs	r3, r3
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f38:	1812      	adds	r2, r2, r0
 8008f3a:	eb41 0303 	adc.w	r3, r1, r3
 8008f3e:	f04f 0400 	mov.w	r4, #0
 8008f42:	f04f 0500 	mov.w	r5, #0
 8008f46:	00dd      	lsls	r5, r3, #3
 8008f48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f4c:	00d4      	lsls	r4, r2, #3
 8008f4e:	4622      	mov	r2, r4
 8008f50:	462b      	mov	r3, r5
 8008f52:	eb12 0a00 	adds.w	sl, r2, r0
 8008f56:	eb43 0b01 	adc.w	fp, r3, r1
 8008f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f04f 0100 	mov.w	r1, #0
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	008b      	lsls	r3, r1, #2
 8008f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f72:	0082      	lsls	r2, r0, #2
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	f7f7 fb66 	bl	8000648 <__aeabi_uldivmod>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <UART_SetConfig+0x38c>)
 8008f82:	fba3 1302 	umull	r1, r3, r3, r2
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	2164      	movs	r1, #100	; 0x64
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	011b      	lsls	r3, r3, #4
 8008f92:	3332      	adds	r3, #50	; 0x32
 8008f94:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <UART_SetConfig+0x38c>)
 8008f96:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9a:	095b      	lsrs	r3, r3, #5
 8008f9c:	f003 020f 	and.w	r2, r3, #15
 8008fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4432      	add	r2, r6
 8008fa6:	609a      	str	r2, [r3, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	377c      	adds	r7, #124	; 0x7c
 8008fac:	46bd      	mov	sp, r7
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40011000 	.word	0x40011000
 8008fb8:	40011400 	.word	0x40011400
 8008fbc:	51eb851f 	.word	0x51eb851f

08008fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	f107 001c 	add.w	r0, r7, #28
 8008fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d122      	bne.n	800901e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009002:	2b01      	cmp	r3, #1
 8009004:	d105      	bne.n	8009012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fac6 	bl	800a5a4 <USB_CoreReset>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e01a      	b.n	8009054 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 faba 	bl	800a5a4 <USB_CoreReset>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d106      	bne.n	8009048 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
 8009046:	e005      	b.n	8009054 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	2b01      	cmp	r3, #1
 8009058:	d10b      	bne.n	8009072 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f043 0206 	orr.w	r2, r3, #6
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f043 0220 	orr.w	r2, r3, #32
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800907e:	b004      	add	sp, #16
 8009080:	4770      	bx	lr
	...

08009084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d165      	bne.n	8009164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4a41      	ldr	r2, [pc, #260]	; (80091a0 <USB_SetTurnaroundTime+0x11c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d906      	bls.n	80090ae <USB_SetTurnaroundTime+0x2a>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4a40      	ldr	r2, [pc, #256]	; (80091a4 <USB_SetTurnaroundTime+0x120>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d202      	bcs.n	80090ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090a8:	230f      	movs	r3, #15
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e062      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a3c      	ldr	r2, [pc, #240]	; (80091a4 <USB_SetTurnaroundTime+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d306      	bcc.n	80090c4 <USB_SetTurnaroundTime+0x40>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4a3b      	ldr	r2, [pc, #236]	; (80091a8 <USB_SetTurnaroundTime+0x124>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d202      	bcs.n	80090c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090be:	230e      	movs	r3, #14
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e057      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a38      	ldr	r2, [pc, #224]	; (80091a8 <USB_SetTurnaroundTime+0x124>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d306      	bcc.n	80090da <USB_SetTurnaroundTime+0x56>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a37      	ldr	r2, [pc, #220]	; (80091ac <USB_SetTurnaroundTime+0x128>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d202      	bcs.n	80090da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090d4:	230d      	movs	r3, #13
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e04c      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a33      	ldr	r2, [pc, #204]	; (80091ac <USB_SetTurnaroundTime+0x128>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d306      	bcc.n	80090f0 <USB_SetTurnaroundTime+0x6c>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a32      	ldr	r2, [pc, #200]	; (80091b0 <USB_SetTurnaroundTime+0x12c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d802      	bhi.n	80090f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090ea:	230c      	movs	r3, #12
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e041      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a2f      	ldr	r2, [pc, #188]	; (80091b0 <USB_SetTurnaroundTime+0x12c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d906      	bls.n	8009106 <USB_SetTurnaroundTime+0x82>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a2e      	ldr	r2, [pc, #184]	; (80091b4 <USB_SetTurnaroundTime+0x130>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d802      	bhi.n	8009106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009100:	230b      	movs	r3, #11
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e036      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a2a      	ldr	r2, [pc, #168]	; (80091b4 <USB_SetTurnaroundTime+0x130>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d906      	bls.n	800911c <USB_SetTurnaroundTime+0x98>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a29      	ldr	r2, [pc, #164]	; (80091b8 <USB_SetTurnaroundTime+0x134>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d802      	bhi.n	800911c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009116:	230a      	movs	r3, #10
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e02b      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4a26      	ldr	r2, [pc, #152]	; (80091b8 <USB_SetTurnaroundTime+0x134>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d906      	bls.n	8009132 <USB_SetTurnaroundTime+0xae>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4a25      	ldr	r2, [pc, #148]	; (80091bc <USB_SetTurnaroundTime+0x138>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d202      	bcs.n	8009132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800912c:	2309      	movs	r3, #9
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e020      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	4a21      	ldr	r2, [pc, #132]	; (80091bc <USB_SetTurnaroundTime+0x138>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d306      	bcc.n	8009148 <USB_SetTurnaroundTime+0xc4>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	4a20      	ldr	r2, [pc, #128]	; (80091c0 <USB_SetTurnaroundTime+0x13c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d802      	bhi.n	8009148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009142:	2308      	movs	r3, #8
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	e015      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4a1d      	ldr	r2, [pc, #116]	; (80091c0 <USB_SetTurnaroundTime+0x13c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d906      	bls.n	800915e <USB_SetTurnaroundTime+0xda>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	4a1c      	ldr	r2, [pc, #112]	; (80091c4 <USB_SetTurnaroundTime+0x140>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d202      	bcs.n	800915e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009158:	2307      	movs	r3, #7
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e00a      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800915e:	2306      	movs	r3, #6
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e007      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800916a:	2309      	movs	r3, #9
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e001      	b.n	8009174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009170:	2309      	movs	r3, #9
 8009172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	029b      	lsls	r3, r3, #10
 8009188:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800918c:	431a      	orrs	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	00d8acbf 	.word	0x00d8acbf
 80091a4:	00e4e1c0 	.word	0x00e4e1c0
 80091a8:	00f42400 	.word	0x00f42400
 80091ac:	01067380 	.word	0x01067380
 80091b0:	011a499f 	.word	0x011a499f
 80091b4:	01312cff 	.word	0x01312cff
 80091b8:	014ca43f 	.word	0x014ca43f
 80091bc:	016e3600 	.word	0x016e3600
 80091c0:	01a6ab1f 	.word	0x01a6ab1f
 80091c4:	01e84800 	.word	0x01e84800

080091c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f043 0201 	orr.w	r2, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f023 0201 	bic.w	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d106      	bne.n	8009238 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60da      	str	r2, [r3, #12]
 8009236:	e00b      	b.n	8009250 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	e001      	b.n	8009250 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e003      	b.n	8009258 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009250:	2032      	movs	r0, #50	; 0x32
 8009252:	f7fb f913 	bl	800447c <HAL_Delay>

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009260:	b084      	sub	sp, #16
 8009262:	b580      	push	{r7, lr}
 8009264:	b086      	sub	sp, #24
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800926e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800927a:	2300      	movs	r3, #0
 800927c:	613b      	str	r3, [r7, #16]
 800927e:	e009      	b.n	8009294 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	3340      	adds	r3, #64	; 0x40
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3301      	adds	r3, #1
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	2b0e      	cmp	r3, #14
 8009298:	d9f2      	bls.n	8009280 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800929a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d11c      	bne.n	80092da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ae:	f043 0302 	orr.w	r3, r3, #2
 80092b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
 80092d8:	e00b      	b.n	80092f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092f8:	461a      	mov	r2, r3
 80092fa:	2300      	movs	r3, #0
 80092fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009304:	4619      	mov	r1, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930c:	461a      	mov	r2, r3
 800930e:	680b      	ldr	r3, [r1, #0]
 8009310:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	2b01      	cmp	r3, #1
 8009316:	d10c      	bne.n	8009332 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f949 	bl	80095b8 <USB_SetDevSpeed>
 8009326:	e008      	b.n	800933a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009328:	2101      	movs	r1, #1
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f944 	bl	80095b8 <USB_SetDevSpeed>
 8009330:	e003      	b.n	800933a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009332:	2103      	movs	r1, #3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f93f 	bl	80095b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800933a:	2110      	movs	r1, #16
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f8f3 	bl	8009528 <USB_FlushTxFifo>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f911 	bl	8009574 <USB_FlushRxFifo>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	461a      	mov	r2, r3
 8009364:	2300      	movs	r3, #0
 8009366:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	461a      	mov	r2, r3
 8009370:	2300      	movs	r3, #0
 8009372:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	461a      	mov	r2, r3
 800937c:	2300      	movs	r3, #0
 800937e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009380:	2300      	movs	r3, #0
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	e043      	b.n	800940e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800939c:	d118      	bne.n	80093d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	461a      	mov	r2, r3
 80093b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	e013      	b.n	80093e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c6:	461a      	mov	r2, r3
 80093c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	e008      	b.n	80093e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	461a      	mov	r2, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ee:	461a      	mov	r2, r3
 80093f0:	2300      	movs	r3, #0
 80093f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	461a      	mov	r2, r3
 8009402:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009406:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3301      	adds	r3, #1
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	429a      	cmp	r2, r3
 8009414:	d3b7      	bcc.n	8009386 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009416:	2300      	movs	r3, #0
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	e043      	b.n	80094a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800942e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009432:	d118      	bne.n	8009466 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	461a      	mov	r2, r3
 8009448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	e013      	b.n	8009478 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945c:	461a      	mov	r2, r3
 800945e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e008      	b.n	8009478 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	461a      	mov	r2, r3
 8009474:	2300      	movs	r3, #0
 8009476:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009484:	461a      	mov	r2, r3
 8009486:	2300      	movs	r3, #0
 8009488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	461a      	mov	r2, r3
 8009498:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800949c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	3301      	adds	r3, #1
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3b7      	bcc.n	800941c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f043 0210 	orr.w	r2, r3, #16
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <USB_DevInit+0x2c4>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f043 0208 	orr.w	r2, r3, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d107      	bne.n	8009514 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800950c:	f043 0304 	orr.w	r3, r3, #4
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009514:	7dfb      	ldrb	r3, [r7, #23]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009520:	b004      	add	sp, #16
 8009522:	4770      	bx	lr
 8009524:	803c3800 	.word	0x803c3800

08009528 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	019b      	lsls	r3, r3, #6
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4a09      	ldr	r2, [pc, #36]	; (8009570 <USB_FlushTxFifo+0x48>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d901      	bls.n	8009554 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e006      	b.n	8009562 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b20      	cmp	r3, #32
 800955e:	d0f0      	beq.n	8009542 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	00030d40 	.word	0x00030d40

08009574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2210      	movs	r2, #16
 8009584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3301      	adds	r3, #1
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4a09      	ldr	r2, [pc, #36]	; (80095b4 <USB_FlushRxFifo+0x40>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d901      	bls.n	8009598 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e006      	b.n	80095a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d0f0      	beq.n	8009586 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	00030d40 	.word	0x00030d40

080095b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d8:	4313      	orrs	r3, r2
 80095da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f003 0306 	and.w	r3, r3, #6
 8009602:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]
 800960e:	e00a      	b.n	8009626 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d002      	beq.n	800961c <USB_GetDevSpeed+0x32>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b06      	cmp	r3, #6
 800961a:	d102      	bne.n	8009622 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800961c:	2302      	movs	r3, #2
 800961e:	75fb      	strb	r3, [r7, #23]
 8009620:	e001      	b.n	8009626 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009622:	230f      	movs	r3, #15
 8009624:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
}
 8009628:	4618      	mov	r0, r3
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d13a      	bne.n	80096c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	69da      	ldr	r2, [r3, #28]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	b29b      	uxth	r3, r3
 8009668:	68f9      	ldr	r1, [r7, #12]
 800966a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800966e:	4313      	orrs	r3, r2
 8009670:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d155      	bne.n	8009734 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	78db      	ldrb	r3, [r3, #3]
 80096a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	059b      	lsls	r3, r3, #22
 80096aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ac:	4313      	orrs	r3, r2
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c2:	6013      	str	r3, [r2, #0]
 80096c4:	e036      	b.n	8009734 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096cc:	69da      	ldr	r2, [r3, #28]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	2101      	movs	r1, #1
 80096d8:	fa01 f303 	lsl.w	r3, r1, r3
 80096dc:	041b      	lsls	r3, r3, #16
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e4:	4313      	orrs	r3, r2
 80096e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d11a      	bne.n	8009734 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	78db      	ldrb	r3, [r3, #3]
 8009718:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800971a:	430b      	orrs	r3, r1
 800971c:	4313      	orrs	r3, r2
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800972e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009732:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	785b      	ldrb	r3, [r3, #1]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d161      	bne.n	8009824 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009776:	d11f      	bne.n	80097b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009796:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	2101      	movs	r1, #1
 80097ca:	fa01 f303 	lsl.w	r3, r1, r3
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	43db      	mvns	r3, r3
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097d8:	4013      	ands	r3, r2
 80097da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e2:	69da      	ldr	r2, [r3, #28]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	2101      	movs	r1, #1
 80097ee:	fa01 f303 	lsl.w	r3, r1, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	43db      	mvns	r3, r3
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097fc:	4013      	ands	r3, r2
 80097fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	0159      	lsls	r1, r3, #5
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	440b      	add	r3, r1
 8009816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981a:	4619      	mov	r1, r3
 800981c:	4b35      	ldr	r3, [pc, #212]	; (80098f4 <USB_DeactivateEndpoint+0x1b0>)
 800981e:	4013      	ands	r3, r2
 8009820:	600b      	str	r3, [r1, #0]
 8009822:	e060      	b.n	80098e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800983a:	d11f      	bne.n	800987c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800985a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	440a      	add	r2, r1
 8009872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800987a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f303 	lsl.w	r3, r1, r3
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	43db      	mvns	r3, r3
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800989c:	4013      	ands	r3, r2
 800989e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	2101      	movs	r1, #1
 80098b2:	fa01 f303 	lsl.w	r3, r1, r3
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	43db      	mvns	r3, r3
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098c0:	4013      	ands	r3, r2
 80098c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	0159      	lsls	r1, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	440b      	add	r3, r1
 80098da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098de:	4619      	mov	r1, r3
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <USB_DeactivateEndpoint+0x1b4>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	ec337800 	.word	0xec337800
 80098f8:	eff37800 	.word	0xeff37800

080098fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b01      	cmp	r3, #1
 800991a:	f040 815c 	bne.w	8009bd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d132      	bne.n	800998c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	0151      	lsls	r1, r2, #5
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	440a      	add	r2, r1
 8009980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009984:	0cdb      	lsrs	r3, r3, #19
 8009986:	04db      	lsls	r3, r3, #19
 8009988:	6113      	str	r3, [r2, #16]
 800998a:	e074      	b.n	8009a76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a6:	0cdb      	lsrs	r3, r3, #19
 80099a8:	04db      	lsls	r3, r3, #19
 80099aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6959      	ldr	r1, [r3, #20]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	440b      	add	r3, r1
 80099e8:	1e59      	subs	r1, r3, #1
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80099f2:	04d9      	lsls	r1, r3, #19
 80099f4:	4b9d      	ldr	r3, [pc, #628]	; (8009c6c <USB_EPStartXfer+0x370>)
 80099f6:	400b      	ands	r3, r1
 80099f8:	69b9      	ldr	r1, [r7, #24]
 80099fa:	0148      	lsls	r0, r1, #5
 80099fc:	69f9      	ldr	r1, [r7, #28]
 80099fe:	4401      	add	r1, r0
 8009a00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a04:	4313      	orrs	r3, r2
 8009a06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1e:	69b9      	ldr	r1, [r7, #24]
 8009a20:	0148      	lsls	r0, r1, #5
 8009a22:	69f9      	ldr	r1, [r7, #28]
 8009a24:	4401      	add	r1, r0
 8009a26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	78db      	ldrb	r3, [r3, #3]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d11f      	bne.n	8009a76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	0151      	lsls	r1, r2, #5
 8009a48:	69fa      	ldr	r2, [r7, #28]
 8009a4a:	440a      	add	r2, r1
 8009a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d14b      	bne.n	8009b14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d009      	beq.n	8009a98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	461a      	mov	r2, r3
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	78db      	ldrb	r3, [r3, #3]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d128      	bne.n	8009af2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d110      	bne.n	8009ad2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e00f      	b.n	8009af2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	69fa      	ldr	r2, [r7, #28]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	e12f      	b.n	8009d74 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	69fa      	ldr	r2, [r7, #28]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	78db      	ldrb	r3, [r3, #3]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d015      	beq.n	8009b68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 8117 	beq.w	8009d74 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 030f 	and.w	r3, r3, #15
 8009b56:	2101      	movs	r1, #1
 8009b58:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5c:	69f9      	ldr	r1, [r7, #28]
 8009b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b62:	4313      	orrs	r3, r2
 8009b64:	634b      	str	r3, [r1, #52]	; 0x34
 8009b66:	e105      	b.n	8009d74 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d110      	bne.n	8009b9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	e00f      	b.n	8009bba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	68d9      	ldr	r1, [r3, #12]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	781a      	ldrb	r2, [r3, #0]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	b298      	uxth	r0, r3
 8009bc8:	79fb      	ldrb	r3, [r7, #7]
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	4603      	mov	r3, r0
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fa2b 	bl	800a02a <USB_WritePacket>
 8009bd4:	e0ce      	b.n	8009d74 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf0:	0cdb      	lsrs	r3, r3, #19
 8009bf2:	04db      	lsls	r3, r3, #19
 8009bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	69fa      	ldr	r2, [r7, #28]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d126      	bne.n	8009c70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c38:	69b9      	ldr	r1, [r7, #24]
 8009c3a:	0148      	lsls	r0, r1, #5
 8009c3c:	69f9      	ldr	r1, [r7, #28]
 8009c3e:	4401      	add	r1, r0
 8009c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c44:	4313      	orrs	r3, r2
 8009c46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	0151      	lsls	r1, r2, #5
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	440a      	add	r2, r1
 8009c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c66:	6113      	str	r3, [r2, #16]
 8009c68:	e036      	b.n	8009cd8 <USB_EPStartXfer+0x3dc>
 8009c6a:	bf00      	nop
 8009c6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	695a      	ldr	r2, [r3, #20]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	4413      	add	r3, r2
 8009c7a:	1e5a      	subs	r2, r3, #1
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c92:	691a      	ldr	r2, [r3, #16]
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	04d9      	lsls	r1, r3, #19
 8009c98:	4b39      	ldr	r3, [pc, #228]	; (8009d80 <USB_EPStartXfer+0x484>)
 8009c9a:	400b      	ands	r3, r1
 8009c9c:	69b9      	ldr	r1, [r7, #24]
 8009c9e:	0148      	lsls	r0, r1, #5
 8009ca0:	69f9      	ldr	r1, [r7, #28]
 8009ca2:	4401      	add	r1, r0
 8009ca4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	8af9      	ldrh	r1, [r7, #22]
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	0148      	lsls	r0, r1, #5
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	4401      	add	r1, r0
 8009cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d10d      	bne.n	8009cfa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	68d9      	ldr	r1, [r3, #12]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf6:	460a      	mov	r2, r1
 8009cf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	78db      	ldrb	r3, [r3, #3]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d128      	bne.n	8009d54 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d110      	bne.n	8009d34 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00f      	b.n	8009d54 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	69fa      	ldr	r2, [r7, #28]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3720      	adds	r7, #32
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	1ff80000 	.word	0x1ff80000

08009d84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	f040 80cd 	bne.w	8009f40 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d132      	bne.n	8009e14 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e0c:	0cdb      	lsrs	r3, r3, #19
 8009e0e:	04db      	lsls	r3, r3, #19
 8009e10:	6113      	str	r3, [r2, #16]
 8009e12:	e04e      	b.n	8009eb2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e2e:	0cdb      	lsrs	r3, r3, #19
 8009e30:	04db      	lsls	r3, r3, #19
 8009e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e52:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e56:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	695a      	ldr	r2, [r3, #20]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d903      	bls.n	8009e6c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ea2:	6939      	ldr	r1, [r7, #16]
 8009ea4:	0148      	lsls	r0, r1, #5
 8009ea6:	6979      	ldr	r1, [r7, #20]
 8009ea8:	4401      	add	r1, r0
 8009eaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d11e      	bne.n	8009ef6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	0151      	lsls	r1, r2, #5
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	440a      	add	r2, r1
 8009eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	e092      	b.n	800a01c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d07e      	beq.n	800a01c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	f003 030f 	and.w	r3, r3, #15
 8009f2e:	2101      	movs	r1, #1
 8009f30:	fa01 f303 	lsl.w	r3, r1, r3
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	634b      	str	r3, [r1, #52]	; 0x34
 8009f3e:	e06d      	b.n	800a01c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	0151      	lsls	r1, r2, #5
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	440a      	add	r2, r1
 8009f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f5a:	0cdb      	lsrs	r3, r3, #19
 8009f5c:	04db      	lsls	r3, r3, #19
 8009f5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	0151      	lsls	r1, r2, #5
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	440a      	add	r2, r1
 8009f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f82:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	691a      	ldr	r2, [r3, #16]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fca:	6939      	ldr	r1, [r7, #16]
 8009fcc:	0148      	lsls	r0, r1, #5
 8009fce:	6979      	ldr	r1, [r7, #20]
 8009fd0:	4401      	add	r1, r0
 8009fd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10d      	bne.n	8009ffc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d009      	beq.n	8009ffc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68d9      	ldr	r1, [r3, #12]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	460a      	mov	r2, r1
 8009ffa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	0151      	lsls	r1, r2, #5
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	440a      	add	r2, r1
 800a012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a01a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b089      	sub	sp, #36	; 0x24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	4611      	mov	r1, r2
 800a036:	461a      	mov	r2, r3
 800a038:	460b      	mov	r3, r1
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d11a      	bne.n	800a086 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a050:	88bb      	ldrh	r3, [r7, #4]
 800a052:	3303      	adds	r3, #3
 800a054:	089b      	lsrs	r3, r3, #2
 800a056:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a058:	2300      	movs	r3, #0
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e00f      	b.n	800a07e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	031a      	lsls	r2, r3, #12
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	4413      	add	r3, r2
 800a066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06a:	461a      	mov	r2, r3
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	3304      	adds	r3, #4
 800a076:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	3301      	adds	r3, #1
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	429a      	cmp	r2, r3
 800a084:	d3eb      	bcc.n	800a05e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3724      	adds	r7, #36	; 0x24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a094:	b480      	push	{r7}
 800a096:	b089      	sub	sp, #36	; 0x24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a0aa:	88fb      	ldrh	r3, [r7, #6]
 800a0ac:	3303      	adds	r3, #3
 800a0ae:	089b      	lsrs	r3, r3, #2
 800a0b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	e00b      	b.n	800a0d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3ef      	bcc.n	800a0b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a0d8:	69fb      	ldr	r3, [r7, #28]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3724      	adds	r7, #36	; 0x24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b085      	sub	sp, #20
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d12c      	bne.n	800a15c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	db12      	blt.n	800a13a <USB_EPSetStall+0x54>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00f      	beq.n	800a13a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	0151      	lsls	r1, r2, #5
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	440a      	add	r2, r1
 800a130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a134:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a138:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a154:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	e02b      	b.n	800a1b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	db12      	blt.n	800a194 <USB_EPSetStall+0xae>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00f      	beq.n	800a194 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a18e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a192:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d128      	bne.n	800a230 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	0151      	lsls	r1, r2, #5
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	2b03      	cmp	r3, #3
 800a204:	d003      	beq.n	800a20e <USB_EPClearStall+0x4c>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	78db      	ldrb	r3, [r3, #3]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d138      	bne.n	800a280 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	440a      	add	r2, r1
 800a224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	e027      	b.n	800a280 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a24e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	78db      	ldrb	r3, [r3, #3]
 800a254:	2b03      	cmp	r3, #3
 800a256:	d003      	beq.n	800a260 <USB_EPClearStall+0x9e>
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d10f      	bne.n	800a280 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	440a      	add	r2, r1
 800a276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a27a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a27e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a2b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a2f4:	f023 0303 	bic.w	r3, r3, #3
 800a2f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a308:	f023 0302 	bic.w	r3, r3, #2
 800a30c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a34a:	f043 0302 	orr.w	r3, r3, #2
 800a34e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a35e:	b480      	push	{r7}
 800a360:	b085      	sub	sp, #20
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4013      	ands	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a376:	68fb      	ldr	r3, [r7, #12]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	0c1b      	lsrs	r3, r3, #16
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	4013      	ands	r3, r2
 800a3da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	b29b      	uxth	r3, r3
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	4013      	ands	r3, r2
 800a418:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a41a:	68bb      	ldr	r3, [r7, #8]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	fa22 f303 	lsr.w	r3, r2, r3
 800a458:	01db      	lsls	r3, r3, #7
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	4013      	ands	r3, r2
 800a474:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a476:	68bb      	ldr	r3, [r7, #8]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	371c      	adds	r7, #28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	f003 0301 	and.w	r3, r3, #1
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	333c      	adds	r3, #60	; 0x3c
 800a4fe:	3304      	adds	r3, #4
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	4a26      	ldr	r2, [pc, #152]	; (800a5a0 <USB_EP0_OutStart+0xb8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d90a      	bls.n	800a522 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a51c:	d101      	bne.n	800a522 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	e037      	b.n	800a592 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a528:	461a      	mov	r2, r3
 800a52a:	2300      	movs	r3, #0
 800a52c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a53c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a550:	f043 0318 	orr.w	r3, r3, #24
 800a554:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a564:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a568:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d10f      	bne.n	800a590 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a58e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	4f54300a 	.word	0x4f54300a

0800a5a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4a13      	ldr	r2, [pc, #76]	; (800a608 <USB_CoreReset+0x64>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d901      	bls.n	800a5c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e01b      	b.n	800a5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	daf2      	bge.n	800a5b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	f043 0201 	orr.w	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a09      	ldr	r2, [pc, #36]	; (800a608 <USB_CoreReset+0x64>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d901      	bls.n	800a5ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e006      	b.n	800a5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d0f0      	beq.n	800a5da <USB_CoreReset+0x36>

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	00030d40 	.word	0x00030d40

0800a60c <checkCrc>:


static void SGP40_delay(uint32_t time_);

static uint8_t checkCrc(uint8_t data1,uint8_t data2)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	4603      	mov	r3, r0
 800a614:	460a      	mov	r2, r1
 800a616:	71fb      	strb	r3, [r7, #7]
 800a618:	4613      	mov	r3, r2
 800a61a:	71bb      	strb	r3, [r7, #6]
  uint8_t crc = 0xFF;
 800a61c:	23ff      	movs	r3, #255	; 0xff
 800a61e:	75fb      	strb	r3, [r7, #23]
  uint8_t data[2];
  data[0]=data1;
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	733b      	strb	r3, [r7, #12]
  data[1]=data2;
 800a624:	79bb      	ldrb	r3, [r7, #6]
 800a626:	737b      	strb	r3, [r7, #13]
  for(int i =0; i<2;i++){
 800a628:	2300      	movs	r3, #0
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	e021      	b.n	800a672 <checkCrc+0x66>
    crc ^= data[i];
 800a62e:	f107 020c 	add.w	r2, r7, #12
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	4413      	add	r3, r2
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	4053      	eors	r3, r2
 800a63c:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 800a63e:	2308      	movs	r3, #8
 800a640:	73fb      	strb	r3, [r7, #15]
 800a642:	e010      	b.n	800a666 <checkCrc+0x5a>
      if(crc & 0x80){
 800a644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da06      	bge.n	800a65a <checkCrc+0x4e>
        crc = (crc << 1)^0x31u;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800a656:	75fb      	strb	r3, [r7, #23]
 800a658:	e002      	b.n	800a660 <checkCrc+0x54>
      }else{
        crc = (crc << 1);
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	3b01      	subs	r3, #1
 800a664:	73fb      	strb	r3, [r7, #15]
 800a666:	7bfb      	ldrb	r3, [r7, #15]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1eb      	bne.n	800a644 <checkCrc+0x38>
  for(int i =0; i<2;i++){
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	3301      	adds	r3, #1
 800a670:	613b      	str	r3, [r7, #16]
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2b01      	cmp	r3, #1
 800a676:	ddda      	ble.n	800a62e <checkCrc+0x22>
      }
    }
  }
  return crc;
 800a678:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <SGP40_write>:

SGP40_status SGP40_write(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b086      	sub	sp, #24
 800a68a:	af02      	add	r7, sp, #8
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Transmit(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	7e1b      	ldrb	r3, [r3, #24]
 800a69c:	b299      	uxth	r1, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	f7fa fcd9 	bl	8005060 <HAL_I2C_Master_Transmit>
 800a6ae:	4603      	mov	r3, r0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SGP40_read>:

SGP40_status SGP40_read(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Receive(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	7e1b      	ldrb	r3, [r3, #24]
 800a6ce:	b299      	uxth	r1, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	f7fa fdbe 	bl	800525c <HAL_I2C_Master_Receive>
 800a6e0:	4603      	mov	r3, r0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <SGP40_readRAW>:

SGP40_status SGP40_readRAW(SGP40_var *var, uint16_t* raw, uint32_t timeout_)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
	uint8_t data[3]={0,0,0};
 800a6f8:	4a14      	ldr	r2, [pc, #80]	; (800a74c <SGP40_readRAW+0x60>)
 800a6fa:	f107 0310 	add.w	r3, r7, #16
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	4611      	mov	r1, r2
 800a702:	8019      	strh	r1, [r3, #0]
 800a704:	3302      	adds	r3, #2
 800a706:	0c12      	lsrs	r2, r2, #16
 800a708:	701a      	strb	r2, [r3, #0]
	uint16_t value=0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	82fb      	strh	r3, [r7, #22]
	*raw = 0;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2200      	movs	r2, #0
 800a712:	801a      	strh	r2, [r3, #0]
	if ( SGP40_read(var, data, 3, timeout_) == SGP40_OK )
 800a714:	f107 0110 	add.w	r1, r7, #16
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2203      	movs	r2, #3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff ffcb 	bl	800a6b8 <SGP40_read>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <SGP40_readRAW+0x56>
	{
		value=(data[0]<<8)|data[1];
 800a728:	7c3b      	ldrb	r3, [r7, #16]
 800a72a:	021b      	lsls	r3, r3, #8
 800a72c:	b21a      	sxth	r2, r3
 800a72e:	7c7b      	ldrb	r3, [r7, #17]
 800a730:	b21b      	sxth	r3, r3
 800a732:	4313      	orrs	r3, r2
 800a734:	b21b      	sxth	r3, r3
 800a736:	82fb      	strh	r3, [r7, #22]
		*raw = value;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	8afa      	ldrh	r2, [r7, #22]
 800a73c:	801a      	strh	r2, [r3, #0]
		return SGP40_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	e000      	b.n	800a744 <SGP40_readRAW+0x58>
	}
	return SGP40_ERROR;
 800a742:	2301      	movs	r3, #1
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	0800ea00 	.word	0x0800ea00

0800a750 <SGP40_isDevice>:


SGP40_status SGP40_isDevice(SGP40_var *var)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	if ( var->i2c_ch == NULL )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <SGP40_isDevice+0x14>
		return SGP40_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e00b      	b.n	800a77c <SGP40_isDevice+0x2c>
	else
		return (SGP40_status)HAL_I2C_IsDeviceReady(var->i2c_ch, var->_deviceAddr, 10, 500);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	7e1b      	ldrb	r3, [r3, #24]
 800a76c:	b299      	uxth	r1, r3
 800a76e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a772:	220a      	movs	r2, #10
 800a774:	f7fa ff98 	bl	80056a8 <HAL_I2C_IsDeviceReady>
 800a778:	4603      	mov	r3, r0
 800a77a:	bf00      	nop
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SGP40_begin>:

SGP40_status SGP40_begin(SGP40_var *var, I2C_HandleTypeDef *i2c_ch, uint8_t addr, uint32_t duration)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	4613      	mov	r3, r2
 800a792:	71fb      	strb	r3, [r7, #7]
	var->i2c_ch 		= i2c_ch;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	601a      	str	r2, [r3, #0]
	var->_deviceAddr 	= addr << 1;
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	761a      	strb	r2, [r3, #24]
	var->_relativeHumidity	=	50.f;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4a1b      	ldr	r2, [pc, #108]	; (800a814 <SGP40_begin+0x90>)
 800a7a8:	609a      	str	r2, [r3, #8]
	var->_temperatureC		= 	25.f;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4a1a      	ldr	r2, [pc, #104]	; (800a818 <SGP40_begin+0x94>)
 800a7ae:	60da      	str	r2, [r3, #12]
	SGP40_status ret = SGP40_isDevice(var);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff ffcd 	bl	800a750 <SGP40_isDevice>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	76fb      	strb	r3, [r7, #27]
	if ( ret != SGP40_OK )
 800a7ba:	7efb      	ldrb	r3, [r7, #27]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <SGP40_begin+0x40>
		return ret;
 800a7c0:	7efb      	ldrb	r3, [r7, #27]
 800a7c2:	e023      	b.n	800a80c <SGP40_begin+0x88>
	VocAlgorithm_init(&var->_vocaAgorithmParams);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	331c      	adds	r3, #28
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fb41 	bl	800ae50 <VocAlgorithm_init>
	uint32_t t_ = HAL_GetTick();
 800a7ce:	f7f9 fe49 	bl	8004464 <HAL_GetTick>
 800a7d2:	61f8      	str	r0, [r7, #28]
	while( HAL_GetTick() - t_ <= duration )
 800a7d4:	e00e      	b.n	800a7f4 <SGP40_begin+0x70>
	{
		uint32_t rol_ov = HAL_GetTick();
 800a7d6:	f7f9 fe45 	bl	8004464 <HAL_GetTick>
 800a7da:	6178      	str	r0, [r7, #20]
		if ( t_ > rol_ov )	// perventive action for roll-over counting in system-ticks
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d901      	bls.n	800a7e8 <SGP40_begin+0x64>
			t_ = rol_ov;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	61fb      	str	r3, [r7, #28]
		// get voc - index
		uint16_t voc_index;
		SGP40_getVOCIndex(var, NULL, 500UL);
 800a7e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f86c 	bl	800a8cc <SGP40_getVOCIndex>
	while( HAL_GetTick() - t_ <= duration )
 800a7f4:	f7f9 fe36 	bl	8004464 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	d2e8      	bcs.n	800a7d6 <SGP40_begin+0x52>
	}
	// need to measurement test
	return SGP40_measurementTest(var);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f8b3 	bl	800a970 <SGP40_measurementTest>
 800a80a:	4603      	mov	r3, r0
//	return SGP40_OK;
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	42480000 	.word	0x42480000
 800a818:	41c80000 	.word	0x41c80000

0800a81c <SGP40_setRhT>:

SGP40_status SGP40_setRhT(SGP40_var *var, float relativeHumidity, float temperatureC, uint32_t timeout_)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	ed87 0a02 	vstr	s0, [r7, #8]
 800a828:	edc7 0a01 	vstr	s1, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	var->_relativeHumidity = relativeHumidity;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	609a      	str	r2, [r3, #8]
	var->_temperatureC = temperatureC;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	60da      	str	r2, [r3, #12]
	SGP40_dataTransform(var);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 f8ce 	bl	800a9dc <SGP40_dataTransform>
	return SGP40_write(var, var->_rhTemData,6, timeout_);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f103 0110 	add.w	r1, r3, #16
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2206      	movs	r2, #6
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff ff1b 	bl	800a686 <SGP40_write>
 800a850:	4603      	mov	r3, r0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <SGP40_heaterOff>:

SGP40_status SGP40_heaterOff(SGP40_var *var, uint32_t timeout_)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
	uint8_t testCommand[CMD_HEATER_OFF_SIZE]={CMD_HEATER_OFF_H,CMD_HEATER_OFF_L};
 800a864:	f241 5336 	movw	r3, #5430	; 0x1536
 800a868:	81bb      	strh	r3, [r7, #12]
	return SGP40_write(var, testCommand,CMD_HEATER_OFF_SIZE, timeout_);
 800a86a:	f107 010c 	add.w	r1, r7, #12
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2202      	movs	r2, #2
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff ff07 	bl	800a686 <SGP40_write>
 800a878:	4603      	mov	r3, r0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <SGP40_softReset>:

SGP40_status SGP40_softReset(SGP40_var *var)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	uint8_t testCommand[CMD_SOFT_RESET_SIZE]={CMD_SOFT_RESET_H,CMD_SOFT_RESET_L};
 800a88c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a890:	81bb      	strh	r3, [r7, #12]
	SGP40_status ret = SGP40_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
	ret = SGP40_write(var, testCommand, CMD_SOFT_RESET_SIZE, 100);
 800a896:	f107 010c 	add.w	r1, r7, #12
 800a89a:	2364      	movs	r3, #100	; 0x64
 800a89c:	2202      	movs	r2, #2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fef1 	bl	800a686 <SGP40_write>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d105      	bne.n	800a8ba <SGP40_softReset+0x36>
	{
		var->_relativeHumidity = 50;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <SGP40_softReset+0x40>)
 800a8b2:	609a      	str	r2, [r3, #8]
		var->_temperatureC = 25.f;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <SGP40_softReset+0x44>)
 800a8b8:	60da      	str	r2, [r3, #12]
	}
	return ret;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	42480000 	.word	0x42480000
 800a8c8:	41c80000 	.word	0x41c80000

0800a8cc <SGP40_getVOCIndex>:

SGP40_status SGP40_getVOCIndex(SGP40_var *var, uint16_t *VOC_index, uint32_t timeout_)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
	*VOC_index = 0;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	801a      	strh	r2, [r3, #0]
	uint8_t data[3]={0,0,0};
 800a8de:	4a23      	ldr	r2, [pc, #140]	; (800a96c <SGP40_getVOCIndex+0xa0>)
 800a8e0:	f107 0314 	add.w	r3, r7, #20
 800a8e4:	6812      	ldr	r2, [r2, #0]
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	8019      	strh	r1, [r3, #0]
 800a8ea:	3302      	adds	r3, #2
 800a8ec:	0c12      	lsrs	r2, r2, #16
 800a8ee:	701a      	strb	r2, [r3, #0]
	int32_t value;
	int32_t vocIndex=0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
	SGP40_dataTransform(var);
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 f871 	bl	800a9dc <SGP40_dataTransform>
	SGP40_status ret = SGP40_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	77fb      	strb	r3, [r7, #31]
	ret = SGP40_write(var, var->_rhTemData,8, timeout_);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f103 0110 	add.w	r1, r3, #16
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2208      	movs	r2, #8
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff febc 	bl	800a686 <SGP40_write>
 800a90e:	4603      	mov	r3, r0
 800a910:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 800a912:	7ffb      	ldrb	r3, [r7, #31]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <SGP40_getVOCIndex+0x50>
 800a918:	7ffb      	ldrb	r3, [r7, #31]
 800a91a:	e022      	b.n	800a962 <SGP40_getVOCIndex+0x96>
	SGP40_delay(DURATION_READ_RAW_VOC);
 800a91c:	201e      	movs	r0, #30
 800a91e:	f000 f8d9 	bl	800aad4 <SGP40_delay>
	ret = SGP40_read(var, data, 3, timeout_);
 800a922:	f107 0114 	add.w	r1, r7, #20
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2203      	movs	r2, #3
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f7ff fec4 	bl	800a6b8 <SGP40_read>
 800a930:	4603      	mov	r3, r0
 800a932:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 800a934:	7ffb      	ldrb	r3, [r7, #31]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <SGP40_getVOCIndex+0x72>
 800a93a:	7ffb      	ldrb	r3, [r7, #31]
 800a93c:	e011      	b.n	800a962 <SGP40_getVOCIndex+0x96>
	value=(data[0]<<8)|data[1];
 800a93e:	7d3b      	ldrb	r3, [r7, #20]
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	7d7a      	ldrb	r2, [r7, #21]
 800a944:	4313      	orrs	r3, r2
 800a946:	61bb      	str	r3, [r7, #24]
	VocAlgorithm_process(&var->_vocaAgorithmParams, value, &vocIndex);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	331c      	adds	r3, #28
 800a94c:	f107 0210 	add.w	r2, r7, #16
 800a950:	69b9      	ldr	r1, [r7, #24]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 fad3 	bl	800aefe <VocAlgorithm_process>
	*VOC_index = vocIndex;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	801a      	strh	r2, [r3, #0]
	return ret;
 800a960:	7ffb      	ldrb	r3, [r7, #31]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3720      	adds	r7, #32
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	0800ea00 	.word	0x0800ea00

0800a970 <SGP40_measurementTest>:

SGP40_status SGP40_measurementTest(SGP40_var *var)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	SGP40_status ret = SGP40_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
	uint8_t testCommand[CMD_MEASURE_TEST_SIZE]={CMD_MEASURE_TEST_H,CMD_MEASURE_TEST_L};
 800a97c:	f640 6328 	movw	r3, #3624	; 0xe28
 800a980:	81bb      	strh	r3, [r7, #12]
	uint16_t value=0;
 800a982:	2300      	movs	r3, #0
 800a984:	817b      	strh	r3, [r7, #10]
	ret = SGP40_write(var, testCommand, CMD_MEASURE_TEST_SIZE, 200UL);
 800a986:	f107 010c 	add.w	r1, r7, #12
 800a98a:	23c8      	movs	r3, #200	; 0xc8
 800a98c:	2202      	movs	r2, #2
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fe79 	bl	800a686 <SGP40_write>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
	if ( ret != SGP40_OK )
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <SGP40_measurementTest+0x32>
		return ret;
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	e018      	b.n	800a9d4 <SGP40_measurementTest+0x64>
	SGP40_delay(DURATION_WAIT_MEASURE_TEST);
 800a9a2:	20fa      	movs	r0, #250	; 0xfa
 800a9a4:	f000 f896 	bl	800aad4 <SGP40_delay>
	ret = SGP40_readRAW(var, &value, 500UL);
 800a9a8:	f107 030a 	add.w	r3, r7, #10
 800a9ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fe9a 	bl	800a6ec <SGP40_readRAW>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <SGP40_measurementTest+0x62>
	{
		if ( value == TEST_OK )
 800a9c2:	897b      	ldrh	r3, [r7, #10]
 800a9c4:	f5b3 4f54 	cmp.w	r3, #54272	; 0xd400
 800a9c8:	d101      	bne.n	800a9ce <SGP40_measurementTest+0x5e>
			return SGP40_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e002      	b.n	800a9d4 <SGP40_measurementTest+0x64>
		else
			return SGP40_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <SGP40_measurementTest+0x64>
	}
	else
		return ret;
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <SGP40_dataTransform>:

void SGP40_dataTransform(SGP40_var *var)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
	uint16_t RH = (uint16_t)((var->_relativeHumidity*65535)/100+0.5);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	edd3 7a02 	vldr	s15, [r3, #8]
 800a9ea:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800aac0 <SGP40_dataTransform+0xe4>
 800a9ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aac4 <SGP40_dataTransform+0xe8>
 800a9f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a9fa:	ee16 0a90 	vmov	r0, s13
 800a9fe:	f7f5 fdab 	bl	8000558 <__aeabi_f2d>
 800aa02:	f04f 0200 	mov.w	r2, #0
 800aa06:	4b30      	ldr	r3, [pc, #192]	; (800aac8 <SGP40_dataTransform+0xec>)
 800aa08:	f7f5 fc48 	bl	800029c <__adddf3>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4610      	mov	r0, r2
 800aa12:	4619      	mov	r1, r3
 800aa14:	f7f5 fdf8 	bl	8000608 <__aeabi_d2uiz>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	81fb      	strh	r3, [r7, #14]
	uint16_t TemC = (uint16_t)((var->_temperatureC+45)*(65535/175)+0.5);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa22:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800aacc <SGP40_dataTransform+0xf0>
 800aa26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa2a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800aad0 <SGP40_dataTransform+0xf4>
 800aa2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa32:	ee17 0a90 	vmov	r0, s15
 800aa36:	f7f5 fd8f 	bl	8000558 <__aeabi_f2d>
 800aa3a:	f04f 0200 	mov.w	r2, #0
 800aa3e:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <SGP40_dataTransform+0xec>)
 800aa40:	f7f5 fc2c 	bl	800029c <__adddf3>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	f7f5 fddc 	bl	8000608 <__aeabi_d2uiz>
 800aa50:	4603      	mov	r3, r0
 800aa52:	81bb      	strh	r3, [r7, #12]
	var->_rhTemData[INDEX_MEASURE_RAW_H]=CMD_MEASURE_RAW_H;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2226      	movs	r2, #38	; 0x26
 800aa58:	741a      	strb	r2, [r3, #16]
	var->_rhTemData[INDEX_MEASURE_RAW_L]=CMD_MEASURE_RAW_L;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	220f      	movs	r2, #15
 800aa5e:	745a      	strb	r2, [r3, #17]
	var->_rhTemData[INDEX_RH_H]=RH>>8;
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	749a      	strb	r2, [r3, #18]
	var->_rhTemData[INDEX_RH_L]=RH&0x00FF;
 800aa6c:	89fb      	ldrh	r3, [r7, #14]
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	74da      	strb	r2, [r3, #19]
	var->_rhTemData[INDEX_RH_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_RH_H],var->_rhTemData[INDEX_RH_L]);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7c9a      	ldrb	r2, [r3, #18]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7cdb      	ldrb	r3, [r3, #19]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f7ff fdc4 	bl	800a60c <checkCrc>
 800aa84:	4603      	mov	r3, r0
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	751a      	strb	r2, [r3, #20]
	var->_rhTemData[INDEX_TEM_H]=TemC>>8;
 800aa8c:	89bb      	ldrh	r3, [r7, #12]
 800aa8e:	0a1b      	lsrs	r3, r3, #8
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	755a      	strb	r2, [r3, #21]
	var->_rhTemData[INDEX_TEM_L]=TemC&0x00FF;
 800aa98:	89bb      	ldrh	r3, [r7, #12]
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	759a      	strb	r2, [r3, #22]
	var->_rhTemData[INDEX_TEM_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_TEM_H],var->_rhTemData[INDEX_TEM_L]);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7d5a      	ldrb	r2, [r3, #21]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	7d9b      	ldrb	r3, [r3, #22]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	f7ff fdae 	bl	800a60c <checkCrc>
 800aab0:	4603      	mov	r3, r0
 800aab2:	461a      	mov	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	75da      	strb	r2, [r3, #23]
}
 800aab8:	bf00      	nop
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	477fff00 	.word	0x477fff00
 800aac4:	42c80000 	.word	0x42c80000
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	42340000 	.word	0x42340000
 800aad0:	43bb0000 	.word	0x43bb0000

0800aad4 <SGP40_delay>:
		.getVOCIndex	= SGP40_getVOCIndex,
};


static void SGP40_delay(uint32_t time_)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	if ( SGP40.halt == NULL )
 800aadc:	4b07      	ldr	r3, [pc, #28]	; (800aafc <SGP40_delay+0x28>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d103      	bne.n	800aaec <SGP40_delay+0x18>
		HAL_Delay(time_);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7f9 fcc9 	bl	800447c <HAL_Delay>
	else
		SGP40.halt(time_);
}
 800aaea:	e003      	b.n	800aaf4 <SGP40_delay+0x20>
		SGP40.halt(time_);
 800aaec:	4b03      	ldr	r3, [pc, #12]	; (800aafc <SGP40_delay+0x28>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20000378 	.word	0x20000378

0800ab00 <fix16_from_int>:
 * specified */
#define FIX16_OVERFLOW 0x80000000
/*!< fix16_t value of 1 */
#define FIX16_ONE 0x00010000

static __inline__ fix16_t fix16_from_int(int32_t a) {
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
    return a * FIX16_ONE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	041b      	lsls	r3, r3, #16
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <fix16_cast_to_int>:

static __inline__ int32_t fix16_cast_to_int(fix16_t a) {
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
    return (a >> 16);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	141b      	asrs	r3, r3, #16
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <fix16_mul>:
static fix16_t fix16_sqrt(fix16_t inValue);

/*! Returns the exponent (e^) of the given fix16_t. */
static fix16_t fix16_exp(fix16_t inValue);

static fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1) {
 800ab30:	b480      	push	{r7}
 800ab32:	b08f      	sub	sp, #60	; 0x3c
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
    //					BD	16 * 16 -> 32 bit products
    //				 CB
    //				 AD
    //				AC
    //			 |----| 64 bit product
    int32_t A = (inArg0 >> 16), C = (inArg1 >> 16);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	141b      	asrs	r3, r3, #16
 800ab3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	141b      	asrs	r3, r3, #16
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t B = (inArg0 & 0xFFFF), D = (inArg1 & 0xFFFF);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t AC = A * C;
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
 800ab5a:	623b      	str	r3, [r7, #32]
    int32_t AD_CB = A * D + C * B;
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab60:	fb02 f203 	mul.w	r2, r2, r3
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab68:	fb01 f303 	mul.w	r3, r1, r3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	61fb      	str	r3, [r7, #28]
    uint32_t BD = B * D;
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab74:	fb02 f303 	mul.w	r3, r2, r3
 800ab78:	61bb      	str	r3, [r7, #24]

    int32_t product_hi = AC + (AD_CB >> 16);
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	141b      	asrs	r3, r3, #16
 800ab7e:	6a3a      	ldr	r2, [r7, #32]
 800ab80:	4413      	add	r3, r2
 800ab82:	637b      	str	r3, [r7, #52]	; 0x34

    // Handle carry from lower 32 bits to upper part of result.
    uint32_t ad_cb_temp = AD_CB << 16;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	041b      	lsls	r3, r3, #16
 800ab88:	617b      	str	r3, [r7, #20]
    uint32_t product_lo = BD + ad_cb_temp;
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	4413      	add	r3, r2
 800ab90:	613b      	str	r3, [r7, #16]
    if (product_lo < BD)
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d202      	bcs.n	800aba0 <fix16_mul+0x70>
        product_hi++;
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef FIXMATH_NO_OVERFLOW
    // The upper 17 bits should all be the same (the sign).
    if (product_hi >> 31 != product_hi >> 15)
 800aba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba2:	17da      	asrs	r2, r3, #31
 800aba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba6:	13db      	asrs	r3, r3, #15
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d002      	beq.n	800abb2 <fix16_mul+0x82>
        return FIX16_OVERFLOW;
 800abac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abb0:	e01d      	b.n	800abee <fix16_mul+0xbe>
#else
    // Subtracting 0x8000 (= 0.5) and then using signed right shift
    // achieves proper rounding to result-1, except in the corner
    // case of negative numbers and lowest word = 0x8000.
    // To handle that, we also have to subtract 1 for negative numbers.
    uint32_t product_lo_tmp = product_lo;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	60fb      	str	r3, [r7, #12]
    product_lo -= 0x8000;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800abbc:	613b      	str	r3, [r7, #16]
    product_lo -= (uint32_t)product_hi >> 31;
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	17db      	asrs	r3, r3, #31
 800abc2:	461a      	mov	r2, r3
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	613b      	str	r3, [r7, #16]
    if (product_lo > product_lo_tmp)
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d902      	bls.n	800abd8 <fix16_mul+0xa8>
        product_hi--;
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	3b01      	subs	r3, #1
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34

    // Discard the lowest 16 bits. Note that this is not exactly the same
    // as dividing by 0x10000. For example if product = -1, result will
    // also be -1 and not 0. This is compensated by adding +1 to the result
    // and compensating this in turn in the rounding above.
    fix16_t result = (product_hi << 16) | (product_lo >> 16);
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	461a      	mov	r2, r3
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	0c1b      	lsrs	r3, r3, #16
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]
    result += 1;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	3301      	adds	r3, #1
 800abea:	60bb      	str	r3, [r7, #8]
    return result;
 800abec:	68bb      	ldr	r3, [r7, #8]
#endif
}
 800abee:	4618      	mov	r0, r3
 800abf0:	373c      	adds	r7, #60	; 0x3c
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <fix16_div>:

static fix16_t fix16_div(fix16_t a, fix16_t b) {
 800abfa:	b480      	push	{r7}
 800abfc:	b089      	sub	sp, #36	; 0x24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
    // This uses the basic binary restoring division algorithm.
    // It appears to be faster to do the whole division manually than
    // trying to compose a 64-bit divide out of 32-bit divisions on
    // platforms without hardware divide.

    if (b == 0)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <fix16_div+0x16>
        return FIX16_MINIMUM;
 800ac0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac0e:	e066      	b.n	800acde <fix16_div+0xe4>

    uint32_t remainder = (a >= 0) ? a : (-a);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bfb8      	it	lt
 800ac16:	425b      	neglt	r3, r3
 800ac18:	61fb      	str	r3, [r7, #28]
    uint32_t divider = (b >= 0) ? b : (-b);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfb8      	it	lt
 800ac20:	425b      	neglt	r3, r3
 800ac22:	61bb      	str	r3, [r7, #24]

    uint32_t quotient = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	617b      	str	r3, [r7, #20]
    uint32_t bit = 0x10000;
 800ac28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac2c:	613b      	str	r3, [r7, #16]

    /* The algorithm requires D >= R */
    while (divider < remainder) {
 800ac2e:	e005      	b.n	800ac3c <fix16_div+0x42>
        divider <<= 1;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	61bb      	str	r3, [r7, #24]
        bit <<= 1;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	613b      	str	r3, [r7, #16]
    while (divider < remainder) {
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3f5      	bcc.n	800ac30 <fix16_div+0x36>
    }

#ifndef FIXMATH_NO_OVERFLOW
    if (!bit)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <fix16_div+0x56>
        return FIX16_OVERFLOW;
 800ac4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac4e:	e046      	b.n	800acde <fix16_div+0xe4>
#endif

    if (divider & 0x80000000) {
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da24      	bge.n	800aca0 <fix16_div+0xa6>
        // Perform one step manually to avoid overflows later.
        // We know that divider's bottom bit is 0 here.
        if (remainder >= divider) {
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d307      	bcc.n	800ac6e <fix16_div+0x74>
            quotient |= bit;
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	61fb      	str	r3, [r7, #28]
        }
        divider >>= 1;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	61bb      	str	r3, [r7, #24]
        bit >>= 1;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	613b      	str	r3, [r7, #16]
    }

    /* Main division loop */
    while (bit && remainder) {
 800ac7a:	e011      	b.n	800aca0 <fix16_div+0xa6>
        if (remainder >= divider) {
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d307      	bcc.n	800ac94 <fix16_div+0x9a>
            quotient |= bit;
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	61fb      	str	r3, [r7, #28]
        }

        remainder <<= 1;
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	61fb      	str	r3, [r7, #28]
        bit >>= 1;
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	085b      	lsrs	r3, r3, #1
 800ac9e:	613b      	str	r3, [r7, #16]
    while (bit && remainder) {
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <fix16_div+0xb2>
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e7      	bne.n	800ac7c <fix16_div+0x82>
    }

#ifndef FIXMATH_NO_ROUNDING
    if (remainder >= divider) {
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d302      	bcc.n	800acba <fix16_div+0xc0>
        quotient++;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	3301      	adds	r3, #1
 800acb8:	617b      	str	r3, [r7, #20]
    }
#endif

    fix16_t result = quotient;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	60fb      	str	r3, [r7, #12]

    /* Figure out the sign of result */
    if ((a ^ b) & 0x80000000) {
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	4053      	eors	r3, r2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da09      	bge.n	800acdc <fix16_div+0xe2>
#ifndef FIXMATH_NO_OVERFLOW
        if (result == FIX16_MINIMUM)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acce:	d102      	bne.n	800acd6 <fix16_div+0xdc>
            return FIX16_OVERFLOW;
 800acd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acd4:	e003      	b.n	800acde <fix16_div+0xe4>
#endif

        result = -result;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	425b      	negs	r3, r3
 800acda:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800acdc:	68fb      	ldr	r3, [r7, #12]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <fix16_sqrt>:

static fix16_t fix16_sqrt(fix16_t x) {
 800acea:	b480      	push	{r7}
 800acec:	b087      	sub	sp, #28
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
    // It is assumed that x is not negative

    uint32_t num = x;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	617b      	str	r3, [r7, #20]
    uint32_t result = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	613b      	str	r3, [r7, #16]
    uint32_t bit;
    uint8_t n;

    bit = (uint32_t)1 << 30;
 800acfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acfe:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 800ad00:	e002      	b.n	800ad08 <fix16_sqrt+0x1e>
        bit >>= 2;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	089b      	lsrs	r3, r3, #2
 800ad06:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d8f8      	bhi.n	800ad02 <fix16_sqrt+0x18>

    // The main part is executed twice, in order to avoid
    // using 64 bit values in computations.
    for (n = 0; n < 2; n++) {
 800ad10:	2300      	movs	r3, #0
 800ad12:	72fb      	strb	r3, [r7, #11]
 800ad14:	e03c      	b.n	800ad90 <fix16_sqrt+0xa6>
        // First we get the top 24 bits of the answer.
        while (bit) {
            if (num >= result + bit) {
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d30b      	bcc.n	800ad3a <fix16_sqrt+0x50>
                num -= result + bit;
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	617b      	str	r3, [r7, #20]
                result = (result >> 1) + bit;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	085b      	lsrs	r3, r3, #1
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	4413      	add	r3, r2
 800ad36:	613b      	str	r3, [r7, #16]
 800ad38:	e002      	b.n	800ad40 <fix16_sqrt+0x56>
            } else {
                result = (result >> 1);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	085b      	lsrs	r3, r3, #1
 800ad3e:	613b      	str	r3, [r7, #16]
            }
            bit >>= 2;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	089b      	lsrs	r3, r3, #2
 800ad44:	60fb      	str	r3, [r7, #12]
        while (bit) {
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e4      	bne.n	800ad16 <fix16_sqrt+0x2c>
        }

        if (n == 0) {
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11b      	bne.n	800ad8a <fix16_sqrt+0xa0>
            // Then process it again to get the lowest 8 bits.
            if (num > 65535) {
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad58:	d30e      	bcc.n	800ad78 <fix16_sqrt+0x8e>
                // by 16, so we have to add 1 to result manually and
                // adjust 'num' accordingly.
                // num = a - (result + 0.5)^2
                //	 = num + result^2 - (result + 0.5)^2
                //	 = num - result - 0.5
                num -= result;
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	617b      	str	r3, [r7, #20]
                num = (num << 16) - 0x8000;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	041b      	lsls	r3, r3, #16
 800ad66:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ad6a:	617b      	str	r3, [r7, #20]
                result = (result << 16) + 0x8000;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad74:	613b      	str	r3, [r7, #16]
 800ad76:	e005      	b.n	800ad84 <fix16_sqrt+0x9a>
            } else {
                num <<= 16;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	617b      	str	r3, [r7, #20]
                result <<= 16;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	041b      	lsls	r3, r3, #16
 800ad82:	613b      	str	r3, [r7, #16]
            }

            bit = 1 << 14;
 800ad84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad88:	60fb      	str	r3, [r7, #12]
    for (n = 0; n < 2; n++) {
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	72fb      	strb	r3, [r7, #11]
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d9d7      	bls.n	800ad46 <fix16_sqrt+0x5c>
        }
    }

#ifndef FIXMATH_NO_ROUNDING
    // Finally, if next bit would have been 1, round the result upwards.
    if (num > result) {
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d902      	bls.n	800ada4 <fix16_sqrt+0xba>
        result++;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	3301      	adds	r3, #1
 800ada2:	613b      	str	r3, [r7, #16]
    }
#endif

    return (fix16_t)result;
 800ada4:	693b      	ldr	r3, [r7, #16]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <fix16_exp>:

static fix16_t fix16_exp(fix16_t x) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
    const fix16_t* exp_values;

    fix16_t res, arg;
    uint16_t i;

    if (x >= F16(10.3972))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a20      	ldr	r2, [pc, #128]	; (800ae40 <fix16_exp+0x8c>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	dd02      	ble.n	800adca <fix16_exp+0x16>
        return FIX16_MAXIMUM;
 800adc4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800adc8:	e035      	b.n	800ae36 <fix16_exp+0x82>
    if (x <= F16(-11.7835))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <fix16_exp+0x90>)
 800adce:	4293      	cmp	r3, r2
 800add0:	da01      	bge.n	800add6 <fix16_exp+0x22>
        return 0;
 800add2:	2300      	movs	r3, #0
 800add4:	e02f      	b.n	800ae36 <fix16_exp+0x82>

    if (x < 0) {
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da05      	bge.n	800ade8 <fix16_exp+0x34>
        x = -x;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	425b      	negs	r3, r3
 800ade0:	607b      	str	r3, [r7, #4]
        exp_values = exp_neg_values;
 800ade2:	4b19      	ldr	r3, [pc, #100]	; (800ae48 <fix16_exp+0x94>)
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	e001      	b.n	800adec <fix16_exp+0x38>
    } else {
        exp_values = exp_pos_values;
 800ade8:	4b18      	ldr	r3, [pc, #96]	; (800ae4c <fix16_exp+0x98>)
 800adea:	617b      	str	r3, [r7, #20]
    }

    res = FIX16_ONE;
 800adec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adf0:	613b      	str	r3, [r7, #16]
    arg = FIX16_ONE;
 800adf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800adf6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800adf8:	2300      	movs	r3, #0
 800adfa:	817b      	strh	r3, [r7, #10]
 800adfc:	e017      	b.n	800ae2e <fix16_exp+0x7a>
        while (x >= arg) {
            res = fix16_mul(res, exp_values[i]);
 800adfe:	897b      	ldrh	r3, [r7, #10]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	4413      	add	r3, r2
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6938      	ldr	r0, [r7, #16]
 800ae0c:	f7ff fe90 	bl	800ab30 <fix16_mul>
 800ae10:	6138      	str	r0, [r7, #16]
            x -= arg;
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	607b      	str	r3, [r7, #4]
        while (x >= arg) {
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	daed      	bge.n	800adfe <fix16_exp+0x4a>
        }
        arg >>= 3;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	10db      	asrs	r3, r3, #3
 800ae26:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800ae28:	897b      	ldrh	r3, [r7, #10]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	817b      	strh	r3, [r7, #10]
 800ae2e:	897b      	ldrh	r3, [r7, #10]
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d9f2      	bls.n	800ae1a <fix16_exp+0x66>
    }
    return res;
 800ae34:	693b      	ldr	r3, [r7, #16]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	000a65ae 	.word	0x000a65ae
 800ae44:	fff4376e 	.word	0xfff4376e
 800ae48:	0800ea64 	.word	0x0800ea64
 800ae4c:	0800ea74 	.word	0x0800ea74

0800ae50 <VocAlgorithm_init>:
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params);
static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample);

void VocAlgorithm_init(VocAlgorithmParams* params) {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]

    params->mVoc_Index_Offset = F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 800ae5e:	601a      	str	r2, [r3, #0]
    params->mTau_Mean_Variance_Hours =
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800ae66:	605a      	str	r2, [r3, #4]
        F16(VocAlgorithm_TAU_MEAN_VARIANCE_HOURS);
    params->mGating_Max_Duration_Minutes =
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 800ae6e:	609a      	str	r2, [r3, #8]
        F16(VocAlgorithm_GATING_MAX_DURATION_MINUTES);
    params->mSraw_Std_Initial = F16(VocAlgorithm_SRAW_STD_INITIAL);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f44f 1248 	mov.w	r2, #3276800	; 0x320000
 800ae76:	60da      	str	r2, [r3, #12]
    params->mUptime = F16(0.);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	611a      	str	r2, [r3, #16]
    params->mSraw = F16(0.);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	615a      	str	r2, [r3, #20]
    params->mVoc_Index = 0;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	619a      	str	r2, [r3, #24]
    VocAlgorithm__init_instances(params);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f804 	bl	800ae98 <VocAlgorithm__init_instances>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <VocAlgorithm__init_instances>:

static void VocAlgorithm__init_instances(VocAlgorithmParams* params) {
 800ae98:	b590      	push	{r4, r7, lr}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__init(params);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f8ac 	bl	800affe <VocAlgorithm__mean_variance_estimator__init>
    VocAlgorithm__mean_variance_estimator__set_parameters(
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68d9      	ldr	r1, [r3, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f8c0 	bl	800b038 <VocAlgorithm__mean_variance_estimator__set_parameters>
        params, params->mSraw_Std_Initial, params->mTau_Mean_Variance_Hours,
        params->mGating_Max_Duration_Minutes);
    VocAlgorithm__mox_model__init(params);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fae2 	bl	800b482 <VocAlgorithm__mox_model__init>
    VocAlgorithm__mox_model__set_parameters(
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f8f8 	bl	800b0b4 <VocAlgorithm__mean_variance_estimator__get_std>
 800aec4:	4604      	mov	r4, r0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f900 	bl	800b0cc <VocAlgorithm__mean_variance_estimator__get_mean>
 800aecc:	4603      	mov	r3, r0
 800aece:	461a      	mov	r2, r3
 800aed0:	4621      	mov	r1, r4
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fae3 	bl	800b49e <VocAlgorithm__mox_model__set_parameters>
        params, VocAlgorithm__mean_variance_estimator__get_std(params),
        VocAlgorithm__mean_variance_estimator__get_mean(params));
    VocAlgorithm__sigmoid_scaled__init(params);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb10 	bl	800b4fe <VocAlgorithm__sigmoid_scaled__init>
    VocAlgorithm__sigmoid_scaled__set_parameters(params,
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fb16 	bl	800b516 <VocAlgorithm__sigmoid_scaled__set_parameters>
                                                 params->mVoc_Index_Offset);
    VocAlgorithm__adaptive_lowpass__init(params);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb80 	bl	800b5f0 <VocAlgorithm__adaptive_lowpass__init>
    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fb88 	bl	800b606 <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd90      	pop	{r4, r7, pc}

0800aefe <VocAlgorithm_process>:
    params->mSraw_Std_Initial = (fix16_from_int(std_initial));
    VocAlgorithm__init_instances(params);
}

void VocAlgorithm_process(VocAlgorithmParams* params, int32_t sraw,
                          int32_t* voc_index) {
 800aefe:	b590      	push	{r4, r7, lr}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= F16(VocAlgorithm_INITIAL_BLACKOUT))) {
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f5b3 1f34 	cmp.w	r3, #2949120	; 0x2d0000
 800af12:	dc06      	bgt.n	800af22 <VocAlgorithm_process+0x24>
        params->mUptime =
            (params->mUptime + F16(VocAlgorithm_SAMPLING_INTERVAL));
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->mUptime =
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	611a      	str	r2, [r3, #16]
 800af20:	e05f      	b.n	800afe2 <VocAlgorithm_process+0xe4>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd1f      	ble.n	800af68 <VocAlgorithm_process+0x6a>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800af2e:	4293      	cmp	r3, r2
 800af30:	dc1a      	bgt.n	800af68 <VocAlgorithm_process+0x6a>
            if ((sraw < 20001)) {
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f644 6220 	movw	r2, #20000	; 0x4e20
 800af38:	4293      	cmp	r3, r2
 800af3a:	dc03      	bgt.n	800af44 <VocAlgorithm_process+0x46>
                sraw = 20001;
 800af3c:	f644 6321 	movw	r3, #20001	; 0x4e21
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	e007      	b.n	800af54 <VocAlgorithm_process+0x56>
            } else if ((sraw > 52767)) {
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f64c 621f 	movw	r2, #52767	; 0xce1f
 800af4a:	4293      	cmp	r3, r2
 800af4c:	dd02      	ble.n	800af54 <VocAlgorithm_process+0x56>
                sraw = 52767;
 800af4e:	f64c 631f 	movw	r3, #52767	; 0xce1f
 800af52:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = (fix16_from_int((sraw - 20000)));
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800af5a:	3b20      	subs	r3, #32
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff fdcf 	bl	800ab00 <fix16_from_int>
 800af62:	4602      	mov	r2, r0
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	615a      	str	r2, [r3, #20]
        }
        params->mVoc_Index =
            VocAlgorithm__mox_model__process(params, params->mSraw);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	4619      	mov	r1, r3
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 faa7 	bl	800b4c2 <VocAlgorithm__mox_model__process>
 800af74:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__sigmoid_scaled__process(params, params->mVoc_Index);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	4619      	mov	r1, r3
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 fad7 	bl	800b534 <VocAlgorithm__sigmoid_scaled__process>
 800af86:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__adaptive_lowpass__process(params, params->mVoc_Index);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	4619      	mov	r1, r3
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fb4c 	bl	800b630 <VocAlgorithm__adaptive_lowpass__process>
 800af98:	4602      	mov	r2, r0
        params->mVoc_Index =
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	619a      	str	r2, [r3, #24]
        if ((params->mVoc_Index < F16(0.5))) {
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa6:	da03      	bge.n	800afb0 <VocAlgorithm_process+0xb2>
            params->mVoc_Index = F16(0.5);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800afae:	619a      	str	r2, [r3, #24]
        }
        if ((params->mSraw > F16(0.))) {
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd14      	ble.n	800afe2 <VocAlgorithm_process+0xe4>
            VocAlgorithm__mean_variance_estimator__process(
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6959      	ldr	r1, [r3, #20]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	461a      	mov	r2, r3
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f966 	bl	800b294 <VocAlgorithm__mean_variance_estimator__process>
                params, params->mSraw, params->mVoc_Index);
            VocAlgorithm__mox_model__set_parameters(
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 f873 	bl	800b0b4 <VocAlgorithm__mean_variance_estimator__get_std>
 800afce:	4604      	mov	r4, r0
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f87b 	bl	800b0cc <VocAlgorithm__mean_variance_estimator__get_mean>
 800afd6:	4603      	mov	r3, r0
 800afd8:	461a      	mov	r2, r3
 800afda:	4621      	mov	r1, r4
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fa5e 	bl	800b49e <VocAlgorithm__mox_model__set_parameters>
                params, VocAlgorithm__mean_variance_estimator__get_std(params),
                VocAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *voc_index = (fix16_cast_to_int((params->mVoc_Index + F16(0.5))));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fd94 	bl	800ab18 <fix16_cast_to_int>
 800aff0:	4602      	mov	r2, r0
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	601a      	str	r2, [r3, #0]
	return ;
 800aff6:	bf00      	nop
}
 800aff8:	3714      	adds	r7, #20
 800affa:	46bd      	mov	sp, r7
 800affc:	bd90      	pop	{r4, r7, pc}

0800affe <VocAlgorithm__mean_variance_estimator__init>:

static void
VocAlgorithm__mean_variance_estimator__init(VocAlgorithmParams* params) {
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__set_parameters(params, F16(0.),
 800b006:	2300      	movs	r3, #0
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f813 	bl	800b038 <VocAlgorithm__mean_variance_estimator__set_parameters>
                                                          F16(0.), F16(0.));
    VocAlgorithm__mean_variance_estimator___init_instances(params);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f804 	bl	800b020 <VocAlgorithm__mean_variance_estimator___init_instances>
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <VocAlgorithm__mean_variance_estimator___init_instances>:

static void VocAlgorithm__mean_variance_estimator___init_instances(
    VocAlgorithmParams* params) {
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__init(params);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f9d9 	bl	800b3e0 <VocAlgorithm__mean_variance_estimator___sigmoid__init>
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <VocAlgorithm__mean_variance_estimator__set_parameters>:

static void VocAlgorithm__mean_variance_estimator__set_parameters(
    VocAlgorithmParams* params, fix16_t std_initial,
    fix16_t tau_mean_variance_hours, fix16_t gating_max_duration_minutes) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes =
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	61da      	str	r2, [r3, #28]
        gating_max_duration_minutes;
    params->m_Mean_Variance_Estimator___Initialized = false;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2020 	strb.w	r2, [r3, #32]
    params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	625a      	str	r2, [r3, #36]	; 0x24
    params->m_Mean_Variance_Estimator___Sraw_Offset = F16(0.);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	629a      	str	r2, [r3, #40]	; 0x28
    params->m_Mean_Variance_Estimator___Std = std_initial;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	62da      	str	r2, [r3, #44]	; 0x2c
    params->m_Mean_Variance_Estimator___Gamma =
        (fix16_div(F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3312      	adds	r3, #18
 800b06a:	4619      	mov	r1, r3
 800b06c:	f240 408d 	movw	r0, #1165	; 0x48d
 800b070:	f7ff fdc3 	bl	800abfa <fix16_div>
 800b074:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator___Gamma =
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	631a      	str	r2, [r3, #48]	; 0x30
                        (VocAlgorithm_SAMPLING_INTERVAL / 3600.))),
                   (tau_mean_variance_hours +
                    F16((VocAlgorithm_SAMPLING_INTERVAL / 3600.)))));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	4a0c      	ldr	r2, [pc, #48]	; (800b0b0 <VocAlgorithm__mean_variance_estimator__set_parameters+0x78>)
 800b07e:	635a      	str	r2, [r3, #52]	; 0x34
        F16(((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
              VocAlgorithm_SAMPLING_INTERVAL) /
             (VocAlgorithm_TAU_INITIAL_MEAN + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance = F16(
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f240 628d 	movw	r2, #1677	; 0x68d
 800b086:	639a      	str	r2, [r3, #56]	; 0x38
        ((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          VocAlgorithm_SAMPLING_INTERVAL) /
         (VocAlgorithm_TAU_INITIAL_VARIANCE + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator__Gamma_Mean = F16(0.);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	63da      	str	r2, [r3, #60]	; 0x3c
    params->m_Mean_Variance_Estimator__Gamma_Variance = F16(0.);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Uptime_Gamma = F16(0.);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	645a      	str	r2, [r3, #68]	; 0x44
    params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	649a      	str	r2, [r3, #72]	; 0x48
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	00030c31 	.word	0x00030c31

0800b0b4 <VocAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static fix16_t
VocAlgorithm__mean_variance_estimator__get_std(VocAlgorithmParams* params) {
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <VocAlgorithm__mean_variance_estimator__get_mean>:

static fix16_t
VocAlgorithm__mean_variance_estimator__get_mean(VocAlgorithmParams* params) {
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    return (params->m_Mean_Variance_Estimator___Mean +
 800b0dc:	4413      	add	r3, r2
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
	...

0800b0ec <VocAlgorithm__mean_variance_estimator___calculate_gamma>:

static void VocAlgorithm__mean_variance_estimator___calculate_gamma(
    VocAlgorithmParams* params, fix16_t voc_index_from_prior) {
 800b0ec:	b590      	push	{r4, r7, lr}
 800b0ee:	b08d      	sub	sp, #52	; 0x34
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    fix16_t sigmoid_gamma_variance;
    fix16_t gamma_variance;
    fix16_t gating_threshold_variance;
    fix16_t sigmoid_gating_variance;

    uptime_limit = F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800b0f6:	4b63      	ldr	r3, [pc, #396]	; (800b284 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x198>)
 800b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                        VocAlgorithm_SAMPLING_INTERVAL));
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b100:	429a      	cmp	r2, r3
 800b102:	dd05      	ble.n	800b110 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x24>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b108:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	645a      	str	r2, [r3, #68]	; 0x44
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b116:	429a      	cmp	r2, r3
 800b118:	dd05      	ble.n	800b126 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x3a>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b11e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	649a      	str	r2, [r3, #72]	; 0x48
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b126:	f240 238f 	movw	r3, #655	; 0x28f
 800b12a:	4a57      	ldr	r2, [pc, #348]	; (800b288 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x19c>)
 800b12c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f963 	bl	800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_MEAN),
        F16(VocAlgorithm_INIT_TRANSITION_MEAN));
    sigmoid_gamma_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f973 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b142:	62b8      	str	r0, [r7, #40]	; 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean =
        (params->m_Mean_Variance_Estimator___Gamma +
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                     params->m_Mean_Variance_Estimator___Gamma),
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fceb 	bl	800ab30 <fix16_mul>
 800b15a:	4603      	mov	r3, r0
    gamma_mean =
 800b15c:	4423      	add	r3, r4
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
                    sigmoid_gamma_mean)));
    gating_threshold_mean =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f95e 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4619      	mov	r1, r3
 800b170:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 800b174:	f7ff fcdc 	bl	800ab30 <fix16_mul>
 800b178:	4603      	mov	r3, r0
    gating_threshold_mean =
 800b17a:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 800b17e:	623b      	str	r3, [r7, #32]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b180:	f241 730a 	movw	r3, #5898	; 0x170a
 800b184:	6a3a      	ldr	r2, [r7, #32]
 800b186:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f936 	bl	800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_mean,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f948 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b198:	61f8      	str	r0, [r7, #28]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (fix16_mul(sigmoid_gating_mean, gamma_mean));
 800b19a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19c:	69f8      	ldr	r0, [r7, #28]
 800b19e:	f7ff fcc7 	bl	800ab30 <fix16_mul>
 800b1a2:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	63da      	str	r2, [r3, #60]	; 0x3c
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b1a8:	f240 238f 	movw	r3, #655	; 0x28f
 800b1ac:	4a37      	ldr	r2, [pc, #220]	; (800b28c <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a0>)
 800b1ae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f922 	bl	800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_VARIANCE),
        F16(VocAlgorithm_INIT_TRANSITION_VARIANCE));
    sigmoid_gamma_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f932 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b1c4:	61b8      	str	r0, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma +
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul(
             (params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
              params->m_Mean_Variance_Estimator___Gamma),
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul(
 800b1d2:	1ad0      	subs	r0, r2, r3
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	4619      	mov	r1, r3
 800b1dc:	f7ff fca8 	bl	800ab30 <fix16_mul>
 800b1e0:	4603      	mov	r3, r0
    gamma_variance =
 800b1e2:	4423      	add	r3, r4
 800b1e4:	617b      	str	r3, [r7, #20]
             (sigmoid_gamma_variance - sigmoid_gamma_mean))));
    gating_threshold_variance =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f91b 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 800b1fa:	f7ff fc99 	bl	800ab30 <fix16_mul>
 800b1fe:	4603      	mov	r3, r0
    gating_threshold_variance =
 800b200:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 800b204:	613b      	str	r3, [r7, #16]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b206:	f241 730a 	movw	r3, #5898	; 0x170a
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f8f3 	bl	800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_variance,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f905 	bl	800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 800b21e:	60f8      	str	r0, [r7, #12]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (fix16_mul(sigmoid_gating_variance, gamma_variance));
 800b220:	6979      	ldr	r1, [r7, #20]
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fc84 	bl	800ab30 <fix16_mul>
 800b228:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
                    ((fix16_mul((F16(1.) - sigmoid_gating_mean),
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800b238:	4915      	ldr	r1, [pc, #84]	; (800b290 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a4>)
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fc78 	bl	800ab30 <fix16_mul>
 800b240:	4603      	mov	r3, r0
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
 800b242:	f5a3 4399 	sub.w	r3, r3, #19584	; 0x4c80
 800b246:	3b4d      	subs	r3, #77	; 0x4d
 800b248:	4619      	mov	r1, r3
 800b24a:	f240 4044 	movw	r0, #1092	; 0x444
 800b24e:	f7ff fc6f 	bl	800ab30 <fix16_mul>
 800b252:	4603      	mov	r3, r0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b254:	18e2      	adds	r2, r4, r3
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	64da      	str	r2, [r3, #76]	; 0x4c
                                F16((1. + VocAlgorithm_GATING_MAX_RATIO)))) -
                     F16(VocAlgorithm_GATING_MAX_RATIO)))));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes <
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	da02      	bge.n	800b268 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x17c>
         F16(0.))) {
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes)) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	69db      	ldr	r3, [r3, #28]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b270:	429a      	cmp	r2, r3
 800b272:	dd02      	ble.n	800b27a <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x18e>
        params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 800b27a:	bf00      	nop
 800b27c:	3734      	adds	r7, #52	; 0x34
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	7ffe0000 	.word	0x7ffe0000
 800b288:	0a8c0000 	.word	0x0a8c0000
 800b28c:	14640000 	.word	0x14640000
 800b290:	00014ccd 	.word	0x00014ccd

0800b294 <VocAlgorithm__mean_variance_estimator__process>:

static void VocAlgorithm__mean_variance_estimator__process(
    VocAlgorithmParams* params, fix16_t sraw, fix16_t voc_index_from_prior) {
 800b294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b296:	b089      	sub	sp, #36	; 0x24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]

    fix16_t delta_sgp;
    fix16_t c;
    fix16_t additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2a6:	f083 0301 	eor.w	r3, r3, #1
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00a      	beq.n	800b2c6 <VocAlgorithm__mean_variance_estimator__process+0x32>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2020 	strb.w	r2, [r3, #32]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	629a      	str	r2, [r3, #40]	; 0x28
        params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	625a      	str	r2, [r3, #36]	; 0x24
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
                        delta_sgp)));
    }
}
 800b2c4:	e088      	b.n	800b3d8 <VocAlgorithm__mean_variance_estimator__process+0x144>
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800b2ce:	da04      	bge.n	800b2da <VocAlgorithm__mean_variance_estimator__process+0x46>
             (params->m_Mean_Variance_Estimator___Mean <= F16(-100.)))) {
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 800b2d4:	f513 0fc8 	cmn.w	r3, #6553600	; 0x640000
 800b2d8:	dc09      	bgt.n	800b2ee <VocAlgorithm__mean_variance_estimator__process+0x5a>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                 params->m_Mean_Variance_Estimator___Mean);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b2e2:	441a      	add	r2, r3
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	629a      	str	r2, [r3, #40]	; 0x28
            params->m_Mean_Variance_Estimator___Mean = F16(0.);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	625a      	str	r2, [r3, #36]	; 0x24
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	60bb      	str	r3, [r7, #8]
        VocAlgorithm__mean_variance_estimator___calculate_gamma(
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7ff fef6 	bl	800b0ec <VocAlgorithm__mean_variance_estimator___calculate_gamma>
            (sraw - params->m_Mean_Variance_Estimator___Mean),
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        delta_sgp = (fix16_div(
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fc74 	bl	800abfa <fix16_div>
 800b312:	6178      	str	r0, [r7, #20]
        if ((delta_sgp < F16(0.))) {
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	da05      	bge.n	800b326 <VocAlgorithm__mean_variance_estimator__process+0x92>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	e004      	b.n	800b330 <VocAlgorithm__mean_variance_estimator__process+0x9c>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	61fb      	str	r3, [r7, #28]
        additional_scaling = F16(1.);
 800b330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b334:	61bb      	str	r3, [r7, #24]
        if ((c > F16(1440.))) {
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	f1b3 6fb4 	cmp.w	r3, #94371840	; 0x5a00000
 800b33c:	dd02      	ble.n	800b344 <VocAlgorithm__mean_variance_estimator__process+0xb0>
            additional_scaling = F16(4.);
 800b33e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b342:	61bb      	str	r3, [r7, #24]
                 params->m_Mean_Variance_Estimator__Gamma_Variance)))),
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 800b348:	f5c3 0380 	rsb	r3, r3, #4194304	; 0x400000
 800b34c:	4619      	mov	r1, r3
 800b34e:	69b8      	ldr	r0, [r7, #24]
 800b350:	f7ff fbee 	bl	800ab30 <fix16_mul>
 800b354:	4603      	mov	r3, r0
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff fcc7 	bl	800acea <fix16_sqrt>
 800b35c:	4606      	mov	r6, r0
                (fix16_mul(
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800b366:	69b9      	ldr	r1, [r7, #24]
 800b368:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b36c:	f7ff fbe0 	bl	800ab30 <fix16_mul>
 800b370:	4603      	mov	r3, r0
 800b372:	4619      	mov	r1, r3
 800b374:	4628      	mov	r0, r5
 800b376:	f7ff fc40 	bl	800abfa <fix16_div>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4619      	mov	r1, r3
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff fbd6 	bl	800ab30 <fix16_mul>
 800b384:	4604      	mov	r4, r0
                (fix16_mul(
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38a:	6979      	ldr	r1, [r7, #20]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fbcf 	bl	800ab30 <fix16_mul>
 800b392:	4603      	mov	r3, r0
 800b394:	69b9      	ldr	r1, [r7, #24]
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fc2f 	bl	800abfa <fix16_div>
 800b39c:	4603      	mov	r3, r0
 800b39e:	6979      	ldr	r1, [r7, #20]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fbc5 	bl	800ab30 <fix16_mul>
 800b3a6:	4603      	mov	r3, r0
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 800b3a8:	4423      	add	r3, r4
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fc9d 	bl	800acea <fix16_sqrt>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f7ff fbbb 	bl	800ab30 <fix16_mul>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	62da      	str	r2, [r3, #44]	; 0x2c
            (params->m_Mean_Variance_Estimator___Mean +
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c8:	6979      	ldr	r1, [r7, #20]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fbb0 	bl	800ab30 <fix16_mul>
 800b3d0:	4603      	mov	r3, r0
            (params->m_Mean_Variance_Estimator___Mean +
 800b3d2:	18e2      	adds	r2, r4, r3
        params->m_Mean_Variance_Estimator___Mean =
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b3d8:	bf00      	nop
 800b3da:	3724      	adds	r7, #36	; 0x24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3e0 <VocAlgorithm__mean_variance_estimator___sigmoid__init>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__init(
    VocAlgorithmParams* params) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f804 	bl	800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(0.), F16(0.), F16(0.));
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    VocAlgorithmParams* params, fix16_t L, fix16_t X0, fix16_t K) {
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator___Sigmoid__L = L;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	651a      	str	r2, [r3, #80]	; 0x50
    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	655a      	str	r2, [r3, #84]	; 0x54
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <VocAlgorithm__mean_variance_estimator___sigmoid__process>:

static fix16_t VocAlgorithm__mean_variance_estimator___sigmoid__process(
    VocAlgorithmParams* params, fix16_t sample) {
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]

    fix16_t x;

    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6d58      	ldr	r0, [r3, #84]	; 0x54
                   (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0)));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	4619      	mov	r1, r3
 800b440:	f7ff fb76 	bl	800ab30 <fix16_mul>
 800b444:	60f8      	str	r0, [r7, #12]
    if ((x < F16(-50.))) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 800b44c:	da02      	bge.n	800b454 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x2c>
        return params->m_Mean_Variance_Estimator___Sigmoid__L;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b452:	e012      	b.n	800b47a <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else if ((x > F16(50.))) {
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800b45a:	dd01      	ble.n	800b460 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x38>
        return F16(0.);
 800b45c:	2300      	movs	r3, #0
 800b45e:	e00c      	b.n	800b47a <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else {
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6d1c      	ldr	r4, [r3, #80]	; 0x50
                          (F16(1.) + fix16_exp(x))));
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff fca5 	bl	800adb4 <fix16_exp>
 800b46a:	4603      	mov	r3, r0
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 800b46c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b470:	4619      	mov	r1, r3
 800b472:	4620      	mov	r0, r4
 800b474:	f7ff fbc1 	bl	800abfa <fix16_div>
 800b478:	4603      	mov	r3, r0
    }
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd90      	pop	{r4, r7, pc}

0800b482 <VocAlgorithm__mox_model__init>:

static void VocAlgorithm__mox_model__init(VocAlgorithmParams* params) {
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mox_model__set_parameters(params, F16(1.), F16(0.));
 800b48a:	2200      	movs	r2, #0
 800b48c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f804 	bl	800b49e <VocAlgorithm__mox_model__set_parameters>
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <VocAlgorithm__mox_model__set_parameters>:

static void VocAlgorithm__mox_model__set_parameters(VocAlgorithmParams* params,
                                                    fix16_t SRAW_STD,
                                                    fix16_t SRAW_MEAN) {
 800b49e:	b480      	push	{r7}
 800b4a0:	b085      	sub	sp, #20
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	65da      	str	r2, [r3, #92]	; 0x5c
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <VocAlgorithm__mox_model__process>:

static fix16_t VocAlgorithm__mox_model__process(VocAlgorithmParams* params,
                                                fix16_t sraw) {
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b082      	sub	sp, #8
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	6039      	str	r1, [r7, #0]

    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	1ad2      	subs	r2, r2, r3
                                 (-(params->m_Mox_Model__Sraw_Std +
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 800b4d8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b4dc:	f503 1310 	add.w	r3, r3, #2359296	; 0x240000
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f7ff fb89 	bl	800abfa <fix16_div>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f44f 0166 	mov.w	r1, #15073280	; 0xe60000
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff fb1e 	bl	800ab30 <fix16_mul>
 800b4f4:	4603      	mov	r3, r0
                                    F16(VocAlgorithm_SRAW_STD_BONUS))))),
                      F16(VocAlgorithm_VOC_INDEX_GAIN)));
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <VocAlgorithm__sigmoid_scaled__init>:

static void VocAlgorithm__sigmoid_scaled__init(VocAlgorithmParams* params) {
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]

    VocAlgorithm__sigmoid_scaled__set_parameters(params, F16(0.));
 800b506:	2100      	movs	r1, #0
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f804 	bl	800b516 <VocAlgorithm__sigmoid_scaled__set_parameters>
}
 800b50e:	bf00      	nop
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <VocAlgorithm__sigmoid_scaled__set_parameters>:

static void
VocAlgorithm__sigmoid_scaled__set_parameters(VocAlgorithmParams* params,
                                             fix16_t offset) {
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]

    params->m_Sigmoid_Scaled__Offset = offset;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b526:	bf00      	nop
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <VocAlgorithm__sigmoid_scaled__process>:

static fix16_t VocAlgorithm__sigmoid_scaled__process(VocAlgorithmParams* params,
                                                     fix16_t sample) {
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]

    fix16_t x;
    fix16_t shift;

    x = (fix16_mul(F16(VocAlgorithm_SIGMOID_K),
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	f5a3 0355 	sub.w	r3, r3, #13959168	; 0xd50000
 800b544:	4619      	mov	r1, r3
 800b546:	4829      	ldr	r0, [pc, #164]	; (800b5ec <VocAlgorithm__sigmoid_scaled__process+0xb8>)
 800b548:	f7ff faf2 	bl	800ab30 <fix16_mul>
 800b54c:	60f8      	str	r0, [r7, #12]
                   (sample - F16(VocAlgorithm_SIGMOID_X0))));
    if ((x < F16(-50.))) {
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 800b554:	da02      	bge.n	800b55c <VocAlgorithm__sigmoid_scaled__process+0x28>
        return F16(VocAlgorithm_SIGMOID_L);
 800b556:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800b55a:	e042      	b.n	800b5e2 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else if ((x > F16(50.))) {
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800b562:	dd01      	ble.n	800b568 <VocAlgorithm__sigmoid_scaled__process+0x34>
        return F16(0.);
 800b564:	2300      	movs	r3, #0
 800b566:	e03c      	b.n	800b5e2 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else {
        if ((sample >= F16(0.))) {
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db20      	blt.n	800b5b0 <VocAlgorithm__sigmoid_scaled__process+0x7c>
            shift = (fix16_div(
                (F16(VocAlgorithm_SIGMOID_L) -
                 (fix16_mul(F16(5.), params->m_Sigmoid_Scaled__Offset))),
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b572:	4619      	mov	r1, r3
 800b574:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 800b578:	f7ff fada 	bl	800ab30 <fix16_mul>
 800b57c:	4603      	mov	r3, r0
            shift = (fix16_div(
 800b57e:	f1c3 73fa 	rsb	r3, r3, #32768000	; 0x1f40000
 800b582:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff fb37 	bl	800abfa <fix16_div>
 800b58c:	60b8      	str	r0, [r7, #8]
                F16(4.)));
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	f103 74fa 	add.w	r4, r3, #32768000	; 0x1f40000
                               (F16(1.) + fix16_exp(x)))) -
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff fc0d 	bl	800adb4 <fix16_exp>
 800b59a:	4603      	mov	r3, r0
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 800b59c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7ff fb29 	bl	800abfa <fix16_div>
 800b5a8:	4602      	mov	r2, r0
                               (F16(1.) + fix16_exp(x)))) -
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	e018      	b.n	800b5e2 <VocAlgorithm__sigmoid_scaled__process+0xae>
                    shift);
        } else {
            return (fix16_mul(
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b4:	f44f 01c8 	mov.w	r1, #6553600	; 0x640000
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fb1e 	bl	800abfa <fix16_div>
 800b5be:	4604      	mov	r4, r0
                (fix16_div(params->m_Sigmoid_Scaled__Offset,
                           F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT))),
                (fix16_div(F16(VocAlgorithm_SIGMOID_L),
                           (F16(1.) + fix16_exp(x))))));
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fbf7 	bl	800adb4 <fix16_exp>
 800b5c6:	4603      	mov	r3, r0
            return (fix16_mul(
 800b5c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	f04f 70fa 	mov.w	r0, #32768000	; 0x1f40000
 800b5d2:	f7ff fb12 	bl	800abfa <fix16_div>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7ff faa8 	bl	800ab30 <fix16_mul>
 800b5e0:	4603      	mov	r3, r0
        }
    }
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd90      	pop	{r4, r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	fffffe56 	.word	0xfffffe56

0800b5f0 <VocAlgorithm__adaptive_lowpass__init>:

static void VocAlgorithm__adaptive_lowpass__init(VocAlgorithmParams* params) {
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]

    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f804 	bl	800b606 <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <VocAlgorithm__adaptive_lowpass__set_parameters>:

static void
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params) {
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f640 4231 	movw	r2, #3121	; 0xc31
 800b614:	669a      	str	r2, [r3, #104]	; 0x68
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_FAST + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass__A2 =
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2283      	movs	r2, #131	; 0x83
 800b61a:	66da      	str	r2, [r3, #108]	; 0x6c
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_SLOW + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass___Initialized = false;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <VocAlgorithm__adaptive_lowpass__process>:

static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample) {
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
    fix16_t abs_delta;
    fix16_t F1;
    fix16_t tau_a;
    fix16_t a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b640:	f083 0301 	eor.w	r3, r3, #1
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00c      	beq.n	800b664 <VocAlgorithm__adaptive_lowpass__process+0x34>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	675a      	str	r2, [r3, #116]	; 0x74
        params->m_Adaptive_Lowpass___X2 = sample;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	679a      	str	r2, [r3, #120]	; 0x78
        params->m_Adaptive_Lowpass___X3 = sample;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	67da      	str	r2, [r3, #124]	; 0x7c
        params->m_Adaptive_Lowpass___Initialized = true;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    }
    params->m_Adaptive_Lowpass___X1 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A1),
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b668:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b670:	4619      	mov	r1, r3
 800b672:	4610      	mov	r0, r2
 800b674:	f7ff fa5c 	bl	800ab30 <fix16_mul>
 800b678:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X1)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A1, sample)));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff fa55 	bl	800ab30 <fix16_mul>
 800b686:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X1)) +
 800b688:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X1 =
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	675a      	str	r2, [r3, #116]	; 0x74
    params->m_Adaptive_Lowpass___X2 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A2),
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b692:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7ff fa47 	bl	800ab30 <fix16_mul>
 800b6a2:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X2)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A2, sample)));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fa40 	bl	800ab30 <fix16_mul>
 800b6b0:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X2)) +
 800b6b2:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X2 =
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	679a      	str	r2, [r3, #120]	; 0x78
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    abs_delta =
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	617b      	str	r3, [r7, #20]
    if ((abs_delta < F16(0.))) {
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	da02      	bge.n	800b6d0 <VocAlgorithm__adaptive_lowpass__process+0xa0>
        abs_delta = (-abs_delta);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	425b      	negs	r3, r3
 800b6ce:	617b      	str	r3, [r7, #20]
    }
    F1 = fix16_exp((fix16_mul(F16(VocAlgorithm_LP_ALPHA), abs_delta)));
 800b6d0:	6979      	ldr	r1, [r7, #20]
 800b6d2:	4819      	ldr	r0, [pc, #100]	; (800b738 <VocAlgorithm__adaptive_lowpass__process+0x108>)
 800b6d4:	f7ff fa2c 	bl	800ab30 <fix16_mul>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff fb6a 	bl	800adb4 <fix16_exp>
 800b6e0:	6138      	str	r0, [r7, #16]
    tau_a =
        ((fix16_mul(F16((VocAlgorithm_LP_TAU_SLOW - VocAlgorithm_LP_TAU_FAST)),
 800b6e2:	6939      	ldr	r1, [r7, #16]
 800b6e4:	f04f 70f0 	mov.w	r0, #31457280	; 0x1e00000
 800b6e8:	f7ff fa22 	bl	800ab30 <fix16_mul>
 800b6ec:	4603      	mov	r3, r0
    tau_a =
 800b6ee:	f503 13a0 	add.w	r3, r3, #1310720	; 0x140000
 800b6f2:	60fb      	str	r3, [r7, #12]
                    F1)) +
         F16(VocAlgorithm_LP_TAU_FAST));
    a3 = (fix16_div(F16(VocAlgorithm_SAMPLING_INTERVAL),
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b700:	f7ff fa7b 	bl	800abfa <fix16_div>
 800b704:	60b8      	str	r0, [r7, #8]
                    (F16(VocAlgorithm_SAMPLING_INTERVAL) + tau_a)));
    params->m_Adaptive_Lowpass___X3 =
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7ff fa0c 	bl	800ab30 <fix16_mul>
 800b718:	4604      	mov	r4, r0
         (fix16_mul(a3, sample)));
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	68b8      	ldr	r0, [r7, #8]
 800b71e:	f7ff fa07 	bl	800ab30 <fix16_mul>
 800b722:	4603      	mov	r3, r0
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800b724:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X3 =
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	67da      	str	r2, [r3, #124]	; 0x7c
    return params->m_Adaptive_Lowpass___X3;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 800b72e:	4618      	mov	r0, r3
 800b730:	371c      	adds	r7, #28
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}
 800b736:	bf00      	nop
 800b738:	ffffcccd 	.word	0xffffcccd

0800b73c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b748:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b74c:	f002 fa68 	bl	800dc20 <USBD_static_malloc>
 800b750:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d105      	bne.n	800b764 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b760:	2302      	movs	r3, #2
 800b762:	e066      	b.n	800b832 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7c1b      	ldrb	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d119      	bne.n	800b7a8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b774:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b778:	2202      	movs	r2, #2
 800b77a:	2181      	movs	r1, #129	; 0x81
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f002 f92c 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b78c:	2202      	movs	r2, #2
 800b78e:	2101      	movs	r1, #1
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f002 f922 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2210      	movs	r2, #16
 800b7a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b7a6:	e016      	b.n	800b7d6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b7a8:	2340      	movs	r3, #64	; 0x40
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	2181      	movs	r1, #129	; 0x81
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f002 f913 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b7ba:	2340      	movs	r3, #64	; 0x40
 800b7bc:	2202      	movs	r2, #2
 800b7be:	2101      	movs	r1, #1
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f002 f90a 	bl	800d9da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2210      	movs	r2, #16
 800b7d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b7d6:	2308      	movs	r3, #8
 800b7d8:	2203      	movs	r2, #3
 800b7da:	2182      	movs	r1, #130	; 0x82
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f002 f8fc 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7c1b      	ldrb	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d109      	bne.n	800b820 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b812:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b816:	2101      	movs	r1, #1
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f002 f9cd 	bl	800dbb8 <USBD_LL_PrepareReceive>
 800b81e:	e007      	b.n	800b830 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b826:	2340      	movs	r3, #64	; 0x40
 800b828:	2101      	movs	r1, #1
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f002 f9c4 	bl	800dbb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b082      	sub	sp, #8
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	460b      	mov	r3, r1
 800b844:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b846:	2181      	movs	r1, #129	; 0x81
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f002 f8ec 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b854:	2101      	movs	r1, #1
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f002 f8e5 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b864:	2182      	movs	r1, #130	; 0x82
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f002 f8dd 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00e      	beq.n	800b8a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f9d0 	bl	800dc3c <USBD_static_free>
    pdev->pClassData = NULL;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
	...

0800b8b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	e0af      	b.n	800ba38 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d03f      	beq.n	800b964 <USBD_CDC_Setup+0xb4>
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	f040 809f 	bne.w	800ba28 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	88db      	ldrh	r3, [r3, #6]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d02e      	beq.n	800b950 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	b25b      	sxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	da16      	bge.n	800b92a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b908:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	88d2      	ldrh	r2, [r2, #6]
 800b90e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	88db      	ldrh	r3, [r3, #6]
 800b914:	2b07      	cmp	r3, #7
 800b916:	bf28      	it	cs
 800b918:	2307      	movcs	r3, #7
 800b91a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	89fa      	ldrh	r2, [r7, #14]
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fb19 	bl	800cf5a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b928:	e085      	b.n	800ba36 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	785a      	ldrb	r2, [r3, #1]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	88db      	ldrh	r3, [r3, #6]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b940:	6939      	ldr	r1, [r7, #16]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	88db      	ldrh	r3, [r3, #6]
 800b946:	461a      	mov	r2, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fb32 	bl	800cfb2 <USBD_CtlPrepareRx>
      break;
 800b94e:	e072      	b.n	800ba36 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	7850      	ldrb	r0, [r2, #1]
 800b95c:	2200      	movs	r2, #0
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	4798      	blx	r3
      break;
 800b962:	e068      	b.n	800ba36 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	2b0b      	cmp	r3, #11
 800b96a:	d852      	bhi.n	800ba12 <USBD_CDC_Setup+0x162>
 800b96c:	a201      	add	r2, pc, #4	; (adr r2, 800b974 <USBD_CDC_Setup+0xc4>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b9a5 	.word	0x0800b9a5
 800b978:	0800ba21 	.word	0x0800ba21
 800b97c:	0800ba13 	.word	0x0800ba13
 800b980:	0800ba13 	.word	0x0800ba13
 800b984:	0800ba13 	.word	0x0800ba13
 800b988:	0800ba13 	.word	0x0800ba13
 800b98c:	0800ba13 	.word	0x0800ba13
 800b990:	0800ba13 	.word	0x0800ba13
 800b994:	0800ba13 	.word	0x0800ba13
 800b998:	0800ba13 	.word	0x0800ba13
 800b99c:	0800b9cf 	.word	0x0800b9cf
 800b9a0:	0800b9f9 	.word	0x0800b9f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d107      	bne.n	800b9c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9b0:	f107 030a 	add.w	r3, r7, #10
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f001 face 	bl	800cf5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9be:	e032      	b.n	800ba26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 fa58 	bl	800ce78 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	75fb      	strb	r3, [r7, #23]
          break;
 800b9cc:	e02b      	b.n	800ba26 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d107      	bne.n	800b9ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b9da:	f107 030d 	add.w	r3, r7, #13
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f001 fab9 	bl	800cf5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9e8:	e01d      	b.n	800ba26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f001 fa43 	bl	800ce78 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b9f6:	e016      	b.n	800ba26 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d00f      	beq.n	800ba24 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f001 fa36 	bl	800ce78 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ba10:	e008      	b.n	800ba24 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 fa2f 	bl	800ce78 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ba1e:	e002      	b.n	800ba26 <USBD_CDC_Setup+0x176>
          break;
 800ba20:	bf00      	nop
 800ba22:	e008      	b.n	800ba36 <USBD_CDC_Setup+0x186>
          break;
 800ba24:	bf00      	nop
      }
      break;
 800ba26:	e006      	b.n	800ba36 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f001 fa24 	bl	800ce78 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba30:	2303      	movs	r3, #3
 800ba32:	75fb      	strb	r3, [r7, #23]
      break;
 800ba34:	bf00      	nop
  }

  return (uint8_t)ret;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e04f      	b.n	800bb02 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ba6a:	78fa      	ldrb	r2, [r7, #3]
 800ba6c:	6879      	ldr	r1, [r7, #4]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	440b      	add	r3, r1
 800ba78:	3318      	adds	r3, #24
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d029      	beq.n	800bad4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ba80:	78fa      	ldrb	r2, [r7, #3]
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	3318      	adds	r3, #24
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	78f9      	ldrb	r1, [r7, #3]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	460b      	mov	r3, r1
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	1a5b      	subs	r3, r3, r1
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4403      	add	r3, r0
 800baa0:	3344      	adds	r3, #68	; 0x44
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	fbb2 f1f3 	udiv	r1, r2, r3
 800baa8:	fb03 f301 	mul.w	r3, r3, r1
 800baac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d110      	bne.n	800bad4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bab2:	78fa      	ldrb	r2, [r7, #3]
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	440b      	add	r3, r1
 800bac0:	3318      	adds	r3, #24
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bac6:	78f9      	ldrb	r1, [r7, #3]
 800bac8:	2300      	movs	r3, #0
 800baca:	2200      	movs	r2, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f002 f852 	bl	800db76 <USBD_LL_Transmit>
 800bad2:	e015      	b.n	800bb00 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e015      	b.n	800bb58 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f002 f862 	bl	800dbfa <USBD_LL_GetRxDataSize>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bb52:	4611      	mov	r1, r2
 800bb54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e01b      	b.n	800bbb2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d015      	beq.n	800bbb0 <USBD_CDC_EP0_RxReady+0x50>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bb8a:	2bff      	cmp	r3, #255	; 0xff
 800bb8c:	d010      	beq.n	800bbb0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bb9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bba4:	b292      	uxth	r2, r2
 800bba6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	22ff      	movs	r2, #255	; 0xff
 800bbac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2243      	movs	r2, #67	; 0x43
 800bbc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bbca:	4b03      	ldr	r3, [pc, #12]	; (800bbd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	2000041c 	.word	0x2000041c

0800bbdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2243      	movs	r2, #67	; 0x43
 800bbe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bbea:	4b03      	ldr	r3, [pc, #12]	; (800bbf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr
 800bbf8:	200003d8 	.word	0x200003d8

0800bbfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2243      	movs	r2, #67	; 0x43
 800bc08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bc0a:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	20000460 	.word	0x20000460

0800bc1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	220a      	movs	r2, #10
 800bc28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bc2a:	4b03      	ldr	r3, [pc, #12]	; (800bc38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20000394 	.word	0x20000394

0800bc3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e004      	b.n	800bc5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bc58:	2300      	movs	r3, #0
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	60f8      	str	r0, [r7, #12]
 800bc6e:	60b9      	str	r1, [r7, #8]
 800bc70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc78:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e008      	b.n	800bc96 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	371c      	adds	r7, #28
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b085      	sub	sp, #20
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e004      	b.n	800bcc8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bce4:	2301      	movs	r3, #1
 800bce6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	e01a      	b.n	800bd2c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d114      	bne.n	800bd2a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd1e:	2181      	movs	r1, #129	; 0x81
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f001 ff28 	bl	800db76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e016      	b.n	800bd80 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	7c1b      	ldrb	r3, [r3, #16]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d109      	bne.n	800bd6e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd64:	2101      	movs	r1, #1
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f001 ff26 	bl	800dbb8 <USBD_LL_PrepareReceive>
 800bd6c:	e007      	b.n	800bd7e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd74:	2340      	movs	r3, #64	; 0x40
 800bd76:	2101      	movs	r1, #1
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f001 ff1d 	bl	800dbb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e01f      	b.n	800bde0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	79fa      	ldrb	r2, [r7, #7]
 800bdd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f001 fd99 	bl	800d90c <USBD_LL_Init>
 800bdda:	4603      	mov	r3, r0
 800bddc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e016      	b.n	800be2e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	f107 020e 	add.w	r2, r7, #14
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
 800be24:	4602      	mov	r2, r0
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f001 fdb0 	bl	800d9a4 <USBD_LL_Start>
 800be44:	4603      	mov	r3, r0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	460b      	mov	r3, r1
 800be6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800be70:	2303      	movs	r3, #3
 800be72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d009      	beq.n	800be92 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	78fa      	ldrb	r2, [r7, #3]
 800be88:	4611      	mov	r1, r2
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	460b      	mov	r3, r1
 800bea6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d007      	beq.n	800bec2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	78fa      	ldrb	r2, [r7, #3]
 800bebc:	4611      	mov	r1, r2
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
  }

  return USBD_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 ff90 	bl	800ce04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bef2:	461a      	mov	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf00:	f003 031f 	and.w	r3, r3, #31
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d01a      	beq.n	800bf3e <USBD_LL_SetupStage+0x72>
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d822      	bhi.n	800bf52 <USBD_LL_SetupStage+0x86>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <USBD_LL_SetupStage+0x4a>
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d00a      	beq.n	800bf2a <USBD_LL_SetupStage+0x5e>
 800bf14:	e01d      	b.n	800bf52 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa62 	bl	800c3e8 <USBD_StdDevReq>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]
      break;
 800bf28:	e020      	b.n	800bf6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fac6 	bl	800c4c4 <USBD_StdItfReq>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf3c:	e016      	b.n	800bf6c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fb05 	bl	800c556 <USBD_StdEPReq>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf50:	e00c      	b.n	800bf6c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 fd7f 	bl	800da64 <USBD_LL_StallEP>
 800bf66:	4603      	mov	r3, r0
 800bf68:	73fb      	strb	r3, [r7, #15]
      break;
 800bf6a:	bf00      	nop
  }

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b086      	sub	sp, #24
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bf84:	7afb      	ldrb	r3, [r7, #11]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d138      	bne.n	800bffc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bf90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d14a      	bne.n	800c032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d913      	bls.n	800bfd0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	bf28      	it	cs
 800bfc2:	4613      	movcs	r3, r2
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	6879      	ldr	r1, [r7, #4]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f001 f80f 	bl	800cfec <USBD_CtlContinueRx>
 800bfce:	e030      	b.n	800c032 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	d10b      	bne.n	800bff4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f001 f80a 	bl	800d00e <USBD_CtlSendStatus>
 800bffa:	e01a      	b.n	800c032 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b03      	cmp	r3, #3
 800c006:	d114      	bne.n	800c032 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00e      	beq.n	800c032 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	7afa      	ldrb	r2, [r7, #11]
 800c01e:	4611      	mov	r1, r2
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	4798      	blx	r3
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	e000      	b.n	800c034 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	460b      	mov	r3, r1
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c04a:	7afb      	ldrb	r3, [r7, #11]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d16b      	bne.n	800c128 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3314      	adds	r3, #20
 800c054:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d156      	bne.n	800c10e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d914      	bls.n	800c096 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	1ad2      	subs	r2, r2, r3
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	461a      	mov	r2, r3
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 ff84 	bl	800cf90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c088:	2300      	movs	r3, #0
 800c08a:	2200      	movs	r2, #0
 800c08c:	2100      	movs	r1, #0
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f001 fd92 	bl	800dbb8 <USBD_LL_PrepareReceive>
 800c094:	e03b      	b.n	800c10e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	68da      	ldr	r2, [r3, #12]
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d11c      	bne.n	800c0dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d316      	bcc.n	800c0dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d20f      	bcs.n	800c0dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 ff65 	bl	800cf90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f001 fd6f 	bl	800dbb8 <USBD_LL_PrepareReceive>
 800c0da:	e018      	b.n	800c10e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d10b      	bne.n	800c100 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d005      	beq.n	800c100 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c100:	2180      	movs	r1, #128	; 0x80
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f001 fcae 	bl	800da64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 ff93 	bl	800d034 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c114:	2b01      	cmp	r3, #1
 800c116:	d122      	bne.n	800c15e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff fe98 	bl	800be4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c126:	e01a      	b.n	800c15e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b03      	cmp	r3, #3
 800c132:	d114      	bne.n	800c15e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00e      	beq.n	800c15e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	7afa      	ldrb	r2, [r7, #11]
 800c14a:	4611      	mov	r1, r2
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	4798      	blx	r3
 800c150:	4603      	mov	r3, r0
 800c152:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	e000      	b.n	800c160 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c198:	2303      	movs	r3, #3
 800c19a:	e02f      	b.n	800c1fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00f      	beq.n	800c1c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d009      	beq.n	800c1c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	6852      	ldr	r2, [r2, #4]
 800c1be:	b2d2      	uxtb	r2, r2
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1c6:	2340      	movs	r3, #64	; 0x40
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f001 fc04 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2240      	movs	r2, #64	; 0x40
 800c1de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1e2:	2340      	movs	r3, #64	; 0x40
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2180      	movs	r1, #128	; 0x80
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 fbf6 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2240      	movs	r2, #64	; 0x40
 800c1f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	78fa      	ldrb	r2, [r7, #3]
 800c214:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c232:	b2da      	uxtb	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2204      	movs	r2, #4
 800c23e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b04      	cmp	r3, #4
 800c262:	d106      	bne.n	800c272 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	e012      	b.n	800c2bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d10b      	bne.n	800c2ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	69db      	ldr	r3, [r3, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d005      	beq.n	800c2ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e014      	b.n	800c308 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	d10d      	bne.n	800c306 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	78fa      	ldrb	r2, [r7, #3]
 800c300:	4611      	mov	r1, r2
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c326:	2303      	movs	r3, #3
 800c328:	e014      	b.n	800c354 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b03      	cmp	r3, #3
 800c334:	d10d      	bne.n	800c352 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34a:	78fa      	ldrb	r2, [r7, #3]
 800c34c:	4611      	mov	r1, r2
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d009      	beq.n	800c3a0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6852      	ldr	r2, [r2, #4]
 800c398:	b2d2      	uxtb	r2, r2
 800c39a:	4611      	mov	r1, r2
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	4798      	blx	r3
  }

  return USBD_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b087      	sub	sp, #28
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3c8:	8a3b      	ldrh	r3, [r7, #16]
 800c3ca:	021b      	lsls	r3, r3, #8
 800c3cc:	b21a      	sxth	r2, r3
 800c3ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	b21b      	sxth	r3, r3
 800c3d6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3d8:	89fb      	ldrh	r3, [r7, #14]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	371c      	adds	r7, #28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
	...

0800c3e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3fe:	2b40      	cmp	r3, #64	; 0x40
 800c400:	d005      	beq.n	800c40e <USBD_StdDevReq+0x26>
 800c402:	2b40      	cmp	r3, #64	; 0x40
 800c404:	d853      	bhi.n	800c4ae <USBD_StdDevReq+0xc6>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00b      	beq.n	800c422 <USBD_StdDevReq+0x3a>
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d14f      	bne.n	800c4ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	4798      	blx	r3
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
      break;
 800c420:	e04a      	b.n	800c4b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	785b      	ldrb	r3, [r3, #1]
 800c426:	2b09      	cmp	r3, #9
 800c428:	d83b      	bhi.n	800c4a2 <USBD_StdDevReq+0xba>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <USBD_StdDevReq+0x48>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c499 	.word	0x0800c499
 800c438:	0800c4a3 	.word	0x0800c4a3
 800c43c:	0800c48f 	.word	0x0800c48f
 800c440:	0800c4a3 	.word	0x0800c4a3
 800c444:	0800c463 	.word	0x0800c463
 800c448:	0800c459 	.word	0x0800c459
 800c44c:	0800c4a3 	.word	0x0800c4a3
 800c450:	0800c47b 	.word	0x0800c47b
 800c454:	0800c46d 	.word	0x0800c46d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f9de 	bl	800c81c <USBD_GetDescriptor>
          break;
 800c460:	e024      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fb43 	bl	800caf0 <USBD_SetAddress>
          break;
 800c46a:	e01f      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fb82 	bl	800cb78 <USBD_SetConfig>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]
          break;
 800c478:	e018      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fc21 	bl	800ccc4 <USBD_GetConfig>
          break;
 800c482:	e013      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fc52 	bl	800cd30 <USBD_GetStatus>
          break;
 800c48c:	e00e      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fc81 	bl	800cd98 <USBD_SetFeature>
          break;
 800c496:	e009      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fc90 	bl	800cdc0 <USBD_ClrFeature>
          break;
 800c4a0:	e004      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fce7 	bl	800ce78 <USBD_CtlError>
          break;
 800c4aa:	bf00      	nop
      }
      break;
 800c4ac:	e004      	b.n	800c4b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fce1 	bl	800ce78 <USBD_CtlError>
      break;
 800c4b6:	bf00      	nop
  }

  return ret;
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop

0800c4c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4da:	2b40      	cmp	r3, #64	; 0x40
 800c4dc:	d005      	beq.n	800c4ea <USBD_StdItfReq+0x26>
 800c4de:	2b40      	cmp	r3, #64	; 0x40
 800c4e0:	d82f      	bhi.n	800c542 <USBD_StdItfReq+0x7e>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <USBD_StdItfReq+0x26>
 800c4e6:	2b20      	cmp	r3, #32
 800c4e8:	d12b      	bne.n	800c542 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d81d      	bhi.n	800c534 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	889b      	ldrh	r3, [r3, #4]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d813      	bhi.n	800c52a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	4798      	blx	r3
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	88db      	ldrh	r3, [r3, #6]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d110      	bne.n	800c53e <USBD_StdItfReq+0x7a>
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10d      	bne.n	800c53e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fd73 	bl	800d00e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c528:	e009      	b.n	800c53e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fca3 	bl	800ce78 <USBD_CtlError>
          break;
 800c532:	e004      	b.n	800c53e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fc9e 	bl	800ce78 <USBD_CtlError>
          break;
 800c53c:	e000      	b.n	800c540 <USBD_StdItfReq+0x7c>
          break;
 800c53e:	bf00      	nop
      }
      break;
 800c540:	e004      	b.n	800c54c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fc97 	bl	800ce78 <USBD_CtlError>
      break;
 800c54a:	bf00      	nop
  }

  return ret;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	889b      	ldrh	r3, [r3, #4]
 800c568:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c572:	2b40      	cmp	r3, #64	; 0x40
 800c574:	d007      	beq.n	800c586 <USBD_StdEPReq+0x30>
 800c576:	2b40      	cmp	r3, #64	; 0x40
 800c578:	f200 8145 	bhi.w	800c806 <USBD_StdEPReq+0x2b0>
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00c      	beq.n	800c59a <USBD_StdEPReq+0x44>
 800c580:	2b20      	cmp	r3, #32
 800c582:	f040 8140 	bne.w	800c806 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	4798      	blx	r3
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
      break;
 800c598:	e13a      	b.n	800c810 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	785b      	ldrb	r3, [r3, #1]
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d007      	beq.n	800c5b2 <USBD_StdEPReq+0x5c>
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	f300 8129 	bgt.w	800c7fa <USBD_StdEPReq+0x2a4>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d07f      	beq.n	800c6ac <USBD_StdEPReq+0x156>
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d03c      	beq.n	800c62a <USBD_StdEPReq+0xd4>
 800c5b0:	e123      	b.n	800c7fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d002      	beq.n	800c5c4 <USBD_StdEPReq+0x6e>
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d016      	beq.n	800c5f0 <USBD_StdEPReq+0x9a>
 800c5c2:	e02c      	b.n	800c61e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00d      	beq.n	800c5e6 <USBD_StdEPReq+0x90>
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b80      	cmp	r3, #128	; 0x80
 800c5ce:	d00a      	beq.n	800c5e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5d0:	7bbb      	ldrb	r3, [r7, #14]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f001 fa45 	bl	800da64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5da:	2180      	movs	r1, #128	; 0x80
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 fa41 	bl	800da64 <USBD_LL_StallEP>
 800c5e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5e4:	e020      	b.n	800c628 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fc45 	bl	800ce78 <USBD_CtlError>
              break;
 800c5ee:	e01b      	b.n	800c628 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	885b      	ldrh	r3, [r3, #2]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10e      	bne.n	800c616 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <USBD_StdEPReq+0xc0>
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b80      	cmp	r3, #128	; 0x80
 800c602:	d008      	beq.n	800c616 <USBD_StdEPReq+0xc0>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	88db      	ldrh	r3, [r3, #6]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d104      	bne.n	800c616 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c60c:	7bbb      	ldrb	r3, [r7, #14]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f001 fa27 	bl	800da64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fcf9 	bl	800d00e <USBD_CtlSendStatus>

              break;
 800c61c:	e004      	b.n	800c628 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fc29 	bl	800ce78 <USBD_CtlError>
              break;
 800c626:	bf00      	nop
          }
          break;
 800c628:	e0ec      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b02      	cmp	r3, #2
 800c634:	d002      	beq.n	800c63c <USBD_StdEPReq+0xe6>
 800c636:	2b03      	cmp	r3, #3
 800c638:	d016      	beq.n	800c668 <USBD_StdEPReq+0x112>
 800c63a:	e030      	b.n	800c69e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00d      	beq.n	800c65e <USBD_StdEPReq+0x108>
 800c642:	7bbb      	ldrb	r3, [r7, #14]
 800c644:	2b80      	cmp	r3, #128	; 0x80
 800c646:	d00a      	beq.n	800c65e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 fa09 	bl	800da64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c652:	2180      	movs	r1, #128	; 0x80
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f001 fa05 	bl	800da64 <USBD_LL_StallEP>
 800c65a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c65c:	e025      	b.n	800c6aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fc09 	bl	800ce78 <USBD_CtlError>
              break;
 800c666:	e020      	b.n	800c6aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	885b      	ldrh	r3, [r3, #2]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11b      	bne.n	800c6a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fa0f 	bl	800daa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fcc2 	bl	800d00e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	4798      	blx	r3
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c69c:	e004      	b.n	800c6a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fbe9 	bl	800ce78 <USBD_CtlError>
              break;
 800c6a6:	e000      	b.n	800c6aa <USBD_StdEPReq+0x154>
              break;
 800c6a8:	bf00      	nop
          }
          break;
 800c6aa:	e0ab      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d002      	beq.n	800c6be <USBD_StdEPReq+0x168>
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d032      	beq.n	800c722 <USBD_StdEPReq+0x1cc>
 800c6bc:	e097      	b.n	800c7ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d007      	beq.n	800c6d4 <USBD_StdEPReq+0x17e>
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	2b80      	cmp	r3, #128	; 0x80
 800c6c8:	d004      	beq.n	800c6d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fbd3 	bl	800ce78 <USBD_CtlError>
                break;
 800c6d2:	e091      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	da0b      	bge.n	800c6f4 <USBD_StdEPReq+0x19e>
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	3310      	adds	r3, #16
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	e00b      	b.n	800c70c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4413      	add	r3, r2
 800c70a:	3304      	adds	r3, #4
 800c70c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2202      	movs	r2, #2
 800c718:	4619      	mov	r1, r3
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fc1d 	bl	800cf5a <USBD_CtlSendData>
              break;
 800c720:	e06a      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c726:	2b00      	cmp	r3, #0
 800c728:	da11      	bge.n	800c74e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	f003 020f 	and.w	r2, r3, #15
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	3324      	adds	r3, #36	; 0x24
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d117      	bne.n	800c774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb96 	bl	800ce78 <USBD_CtlError>
                  break;
 800c74c:	e054      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	f003 020f 	and.w	r2, r3, #15
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	440b      	add	r3, r1
 800c760:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d104      	bne.n	800c774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fb83 	bl	800ce78 <USBD_CtlError>
                  break;
 800c772:	e041      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da0b      	bge.n	800c794 <USBD_StdEPReq+0x23e>
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c782:	4613      	mov	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	3310      	adds	r3, #16
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	4413      	add	r3, r2
 800c790:	3304      	adds	r3, #4
 800c792:	e00b      	b.n	800c7ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <USBD_StdEPReq+0x264>
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d103      	bne.n	800c7c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e00e      	b.n	800c7e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f001 f98a 	bl	800dae0 <USBD_LL_IsStallEP>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	e002      	b.n	800c7e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fbb7 	bl	800cf5a <USBD_CtlSendData>
              break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fb41 	bl	800ce78 <USBD_CtlError>
              break;
 800c7f6:	bf00      	nop
          }
          break;
 800c7f8:	e004      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fb3b 	bl	800ce78 <USBD_CtlError>
          break;
 800c802:	bf00      	nop
      }
      break;
 800c804:	e004      	b.n	800c810 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fb35 	bl	800ce78 <USBD_CtlError>
      break;
 800c80e:	bf00      	nop
  }

  return ret;
 800c810:	7bfb      	ldrb	r3, [r7, #15]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	0a1b      	lsrs	r3, r3, #8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	3b01      	subs	r3, #1
 800c83c:	2b06      	cmp	r3, #6
 800c83e:	f200 8128 	bhi.w	800ca92 <USBD_GetDescriptor+0x276>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <USBD_GetDescriptor+0x2c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c865 	.word	0x0800c865
 800c84c:	0800c87d 	.word	0x0800c87d
 800c850:	0800c8bd 	.word	0x0800c8bd
 800c854:	0800ca93 	.word	0x0800ca93
 800c858:	0800ca93 	.word	0x0800ca93
 800c85c:	0800ca33 	.word	0x0800ca33
 800c860:	0800ca5f 	.word	0x0800ca5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	7c12      	ldrb	r2, [r2, #16]
 800c870:	f107 0108 	add.w	r1, r7, #8
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	60f8      	str	r0, [r7, #12]
      break;
 800c87a:	e112      	b.n	800caa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7c1b      	ldrb	r3, [r3, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10d      	bne.n	800c8a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88c:	f107 0208 	add.w	r2, r7, #8
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
 800c894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	2202      	movs	r2, #2
 800c89c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c89e:	e100      	b.n	800caa2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	f107 0208 	add.w	r2, r7, #8
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
 800c8b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	701a      	strb	r2, [r3, #0]
      break;
 800c8ba:	e0f2      	b.n	800caa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	885b      	ldrh	r3, [r3, #2]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b05      	cmp	r3, #5
 800c8c4:	f200 80ac 	bhi.w	800ca20 <USBD_GetDescriptor+0x204>
 800c8c8:	a201      	add	r2, pc, #4	; (adr r2, 800c8d0 <USBD_GetDescriptor+0xb4>)
 800c8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ce:	bf00      	nop
 800c8d0:	0800c8e9 	.word	0x0800c8e9
 800c8d4:	0800c91d 	.word	0x0800c91d
 800c8d8:	0800c951 	.word	0x0800c951
 800c8dc:	0800c985 	.word	0x0800c985
 800c8e0:	0800c9b9 	.word	0x0800c9b9
 800c8e4:	0800c9ed 	.word	0x0800c9ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7c12      	ldrb	r2, [r2, #16]
 800c900:	f107 0108 	add.w	r1, r7, #8
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c90a:	e091      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fab2 	bl	800ce78 <USBD_CtlError>
            err++;
 800c914:	7afb      	ldrb	r3, [r7, #11]
 800c916:	3301      	adds	r3, #1
 800c918:	72fb      	strb	r3, [r7, #11]
          break;
 800c91a:	e089      	b.n	800ca30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00b      	beq.n	800c940 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	7c12      	ldrb	r2, [r2, #16]
 800c934:	f107 0108 	add.w	r1, r7, #8
 800c938:	4610      	mov	r0, r2
 800c93a:	4798      	blx	r3
 800c93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c93e:	e077      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa98 	bl	800ce78 <USBD_CtlError>
            err++;
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	3301      	adds	r3, #1
 800c94c:	72fb      	strb	r3, [r7, #11]
          break;
 800c94e:	e06f      	b.n	800ca30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	7c12      	ldrb	r2, [r2, #16]
 800c968:	f107 0108 	add.w	r1, r7, #8
 800c96c:	4610      	mov	r0, r2
 800c96e:	4798      	blx	r3
 800c970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c972:	e05d      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fa7e 	bl	800ce78 <USBD_CtlError>
            err++;
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	3301      	adds	r3, #1
 800c980:	72fb      	strb	r3, [r7, #11]
          break;
 800c982:	e055      	b.n	800ca30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	7c12      	ldrb	r2, [r2, #16]
 800c99c:	f107 0108 	add.w	r1, r7, #8
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	4798      	blx	r3
 800c9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9a6:	e043      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fa64 	bl	800ce78 <USBD_CtlError>
            err++;
 800c9b0:	7afb      	ldrb	r3, [r7, #11]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9b6:	e03b      	b.n	800ca30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9da:	e029      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fa4a 	bl	800ce78 <USBD_CtlError>
            err++;
 800c9e4:	7afb      	ldrb	r3, [r7, #11]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ea:	e021      	b.n	800ca30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7c12      	ldrb	r2, [r2, #16]
 800ca04:	f107 0108 	add.w	r1, r7, #8
 800ca08:	4610      	mov	r0, r2
 800ca0a:	4798      	blx	r3
 800ca0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca0e:	e00f      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fa30 	bl	800ce78 <USBD_CtlError>
            err++;
 800ca18:	7afb      	ldrb	r3, [r7, #11]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca1e:	e007      	b.n	800ca30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fa28 	bl	800ce78 <USBD_CtlError>
          err++;
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ca2e:	bf00      	nop
      }
      break;
 800ca30:	e037      	b.n	800caa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7c1b      	ldrb	r3, [r3, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d109      	bne.n	800ca4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca42:	f107 0208 	add.w	r2, r7, #8
 800ca46:	4610      	mov	r0, r2
 800ca48:	4798      	blx	r3
 800ca4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca4c:	e029      	b.n	800caa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fa11 	bl	800ce78 <USBD_CtlError>
        err++;
 800ca56:	7afb      	ldrb	r3, [r7, #11]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca5c:	e021      	b.n	800caa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7c1b      	ldrb	r3, [r3, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10d      	bne.n	800ca82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	f107 0208 	add.w	r2, r7, #8
 800ca72:	4610      	mov	r0, r2
 800ca74:	4798      	blx	r3
 800ca76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	2207      	movs	r2, #7
 800ca7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca80:	e00f      	b.n	800caa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f9f7 	bl	800ce78 <USBD_CtlError>
        err++;
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca90:	e007      	b.n	800caa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f9ef 	bl	800ce78 <USBD_CtlError>
      err++;
 800ca9a:	7afb      	ldrb	r3, [r7, #11]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	72fb      	strb	r3, [r7, #11]
      break;
 800caa0:	bf00      	nop
  }

  if (err != 0U)
 800caa2:	7afb      	ldrb	r3, [r7, #11]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d11e      	bne.n	800cae6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	88db      	ldrh	r3, [r3, #6]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d016      	beq.n	800cade <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cab0:	893b      	ldrh	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00e      	beq.n	800cad4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	88da      	ldrh	r2, [r3, #6]
 800caba:	893b      	ldrh	r3, [r7, #8]
 800cabc:	4293      	cmp	r3, r2
 800cabe:	bf28      	it	cs
 800cac0:	4613      	movcs	r3, r2
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cac6:	893b      	ldrh	r3, [r7, #8]
 800cac8:	461a      	mov	r2, r3
 800caca:	68f9      	ldr	r1, [r7, #12]
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fa44 	bl	800cf5a <USBD_CtlSendData>
 800cad2:	e009      	b.n	800cae8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f9ce 	bl	800ce78 <USBD_CtlError>
 800cadc:	e004      	b.n	800cae8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa95 	bl	800d00e <USBD_CtlSendStatus>
 800cae4:	e000      	b.n	800cae8 <USBD_GetDescriptor+0x2cc>
    return;
 800cae6:	bf00      	nop
  }
}
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop

0800caf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	889b      	ldrh	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d131      	bne.n	800cb66 <USBD_SetAddress+0x76>
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	88db      	ldrh	r3, [r3, #6]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d12d      	bne.n	800cb66 <USBD_SetAddress+0x76>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	885b      	ldrh	r3, [r3, #2]
 800cb0e:	2b7f      	cmp	r3, #127	; 0x7f
 800cb10:	d829      	bhi.n	800cb66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	885b      	ldrh	r3, [r3, #2]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d104      	bne.n	800cb34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f9a3 	bl	800ce78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb32:	e01d      	b.n	800cb70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7bfa      	ldrb	r2, [r7, #15]
 800cb38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fff9 	bl	800db38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fa61 	bl	800d00e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d004      	beq.n	800cb5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2202      	movs	r2, #2
 800cb56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5a:	e009      	b.n	800cb70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb64:	e004      	b.n	800cb70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f985 	bl	800ce78 <USBD_CtlError>
  }
}
 800cb6e:	bf00      	nop
 800cb70:	bf00      	nop
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	885b      	ldrh	r3, [r3, #2]
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	4b4c      	ldr	r3, [pc, #304]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cb8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb90:	4b4b      	ldr	r3, [pc, #300]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d905      	bls.n	800cba4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f96c 	bl	800ce78 <USBD_CtlError>
    return USBD_FAIL;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e088      	b.n	800ccb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d002      	beq.n	800cbb6 <USBD_SetConfig+0x3e>
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d025      	beq.n	800cc00 <USBD_SetConfig+0x88>
 800cbb4:	e071      	b.n	800cc9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cbb6:	4b42      	ldr	r3, [pc, #264]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01c      	beq.n	800cbf8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cbbe:	4b40      	ldr	r3, [pc, #256]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbc8:	4b3d      	ldr	r3, [pc, #244]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7ff f948 	bl	800be64 <USBD_SetClassConfig>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d004      	beq.n	800cbe8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cbde:	6839      	ldr	r1, [r7, #0]
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f949 	bl	800ce78 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbe6:	e065      	b.n	800ccb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fa10 	bl	800d00e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2203      	movs	r2, #3
 800cbf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbf6:	e05d      	b.n	800ccb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa08 	bl	800d00e <USBD_CtlSendStatus>
      break;
 800cbfe:	e059      	b.n	800ccb4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc00:	4b2f      	ldr	r3, [pc, #188]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d112      	bne.n	800cc2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cc10:	4b2b      	ldr	r3, [pc, #172]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	461a      	mov	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc1a:	4b29      	ldr	r3, [pc, #164]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff f93b 	bl	800be9c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f9f1 	bl	800d00e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc2c:	e042      	b.n	800ccb4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cc2e:	4b24      	ldr	r3, [pc, #144]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d02a      	beq.n	800cc92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff f929 	bl	800be9c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc4a:	4b1d      	ldr	r3, [pc, #116]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc54:	4b1a      	ldr	r3, [pc, #104]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7ff f902 	bl	800be64 <USBD_SetClassConfig>
 800cc60:	4603      	mov	r3, r0
 800cc62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00f      	beq.n	800cc8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cc6a:	6839      	ldr	r1, [r7, #0]
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f903 	bl	800ce78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff f90e 	bl	800be9c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2202      	movs	r2, #2
 800cc84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc88:	e014      	b.n	800ccb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9bf 	bl	800d00e <USBD_CtlSendStatus>
      break;
 800cc90:	e010      	b.n	800ccb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f9bb 	bl	800d00e <USBD_CtlSendStatus>
      break;
 800cc98:	e00c      	b.n	800ccb4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f8eb 	bl	800ce78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cca2:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <USBD_SetConfig+0x148>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff f8f7 	bl	800be9c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	73fb      	strb	r3, [r7, #15]
      break;
 800ccb2:	bf00      	nop
  }

  return ret;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	2000059e 	.word	0x2000059e

0800ccc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	88db      	ldrh	r3, [r3, #6]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d004      	beq.n	800cce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f8cd 	bl	800ce78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ccde:	e023      	b.n	800cd28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	dc02      	bgt.n	800ccf2 <USBD_GetConfig+0x2e>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dc03      	bgt.n	800ccf8 <USBD_GetConfig+0x34>
 800ccf0:	e015      	b.n	800cd1e <USBD_GetConfig+0x5a>
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d00b      	beq.n	800cd0e <USBD_GetConfig+0x4a>
 800ccf6:	e012      	b.n	800cd1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3308      	adds	r3, #8
 800cd02:	2201      	movs	r2, #1
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f927 	bl	800cf5a <USBD_CtlSendData>
        break;
 800cd0c:	e00c      	b.n	800cd28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3304      	adds	r3, #4
 800cd12:	2201      	movs	r2, #1
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f91f 	bl	800cf5a <USBD_CtlSendData>
        break;
 800cd1c:	e004      	b.n	800cd28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f8a9 	bl	800ce78 <USBD_CtlError>
        break;
 800cd26:	bf00      	nop
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	3b01      	subs	r3, #1
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d81e      	bhi.n	800cd86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	88db      	ldrh	r3, [r3, #6]
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d004      	beq.n	800cd5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f890 	bl	800ce78 <USBD_CtlError>
        break;
 800cd58:	e01a      	b.n	800cd90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f043 0202 	orr.w	r2, r3, #2
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	330c      	adds	r3, #12
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f8eb 	bl	800cf5a <USBD_CtlSendData>
      break;
 800cd84:	e004      	b.n	800cd90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f875 	bl	800ce78 <USBD_CtlError>
      break;
 800cd8e:	bf00      	nop
  }
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	885b      	ldrh	r3, [r3, #2]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d106      	bne.n	800cdb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f92b 	bl	800d00e <USBD_CtlSendStatus>
  }
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d80b      	bhi.n	800cdf0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	885b      	ldrh	r3, [r3, #2]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d10c      	bne.n	800cdfa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 f910 	bl	800d00e <USBD_CtlSendStatus>
      }
      break;
 800cdee:	e004      	b.n	800cdfa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f840 	bl	800ce78 <USBD_CtlError>
      break;
 800cdf8:	e000      	b.n	800cdfc <USBD_ClrFeature+0x3c>
      break;
 800cdfa:	bf00      	nop
  }
}
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	781a      	ldrb	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff fabb 	bl	800c3aa <SWAPBYTE>
 800ce34:	4603      	mov	r3, r0
 800ce36:	461a      	mov	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7ff faae 	bl	800c3aa <SWAPBYTE>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	461a      	mov	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f7ff faa1 	bl	800c3aa <SWAPBYTE>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	80da      	strh	r2, [r3, #6]
}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce82:	2180      	movs	r1, #128	; 0x80
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fded 	bl	800da64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fde9 	bl	800da64 <USBD_LL_StallEP>
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b086      	sub	sp, #24
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d036      	beq.n	800cf1e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ceb4:	6938      	ldr	r0, [r7, #16]
 800ceb6:	f000 f836 	bl	800cf26 <USBD_GetLen>
 800ceba:	4603      	mov	r3, r0
 800cebc:	3301      	adds	r3, #1
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	4413      	add	r3, r2
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	7812      	ldrb	r2, [r2, #0]
 800ced2:	701a      	strb	r2, [r3, #0]
  idx++;
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	3301      	adds	r3, #1
 800ced8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	4413      	add	r3, r2
 800cee0:	2203      	movs	r2, #3
 800cee2:	701a      	strb	r2, [r3, #0]
  idx++;
 800cee4:	7dfb      	ldrb	r3, [r7, #23]
 800cee6:	3301      	adds	r3, #1
 800cee8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ceea:	e013      	b.n	800cf14 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	4413      	add	r3, r2
 800cef2:	693a      	ldr	r2, [r7, #16]
 800cef4:	7812      	ldrb	r2, [r2, #0]
 800cef6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	3301      	adds	r3, #1
 800cefc:	613b      	str	r3, [r7, #16]
    idx++;
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	3301      	adds	r3, #1
 800cf02:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf04:	7dfb      	ldrb	r3, [r7, #23]
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	4413      	add	r3, r2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
 800cf10:	3301      	adds	r3, #1
 800cf12:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1e7      	bne.n	800ceec <USBD_GetString+0x52>
 800cf1c:	e000      	b.n	800cf20 <USBD_GetString+0x86>
    return;
 800cf1e:	bf00      	nop
  }
}
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf26:	b480      	push	{r7}
 800cf28:	b085      	sub	sp, #20
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf36:	e005      	b.n	800cf44 <USBD_GetLen+0x1e>
  {
    len++;
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f5      	bne.n	800cf38 <USBD_GetLen+0x12>
  }

  return len;
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2202      	movs	r2, #2
 800cf6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	2100      	movs	r1, #0
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 fdf8 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 fde7 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	2100      	movs	r1, #0
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 fdeb 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	2100      	movs	r1, #0
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 fdda 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2204      	movs	r2, #4
 800d01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d01e:	2300      	movs	r3, #0
 800d020:	2200      	movs	r2, #0
 800d022:	2100      	movs	r1, #0
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fda6 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800d02a:	2300      	movs	r3, #0
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2205      	movs	r2, #5
 800d040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d044:	2300      	movs	r3, #0
 800d046:	2200      	movs	r2, #0
 800d048:	2100      	movs	r1, #0
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fdb4 	bl	800dbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d060:	2200      	movs	r2, #0
 800d062:	4912      	ldr	r1, [pc, #72]	; (800d0ac <MX_USB_DEVICE_Init+0x50>)
 800d064:	4812      	ldr	r0, [pc, #72]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d066:	f7fe fe8f 	bl	800bd88 <USBD_Init>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d070:	f7f3 ffb2 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d074:	490f      	ldr	r1, [pc, #60]	; (800d0b4 <MX_USB_DEVICE_Init+0x58>)
 800d076:	480e      	ldr	r0, [pc, #56]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d078:	f7fe feb6 	bl	800bde8 <USBD_RegisterClass>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d082:	f7f3 ffa9 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d086:	490c      	ldr	r1, [pc, #48]	; (800d0b8 <MX_USB_DEVICE_Init+0x5c>)
 800d088:	4809      	ldr	r0, [pc, #36]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d08a:	f7fe fdd7 	bl	800bc3c <USBD_CDC_RegisterInterface>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d094:	f7f3 ffa0 	bl	8000fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d098:	4805      	ldr	r0, [pc, #20]	; (800d0b0 <MX_USB_DEVICE_Init+0x54>)
 800d09a:	f7fe fecc 	bl	800be36 <USBD_Start>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0a4:	f7f3 ff98 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0a8:	bf00      	nop
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	200004c0 	.word	0x200004c0
 800d0b0:	20000a18 	.word	0x20000a18
 800d0b4:	200003a0 	.word	0x200003a0
 800d0b8:	200004ac 	.word	0x200004ac

0800d0bc <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fd6f 	bl	800dbb8 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e000      	b.n	800d0e0 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 800d0de:	2303      	movs	r3, #3
  }
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 800d0ec:	480e      	ldr	r0, [pc, #56]	; (800d128 <CDC_Init_FS+0x40>)
 800d0ee:	f7f6 fe34 	bl	8003d5a <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 800d0f2:	480e      	ldr	r0, [pc, #56]	; (800d12c <CDC_Init_FS+0x44>)
 800d0f4:	f7f6 ff11 	bl	8003f1a <CDC_ReceiveQueue_Init>
  receivePended = true;
 800d0f8:	4b0d      	ldr	r3, [pc, #52]	; (800d130 <CDC_Init_FS+0x48>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 800d0fe:	480b      	ldr	r0, [pc, #44]	; (800d12c <CDC_Init_FS+0x44>)
 800d100:	f7f6 ff21 	bl	8003f46 <CDC_ReceiveQueue_ReserveBlock>
 800d104:	4603      	mov	r3, r0
 800d106:	4619      	mov	r1, r3
 800d108:	480a      	ldr	r0, [pc, #40]	; (800d134 <CDC_Init_FS+0x4c>)
 800d10a:	f7fe fdca 	bl	800bca2 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d10e:	2200      	movs	r2, #0
 800d110:	4909      	ldr	r1, [pc, #36]	; (800d138 <CDC_Init_FS+0x50>)
 800d112:	4808      	ldr	r0, [pc, #32]	; (800d134 <CDC_Init_FS+0x4c>)
 800d114:	f7fe fda7 	bl	800bc66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d118:	4908      	ldr	r1, [pc, #32]	; (800d13c <CDC_Init_FS+0x54>)
 800d11a:	4806      	ldr	r0, [pc, #24]	; (800d134 <CDC_Init_FS+0x4c>)
 800d11c:	f7fe fdc1 	bl	800bca2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d120:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d122:	4618      	mov	r0, r3
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000ce8 	.word	0x20000ce8
 800d12c:	20001d70 	.word	0x20001d70
 800d130:	200004a3 	.word	0x200004a3
 800d134:	20000a18 	.word	0x20000a18
 800d138:	20001570 	.word	0x20001570
 800d13c:	20000d70 	.word	0x20000d70

0800d140 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d140:	b480      	push	{r7}
 800d142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d144:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d146:	4618      	mov	r0, r3
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	6039      	str	r1, [r7, #0]
 800d15a:	71fb      	strb	r3, [r7, #7]
 800d15c:	4613      	mov	r3, r2
 800d15e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b23      	cmp	r3, #35	; 0x23
 800d164:	f200 80ac 	bhi.w	800d2c0 <CDC_Control_FS+0x170>
 800d168:	a201      	add	r2, pc, #4	; (adr r2, 800d170 <CDC_Control_FS+0x20>)
 800d16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16e:	bf00      	nop
 800d170:	0800d2c1 	.word	0x0800d2c1
 800d174:	0800d2c1 	.word	0x0800d2c1
 800d178:	0800d2c1 	.word	0x0800d2c1
 800d17c:	0800d2c1 	.word	0x0800d2c1
 800d180:	0800d2c1 	.word	0x0800d2c1
 800d184:	0800d2c1 	.word	0x0800d2c1
 800d188:	0800d2c1 	.word	0x0800d2c1
 800d18c:	0800d2c1 	.word	0x0800d2c1
 800d190:	0800d2c1 	.word	0x0800d2c1
 800d194:	0800d2c1 	.word	0x0800d2c1
 800d198:	0800d2c1 	.word	0x0800d2c1
 800d19c:	0800d2c1 	.word	0x0800d2c1
 800d1a0:	0800d2c1 	.word	0x0800d2c1
 800d1a4:	0800d2c1 	.word	0x0800d2c1
 800d1a8:	0800d2c1 	.word	0x0800d2c1
 800d1ac:	0800d2c1 	.word	0x0800d2c1
 800d1b0:	0800d2c1 	.word	0x0800d2c1
 800d1b4:	0800d2c1 	.word	0x0800d2c1
 800d1b8:	0800d2c1 	.word	0x0800d2c1
 800d1bc:	0800d2c1 	.word	0x0800d2c1
 800d1c0:	0800d2c1 	.word	0x0800d2c1
 800d1c4:	0800d2c1 	.word	0x0800d2c1
 800d1c8:	0800d2c1 	.word	0x0800d2c1
 800d1cc:	0800d2c1 	.word	0x0800d2c1
 800d1d0:	0800d2c1 	.word	0x0800d2c1
 800d1d4:	0800d2c1 	.word	0x0800d2c1
 800d1d8:	0800d2c1 	.word	0x0800d2c1
 800d1dc:	0800d2c1 	.word	0x0800d2c1
 800d1e0:	0800d2c1 	.word	0x0800d2c1
 800d1e4:	0800d2c1 	.word	0x0800d2c1
 800d1e8:	0800d2c1 	.word	0x0800d2c1
 800d1ec:	0800d2c1 	.word	0x0800d2c1
 800d1f0:	0800d201 	.word	0x0800d201
 800d1f4:	0800d245 	.word	0x0800d245
 800d1f8:	0800d299 	.word	0x0800d299
 800d1fc:	0800d2c1 	.word	0x0800d2c1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	461a      	mov	r2, r3
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	3301      	adds	r3, #1
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	021b      	lsls	r3, r3, #8
 800d20e:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	3302      	adds	r3, #2
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d218:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	3303      	adds	r3, #3
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	061b      	lsls	r3, r3, #24
 800d222:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d224:	461a      	mov	r2, r3
 800d226:	4b2b      	ldr	r3, [pc, #172]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d228:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	791a      	ldrb	r2, [r3, #4]
 800d22e:	4b29      	ldr	r3, [pc, #164]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d230:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	795a      	ldrb	r2, [r3, #5]
 800d236:	4b27      	ldr	r3, [pc, #156]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d238:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	799a      	ldrb	r2, [r3, #6]
 800d23e:	4b25      	ldr	r3, [pc, #148]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d240:	719a      	strb	r2, [r3, #6]
    break;
 800d242:	e040      	b.n	800d2c6 <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800d244:	4b23      	ldr	r3, [pc, #140]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800d24e:	4b21      	ldr	r3, [pc, #132]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	0a1a      	lsrs	r2, r3, #8
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	3301      	adds	r3, #1
 800d258:	b2d2      	uxtb	r2, r2
 800d25a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800d25c:	4b1d      	ldr	r3, [pc, #116]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	0c1a      	lsrs	r2, r3, #16
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	3302      	adds	r3, #2
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800d26a:	4b1a      	ldr	r3, [pc, #104]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	0e1a      	lsrs	r2, r3, #24
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	3303      	adds	r3, #3
 800d274:	b2d2      	uxtb	r2, r2
 800d276:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4a15      	ldr	r2, [pc, #84]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d27e:	7912      	ldrb	r2, [r2, #4]
 800d280:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	3305      	adds	r3, #5
 800d286:	4a13      	ldr	r2, [pc, #76]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d288:	7952      	ldrb	r2, [r2, #5]
 800d28a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	3306      	adds	r3, #6
 800d290:	4a10      	ldr	r2, [pc, #64]	; (800d2d4 <CDC_Control_FS+0x184>)
 800d292:	7992      	ldrb	r2, [r2, #6]
 800d294:	701a      	strb	r2, [r3, #0]
    break;
 800d296:	e016      	b.n	800d2c6 <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	885b      	ldrh	r3, [r3, #2]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	bf14      	ite	ne
 800d2a4:	2301      	movne	r3, #1
 800d2a6:	2300      	moveq	r3, #0
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	461a      	mov	r2, r3
      lineState =
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <CDC_Control_FS+0x188>)
 800d2ae:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 800d2b0:	4b09      	ldr	r3, [pc, #36]	; (800d2d8 <CDC_Control_FS+0x188>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d005      	beq.n	800d2c4 <CDC_Control_FS+0x174>
              transmitStart = 0;
 800d2b8:	4b08      	ldr	r3, [pc, #32]	; (800d2dc <CDC_Control_FS+0x18c>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800d2be:	e001      	b.n	800d2c4 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d2c0:	bf00      	nop
 800d2c2:	e000      	b.n	800d2c6 <CDC_Control_FS+0x176>
    break;
 800d2c4:	bf00      	nop
  }

  return (USBD_OK);
 800d2c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	200004a4 	.word	0x200004a4
 800d2d8:	200005a0 	.word	0x200005a0
 800d2dc:	200005a4 	.word	0x200005a4

0800d2e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	480b      	ldr	r0, [pc, #44]	; (800d320 <CDC_Receive_FS+0x40>)
 800d2f4:	f7f6 fe7c 	bl	8003ff0 <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <CDC_Receive_FS+0x44>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 800d2fe:	f000 f86f 	bl	800d3e0 <CDC_resume_receive>
 800d302:	4603      	mov	r3, r0
 800d304:	f083 0301 	eor.w	r3, r3, #1
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 800d30e:	4806      	ldr	r0, [pc, #24]	; (800d328 <CDC_Receive_FS+0x48>)
 800d310:	f7ff fed4 	bl	800d0bc <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 800d314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d316:	4618      	mov	r0, r3
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001d70 	.word	0x20001d70
 800d324:	200004a3 	.word	0x200004a3
 800d328:	20000a18 	.word	0x20000a18

0800d32c <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 800d332:	4b11      	ldr	r3, [pc, #68]	; (800d378 <CDC_connected+0x4c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d005      	beq.n	800d34a <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 800d33e:	f7f7 f891 	bl	8004464 <HAL_GetTick>
 800d342:	4602      	mov	r2, r0
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 800d34a:	4b0c      	ldr	r3, [pc, #48]	; (800d37c <CDC_connected+0x50>)
 800d34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d350:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 800d352:	2b03      	cmp	r3, #3
 800d354:	d108      	bne.n	800d368 <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d805      	bhi.n	800d368 <CDC_connected+0x3c>
         && lineState;
 800d35c:	4b08      	ldr	r3, [pc, #32]	; (800d380 <CDC_connected+0x54>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <CDC_connected+0x3c>
 800d364:	2301      	movs	r3, #1
 800d366:	e000      	b.n	800d36a <CDC_connected+0x3e>
 800d368:	2300      	movs	r3, #0
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	b2db      	uxtb	r3, r3
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	200005a4 	.word	0x200005a4
 800d37c:	20000a18 	.word	0x20000a18
 800d380:	200005a0 	.word	0x200005a0

0800d384 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800d38a:	4b12      	ldr	r3, [pc, #72]	; (800d3d4 <CDC_continue_transmit+0x50>)
 800d38c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d390:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d116      	bne.n	800d3ca <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 800d39c:	1dbb      	adds	r3, r7, #6
 800d39e:	4619      	mov	r1, r3
 800d3a0:	480d      	ldr	r0, [pc, #52]	; (800d3d8 <CDC_continue_transmit+0x54>)
 800d3a2:	f7f6 fd69 	bl	8003e78 <CDC_TransmitQueue_ReadBlock>
 800d3a6:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 800d3a8:	88fb      	ldrh	r3, [r7, #6]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00d      	beq.n	800d3ca <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 800d3ae:	f7f7 f859 	bl	8004464 <HAL_GetTick>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	4a09      	ldr	r2, [pc, #36]	; (800d3dc <CDC_continue_transmit+0x58>)
 800d3b6:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	68b9      	ldr	r1, [r7, #8]
 800d3be:	4805      	ldr	r0, [pc, #20]	; (800d3d4 <CDC_continue_transmit+0x50>)
 800d3c0:	f7fe fc51 	bl	800bc66 <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d3c4:	4803      	ldr	r0, [pc, #12]	; (800d3d4 <CDC_continue_transmit+0x50>)
 800d3c6:	f7fe fc85 	bl	800bcd4 <USBD_CDC_TransmitPacket>
    }
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	20000a18 	.word	0x20000a18
 800d3d8:	20000ce8 	.word	0x20000ce8
 800d3dc:	200005a4 	.word	0x200005a4

0800d3e0 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 800d3e6:	4b10      	ldr	r3, [pc, #64]	; (800d428 <CDC_resume_receive+0x48>)
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f083 0301 	eor.w	r3, r3, #1
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d012      	beq.n	800d41c <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 800d3f6:	480d      	ldr	r0, [pc, #52]	; (800d42c <CDC_resume_receive+0x4c>)
 800d3f8:	f7f6 fda5 	bl	8003f46 <CDC_ReceiveQueue_ReserveBlock>
 800d3fc:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00b      	beq.n	800d41c <CDC_resume_receive+0x3c>
      receivePended = true;
 800d404:	4b08      	ldr	r3, [pc, #32]	; (800d428 <CDC_resume_receive+0x48>)
 800d406:	2201      	movs	r2, #1
 800d408:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 800d40a:	6879      	ldr	r1, [r7, #4]
 800d40c:	4808      	ldr	r0, [pc, #32]	; (800d430 <CDC_resume_receive+0x50>)
 800d40e:	f7fe fc48 	bl	800bca2 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d412:	4807      	ldr	r0, [pc, #28]	; (800d430 <CDC_resume_receive+0x50>)
 800d414:	f7fe fc8e 	bl	800bd34 <USBD_CDC_ReceivePacket>
      return true;
 800d418:	2301      	movs	r3, #1
 800d41a:	e000      	b.n	800d41e <CDC_resume_receive+0x3e>
    }
  }
  return false;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	200004a3 	.word	0x200004a3
 800d42c:	20001d70 	.word	0x20001d70
 800d430:	20000a18 	.word	0x20000a18

0800d434 <CDC_init>:

int8_t CDC_init(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 800d438:	f7ff fe56 	bl	800d0e8 <CDC_Init_FS>
 800d43c:	4603      	mov	r3, r0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	bd80      	pop	{r7, pc}

0800d442 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 800d446:	f7ff fe7b 	bl	800d140 <CDC_DeInit_FS>
 800d44a:	4603      	mov	r3, r0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
  transmitStart = 0;
 800d454:	4b05      	ldr	r3, [pc, #20]	; (800d46c <USBD_CDC_Transferred+0x1c>)
 800d456:	2200      	movs	r2, #0
 800d458:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 800d45a:	4805      	ldr	r0, [pc, #20]	; (800d470 <USBD_CDC_Transferred+0x20>)
 800d45c:	f7f6 fd43 	bl	8003ee6 <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 800d460:	f7ff ff90 	bl	800d384 <CDC_continue_transmit>
  return (USBD_OK);
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200005a4 	.word	0x200005a4
 800d470:	20000ce8 	.word	0x20000ce8

0800d474 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	6039      	str	r1, [r7, #0]
 800d47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2212      	movs	r2, #18
 800d484:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d486:	4b03      	ldr	r3, [pc, #12]	; (800d494 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d488:	4618      	mov	r0, r3
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	200004dc 	.word	0x200004dc

0800d498 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	6039      	str	r1, [r7, #0]
 800d4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2204      	movs	r2, #4
 800d4a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4aa:	4b03      	ldr	r3, [pc, #12]	; (800d4b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	200004f0 	.word	0x200004f0

0800d4bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	6039      	str	r1, [r7, #0]
 800d4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d105      	bne.n	800d4da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4ce:	683a      	ldr	r2, [r7, #0]
 800d4d0:	4907      	ldr	r1, [pc, #28]	; (800d4f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d4d2:	4808      	ldr	r0, [pc, #32]	; (800d4f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4d4:	f7ff fce1 	bl	800ce9a <USBD_GetString>
 800d4d8:	e004      	b.n	800d4e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4da:	683a      	ldr	r2, [r7, #0]
 800d4dc:	4904      	ldr	r1, [pc, #16]	; (800d4f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d4de:	4805      	ldr	r0, [pc, #20]	; (800d4f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d4e0:	f7ff fcdb 	bl	800ce9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d4e4:	4b02      	ldr	r3, [pc, #8]	; (800d4f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20001e38 	.word	0x20001e38
 800d4f4:	0800ea04 	.word	0x0800ea04

0800d4f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	6039      	str	r1, [r7, #0]
 800d502:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	4904      	ldr	r1, [pc, #16]	; (800d518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d508:	4804      	ldr	r0, [pc, #16]	; (800d51c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d50a:	f7ff fcc6 	bl	800ce9a <USBD_GetString>
  return USBD_StrDesc;
 800d50e:	4b02      	ldr	r3, [pc, #8]	; (800d518 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	20001e38 	.word	0x20001e38
 800d51c:	0800ea1c 	.word	0x0800ea1c

0800d520 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	221a      	movs	r2, #26
 800d530:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d532:	f000 f843 	bl	800d5bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d536:	4b02      	ldr	r3, [pc, #8]	; (800d540 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	200004f4 	.word	0x200004f4

0800d544 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	6039      	str	r1, [r7, #0]
 800d54e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	4907      	ldr	r1, [pc, #28]	; (800d578 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d55a:	4808      	ldr	r0, [pc, #32]	; (800d57c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d55c:	f7ff fc9d 	bl	800ce9a <USBD_GetString>
 800d560:	e004      	b.n	800d56c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d562:	683a      	ldr	r2, [r7, #0]
 800d564:	4904      	ldr	r1, [pc, #16]	; (800d578 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d566:	4805      	ldr	r0, [pc, #20]	; (800d57c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d568:	f7ff fc97 	bl	800ce9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20001e38 	.word	0x20001e38
 800d57c:	0800ea30 	.word	0x0800ea30

0800d580 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	6039      	str	r1, [r7, #0]
 800d58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d105      	bne.n	800d59e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	4907      	ldr	r1, [pc, #28]	; (800d5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d596:	4808      	ldr	r0, [pc, #32]	; (800d5b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d598:	f7ff fc7f 	bl	800ce9a <USBD_GetString>
 800d59c:	e004      	b.n	800d5a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	4904      	ldr	r1, [pc, #16]	; (800d5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5a2:	4805      	ldr	r0, [pc, #20]	; (800d5b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5a4:	f7ff fc79 	bl	800ce9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5a8:	4b02      	ldr	r3, [pc, #8]	; (800d5b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20001e38 	.word	0x20001e38
 800d5b8:	0800ea3c 	.word	0x0800ea3c

0800d5bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <Get_SerialNum+0x44>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5c8:	4b0e      	ldr	r3, [pc, #56]	; (800d604 <Get_SerialNum+0x48>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5ce:	4b0e      	ldr	r3, [pc, #56]	; (800d608 <Get_SerialNum+0x4c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4413      	add	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d009      	beq.n	800d5f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d5e2:	2208      	movs	r2, #8
 800d5e4:	4909      	ldr	r1, [pc, #36]	; (800d60c <Get_SerialNum+0x50>)
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 f814 	bl	800d614 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5ec:	2204      	movs	r2, #4
 800d5ee:	4908      	ldr	r1, [pc, #32]	; (800d610 <Get_SerialNum+0x54>)
 800d5f0:	68b8      	ldr	r0, [r7, #8]
 800d5f2:	f000 f80f 	bl	800d614 <IntToUnicode>
  }
}
 800d5f6:	bf00      	nop
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	1fff7a10 	.word	0x1fff7a10
 800d604:	1fff7a14 	.word	0x1fff7a14
 800d608:	1fff7a18 	.word	0x1fff7a18
 800d60c:	200004f6 	.word	0x200004f6
 800d610:	20000506 	.word	0x20000506

0800d614 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4613      	mov	r3, r2
 800d620:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d622:	2300      	movs	r3, #0
 800d624:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]
 800d62a:	e027      	b.n	800d67c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	0f1b      	lsrs	r3, r3, #28
 800d630:	2b09      	cmp	r3, #9
 800d632:	d80b      	bhi.n	800d64c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	0f1b      	lsrs	r3, r3, #28
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	4619      	mov	r1, r3
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	440b      	add	r3, r1
 800d644:	3230      	adds	r2, #48	; 0x30
 800d646:	b2d2      	uxtb	r2, r2
 800d648:	701a      	strb	r2, [r3, #0]
 800d64a:	e00a      	b.n	800d662 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	0f1b      	lsrs	r3, r3, #28
 800d650:	b2da      	uxtb	r2, r3
 800d652:	7dfb      	ldrb	r3, [r7, #23]
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	4619      	mov	r1, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	440b      	add	r3, r1
 800d65c:	3237      	adds	r2, #55	; 0x37
 800d65e:	b2d2      	uxtb	r2, r2
 800d660:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	011b      	lsls	r3, r3, #4
 800d666:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	3301      	adds	r3, #1
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	4413      	add	r3, r2
 800d672:	2200      	movs	r2, #0
 800d674:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d676:	7dfb      	ldrb	r3, [r7, #23]
 800d678:	3301      	adds	r3, #1
 800d67a:	75fb      	strb	r3, [r7, #23]
 800d67c:	7dfa      	ldrb	r2, [r7, #23]
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	429a      	cmp	r2, r3
 800d682:	d3d3      	bcc.n	800d62c <IntToUnicode+0x18>
  }
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
	...

0800d694 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b08a      	sub	sp, #40	; 0x28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d69c:	f107 0314 	add.w	r3, r7, #20
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	605a      	str	r2, [r3, #4]
 800d6a6:	609a      	str	r2, [r3, #8]
 800d6a8:	60da      	str	r2, [r3, #12]
 800d6aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6b4:	d13a      	bne.n	800d72c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	613b      	str	r3, [r7, #16]
 800d6ba:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d6c0:	f043 0301 	orr.w	r3, r3, #1
 800d6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800d6c6:	4b1b      	ldr	r3, [pc, #108]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	613b      	str	r3, [r7, #16]
 800d6d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d6d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d6d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6d8:	2302      	movs	r3, #2
 800d6da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6e4:	230a      	movs	r3, #10
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6e8:	f107 0314 	add.w	r3, r7, #20
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4812      	ldr	r0, [pc, #72]	; (800d738 <HAL_PCD_MspInit+0xa4>)
 800d6f0:	f7f7 f8be 	bl	8004870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6f4:	4b0f      	ldr	r3, [pc, #60]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	4a0e      	ldr	r2, [pc, #56]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d6fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6fe:	6353      	str	r3, [r2, #52]	; 0x34
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d708:	4a0a      	ldr	r2, [pc, #40]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d70a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d70e:	6453      	str	r3, [r2, #68]	; 0x44
 800d710:	4b08      	ldr	r3, [pc, #32]	; (800d734 <HAL_PCD_MspInit+0xa0>)
 800d712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d718:	60fb      	str	r3, [r7, #12]
 800d71a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d71c:	2200      	movs	r2, #0
 800d71e:	2100      	movs	r1, #0
 800d720:	2043      	movs	r0, #67	; 0x43
 800d722:	f7f6 ffce 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d726:	2043      	movs	r0, #67	; 0x43
 800d728:	f7f6 ffe7 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d72c:	bf00      	nop
 800d72e:	3728      	adds	r7, #40	; 0x28
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	40023800 	.word	0x40023800
 800d738:	40020000 	.word	0x40020000

0800d73c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d750:	4619      	mov	r1, r3
 800d752:	4610      	mov	r0, r2
 800d754:	f7fe fbba 	bl	800becc <USBD_LL_SetupStage>
}
 800d758:	bf00      	nop
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d772:	78fa      	ldrb	r2, [r7, #3]
 800d774:	6879      	ldr	r1, [r7, #4]
 800d776:	4613      	mov	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	1a9b      	subs	r3, r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	440b      	add	r3, r1
 800d780:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	78fb      	ldrb	r3, [r7, #3]
 800d788:	4619      	mov	r1, r3
 800d78a:	f7fe fbf4 	bl	800bf76 <USBD_LL_DataOutStage>
}
 800d78e:	bf00      	nop
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7a8:	78fa      	ldrb	r2, [r7, #3]
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	1a9b      	subs	r3, r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	440b      	add	r3, r1
 800d7b6:	3348      	adds	r3, #72	; 0x48
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	f7fe fc3d 	bl	800c03c <USBD_LL_DataInStage>
}
 800d7c2:	bf00      	nop
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fd51 	bl	800c280 <USBD_LL_SOF>
}
 800d7de:	bf00      	nop
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b084      	sub	sp, #16
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d001      	beq.n	800d7fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d7fa:	f7f3 fbed 	bl	8000fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d804:	7bfa      	ldrb	r2, [r7, #15]
 800d806:	4611      	mov	r1, r2
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fe fcfb 	bl	800c204 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d814:	4618      	mov	r0, r3
 800d816:	f7fe fca7 	bl	800c168 <USBD_LL_Reset>
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fcf6 	bl	800c224 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a1b      	ldr	r3, [r3, #32]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d858:	4b04      	ldr	r3, [pc, #16]	; (800d86c <HAL_PCD_SuspendCallback+0x48>)
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	4a03      	ldr	r2, [pc, #12]	; (800d86c <HAL_PCD_SuspendCallback+0x48>)
 800d85e:	f043 0306 	orr.w	r3, r3, #6
 800d862:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d864:	bf00      	nop
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	e000ed00 	.word	0xe000ed00

0800d870 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe fce6 	bl	800c250 <USBD_LL_Resume>
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d89e:	78fa      	ldrb	r2, [r7, #3]
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fe fd34 	bl	800c310 <USBD_LL_IsoOUTIncomplete>
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8c2:	78fa      	ldrb	r2, [r7, #3]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fcfc 	bl	800c2c4 <USBD_LL_IsoINIncomplete>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fd3a 	bl	800c35c <USBD_LL_DevConnected>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fd37 	bl	800c372 <USBD_LL_DevDisconnected>
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d13c      	bne.n	800d996 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d91c:	4a20      	ldr	r2, [pc, #128]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a1e      	ldr	r2, [pc, #120]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d928:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d92c:	4b1c      	ldr	r3, [pc, #112]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d92e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d934:	4b1a      	ldr	r3, [pc, #104]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d936:	2204      	movs	r2, #4
 800d938:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d93a:	4b19      	ldr	r3, [pc, #100]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d93c:	2202      	movs	r2, #2
 800d93e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d940:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d942:	2200      	movs	r2, #0
 800d944:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d946:	4b16      	ldr	r3, [pc, #88]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d948:	2202      	movs	r2, #2
 800d94a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d94c:	4b14      	ldr	r3, [pc, #80]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d94e:	2201      	movs	r2, #1
 800d950:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d952:	4b13      	ldr	r3, [pc, #76]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d954:	2200      	movs	r2, #0
 800d956:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d958:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d95e:	4b10      	ldr	r3, [pc, #64]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d960:	2200      	movs	r2, #0
 800d962:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d966:	2200      	movs	r2, #0
 800d968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d96a:	480d      	ldr	r0, [pc, #52]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d96c:	f7f8 faf7 	bl	8005f5e <HAL_PCD_Init>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d976:	f7f3 fb2f 	bl	8000fd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d97a:	2180      	movs	r1, #128	; 0x80
 800d97c:	4808      	ldr	r0, [pc, #32]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d97e:	f7f9 fc54 	bl	800722a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d982:	2240      	movs	r2, #64	; 0x40
 800d984:	2100      	movs	r1, #0
 800d986:	4806      	ldr	r0, [pc, #24]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d988:	f7f9 fc08 	bl	800719c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d98c:	2280      	movs	r2, #128	; 0x80
 800d98e:	2101      	movs	r1, #1
 800d990:	4803      	ldr	r0, [pc, #12]	; (800d9a0 <USBD_LL_Init+0x94>)
 800d992:	f7f9 fc03 	bl	800719c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20002038 	.word	0x20002038

0800d9a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f8 fbec 	bl	8006198 <HAL_PCD_Start>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 f942 	bl	800dc50 <USBD_Get_USB_Status>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	70fb      	strb	r3, [r7, #3]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70bb      	strb	r3, [r7, #2]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da02:	78bb      	ldrb	r3, [r7, #2]
 800da04:	883a      	ldrh	r2, [r7, #0]
 800da06:	78f9      	ldrb	r1, [r7, #3]
 800da08:	f7f8 ffd0 	bl	80069ac <HAL_PCD_EP_Open>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f91c 	bl	800dc50 <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da40:	78fa      	ldrb	r2, [r7, #3]
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7f9 f819 	bl	8006a7c <HAL_PCD_EP_Close>
 800da4a:	4603      	mov	r3, r0
 800da4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f8fd 	bl	800dc50 <USBD_Get_USB_Status>
 800da56:	4603      	mov	r3, r0
 800da58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da7e:	78fa      	ldrb	r2, [r7, #3]
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f7f9 f8f1 	bl	8006c6a <HAL_PCD_EP_SetStall>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 f8de 	bl	800dc50 <USBD_Get_USB_Status>
 800da94:	4603      	mov	r3, r0
 800da96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da98:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dabc:	78fa      	ldrb	r2, [r7, #3]
 800dabe:	4611      	mov	r1, r2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f9 f936 	bl	8006d32 <HAL_PCD_EP_ClrStall>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f8bf 	bl	800dc50 <USBD_Get_USB_Status>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800daf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800daf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da0b      	bge.n	800db14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db02:	68f9      	ldr	r1, [r7, #12]
 800db04:	4613      	mov	r3, r2
 800db06:	00db      	lsls	r3, r3, #3
 800db08:	1a9b      	subs	r3, r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	333e      	adds	r3, #62	; 0x3e
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	e00b      	b.n	800db2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db1a:	68f9      	ldr	r1, [r7, #12]
 800db1c:	4613      	mov	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	1a9b      	subs	r3, r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	440b      	add	r3, r1
 800db26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db52:	78fa      	ldrb	r2, [r7, #3]
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7f8 ff03 	bl	8006962 <HAL_PCD_SetAddress>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f874 	bl	800dc50 <USBD_Get_USB_Status>
 800db68:	4603      	mov	r3, r0
 800db6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	460b      	mov	r3, r1
 800db84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db94:	7af9      	ldrb	r1, [r7, #11]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	f7f9 f81c 	bl	8006bd6 <HAL_PCD_EP_Transmit>
 800db9e:	4603      	mov	r3, r0
 800dba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba2:	7dfb      	ldrb	r3, [r7, #23]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f853 	bl	800dc50 <USBD_Get_USB_Status>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbae:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	607a      	str	r2, [r7, #4]
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbd6:	7af9      	ldrb	r1, [r7, #11]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	f7f8 ff98 	bl	8006b10 <HAL_PCD_EP_Receive>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f832 	bl	800dc50 <USBD_Get_USB_Status>
 800dbec:	4603      	mov	r3, r0
 800dbee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b082      	sub	sp, #8
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc0c:	78fa      	ldrb	r2, [r7, #3]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f8 ffc8 	bl	8006ba6 <HAL_PCD_EP_GetRxCount>
 800dc16:	4603      	mov	r3, r0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc28:	4b03      	ldr	r3, [pc, #12]	; (800dc38 <USBD_static_malloc+0x18>)
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	200005a8 	.word	0x200005a8

0800dc3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]

}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d817      	bhi.n	800dc94 <USBD_Get_USB_Status+0x44>
 800dc64:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <USBD_Get_USB_Status+0x1c>)
 800dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6a:	bf00      	nop
 800dc6c:	0800dc7d 	.word	0x0800dc7d
 800dc70:	0800dc83 	.word	0x0800dc83
 800dc74:	0800dc89 	.word	0x0800dc89
 800dc78:	0800dc8f 	.word	0x0800dc8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc80:	e00b      	b.n	800dc9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc82:	2303      	movs	r3, #3
 800dc84:	73fb      	strb	r3, [r7, #15]
    break;
 800dc86:	e008      	b.n	800dc9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc8c:	e005      	b.n	800dc9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	73fb      	strb	r3, [r7, #15]
    break;
 800dc92:	e002      	b.n	800dc9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc94:	2303      	movs	r3, #3
 800dc96:	73fb      	strb	r3, [r7, #15]
    break;
 800dc98:	bf00      	nop
  }
  return usb_status;
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <atoi>:
 800dca8:	220a      	movs	r2, #10
 800dcaa:	2100      	movs	r1, #0
 800dcac:	f000 b9dc 	b.w	800e068 <strtol>

0800dcb0 <__errno>:
 800dcb0:	4b01      	ldr	r3, [pc, #4]	; (800dcb8 <__errno+0x8>)
 800dcb2:	6818      	ldr	r0, [r3, #0]
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	20000510 	.word	0x20000510

0800dcbc <__libc_init_array>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	4d0d      	ldr	r5, [pc, #52]	; (800dcf4 <__libc_init_array+0x38>)
 800dcc0:	4c0d      	ldr	r4, [pc, #52]	; (800dcf8 <__libc_init_array+0x3c>)
 800dcc2:	1b64      	subs	r4, r4, r5
 800dcc4:	10a4      	asrs	r4, r4, #2
 800dcc6:	2600      	movs	r6, #0
 800dcc8:	42a6      	cmp	r6, r4
 800dcca:	d109      	bne.n	800dce0 <__libc_init_array+0x24>
 800dccc:	4d0b      	ldr	r5, [pc, #44]	; (800dcfc <__libc_init_array+0x40>)
 800dcce:	4c0c      	ldr	r4, [pc, #48]	; (800dd00 <__libc_init_array+0x44>)
 800dcd0:	f000 fd98 	bl	800e804 <_init>
 800dcd4:	1b64      	subs	r4, r4, r5
 800dcd6:	10a4      	asrs	r4, r4, #2
 800dcd8:	2600      	movs	r6, #0
 800dcda:	42a6      	cmp	r6, r4
 800dcdc:	d105      	bne.n	800dcea <__libc_init_array+0x2e>
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dce4:	4798      	blx	r3
 800dce6:	3601      	adds	r6, #1
 800dce8:	e7ee      	b.n	800dcc8 <__libc_init_array+0xc>
 800dcea:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcee:	4798      	blx	r3
 800dcf0:	3601      	adds	r6, #1
 800dcf2:	e7f2      	b.n	800dcda <__libc_init_array+0x1e>
 800dcf4:	0800ebe8 	.word	0x0800ebe8
 800dcf8:	0800ebe8 	.word	0x0800ebe8
 800dcfc:	0800ebe8 	.word	0x0800ebe8
 800dd00:	0800ebec 	.word	0x0800ebec

0800dd04 <__itoa>:
 800dd04:	1e93      	subs	r3, r2, #2
 800dd06:	2b22      	cmp	r3, #34	; 0x22
 800dd08:	b510      	push	{r4, lr}
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	d904      	bls.n	800dd18 <__itoa+0x14>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	700b      	strb	r3, [r1, #0]
 800dd12:	461c      	mov	r4, r3
 800dd14:	4620      	mov	r0, r4
 800dd16:	bd10      	pop	{r4, pc}
 800dd18:	2a0a      	cmp	r2, #10
 800dd1a:	d109      	bne.n	800dd30 <__itoa+0x2c>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	da07      	bge.n	800dd30 <__itoa+0x2c>
 800dd20:	232d      	movs	r3, #45	; 0x2d
 800dd22:	700b      	strb	r3, [r1, #0]
 800dd24:	4240      	negs	r0, r0
 800dd26:	2101      	movs	r1, #1
 800dd28:	4421      	add	r1, r4
 800dd2a:	f000 f9a7 	bl	800e07c <__utoa>
 800dd2e:	e7f1      	b.n	800dd14 <__itoa+0x10>
 800dd30:	2100      	movs	r1, #0
 800dd32:	e7f9      	b.n	800dd28 <__itoa+0x24>

0800dd34 <itoa>:
 800dd34:	f7ff bfe6 	b.w	800dd04 <__itoa>

0800dd38 <malloc>:
 800dd38:	4b02      	ldr	r3, [pc, #8]	; (800dd44 <malloc+0xc>)
 800dd3a:	4601      	mov	r1, r0
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	f000 b871 	b.w	800de24 <_malloc_r>
 800dd42:	bf00      	nop
 800dd44:	20000510 	.word	0x20000510

0800dd48 <free>:
 800dd48:	4b02      	ldr	r3, [pc, #8]	; (800dd54 <free+0xc>)
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	6818      	ldr	r0, [r3, #0]
 800dd4e:	f000 b819 	b.w	800dd84 <_free_r>
 800dd52:	bf00      	nop
 800dd54:	20000510 	.word	0x20000510

0800dd58 <memcpy>:
 800dd58:	440a      	add	r2, r1
 800dd5a:	4291      	cmp	r1, r2
 800dd5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd60:	d100      	bne.n	800dd64 <memcpy+0xc>
 800dd62:	4770      	bx	lr
 800dd64:	b510      	push	{r4, lr}
 800dd66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd6e:	4291      	cmp	r1, r2
 800dd70:	d1f9      	bne.n	800dd66 <memcpy+0xe>
 800dd72:	bd10      	pop	{r4, pc}

0800dd74 <memset>:
 800dd74:	4402      	add	r2, r0
 800dd76:	4603      	mov	r3, r0
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d100      	bne.n	800dd7e <memset+0xa>
 800dd7c:	4770      	bx	lr
 800dd7e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd82:	e7f9      	b.n	800dd78 <memset+0x4>

0800dd84 <_free_r>:
 800dd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd86:	2900      	cmp	r1, #0
 800dd88:	d048      	beq.n	800de1c <_free_r+0x98>
 800dd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd8e:	9001      	str	r0, [sp, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f1a1 0404 	sub.w	r4, r1, #4
 800dd96:	bfb8      	it	lt
 800dd98:	18e4      	addlt	r4, r4, r3
 800dd9a:	f000 f9ed 	bl	800e178 <__malloc_lock>
 800dd9e:	4a20      	ldr	r2, [pc, #128]	; (800de20 <_free_r+0x9c>)
 800dda0:	9801      	ldr	r0, [sp, #4]
 800dda2:	6813      	ldr	r3, [r2, #0]
 800dda4:	4615      	mov	r5, r2
 800dda6:	b933      	cbnz	r3, 800ddb6 <_free_r+0x32>
 800dda8:	6063      	str	r3, [r4, #4]
 800ddaa:	6014      	str	r4, [r2, #0]
 800ddac:	b003      	add	sp, #12
 800ddae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddb2:	f000 b9e7 	b.w	800e184 <__malloc_unlock>
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	d90b      	bls.n	800ddd2 <_free_r+0x4e>
 800ddba:	6821      	ldr	r1, [r4, #0]
 800ddbc:	1862      	adds	r2, r4, r1
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	bf04      	itt	eq
 800ddc2:	681a      	ldreq	r2, [r3, #0]
 800ddc4:	685b      	ldreq	r3, [r3, #4]
 800ddc6:	6063      	str	r3, [r4, #4]
 800ddc8:	bf04      	itt	eq
 800ddca:	1852      	addeq	r2, r2, r1
 800ddcc:	6022      	streq	r2, [r4, #0]
 800ddce:	602c      	str	r4, [r5, #0]
 800ddd0:	e7ec      	b.n	800ddac <_free_r+0x28>
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	b10b      	cbz	r3, 800dddc <_free_r+0x58>
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d9fa      	bls.n	800ddd2 <_free_r+0x4e>
 800dddc:	6811      	ldr	r1, [r2, #0]
 800ddde:	1855      	adds	r5, r2, r1
 800dde0:	42a5      	cmp	r5, r4
 800dde2:	d10b      	bne.n	800ddfc <_free_r+0x78>
 800dde4:	6824      	ldr	r4, [r4, #0]
 800dde6:	4421      	add	r1, r4
 800dde8:	1854      	adds	r4, r2, r1
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	6011      	str	r1, [r2, #0]
 800ddee:	d1dd      	bne.n	800ddac <_free_r+0x28>
 800ddf0:	681c      	ldr	r4, [r3, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	6053      	str	r3, [r2, #4]
 800ddf6:	4421      	add	r1, r4
 800ddf8:	6011      	str	r1, [r2, #0]
 800ddfa:	e7d7      	b.n	800ddac <_free_r+0x28>
 800ddfc:	d902      	bls.n	800de04 <_free_r+0x80>
 800ddfe:	230c      	movs	r3, #12
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	e7d3      	b.n	800ddac <_free_r+0x28>
 800de04:	6825      	ldr	r5, [r4, #0]
 800de06:	1961      	adds	r1, r4, r5
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf04      	itt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	6063      	str	r3, [r4, #4]
 800de12:	bf04      	itt	eq
 800de14:	1949      	addeq	r1, r1, r5
 800de16:	6021      	streq	r1, [r4, #0]
 800de18:	6054      	str	r4, [r2, #4]
 800de1a:	e7c7      	b.n	800ddac <_free_r+0x28>
 800de1c:	b003      	add	sp, #12
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	200007c8 	.word	0x200007c8

0800de24 <_malloc_r>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	1ccd      	adds	r5, r1, #3
 800de28:	f025 0503 	bic.w	r5, r5, #3
 800de2c:	3508      	adds	r5, #8
 800de2e:	2d0c      	cmp	r5, #12
 800de30:	bf38      	it	cc
 800de32:	250c      	movcc	r5, #12
 800de34:	2d00      	cmp	r5, #0
 800de36:	4606      	mov	r6, r0
 800de38:	db01      	blt.n	800de3e <_malloc_r+0x1a>
 800de3a:	42a9      	cmp	r1, r5
 800de3c:	d903      	bls.n	800de46 <_malloc_r+0x22>
 800de3e:	230c      	movs	r3, #12
 800de40:	6033      	str	r3, [r6, #0]
 800de42:	2000      	movs	r0, #0
 800de44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de46:	f000 f997 	bl	800e178 <__malloc_lock>
 800de4a:	4921      	ldr	r1, [pc, #132]	; (800ded0 <_malloc_r+0xac>)
 800de4c:	680a      	ldr	r2, [r1, #0]
 800de4e:	4614      	mov	r4, r2
 800de50:	b99c      	cbnz	r4, 800de7a <_malloc_r+0x56>
 800de52:	4f20      	ldr	r7, [pc, #128]	; (800ded4 <_malloc_r+0xb0>)
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	b923      	cbnz	r3, 800de62 <_malloc_r+0x3e>
 800de58:	4621      	mov	r1, r4
 800de5a:	4630      	mov	r0, r6
 800de5c:	f000 f83c 	bl	800ded8 <_sbrk_r>
 800de60:	6038      	str	r0, [r7, #0]
 800de62:	4629      	mov	r1, r5
 800de64:	4630      	mov	r0, r6
 800de66:	f000 f837 	bl	800ded8 <_sbrk_r>
 800de6a:	1c43      	adds	r3, r0, #1
 800de6c:	d123      	bne.n	800deb6 <_malloc_r+0x92>
 800de6e:	230c      	movs	r3, #12
 800de70:	6033      	str	r3, [r6, #0]
 800de72:	4630      	mov	r0, r6
 800de74:	f000 f986 	bl	800e184 <__malloc_unlock>
 800de78:	e7e3      	b.n	800de42 <_malloc_r+0x1e>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	1b5b      	subs	r3, r3, r5
 800de7e:	d417      	bmi.n	800deb0 <_malloc_r+0x8c>
 800de80:	2b0b      	cmp	r3, #11
 800de82:	d903      	bls.n	800de8c <_malloc_r+0x68>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	441c      	add	r4, r3
 800de88:	6025      	str	r5, [r4, #0]
 800de8a:	e004      	b.n	800de96 <_malloc_r+0x72>
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	42a2      	cmp	r2, r4
 800de90:	bf0c      	ite	eq
 800de92:	600b      	streq	r3, [r1, #0]
 800de94:	6053      	strne	r3, [r2, #4]
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f974 	bl	800e184 <__malloc_unlock>
 800de9c:	f104 000b 	add.w	r0, r4, #11
 800dea0:	1d23      	adds	r3, r4, #4
 800dea2:	f020 0007 	bic.w	r0, r0, #7
 800dea6:	1ac2      	subs	r2, r0, r3
 800dea8:	d0cc      	beq.n	800de44 <_malloc_r+0x20>
 800deaa:	1a1b      	subs	r3, r3, r0
 800deac:	50a3      	str	r3, [r4, r2]
 800deae:	e7c9      	b.n	800de44 <_malloc_r+0x20>
 800deb0:	4622      	mov	r2, r4
 800deb2:	6864      	ldr	r4, [r4, #4]
 800deb4:	e7cc      	b.n	800de50 <_malloc_r+0x2c>
 800deb6:	1cc4      	adds	r4, r0, #3
 800deb8:	f024 0403 	bic.w	r4, r4, #3
 800debc:	42a0      	cmp	r0, r4
 800debe:	d0e3      	beq.n	800de88 <_malloc_r+0x64>
 800dec0:	1a21      	subs	r1, r4, r0
 800dec2:	4630      	mov	r0, r6
 800dec4:	f000 f808 	bl	800ded8 <_sbrk_r>
 800dec8:	3001      	adds	r0, #1
 800deca:	d1dd      	bne.n	800de88 <_malloc_r+0x64>
 800decc:	e7cf      	b.n	800de6e <_malloc_r+0x4a>
 800dece:	bf00      	nop
 800ded0:	200007c8 	.word	0x200007c8
 800ded4:	200007cc 	.word	0x200007cc

0800ded8 <_sbrk_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	; (800def4 <_sbrk_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f3 fa30 	bl	8001348 <_sbrk>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_sbrk_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_sbrk_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20002440 	.word	0x20002440

0800def8 <siprintf>:
 800def8:	b40e      	push	{r1, r2, r3}
 800defa:	b500      	push	{lr}
 800defc:	b09c      	sub	sp, #112	; 0x70
 800defe:	ab1d      	add	r3, sp, #116	; 0x74
 800df00:	9002      	str	r0, [sp, #8]
 800df02:	9006      	str	r0, [sp, #24]
 800df04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <siprintf+0x38>)
 800df0a:	9107      	str	r1, [sp, #28]
 800df0c:	9104      	str	r1, [sp, #16]
 800df0e:	4909      	ldr	r1, [pc, #36]	; (800df34 <siprintf+0x3c>)
 800df10:	f853 2b04 	ldr.w	r2, [r3], #4
 800df14:	9105      	str	r1, [sp, #20]
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	a902      	add	r1, sp, #8
 800df1c:	f000 f994 	bl	800e248 <_svfiprintf_r>
 800df20:	9b02      	ldr	r3, [sp, #8]
 800df22:	2200      	movs	r2, #0
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	b01c      	add	sp, #112	; 0x70
 800df28:	f85d eb04 	ldr.w	lr, [sp], #4
 800df2c:	b003      	add	sp, #12
 800df2e:	4770      	bx	lr
 800df30:	20000510 	.word	0x20000510
 800df34:	ffff0208 	.word	0xffff0208

0800df38 <strncpy>:
 800df38:	b510      	push	{r4, lr}
 800df3a:	3901      	subs	r1, #1
 800df3c:	4603      	mov	r3, r0
 800df3e:	b132      	cbz	r2, 800df4e <strncpy+0x16>
 800df40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df44:	f803 4b01 	strb.w	r4, [r3], #1
 800df48:	3a01      	subs	r2, #1
 800df4a:	2c00      	cmp	r4, #0
 800df4c:	d1f7      	bne.n	800df3e <strncpy+0x6>
 800df4e:	441a      	add	r2, r3
 800df50:	2100      	movs	r1, #0
 800df52:	4293      	cmp	r3, r2
 800df54:	d100      	bne.n	800df58 <strncpy+0x20>
 800df56:	bd10      	pop	{r4, pc}
 800df58:	f803 1b01 	strb.w	r1, [r3], #1
 800df5c:	e7f9      	b.n	800df52 <strncpy+0x1a>
	...

0800df60 <_strtol_l.isra.0>:
 800df60:	2b01      	cmp	r3, #1
 800df62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df66:	d001      	beq.n	800df6c <_strtol_l.isra.0+0xc>
 800df68:	2b24      	cmp	r3, #36	; 0x24
 800df6a:	d906      	bls.n	800df7a <_strtol_l.isra.0+0x1a>
 800df6c:	f7ff fea0 	bl	800dcb0 <__errno>
 800df70:	2316      	movs	r3, #22
 800df72:	6003      	str	r3, [r0, #0]
 800df74:	2000      	movs	r0, #0
 800df76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7a:	4f3a      	ldr	r7, [pc, #232]	; (800e064 <_strtol_l.isra.0+0x104>)
 800df7c:	468e      	mov	lr, r1
 800df7e:	4676      	mov	r6, lr
 800df80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800df84:	5de5      	ldrb	r5, [r4, r7]
 800df86:	f015 0508 	ands.w	r5, r5, #8
 800df8a:	d1f8      	bne.n	800df7e <_strtol_l.isra.0+0x1e>
 800df8c:	2c2d      	cmp	r4, #45	; 0x2d
 800df8e:	d134      	bne.n	800dffa <_strtol_l.isra.0+0x9a>
 800df90:	f89e 4000 	ldrb.w	r4, [lr]
 800df94:	f04f 0801 	mov.w	r8, #1
 800df98:	f106 0e02 	add.w	lr, r6, #2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d05c      	beq.n	800e05a <_strtol_l.isra.0+0xfa>
 800dfa0:	2b10      	cmp	r3, #16
 800dfa2:	d10c      	bne.n	800dfbe <_strtol_l.isra.0+0x5e>
 800dfa4:	2c30      	cmp	r4, #48	; 0x30
 800dfa6:	d10a      	bne.n	800dfbe <_strtol_l.isra.0+0x5e>
 800dfa8:	f89e 4000 	ldrb.w	r4, [lr]
 800dfac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfb0:	2c58      	cmp	r4, #88	; 0x58
 800dfb2:	d14d      	bne.n	800e050 <_strtol_l.isra.0+0xf0>
 800dfb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800dfb8:	2310      	movs	r3, #16
 800dfba:	f10e 0e02 	add.w	lr, lr, #2
 800dfbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800dfc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dfc6:	2600      	movs	r6, #0
 800dfc8:	fbbc f9f3 	udiv	r9, ip, r3
 800dfcc:	4635      	mov	r5, r6
 800dfce:	fb03 ca19 	mls	sl, r3, r9, ip
 800dfd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dfd6:	2f09      	cmp	r7, #9
 800dfd8:	d818      	bhi.n	800e00c <_strtol_l.isra.0+0xac>
 800dfda:	463c      	mov	r4, r7
 800dfdc:	42a3      	cmp	r3, r4
 800dfde:	dd24      	ble.n	800e02a <_strtol_l.isra.0+0xca>
 800dfe0:	2e00      	cmp	r6, #0
 800dfe2:	db1f      	blt.n	800e024 <_strtol_l.isra.0+0xc4>
 800dfe4:	45a9      	cmp	r9, r5
 800dfe6:	d31d      	bcc.n	800e024 <_strtol_l.isra.0+0xc4>
 800dfe8:	d101      	bne.n	800dfee <_strtol_l.isra.0+0x8e>
 800dfea:	45a2      	cmp	sl, r4
 800dfec:	db1a      	blt.n	800e024 <_strtol_l.isra.0+0xc4>
 800dfee:	fb05 4503 	mla	r5, r5, r3, r4
 800dff2:	2601      	movs	r6, #1
 800dff4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800dff8:	e7eb      	b.n	800dfd2 <_strtol_l.isra.0+0x72>
 800dffa:	2c2b      	cmp	r4, #43	; 0x2b
 800dffc:	bf08      	it	eq
 800dffe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e002:	46a8      	mov	r8, r5
 800e004:	bf08      	it	eq
 800e006:	f106 0e02 	addeq.w	lr, r6, #2
 800e00a:	e7c7      	b.n	800df9c <_strtol_l.isra.0+0x3c>
 800e00c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e010:	2f19      	cmp	r7, #25
 800e012:	d801      	bhi.n	800e018 <_strtol_l.isra.0+0xb8>
 800e014:	3c37      	subs	r4, #55	; 0x37
 800e016:	e7e1      	b.n	800dfdc <_strtol_l.isra.0+0x7c>
 800e018:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e01c:	2f19      	cmp	r7, #25
 800e01e:	d804      	bhi.n	800e02a <_strtol_l.isra.0+0xca>
 800e020:	3c57      	subs	r4, #87	; 0x57
 800e022:	e7db      	b.n	800dfdc <_strtol_l.isra.0+0x7c>
 800e024:	f04f 36ff 	mov.w	r6, #4294967295
 800e028:	e7e4      	b.n	800dff4 <_strtol_l.isra.0+0x94>
 800e02a:	2e00      	cmp	r6, #0
 800e02c:	da05      	bge.n	800e03a <_strtol_l.isra.0+0xda>
 800e02e:	2322      	movs	r3, #34	; 0x22
 800e030:	6003      	str	r3, [r0, #0]
 800e032:	4665      	mov	r5, ip
 800e034:	b942      	cbnz	r2, 800e048 <_strtol_l.isra.0+0xe8>
 800e036:	4628      	mov	r0, r5
 800e038:	e79d      	b.n	800df76 <_strtol_l.isra.0+0x16>
 800e03a:	f1b8 0f00 	cmp.w	r8, #0
 800e03e:	d000      	beq.n	800e042 <_strtol_l.isra.0+0xe2>
 800e040:	426d      	negs	r5, r5
 800e042:	2a00      	cmp	r2, #0
 800e044:	d0f7      	beq.n	800e036 <_strtol_l.isra.0+0xd6>
 800e046:	b10e      	cbz	r6, 800e04c <_strtol_l.isra.0+0xec>
 800e048:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e04c:	6011      	str	r1, [r2, #0]
 800e04e:	e7f2      	b.n	800e036 <_strtol_l.isra.0+0xd6>
 800e050:	2430      	movs	r4, #48	; 0x30
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1b3      	bne.n	800dfbe <_strtol_l.isra.0+0x5e>
 800e056:	2308      	movs	r3, #8
 800e058:	e7b1      	b.n	800dfbe <_strtol_l.isra.0+0x5e>
 800e05a:	2c30      	cmp	r4, #48	; 0x30
 800e05c:	d0a4      	beq.n	800dfa8 <_strtol_l.isra.0+0x48>
 800e05e:	230a      	movs	r3, #10
 800e060:	e7ad      	b.n	800dfbe <_strtol_l.isra.0+0x5e>
 800e062:	bf00      	nop
 800e064:	0800eaaa 	.word	0x0800eaaa

0800e068 <strtol>:
 800e068:	4613      	mov	r3, r2
 800e06a:	460a      	mov	r2, r1
 800e06c:	4601      	mov	r1, r0
 800e06e:	4802      	ldr	r0, [pc, #8]	; (800e078 <strtol+0x10>)
 800e070:	6800      	ldr	r0, [r0, #0]
 800e072:	f7ff bf75 	b.w	800df60 <_strtol_l.isra.0>
 800e076:	bf00      	nop
 800e078:	20000510 	.word	0x20000510

0800e07c <__utoa>:
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	4c1f      	ldr	r4, [pc, #124]	; (800e0fc <__utoa+0x80>)
 800e080:	b08b      	sub	sp, #44	; 0x2c
 800e082:	4605      	mov	r5, r0
 800e084:	460b      	mov	r3, r1
 800e086:	466e      	mov	r6, sp
 800e088:	f104 0c20 	add.w	ip, r4, #32
 800e08c:	6820      	ldr	r0, [r4, #0]
 800e08e:	6861      	ldr	r1, [r4, #4]
 800e090:	4637      	mov	r7, r6
 800e092:	c703      	stmia	r7!, {r0, r1}
 800e094:	3408      	adds	r4, #8
 800e096:	4564      	cmp	r4, ip
 800e098:	463e      	mov	r6, r7
 800e09a:	d1f7      	bne.n	800e08c <__utoa+0x10>
 800e09c:	7921      	ldrb	r1, [r4, #4]
 800e09e:	7139      	strb	r1, [r7, #4]
 800e0a0:	1e91      	subs	r1, r2, #2
 800e0a2:	6820      	ldr	r0, [r4, #0]
 800e0a4:	6038      	str	r0, [r7, #0]
 800e0a6:	2922      	cmp	r1, #34	; 0x22
 800e0a8:	f04f 0100 	mov.w	r1, #0
 800e0ac:	d904      	bls.n	800e0b8 <__utoa+0x3c>
 800e0ae:	7019      	strb	r1, [r3, #0]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	b00b      	add	sp, #44	; 0x2c
 800e0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b8:	1e58      	subs	r0, r3, #1
 800e0ba:	4684      	mov	ip, r0
 800e0bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800e0c0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e0c4:	fb02 5617 	mls	r6, r2, r7, r5
 800e0c8:	4476      	add	r6, lr
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e0d0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e0d4:	462e      	mov	r6, r5
 800e0d6:	42b2      	cmp	r2, r6
 800e0d8:	f101 0101 	add.w	r1, r1, #1
 800e0dc:	463d      	mov	r5, r7
 800e0de:	d9ed      	bls.n	800e0bc <__utoa+0x40>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	545a      	strb	r2, [r3, r1]
 800e0e4:	1919      	adds	r1, r3, r4
 800e0e6:	1aa5      	subs	r5, r4, r2
 800e0e8:	42aa      	cmp	r2, r5
 800e0ea:	dae2      	bge.n	800e0b2 <__utoa+0x36>
 800e0ec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e0f0:	780e      	ldrb	r6, [r1, #0]
 800e0f2:	7006      	strb	r6, [r0, #0]
 800e0f4:	3201      	adds	r2, #1
 800e0f6:	f801 5901 	strb.w	r5, [r1], #-1
 800e0fa:	e7f4      	b.n	800e0e6 <__utoa+0x6a>
 800e0fc:	0800ea84 	.word	0x0800ea84

0800e100 <utoa>:
 800e100:	f7ff bfbc 	b.w	800e07c <__utoa>

0800e104 <_vsniprintf_r>:
 800e104:	b530      	push	{r4, r5, lr}
 800e106:	1e14      	subs	r4, r2, #0
 800e108:	4605      	mov	r5, r0
 800e10a:	b09b      	sub	sp, #108	; 0x6c
 800e10c:	4618      	mov	r0, r3
 800e10e:	da05      	bge.n	800e11c <_vsniprintf_r+0x18>
 800e110:	238b      	movs	r3, #139	; 0x8b
 800e112:	602b      	str	r3, [r5, #0]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	b01b      	add	sp, #108	; 0x6c
 800e11a:	bd30      	pop	{r4, r5, pc}
 800e11c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e120:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e124:	bf14      	ite	ne
 800e126:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e12a:	4623      	moveq	r3, r4
 800e12c:	9302      	str	r3, [sp, #8]
 800e12e:	9305      	str	r3, [sp, #20]
 800e130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e134:	9100      	str	r1, [sp, #0]
 800e136:	9104      	str	r1, [sp, #16]
 800e138:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e13c:	4602      	mov	r2, r0
 800e13e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e140:	4669      	mov	r1, sp
 800e142:	4628      	mov	r0, r5
 800e144:	f000 f880 	bl	800e248 <_svfiprintf_r>
 800e148:	1c43      	adds	r3, r0, #1
 800e14a:	bfbc      	itt	lt
 800e14c:	238b      	movlt	r3, #139	; 0x8b
 800e14e:	602b      	strlt	r3, [r5, #0]
 800e150:	2c00      	cmp	r4, #0
 800e152:	d0e1      	beq.n	800e118 <_vsniprintf_r+0x14>
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	2200      	movs	r2, #0
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	e7dd      	b.n	800e118 <_vsniprintf_r+0x14>

0800e15c <vsniprintf>:
 800e15c:	b507      	push	{r0, r1, r2, lr}
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	460a      	mov	r2, r1
 800e164:	4601      	mov	r1, r0
 800e166:	4803      	ldr	r0, [pc, #12]	; (800e174 <vsniprintf+0x18>)
 800e168:	6800      	ldr	r0, [r0, #0]
 800e16a:	f7ff ffcb 	bl	800e104 <_vsniprintf_r>
 800e16e:	b003      	add	sp, #12
 800e170:	f85d fb04 	ldr.w	pc, [sp], #4
 800e174:	20000510 	.word	0x20000510

0800e178 <__malloc_lock>:
 800e178:	4801      	ldr	r0, [pc, #4]	; (800e180 <__malloc_lock+0x8>)
 800e17a:	f000 baf9 	b.w	800e770 <__retarget_lock_acquire_recursive>
 800e17e:	bf00      	nop
 800e180:	20002448 	.word	0x20002448

0800e184 <__malloc_unlock>:
 800e184:	4801      	ldr	r0, [pc, #4]	; (800e18c <__malloc_unlock+0x8>)
 800e186:	f000 baf4 	b.w	800e772 <__retarget_lock_release_recursive>
 800e18a:	bf00      	nop
 800e18c:	20002448 	.word	0x20002448

0800e190 <__ssputs_r>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	688e      	ldr	r6, [r1, #8]
 800e196:	429e      	cmp	r6, r3
 800e198:	4682      	mov	sl, r0
 800e19a:	460c      	mov	r4, r1
 800e19c:	4690      	mov	r8, r2
 800e19e:	461f      	mov	r7, r3
 800e1a0:	d838      	bhi.n	800e214 <__ssputs_r+0x84>
 800e1a2:	898a      	ldrh	r2, [r1, #12]
 800e1a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1a8:	d032      	beq.n	800e210 <__ssputs_r+0x80>
 800e1aa:	6825      	ldr	r5, [r4, #0]
 800e1ac:	6909      	ldr	r1, [r1, #16]
 800e1ae:	eba5 0901 	sub.w	r9, r5, r1
 800e1b2:	6965      	ldr	r5, [r4, #20]
 800e1b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1bc:	3301      	adds	r3, #1
 800e1be:	444b      	add	r3, r9
 800e1c0:	106d      	asrs	r5, r5, #1
 800e1c2:	429d      	cmp	r5, r3
 800e1c4:	bf38      	it	cc
 800e1c6:	461d      	movcc	r5, r3
 800e1c8:	0553      	lsls	r3, r2, #21
 800e1ca:	d531      	bpl.n	800e230 <__ssputs_r+0xa0>
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	f7ff fe29 	bl	800de24 <_malloc_r>
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	b950      	cbnz	r0, 800e1ec <__ssputs_r+0x5c>
 800e1d6:	230c      	movs	r3, #12
 800e1d8:	f8ca 3000 	str.w	r3, [sl]
 800e1dc:	89a3      	ldrh	r3, [r4, #12]
 800e1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e2:	81a3      	strh	r3, [r4, #12]
 800e1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ec:	6921      	ldr	r1, [r4, #16]
 800e1ee:	464a      	mov	r2, r9
 800e1f0:	f7ff fdb2 	bl	800dd58 <memcpy>
 800e1f4:	89a3      	ldrh	r3, [r4, #12]
 800e1f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1fe:	81a3      	strh	r3, [r4, #12]
 800e200:	6126      	str	r6, [r4, #16]
 800e202:	6165      	str	r5, [r4, #20]
 800e204:	444e      	add	r6, r9
 800e206:	eba5 0509 	sub.w	r5, r5, r9
 800e20a:	6026      	str	r6, [r4, #0]
 800e20c:	60a5      	str	r5, [r4, #8]
 800e20e:	463e      	mov	r6, r7
 800e210:	42be      	cmp	r6, r7
 800e212:	d900      	bls.n	800e216 <__ssputs_r+0x86>
 800e214:	463e      	mov	r6, r7
 800e216:	4632      	mov	r2, r6
 800e218:	6820      	ldr	r0, [r4, #0]
 800e21a:	4641      	mov	r1, r8
 800e21c:	f000 faaa 	bl	800e774 <memmove>
 800e220:	68a3      	ldr	r3, [r4, #8]
 800e222:	6822      	ldr	r2, [r4, #0]
 800e224:	1b9b      	subs	r3, r3, r6
 800e226:	4432      	add	r2, r6
 800e228:	60a3      	str	r3, [r4, #8]
 800e22a:	6022      	str	r2, [r4, #0]
 800e22c:	2000      	movs	r0, #0
 800e22e:	e7db      	b.n	800e1e8 <__ssputs_r+0x58>
 800e230:	462a      	mov	r2, r5
 800e232:	f000 fab9 	bl	800e7a8 <_realloc_r>
 800e236:	4606      	mov	r6, r0
 800e238:	2800      	cmp	r0, #0
 800e23a:	d1e1      	bne.n	800e200 <__ssputs_r+0x70>
 800e23c:	6921      	ldr	r1, [r4, #16]
 800e23e:	4650      	mov	r0, sl
 800e240:	f7ff fda0 	bl	800dd84 <_free_r>
 800e244:	e7c7      	b.n	800e1d6 <__ssputs_r+0x46>
	...

0800e248 <_svfiprintf_r>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	4698      	mov	r8, r3
 800e24e:	898b      	ldrh	r3, [r1, #12]
 800e250:	061b      	lsls	r3, r3, #24
 800e252:	b09d      	sub	sp, #116	; 0x74
 800e254:	4607      	mov	r7, r0
 800e256:	460d      	mov	r5, r1
 800e258:	4614      	mov	r4, r2
 800e25a:	d50e      	bpl.n	800e27a <_svfiprintf_r+0x32>
 800e25c:	690b      	ldr	r3, [r1, #16]
 800e25e:	b963      	cbnz	r3, 800e27a <_svfiprintf_r+0x32>
 800e260:	2140      	movs	r1, #64	; 0x40
 800e262:	f7ff fddf 	bl	800de24 <_malloc_r>
 800e266:	6028      	str	r0, [r5, #0]
 800e268:	6128      	str	r0, [r5, #16]
 800e26a:	b920      	cbnz	r0, 800e276 <_svfiprintf_r+0x2e>
 800e26c:	230c      	movs	r3, #12
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	f04f 30ff 	mov.w	r0, #4294967295
 800e274:	e0d1      	b.n	800e41a <_svfiprintf_r+0x1d2>
 800e276:	2340      	movs	r3, #64	; 0x40
 800e278:	616b      	str	r3, [r5, #20]
 800e27a:	2300      	movs	r3, #0
 800e27c:	9309      	str	r3, [sp, #36]	; 0x24
 800e27e:	2320      	movs	r3, #32
 800e280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e284:	f8cd 800c 	str.w	r8, [sp, #12]
 800e288:	2330      	movs	r3, #48	; 0x30
 800e28a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e434 <_svfiprintf_r+0x1ec>
 800e28e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e292:	f04f 0901 	mov.w	r9, #1
 800e296:	4623      	mov	r3, r4
 800e298:	469a      	mov	sl, r3
 800e29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e29e:	b10a      	cbz	r2, 800e2a4 <_svfiprintf_r+0x5c>
 800e2a0:	2a25      	cmp	r2, #37	; 0x25
 800e2a2:	d1f9      	bne.n	800e298 <_svfiprintf_r+0x50>
 800e2a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e2a8:	d00b      	beq.n	800e2c2 <_svfiprintf_r+0x7a>
 800e2aa:	465b      	mov	r3, fp
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f7ff ff6d 	bl	800e190 <__ssputs_r>
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	f000 80aa 	beq.w	800e410 <_svfiprintf_r+0x1c8>
 800e2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2be:	445a      	add	r2, fp
 800e2c0:	9209      	str	r2, [sp, #36]	; 0x24
 800e2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f000 80a2 	beq.w	800e410 <_svfiprintf_r+0x1c8>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2d6:	f10a 0a01 	add.w	sl, sl, #1
 800e2da:	9304      	str	r3, [sp, #16]
 800e2dc:	9307      	str	r3, [sp, #28]
 800e2de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2e2:	931a      	str	r3, [sp, #104]	; 0x68
 800e2e4:	4654      	mov	r4, sl
 800e2e6:	2205      	movs	r2, #5
 800e2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ec:	4851      	ldr	r0, [pc, #324]	; (800e434 <_svfiprintf_r+0x1ec>)
 800e2ee:	f7f1 ff7f 	bl	80001f0 <memchr>
 800e2f2:	9a04      	ldr	r2, [sp, #16]
 800e2f4:	b9d8      	cbnz	r0, 800e32e <_svfiprintf_r+0xe6>
 800e2f6:	06d0      	lsls	r0, r2, #27
 800e2f8:	bf44      	itt	mi
 800e2fa:	2320      	movmi	r3, #32
 800e2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e300:	0711      	lsls	r1, r2, #28
 800e302:	bf44      	itt	mi
 800e304:	232b      	movmi	r3, #43	; 0x2b
 800e306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e30a:	f89a 3000 	ldrb.w	r3, [sl]
 800e30e:	2b2a      	cmp	r3, #42	; 0x2a
 800e310:	d015      	beq.n	800e33e <_svfiprintf_r+0xf6>
 800e312:	9a07      	ldr	r2, [sp, #28]
 800e314:	4654      	mov	r4, sl
 800e316:	2000      	movs	r0, #0
 800e318:	f04f 0c0a 	mov.w	ip, #10
 800e31c:	4621      	mov	r1, r4
 800e31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e322:	3b30      	subs	r3, #48	; 0x30
 800e324:	2b09      	cmp	r3, #9
 800e326:	d94e      	bls.n	800e3c6 <_svfiprintf_r+0x17e>
 800e328:	b1b0      	cbz	r0, 800e358 <_svfiprintf_r+0x110>
 800e32a:	9207      	str	r2, [sp, #28]
 800e32c:	e014      	b.n	800e358 <_svfiprintf_r+0x110>
 800e32e:	eba0 0308 	sub.w	r3, r0, r8
 800e332:	fa09 f303 	lsl.w	r3, r9, r3
 800e336:	4313      	orrs	r3, r2
 800e338:	9304      	str	r3, [sp, #16]
 800e33a:	46a2      	mov	sl, r4
 800e33c:	e7d2      	b.n	800e2e4 <_svfiprintf_r+0x9c>
 800e33e:	9b03      	ldr	r3, [sp, #12]
 800e340:	1d19      	adds	r1, r3, #4
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	9103      	str	r1, [sp, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	bfbb      	ittet	lt
 800e34a:	425b      	neglt	r3, r3
 800e34c:	f042 0202 	orrlt.w	r2, r2, #2
 800e350:	9307      	strge	r3, [sp, #28]
 800e352:	9307      	strlt	r3, [sp, #28]
 800e354:	bfb8      	it	lt
 800e356:	9204      	strlt	r2, [sp, #16]
 800e358:	7823      	ldrb	r3, [r4, #0]
 800e35a:	2b2e      	cmp	r3, #46	; 0x2e
 800e35c:	d10c      	bne.n	800e378 <_svfiprintf_r+0x130>
 800e35e:	7863      	ldrb	r3, [r4, #1]
 800e360:	2b2a      	cmp	r3, #42	; 0x2a
 800e362:	d135      	bne.n	800e3d0 <_svfiprintf_r+0x188>
 800e364:	9b03      	ldr	r3, [sp, #12]
 800e366:	1d1a      	adds	r2, r3, #4
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	9203      	str	r2, [sp, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	bfb8      	it	lt
 800e370:	f04f 33ff 	movlt.w	r3, #4294967295
 800e374:	3402      	adds	r4, #2
 800e376:	9305      	str	r3, [sp, #20]
 800e378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e444 <_svfiprintf_r+0x1fc>
 800e37c:	7821      	ldrb	r1, [r4, #0]
 800e37e:	2203      	movs	r2, #3
 800e380:	4650      	mov	r0, sl
 800e382:	f7f1 ff35 	bl	80001f0 <memchr>
 800e386:	b140      	cbz	r0, 800e39a <_svfiprintf_r+0x152>
 800e388:	2340      	movs	r3, #64	; 0x40
 800e38a:	eba0 000a 	sub.w	r0, r0, sl
 800e38e:	fa03 f000 	lsl.w	r0, r3, r0
 800e392:	9b04      	ldr	r3, [sp, #16]
 800e394:	4303      	orrs	r3, r0
 800e396:	3401      	adds	r4, #1
 800e398:	9304      	str	r3, [sp, #16]
 800e39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e39e:	4826      	ldr	r0, [pc, #152]	; (800e438 <_svfiprintf_r+0x1f0>)
 800e3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3a4:	2206      	movs	r2, #6
 800e3a6:	f7f1 ff23 	bl	80001f0 <memchr>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d038      	beq.n	800e420 <_svfiprintf_r+0x1d8>
 800e3ae:	4b23      	ldr	r3, [pc, #140]	; (800e43c <_svfiprintf_r+0x1f4>)
 800e3b0:	bb1b      	cbnz	r3, 800e3fa <_svfiprintf_r+0x1b2>
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	3307      	adds	r3, #7
 800e3b6:	f023 0307 	bic.w	r3, r3, #7
 800e3ba:	3308      	adds	r3, #8
 800e3bc:	9303      	str	r3, [sp, #12]
 800e3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c0:	4433      	add	r3, r6
 800e3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c4:	e767      	b.n	800e296 <_svfiprintf_r+0x4e>
 800e3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	e7a5      	b.n	800e31c <_svfiprintf_r+0xd4>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	3401      	adds	r4, #1
 800e3d4:	9305      	str	r3, [sp, #20]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	f04f 0c0a 	mov.w	ip, #10
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3e2:	3a30      	subs	r2, #48	; 0x30
 800e3e4:	2a09      	cmp	r2, #9
 800e3e6:	d903      	bls.n	800e3f0 <_svfiprintf_r+0x1a8>
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d0c5      	beq.n	800e378 <_svfiprintf_r+0x130>
 800e3ec:	9105      	str	r1, [sp, #20]
 800e3ee:	e7c3      	b.n	800e378 <_svfiprintf_r+0x130>
 800e3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e7f0      	b.n	800e3dc <_svfiprintf_r+0x194>
 800e3fa:	ab03      	add	r3, sp, #12
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	462a      	mov	r2, r5
 800e400:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <_svfiprintf_r+0x1f8>)
 800e402:	a904      	add	r1, sp, #16
 800e404:	4638      	mov	r0, r7
 800e406:	f3af 8000 	nop.w
 800e40a:	1c42      	adds	r2, r0, #1
 800e40c:	4606      	mov	r6, r0
 800e40e:	d1d6      	bne.n	800e3be <_svfiprintf_r+0x176>
 800e410:	89ab      	ldrh	r3, [r5, #12]
 800e412:	065b      	lsls	r3, r3, #25
 800e414:	f53f af2c 	bmi.w	800e270 <_svfiprintf_r+0x28>
 800e418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e41a:	b01d      	add	sp, #116	; 0x74
 800e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e420:	ab03      	add	r3, sp, #12
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	462a      	mov	r2, r5
 800e426:	4b06      	ldr	r3, [pc, #24]	; (800e440 <_svfiprintf_r+0x1f8>)
 800e428:	a904      	add	r1, sp, #16
 800e42a:	4638      	mov	r0, r7
 800e42c:	f000 f87a 	bl	800e524 <_printf_i>
 800e430:	e7eb      	b.n	800e40a <_svfiprintf_r+0x1c2>
 800e432:	bf00      	nop
 800e434:	0800ebaa 	.word	0x0800ebaa
 800e438:	0800ebb4 	.word	0x0800ebb4
 800e43c:	00000000 	.word	0x00000000
 800e440:	0800e191 	.word	0x0800e191
 800e444:	0800ebb0 	.word	0x0800ebb0

0800e448 <_printf_common>:
 800e448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e44c:	4616      	mov	r6, r2
 800e44e:	4699      	mov	r9, r3
 800e450:	688a      	ldr	r2, [r1, #8]
 800e452:	690b      	ldr	r3, [r1, #16]
 800e454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e458:	4293      	cmp	r3, r2
 800e45a:	bfb8      	it	lt
 800e45c:	4613      	movlt	r3, r2
 800e45e:	6033      	str	r3, [r6, #0]
 800e460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e464:	4607      	mov	r7, r0
 800e466:	460c      	mov	r4, r1
 800e468:	b10a      	cbz	r2, 800e46e <_printf_common+0x26>
 800e46a:	3301      	adds	r3, #1
 800e46c:	6033      	str	r3, [r6, #0]
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	0699      	lsls	r1, r3, #26
 800e472:	bf42      	ittt	mi
 800e474:	6833      	ldrmi	r3, [r6, #0]
 800e476:	3302      	addmi	r3, #2
 800e478:	6033      	strmi	r3, [r6, #0]
 800e47a:	6825      	ldr	r5, [r4, #0]
 800e47c:	f015 0506 	ands.w	r5, r5, #6
 800e480:	d106      	bne.n	800e490 <_printf_common+0x48>
 800e482:	f104 0a19 	add.w	sl, r4, #25
 800e486:	68e3      	ldr	r3, [r4, #12]
 800e488:	6832      	ldr	r2, [r6, #0]
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	42ab      	cmp	r3, r5
 800e48e:	dc26      	bgt.n	800e4de <_printf_common+0x96>
 800e490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e494:	1e13      	subs	r3, r2, #0
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	bf18      	it	ne
 800e49a:	2301      	movne	r3, #1
 800e49c:	0692      	lsls	r2, r2, #26
 800e49e:	d42b      	bmi.n	800e4f8 <_printf_common+0xb0>
 800e4a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	47c0      	blx	r8
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d01e      	beq.n	800e4ec <_printf_common+0xa4>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	68e5      	ldr	r5, [r4, #12]
 800e4b2:	6832      	ldr	r2, [r6, #0]
 800e4b4:	f003 0306 	and.w	r3, r3, #6
 800e4b8:	2b04      	cmp	r3, #4
 800e4ba:	bf08      	it	eq
 800e4bc:	1aad      	subeq	r5, r5, r2
 800e4be:	68a3      	ldr	r3, [r4, #8]
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	bf0c      	ite	eq
 800e4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c8:	2500      	movne	r5, #0
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	bfc4      	itt	gt
 800e4ce:	1a9b      	subgt	r3, r3, r2
 800e4d0:	18ed      	addgt	r5, r5, r3
 800e4d2:	2600      	movs	r6, #0
 800e4d4:	341a      	adds	r4, #26
 800e4d6:	42b5      	cmp	r5, r6
 800e4d8:	d11a      	bne.n	800e510 <_printf_common+0xc8>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	e008      	b.n	800e4f0 <_printf_common+0xa8>
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4652      	mov	r2, sl
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	47c0      	blx	r8
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d103      	bne.n	800e4f4 <_printf_common+0xac>
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f4:	3501      	adds	r5, #1
 800e4f6:	e7c6      	b.n	800e486 <_printf_common+0x3e>
 800e4f8:	18e1      	adds	r1, r4, r3
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	2030      	movs	r0, #48	; 0x30
 800e4fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e502:	4422      	add	r2, r4
 800e504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e50c:	3302      	adds	r3, #2
 800e50e:	e7c7      	b.n	800e4a0 <_printf_common+0x58>
 800e510:	2301      	movs	r3, #1
 800e512:	4622      	mov	r2, r4
 800e514:	4649      	mov	r1, r9
 800e516:	4638      	mov	r0, r7
 800e518:	47c0      	blx	r8
 800e51a:	3001      	adds	r0, #1
 800e51c:	d0e6      	beq.n	800e4ec <_printf_common+0xa4>
 800e51e:	3601      	adds	r6, #1
 800e520:	e7d9      	b.n	800e4d6 <_printf_common+0x8e>
	...

0800e524 <_printf_i>:
 800e524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e528:	460c      	mov	r4, r1
 800e52a:	4691      	mov	r9, r2
 800e52c:	7e27      	ldrb	r7, [r4, #24]
 800e52e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e530:	2f78      	cmp	r7, #120	; 0x78
 800e532:	4680      	mov	r8, r0
 800e534:	469a      	mov	sl, r3
 800e536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e53a:	d807      	bhi.n	800e54c <_printf_i+0x28>
 800e53c:	2f62      	cmp	r7, #98	; 0x62
 800e53e:	d80a      	bhi.n	800e556 <_printf_i+0x32>
 800e540:	2f00      	cmp	r7, #0
 800e542:	f000 80d8 	beq.w	800e6f6 <_printf_i+0x1d2>
 800e546:	2f58      	cmp	r7, #88	; 0x58
 800e548:	f000 80a3 	beq.w	800e692 <_printf_i+0x16e>
 800e54c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e554:	e03a      	b.n	800e5cc <_printf_i+0xa8>
 800e556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e55a:	2b15      	cmp	r3, #21
 800e55c:	d8f6      	bhi.n	800e54c <_printf_i+0x28>
 800e55e:	a001      	add	r0, pc, #4	; (adr r0, 800e564 <_printf_i+0x40>)
 800e560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e564:	0800e5bd 	.word	0x0800e5bd
 800e568:	0800e5d1 	.word	0x0800e5d1
 800e56c:	0800e54d 	.word	0x0800e54d
 800e570:	0800e54d 	.word	0x0800e54d
 800e574:	0800e54d 	.word	0x0800e54d
 800e578:	0800e54d 	.word	0x0800e54d
 800e57c:	0800e5d1 	.word	0x0800e5d1
 800e580:	0800e54d 	.word	0x0800e54d
 800e584:	0800e54d 	.word	0x0800e54d
 800e588:	0800e54d 	.word	0x0800e54d
 800e58c:	0800e54d 	.word	0x0800e54d
 800e590:	0800e6dd 	.word	0x0800e6dd
 800e594:	0800e601 	.word	0x0800e601
 800e598:	0800e6bf 	.word	0x0800e6bf
 800e59c:	0800e54d 	.word	0x0800e54d
 800e5a0:	0800e54d 	.word	0x0800e54d
 800e5a4:	0800e6ff 	.word	0x0800e6ff
 800e5a8:	0800e54d 	.word	0x0800e54d
 800e5ac:	0800e601 	.word	0x0800e601
 800e5b0:	0800e54d 	.word	0x0800e54d
 800e5b4:	0800e54d 	.word	0x0800e54d
 800e5b8:	0800e6c7 	.word	0x0800e6c7
 800e5bc:	680b      	ldr	r3, [r1, #0]
 800e5be:	1d1a      	adds	r2, r3, #4
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	600a      	str	r2, [r1, #0]
 800e5c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e0a3      	b.n	800e718 <_printf_i+0x1f4>
 800e5d0:	6825      	ldr	r5, [r4, #0]
 800e5d2:	6808      	ldr	r0, [r1, #0]
 800e5d4:	062e      	lsls	r6, r5, #24
 800e5d6:	f100 0304 	add.w	r3, r0, #4
 800e5da:	d50a      	bpl.n	800e5f2 <_printf_i+0xce>
 800e5dc:	6805      	ldr	r5, [r0, #0]
 800e5de:	600b      	str	r3, [r1, #0]
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	da03      	bge.n	800e5ec <_printf_i+0xc8>
 800e5e4:	232d      	movs	r3, #45	; 0x2d
 800e5e6:	426d      	negs	r5, r5
 800e5e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5ec:	485e      	ldr	r0, [pc, #376]	; (800e768 <_printf_i+0x244>)
 800e5ee:	230a      	movs	r3, #10
 800e5f0:	e019      	b.n	800e626 <_printf_i+0x102>
 800e5f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e5f6:	6805      	ldr	r5, [r0, #0]
 800e5f8:	600b      	str	r3, [r1, #0]
 800e5fa:	bf18      	it	ne
 800e5fc:	b22d      	sxthne	r5, r5
 800e5fe:	e7ef      	b.n	800e5e0 <_printf_i+0xbc>
 800e600:	680b      	ldr	r3, [r1, #0]
 800e602:	6825      	ldr	r5, [r4, #0]
 800e604:	1d18      	adds	r0, r3, #4
 800e606:	6008      	str	r0, [r1, #0]
 800e608:	0628      	lsls	r0, r5, #24
 800e60a:	d501      	bpl.n	800e610 <_printf_i+0xec>
 800e60c:	681d      	ldr	r5, [r3, #0]
 800e60e:	e002      	b.n	800e616 <_printf_i+0xf2>
 800e610:	0669      	lsls	r1, r5, #25
 800e612:	d5fb      	bpl.n	800e60c <_printf_i+0xe8>
 800e614:	881d      	ldrh	r5, [r3, #0]
 800e616:	4854      	ldr	r0, [pc, #336]	; (800e768 <_printf_i+0x244>)
 800e618:	2f6f      	cmp	r7, #111	; 0x6f
 800e61a:	bf0c      	ite	eq
 800e61c:	2308      	moveq	r3, #8
 800e61e:	230a      	movne	r3, #10
 800e620:	2100      	movs	r1, #0
 800e622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e626:	6866      	ldr	r6, [r4, #4]
 800e628:	60a6      	str	r6, [r4, #8]
 800e62a:	2e00      	cmp	r6, #0
 800e62c:	bfa2      	ittt	ge
 800e62e:	6821      	ldrge	r1, [r4, #0]
 800e630:	f021 0104 	bicge.w	r1, r1, #4
 800e634:	6021      	strge	r1, [r4, #0]
 800e636:	b90d      	cbnz	r5, 800e63c <_printf_i+0x118>
 800e638:	2e00      	cmp	r6, #0
 800e63a:	d04d      	beq.n	800e6d8 <_printf_i+0x1b4>
 800e63c:	4616      	mov	r6, r2
 800e63e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e642:	fb03 5711 	mls	r7, r3, r1, r5
 800e646:	5dc7      	ldrb	r7, [r0, r7]
 800e648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e64c:	462f      	mov	r7, r5
 800e64e:	42bb      	cmp	r3, r7
 800e650:	460d      	mov	r5, r1
 800e652:	d9f4      	bls.n	800e63e <_printf_i+0x11a>
 800e654:	2b08      	cmp	r3, #8
 800e656:	d10b      	bne.n	800e670 <_printf_i+0x14c>
 800e658:	6823      	ldr	r3, [r4, #0]
 800e65a:	07df      	lsls	r7, r3, #31
 800e65c:	d508      	bpl.n	800e670 <_printf_i+0x14c>
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	6861      	ldr	r1, [r4, #4]
 800e662:	4299      	cmp	r1, r3
 800e664:	bfde      	ittt	le
 800e666:	2330      	movle	r3, #48	; 0x30
 800e668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e66c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e670:	1b92      	subs	r2, r2, r6
 800e672:	6122      	str	r2, [r4, #16]
 800e674:	f8cd a000 	str.w	sl, [sp]
 800e678:	464b      	mov	r3, r9
 800e67a:	aa03      	add	r2, sp, #12
 800e67c:	4621      	mov	r1, r4
 800e67e:	4640      	mov	r0, r8
 800e680:	f7ff fee2 	bl	800e448 <_printf_common>
 800e684:	3001      	adds	r0, #1
 800e686:	d14c      	bne.n	800e722 <_printf_i+0x1fe>
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
 800e68c:	b004      	add	sp, #16
 800e68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e692:	4835      	ldr	r0, [pc, #212]	; (800e768 <_printf_i+0x244>)
 800e694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	680e      	ldr	r6, [r1, #0]
 800e69c:	061f      	lsls	r7, r3, #24
 800e69e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e6a2:	600e      	str	r6, [r1, #0]
 800e6a4:	d514      	bpl.n	800e6d0 <_printf_i+0x1ac>
 800e6a6:	07d9      	lsls	r1, r3, #31
 800e6a8:	bf44      	itt	mi
 800e6aa:	f043 0320 	orrmi.w	r3, r3, #32
 800e6ae:	6023      	strmi	r3, [r4, #0]
 800e6b0:	b91d      	cbnz	r5, 800e6ba <_printf_i+0x196>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	f023 0320 	bic.w	r3, r3, #32
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	2310      	movs	r3, #16
 800e6bc:	e7b0      	b.n	800e620 <_printf_i+0xfc>
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	f043 0320 	orr.w	r3, r3, #32
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	2378      	movs	r3, #120	; 0x78
 800e6c8:	4828      	ldr	r0, [pc, #160]	; (800e76c <_printf_i+0x248>)
 800e6ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6ce:	e7e3      	b.n	800e698 <_printf_i+0x174>
 800e6d0:	065e      	lsls	r6, r3, #25
 800e6d2:	bf48      	it	mi
 800e6d4:	b2ad      	uxthmi	r5, r5
 800e6d6:	e7e6      	b.n	800e6a6 <_printf_i+0x182>
 800e6d8:	4616      	mov	r6, r2
 800e6da:	e7bb      	b.n	800e654 <_printf_i+0x130>
 800e6dc:	680b      	ldr	r3, [r1, #0]
 800e6de:	6826      	ldr	r6, [r4, #0]
 800e6e0:	6960      	ldr	r0, [r4, #20]
 800e6e2:	1d1d      	adds	r5, r3, #4
 800e6e4:	600d      	str	r5, [r1, #0]
 800e6e6:	0635      	lsls	r5, r6, #24
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	d501      	bpl.n	800e6f0 <_printf_i+0x1cc>
 800e6ec:	6018      	str	r0, [r3, #0]
 800e6ee:	e002      	b.n	800e6f6 <_printf_i+0x1d2>
 800e6f0:	0671      	lsls	r1, r6, #25
 800e6f2:	d5fb      	bpl.n	800e6ec <_printf_i+0x1c8>
 800e6f4:	8018      	strh	r0, [r3, #0]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	6123      	str	r3, [r4, #16]
 800e6fa:	4616      	mov	r6, r2
 800e6fc:	e7ba      	b.n	800e674 <_printf_i+0x150>
 800e6fe:	680b      	ldr	r3, [r1, #0]
 800e700:	1d1a      	adds	r2, r3, #4
 800e702:	600a      	str	r2, [r1, #0]
 800e704:	681e      	ldr	r6, [r3, #0]
 800e706:	6862      	ldr	r2, [r4, #4]
 800e708:	2100      	movs	r1, #0
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7f1 fd70 	bl	80001f0 <memchr>
 800e710:	b108      	cbz	r0, 800e716 <_printf_i+0x1f2>
 800e712:	1b80      	subs	r0, r0, r6
 800e714:	6060      	str	r0, [r4, #4]
 800e716:	6863      	ldr	r3, [r4, #4]
 800e718:	6123      	str	r3, [r4, #16]
 800e71a:	2300      	movs	r3, #0
 800e71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e720:	e7a8      	b.n	800e674 <_printf_i+0x150>
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	4632      	mov	r2, r6
 800e726:	4649      	mov	r1, r9
 800e728:	4640      	mov	r0, r8
 800e72a:	47d0      	blx	sl
 800e72c:	3001      	adds	r0, #1
 800e72e:	d0ab      	beq.n	800e688 <_printf_i+0x164>
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	079b      	lsls	r3, r3, #30
 800e734:	d413      	bmi.n	800e75e <_printf_i+0x23a>
 800e736:	68e0      	ldr	r0, [r4, #12]
 800e738:	9b03      	ldr	r3, [sp, #12]
 800e73a:	4298      	cmp	r0, r3
 800e73c:	bfb8      	it	lt
 800e73e:	4618      	movlt	r0, r3
 800e740:	e7a4      	b.n	800e68c <_printf_i+0x168>
 800e742:	2301      	movs	r3, #1
 800e744:	4632      	mov	r2, r6
 800e746:	4649      	mov	r1, r9
 800e748:	4640      	mov	r0, r8
 800e74a:	47d0      	blx	sl
 800e74c:	3001      	adds	r0, #1
 800e74e:	d09b      	beq.n	800e688 <_printf_i+0x164>
 800e750:	3501      	adds	r5, #1
 800e752:	68e3      	ldr	r3, [r4, #12]
 800e754:	9903      	ldr	r1, [sp, #12]
 800e756:	1a5b      	subs	r3, r3, r1
 800e758:	42ab      	cmp	r3, r5
 800e75a:	dcf2      	bgt.n	800e742 <_printf_i+0x21e>
 800e75c:	e7eb      	b.n	800e736 <_printf_i+0x212>
 800e75e:	2500      	movs	r5, #0
 800e760:	f104 0619 	add.w	r6, r4, #25
 800e764:	e7f5      	b.n	800e752 <_printf_i+0x22e>
 800e766:	bf00      	nop
 800e768:	0800ebbb 	.word	0x0800ebbb
 800e76c:	0800ebcc 	.word	0x0800ebcc

0800e770 <__retarget_lock_acquire_recursive>:
 800e770:	4770      	bx	lr

0800e772 <__retarget_lock_release_recursive>:
 800e772:	4770      	bx	lr

0800e774 <memmove>:
 800e774:	4288      	cmp	r0, r1
 800e776:	b510      	push	{r4, lr}
 800e778:	eb01 0402 	add.w	r4, r1, r2
 800e77c:	d902      	bls.n	800e784 <memmove+0x10>
 800e77e:	4284      	cmp	r4, r0
 800e780:	4623      	mov	r3, r4
 800e782:	d807      	bhi.n	800e794 <memmove+0x20>
 800e784:	1e43      	subs	r3, r0, #1
 800e786:	42a1      	cmp	r1, r4
 800e788:	d008      	beq.n	800e79c <memmove+0x28>
 800e78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e792:	e7f8      	b.n	800e786 <memmove+0x12>
 800e794:	4402      	add	r2, r0
 800e796:	4601      	mov	r1, r0
 800e798:	428a      	cmp	r2, r1
 800e79a:	d100      	bne.n	800e79e <memmove+0x2a>
 800e79c:	bd10      	pop	{r4, pc}
 800e79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7a6:	e7f7      	b.n	800e798 <memmove+0x24>

0800e7a8 <_realloc_r>:
 800e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7aa:	4607      	mov	r7, r0
 800e7ac:	4614      	mov	r4, r2
 800e7ae:	460e      	mov	r6, r1
 800e7b0:	b921      	cbnz	r1, 800e7bc <_realloc_r+0x14>
 800e7b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	f7ff bb34 	b.w	800de24 <_malloc_r>
 800e7bc:	b922      	cbnz	r2, 800e7c8 <_realloc_r+0x20>
 800e7be:	f7ff fae1 	bl	800dd84 <_free_r>
 800e7c2:	4625      	mov	r5, r4
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c8:	f000 f814 	bl	800e7f4 <_malloc_usable_size_r>
 800e7cc:	42a0      	cmp	r0, r4
 800e7ce:	d20f      	bcs.n	800e7f0 <_realloc_r+0x48>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	f7ff fb26 	bl	800de24 <_malloc_r>
 800e7d8:	4605      	mov	r5, r0
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	d0f2      	beq.n	800e7c4 <_realloc_r+0x1c>
 800e7de:	4631      	mov	r1, r6
 800e7e0:	4622      	mov	r2, r4
 800e7e2:	f7ff fab9 	bl	800dd58 <memcpy>
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f7ff facb 	bl	800dd84 <_free_r>
 800e7ee:	e7e9      	b.n	800e7c4 <_realloc_r+0x1c>
 800e7f0:	4635      	mov	r5, r6
 800e7f2:	e7e7      	b.n	800e7c4 <_realloc_r+0x1c>

0800e7f4 <_malloc_usable_size_r>:
 800e7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7f8:	1f18      	subs	r0, r3, #4
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	bfbc      	itt	lt
 800e7fe:	580b      	ldrlt	r3, [r1, r0]
 800e800:	18c0      	addlt	r0, r0, r3
 800e802:	4770      	bx	lr

0800e804 <_init>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	bf00      	nop
 800e808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80a:	bc08      	pop	{r3}
 800e80c:	469e      	mov	lr, r3
 800e80e:	4770      	bx	lr

0800e810 <_fini>:
 800e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e812:	bf00      	nop
 800e814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e816:	bc08      	pop	{r3}
 800e818:	469e      	mov	lr, r3
 800e81a:	4770      	bx	lr
