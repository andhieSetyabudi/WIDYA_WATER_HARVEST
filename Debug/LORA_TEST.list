
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b878  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  000204a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb40  0800bb40  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb40  0800bb40  0001bb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb44  0800bb44  0001bb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0800bb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  200004a0  0800bfe8  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002330  0800bfe8  00022330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d56  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005706  00000000  00000000  00049226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  0004e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d0  00000000  00000000  000504b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ded9  00000000  00000000  00051e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022df2  00000000  00000000  0006fd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea86  00000000  00000000  00092b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001315d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007760  00000000  00000000  00131624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba00 	.word	0x0800ba00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0800ba00 	.word	0x0800ba00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <digitalToggle>:
{
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	463b      	mov	r3, r7
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fe9b 	bl	80032d6 <HAL_GPIO_TogglePin>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <ftoa>:
	sprintf(buff, "%02X%02X%02X%02X%02X%02X", uid.b[11], uid.b[10] + uid.b[2], uid.b[9], uid.b[8] + uid.b[0], uid.b[7], uid.b[6]);
	return buff;
}

char* ftoa(float f, char * buf, int precision)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80005b2:	60b8      	str	r0, [r7, #8]
 80005b4:	6079      	str	r1, [r7, #4]
	char * ptr = buf;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;
	if (precision > MAX_PRECISION)		// check precision bounds
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	dd01      	ble.n	80005c8 <ftoa+0x20>
		precision = MAX_PRECISION;
 80005c4:	2304      	movs	r3, #4
 80005c6:	607b      	str	r3, [r7, #4]
	if (f < 0) {		// sign stuff
 80005c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80005cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	d50a      	bpl.n	80005ec <ftoa+0x44>
		f = -f;
 80005d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a03 	vstr	s15, [r7, #12]
		*ptr++ = '-';
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	627a      	str	r2, [r7, #36]	; 0x24
 80005e8:	222d      	movs	r2, #45	; 0x2d
 80005ea:	701a      	strb	r2, [r3, #0]
	}
	if (precision < 0) {  // negative precision == automatic precision guess
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da31      	bge.n	8000656 <ftoa+0xae>
		if (f < 1.0) precision = 4;
 80005f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80005f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000602:	d502      	bpl.n	800060a <ftoa+0x62>
 8000604:	2304      	movs	r3, #4
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	e025      	b.n	8000656 <ftoa+0xae>
		else if (f < 10.0) precision = 3;
 800060a:	edd7 7a03 	vldr	s15, [r7, #12]
 800060e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061a:	d502      	bpl.n	8000622 <ftoa+0x7a>
 800061c:	2303      	movs	r3, #3
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	e019      	b.n	8000656 <ftoa+0xae>
		else if (f < 100.0) precision = 2;
 8000622:	edd7 7a03 	vldr	s15, [r7, #12]
 8000626:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000790 <ftoa+0x1e8>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	d502      	bpl.n	800063a <ftoa+0x92>
 8000634:	2302      	movs	r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	e00d      	b.n	8000656 <ftoa+0xae>
		else if (f < 1000.0) precision = 1;
 800063a:	edd7 7a03 	vldr	s15, [r7, #12]
 800063e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000794 <ftoa+0x1ec>
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d502      	bpl.n	8000652 <ftoa+0xaa>
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e001      	b.n	8000656 <ftoa+0xae>
		else precision = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
	}
	if (precision)  	// round value according the precision
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <ftoa+0xcc>
		f += rounders[precision];
 800065c:	4a4e      	ldr	r2, [pc, #312]	; (8000798 <ftoa+0x1f0>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	edd3 7a00 	vldr	s15, [r3]
 8000668:	ed97 7a03 	vldr	s14, [r7, #12]
 800066c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000670:	edc7 7a03 	vstr	s15, [r7, #12]
	// integer part...
	intPart = f;
 8000674:	edd7 7a03 	vldr	s15, [r7, #12]
 8000678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800067c:	ee17 3a90 	vmov	r3, s15
 8000680:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000694:	edc7 7a03 	vstr	s15, [r7, #12]
	if (!intPart)
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <ftoa+0x102>
		*ptr++ = '0';
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	627a      	str	r2, [r7, #36]	; 0x24
 80006a4:	2230      	movs	r2, #48	; 0x30
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e038      	b.n	800071c <ftoa+0x174>
	else
	{
		p = ptr;	// save start pointer
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	623b      	str	r3, [r7, #32]
		while (intPart) { // convert (reverse order)
 80006ae:	e01a      	b.n	80006e6 <ftoa+0x13e>
			*p++ = '0' + intPart % 10;
 80006b0:	69fa      	ldr	r2, [r7, #28]
 80006b2:	4b3a      	ldr	r3, [pc, #232]	; (800079c <ftoa+0x1f4>)
 80006b4:	fb83 1302 	smull	r1, r3, r3, r2
 80006b8:	1099      	asrs	r1, r3, #2
 80006ba:	17d3      	asrs	r3, r2, #31
 80006bc:	1ac9      	subs	r1, r1, r3
 80006be:	460b      	mov	r3, r1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	1ad1      	subs	r1, r2, r3
 80006c8:	b2ca      	uxtb	r2, r1
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	1c59      	adds	r1, r3, #1
 80006ce:	6239      	str	r1, [r7, #32]
 80006d0:	3230      	adds	r2, #48	; 0x30
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	4a30      	ldr	r2, [pc, #192]	; (800079c <ftoa+0x1f4>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1092      	asrs	r2, r2, #2
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	61fb      	str	r3, [r7, #28]
		while (intPart) { // convert (reverse order)
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1e1      	bne.n	80006b0 <ftoa+0x108>
		}
		p1 = p;  // save end pos
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	61bb      	str	r3, [r7, #24]
		while (p > ptr)	{ // reverse result
 80006f0:	e00e      	b.n	8000710 <ftoa+0x168>
			c = *--p;
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	6a3b      	ldr	r3, [r7, #32]
 8000704:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	627a      	str	r2, [r7, #36]	; 0x24
 800070c:	7dfa      	ldrb	r2, [r7, #23]
 800070e:	701a      	strb	r2, [r3, #0]
		while (p > ptr)	{ // reverse result
 8000710:	6a3a      	ldr	r2, [r7, #32]
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	429a      	cmp	r2, r3
 8000716:	d8ec      	bhi.n	80006f2 <ftoa+0x14a>
		}
		ptr = p1;	// restore end pos
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (precision) {	// decimal part
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d02c      	beq.n	800077c <ftoa+0x1d4>
		*ptr++ = '.';	// place decimal point
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	627a      	str	r2, [r7, #36]	; 0x24
 8000728:	222e      	movs	r2, #46	; 0x2e
 800072a:	701a      	strb	r2, [r3, #0]
		while (precision--)	 { // convert
 800072c:	e021      	b.n	8000772 <ftoa+0x1ca>
			f *= 10.0;
 800072e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000732:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073a:	edc7 7a03 	vstr	s15, [r7, #12]
			c = f;
 800073e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000746:	edc7 7a00 	vstr	s15, [r7]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	627a      	str	r2, [r7, #36]	; 0x24
 8000754:	7dfa      	ldrb	r2, [r7, #23]
 8000756:	3230      	adds	r2, #48	; 0x30
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	701a      	strb	r2, [r3, #0]
			f -= c;
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000766:	ed97 7a03 	vldr	s14, [r7, #12]
 800076a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076e:	edc7 7a03 	vstr	s15, [r7, #12]
		while (precision--)	 { // convert
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d8      	bne.n	800072e <ftoa+0x186>
		}
	}
	*ptr = 0;	// terminating zero
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	return buf;
 8000782:	68bb      	ldr	r3, [r7, #8]
}
 8000784:	4618      	mov	r0, r3
 8000786:	372c      	adds	r7, #44	; 0x2c
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	42c80000 	.word	0x42c80000
 8000794:	447a0000 	.word	0x447a0000
 8000798:	0800bad8 	.word	0x0800bad8
 800079c:	66666667 	.word	0x66666667

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	b0ad      	sub	sp, #180	; 0xb4
 80007a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f002 f891 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f939 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 fa87 	bl	8000cc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b2:	f000 fa5b 	bl	8000c6c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007b6:	f000 fa09 	bl	8000bcc <MX_TIM1_Init>
  MX_RTC_Init();
 80007ba:	f000 f9e1 	bl	8000b80 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80007be:	f009 fe4f 	bl	800a460 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80007c2:	f000 f9af 	bl	8000b24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 80007c6:	4a87      	ldr	r2, [pc, #540]	; (80009e4 <main+0x244>)
 80007c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80007cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d0:	6018      	str	r0, [r3, #0]
 80007d2:	3304      	adds	r3, #4
 80007d4:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 80007d6:	4a84      	ldr	r2, [pc, #528]	; (80009e8 <main+0x248>)
 80007d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e0:	6018      	str	r0, [r3, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 80007e6:	4a81      	ldr	r2, [pc, #516]	; (80009ec <main+0x24c>)
 80007e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007f0:	6018      	str	r0, [r3, #0]
 80007f2:	3304      	adds	r3, #4
 80007f4:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  USBSerial.begin();
 80007f6:	4b7e      	ldr	r3, [pc, #504]	; (80009f0 <main+0x250>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4798      	blx	r3
  Serial1.begin(9600);
 80007fc:	4b7d      	ldr	r3, [pc, #500]	; (80009f4 <main+0x254>)
 80007fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000802:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000806:	4798      	blx	r3
  delay_microsInit();
 8000808:	f000 fefe 	bl	8001608 <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 800080c:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <main+0x258>)
 800080e:	4a7b      	ldr	r2, [pc, #492]	; (80009fc <main+0x25c>)
 8000810:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 8000812:	4b79      	ldr	r3, [pc, #484]	; (80009f8 <main+0x258>)
 8000814:	685c      	ldr	r4, [r3, #4]
 8000816:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800081a:	2319      	movs	r3, #25
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8000822:	f8ad 3000 	strh.w	r3, [sp]
 8000826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800082a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);

  AHT10.halt = HAL_Delay;
 8000832:	4b73      	ldr	r3, [pc, #460]	; (8000a00 <main+0x260>)
 8000834:	4a73      	ldr	r2, [pc, #460]	; (8000a04 <main+0x264>)
 8000836:	601a      	str	r2, [r3, #0]
  AHT10.getTick = HAL_GetTick;
 8000838:	4b71      	ldr	r3, [pc, #452]	; (8000a00 <main+0x260>)
 800083a:	4a73      	ldr	r2, [pc, #460]	; (8000a08 <main+0x268>)
 800083c:	605a      	str	r2, [r3, #4]
  AHT10_var AHT1;
  AHT10.begin(&AHT1, &hi2c1,0x38);
 800083e:	4b70      	ldr	r3, [pc, #448]	; (8000a00 <main+0x260>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000846:	2238      	movs	r2, #56	; 0x38
 8000848:	4970      	ldr	r1, [pc, #448]	; (8000a0c <main+0x26c>)
 800084a:	4798      	blx	r3
  char txt[20]="halloooo \n";
 800084c:	4a70      	ldr	r2, [pc, #448]	; (8000a10 <main+0x270>)
 800084e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000852:	ca07      	ldmia	r2, {r0, r1, r2}
 8000854:	c303      	stmia	r3!, {r0, r1}
 8000856:	801a      	strh	r2, [r3, #0]
 8000858:	3302      	adds	r3, #2
 800085a:	0c12      	lsrs	r2, r2, #16
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( USBSerial.peek() >= USB_OTG_FS_MAX_PACKET_SIZE )
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <main+0x250>)
 800086c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086e:	4798      	blx	r3
 8000870:	4603      	mov	r3, r0
 8000872:	2b3f      	cmp	r3, #63	; 0x3f
 8000874:	d902      	bls.n	800087c <main+0xdc>
	  	  USBSerial.flush();
 8000876:	4b5e      	ldr	r3, [pc, #376]	; (80009f0 <main+0x250>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	4798      	blx	r3
//	  USBSerial.puts((uint8_t*)txt,strlen(txt));
	  int press_adc = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
	  if ( HX710B.read(&pressure_sensor1,&press_adc, 1000) == HX710B_OK )
 8000880:	4b5d      	ldr	r3, [pc, #372]	; (80009f8 <main+0x258>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	f107 010c 	add.w	r1, r7, #12
 8000888:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800088c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000890:	4798      	blx	r3
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d113      	bne.n	80008c0 <main+0x120>
	  {
//		  uint32_t press_offset = 7240000;
		  sprintf(tmp,"value sensor = %i \n\r",press_adc);
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	495d      	ldr	r1, [pc, #372]	; (8000a14 <main+0x274>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a fd0d 	bl	800b2c0 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 80008a6:	4b52      	ldr	r3, [pc, #328]	; (80009f0 <main+0x250>)
 80008a8:	691c      	ldr	r4, [r3, #16]
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fc96 	bl	80001e0 <strlen>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	47a0      	blx	r4
//		  float scale = press_adc * (-0.000018);
//		  sprintf(tmp,"voltage = %i \n\r",scale*1E+6);
//		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }

	  if( AHT10.getEvent(&AHT1, 100UL) == AHT10_OK )
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x260>)
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008c8:	2164      	movs	r1, #100	; 0x64
 80008ca:	4610      	mov	r0, r2
 80008cc:	4798      	blx	r3
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d12f      	bne.n	8000934 <main+0x194>
	  {
		  sprintf(tmp,"AHT ada \n\r");
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	494f      	ldr	r1, [pc, #316]	; (8000a18 <main+0x278>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a fcf0 	bl	800b2c0 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 80008e0:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <main+0x250>)
 80008e2:	691c      	ldr	r4, [r3, #16]
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc79 	bl	80001e0 <strlen>
 80008ee:	4602      	mov	r2, r0
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	47a0      	blx	r4
		  char val[10];
		  sprintf(tmp, "temperature %s", ftoa(AHT1.temperature, val, 3));
 80008fa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80008fe:	463b      	mov	r3, r7
 8000900:	2103      	movs	r1, #3
 8000902:	4618      	mov	r0, r3
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	f7ff fe4e 	bl	80005a8 <ftoa>
 800090c:	4602      	mov	r2, r0
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4942      	ldr	r1, [pc, #264]	; (8000a1c <main+0x27c>)
 8000914:	4618      	mov	r0, r3
 8000916:	f00a fcd3 	bl	800b2c0 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <main+0x250>)
 800091c:	691c      	ldr	r4, [r3, #16]
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc5c 	bl	80001e0 <strlen>
 8000928:	4602      	mov	r2, r0
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	47a0      	blx	r4
	  }

	  HAL_Delay(500);
 8000934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000938:	f002 f83a 	bl	80029b0 <HAL_Delay>
	  digitalToggle(LED_pin_);
 800093c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000940:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000944:	f7ff fe20 	bl	8000588 <digitalToggle>
	  if(Serial1.available() > 0)
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <main+0x254>)
 800094a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800094e:	4798      	blx	r3
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	dd89      	ble.n	800086a <main+0xca>
	  {
 8000956:	466b      	mov	r3, sp
 8000958:	461e      	mov	r6, r3
		  size_t n_ = Serial1.available();
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <main+0x254>)
 800095c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000960:	4798      	blx	r3
 8000962:	4603      	mov	r3, r0
 8000964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		  char tBuf[n_];
 8000968:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800096c:	4623      	mov	r3, r4
 800096e:	3b01      	subs	r3, #1
 8000970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000974:	4620      	mov	r0, r4
 8000976:	f04f 0100 	mov.w	r1, #0
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	00cb      	lsls	r3, r1, #3
 8000984:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000988:	00c2      	lsls	r2, r0, #3
 800098a:	4620      	mov	r0, r4
 800098c:	f04f 0100 	mov.w	r1, #0
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	00cb      	lsls	r3, r1, #3
 800099a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800099e:	00c2      	lsls	r2, r0, #3
 80009a0:	1de3      	adds	r3, r4, #7
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	ebad 0d03 	sub.w	sp, sp, r3
 80009aa:	ab02      	add	r3, sp, #8
 80009ac:	3300      	adds	r3, #0
 80009ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  Serial1.gets(tBuf,n_);
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <main+0x254>)
 80009b4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 80009b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80009bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80009c0:	4610      	mov	r0, r2
 80009c2:	4798      	blx	r3
		  USBSerial.puts((uint8_t*)tBuf, strlen(tBuf));
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <main+0x250>)
 80009c6:	691c      	ldr	r4, [r3, #16]
 80009c8:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 80009cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc05 	bl	80001e0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4619      	mov	r1, r3
 80009da:	4628      	mov	r0, r5
 80009dc:	47a0      	blx	r4
 80009de:	46b5      	mov	sp, r6
  {
 80009e0:	e743      	b.n	800086a <main+0xca>
 80009e2:	bf00      	nop
 80009e4:	0800ba68 	.word	0x0800ba68
 80009e8:	0800ba70 	.word	0x0800ba70
 80009ec:	0800ba78 	.word	0x0800ba78
 80009f0:	2000028c 	.word	0x2000028c
 80009f4:	20000034 	.word	0x20000034
 80009f8:	20000020 	.word	0x20000020
 80009fc:	0800165d 	.word	0x0800165d
 8000a00:	20000004 	.word	0x20000004
 8000a04:	080029b1 	.word	0x080029b1
 8000a08:	08002999 	.word	0x08002999
 8000a0c:	200006f4 	.word	0x200006f4
 8000a10:	0800ba80 	.word	0x0800ba80
 8000a14:	0800ba34 	.word	0x0800ba34
 8000a18:	0800ba4c 	.word	0x0800ba4c
 8000a1c:	0800ba58 	.word	0x0800ba58

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	; 0x68
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00a fb84 	bl	800b13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <SystemClock_Config+0xfc>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <SystemClock_Config+0x100>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <SystemClock_Config+0x100>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <SystemClock_Config+0x100>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000aaa:	2390      	movs	r3, #144	; 0x90
 8000aac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 fe6c 	bl	8005798 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ac6:	f000 f97f 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 f8ce 	bl	8005c88 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000af2:	f000 f969 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 fa8f 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b10:	f000 f95a 	bl	8000dc8 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3768      	adds	r7, #104	; 0x68
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b2a:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <MX_I2C1_Init+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x58>)
 8000b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C1_Init+0x50>)
 8000b62:	f002 fbd3 	bl	800330c <HAL_I2C_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 f92c 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200006f4 	.word	0x200006f4
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000b92:	227f      	movs	r2, #127	; 0x7f
 8000b94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_RTC_Init+0x44>)
 8000bb0:	f005 fb2a 	bl	8006208 <HAL_RTC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000bba:	f000 f905 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000078c 	.word	0x2000078c
 8000bc8:	40002800 	.word	0x40002800

08000bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <MX_TIM1_Init+0x9c>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000bf0:	2247      	movs	r2, #71	; 0x47
 8000bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000bfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c14:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c16:	f005 fbdc 	bl	80063d2 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f8d2 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c32:	f005 fc1d 	bl	8006470 <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c3c:	f000 f8c4 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_TIM1_Init+0x98>)
 8000c4e:	f005 fded 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c58:	f000 f8b6 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200007ac 	.word	0x200007ac
 8000c68:	40010000 	.word	0x40010000

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_USART1_UART_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	f005 fe30 	bl	8006908 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f88b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000748 	.word	0x20000748
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a30      	ldr	r2, [pc, #192]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000d4e:	f002 faa9 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000d5a:	f002 faa3 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0x100>)
 8000d78:	f002 f814 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000d96:	f002 f805 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 8000d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_GPIO_Init+0x104>)
 8000db0:	f001 fff8 	bl	8002da4 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_I2C_MspInit+0x84>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d12b      	bne.n	8000e9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e62:	23c0      	movs	r3, #192	; 0xc0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e72:	2304      	movs	r3, #4
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <HAL_I2C_MspInit+0x8c>)
 8000e7e:	f001 ff91 	bl	8002da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_I2C_MspInit+0x88>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <HAL_RTC_MspInit+0x24>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d102      	bne.n	8000ecc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_RTC_MspInit+0x28>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40002800 	.word	0x40002800
 8000edc:	42470e3c 	.word	0x42470e3c

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_TIM_Base_MspInit+0x3c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10d      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_TIM_Base_MspInit+0x40>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_UART_MspInit+0x94>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d134      	bne.n	8000fb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_UART_MspInit+0x98>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f90:	2307      	movs	r3, #7
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_UART_MspInit+0x9c>)
 8000f9c:	f001 ff02 	bl	8002da4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2025      	movs	r0, #37	; 0x25
 8000fa6:	f001 fe26 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000faa:	2025      	movs	r0, #37	; 0x25
 8000fac:	f001 fe3f 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_UART_MspDeInit+0x38>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_UART_MspDeInit+0x3c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a09      	ldr	r2, [pc, #36]	; (8001000 <HAL_UART_MspDeInit+0x3c>)
 8000fdc:	f023 0310 	bic.w	r3, r3, #16
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000fe2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000fe6:	4807      	ldr	r0, [pc, #28]	; (8001004 <HAL_UART_MspDeInit+0x40>)
 8000fe8:	f002 f860 	bl	80030ac <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000fec:	2025      	movs	r0, #37	; 0x25
 8000fee:	f001 fe2c 	bl	8002c4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f001 fc8c 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <USART1_IRQHandler+0x10>)
 8001062:	f005 fd43 	bl	8006aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000748 	.word	0x20000748

08001070 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <OTG_FS_IRQHandler+0x10>)
 8001076:	f003 fb5c 	bl	8004732 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20001f18 	.word	0x20001f18

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f009 fffa 	bl	800b0ac <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20020000 	.word	0x20020000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	200004bc 	.word	0x200004bc
 80010ec:	20002330 	.word	0x20002330

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001130:	4c0b      	ldr	r4, [pc, #44]	; (8001160 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800113e:	f7ff ffd7 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f009 ffb9 	bl	800b0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001146:	f7ff fb2b 	bl	80007a0 <main>
  bx  lr    
 800114a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800114c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8001158:	0800bb48 	.word	0x0800bb48
  ldr r2, =_sbss
 800115c:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8001160:	20002330 	.word	0x20002330

08001164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC_IRQHandler>
	...

08001168 <AHT10_delay>:


#include "AHT10.h"

static void AHT10_delay(uint32_t time_)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(AHT10.halt != NULL)
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <AHT10_delay+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <AHT10_delay+0x1a>
		AHT10.halt(time_);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <AHT10_delay+0x28>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
	else
		HAL_Delay(time_);
}
 8001180:	e002      	b.n	8001188 <AHT10_delay+0x20>
		HAL_Delay(time_);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f001 fc14 	bl	80029b0 <HAL_Delay>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000004 	.word	0x20000004

08001194 <AHT10_getTick>:

static uint32_t AHT10_getTick(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if(AHT10.getTick != NULL)
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <AHT10_getTick+0x20>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <AHT10_getTick+0x16>
		return AHT10.getTick();
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <AHT10_getTick+0x20>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	e002      	b.n	80011b0 <AHT10_getTick+0x1c>
	else
		return HAL_GetTick();
 80011aa:	f001 fbf5 	bl	8002998 <HAL_GetTick>
 80011ae:	4603      	mov	r3, r0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000004 	.word	0x20000004

080011b8 <AHT10_read>:

static AHT10_status AHT10_read(AHT10_var* var, uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
    if (len > _maxBufferSize)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b20      	cmp	r3, #32
 80011ca:	d901      	bls.n	80011d0 <AHT10_read+0x18>
        return AHT10_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e00d      	b.n	80011ec <AHT10_read+0x34>
//    HAL_I2C
    return HAL_I2C_Master_Receive(var->i2c, var->address, buffer, len, timeout_);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	7b1b      	ldrb	r3, [r3, #12]
 80011d8:	b299      	uxth	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4613      	mov	r3, r2
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	f002 fad3 	bl	8003790 <HAL_I2C_Master_Receive>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <AHT10_write>:

static AHT10_status AHT10_write(AHT10_var* var, const uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
	 if ( len > _maxBufferSize )
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b20      	cmp	r3, #32
 8001206:	d901      	bls.n	800120c <AHT10_write+0x18>
	        return AHT10_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e00d      	b.n	8001228 <AHT10_write+0x34>
	 return HAL_I2C_Master_Transmit(var->i2c, var->address, buffer, len, timeout_);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	7b1b      	ldrb	r3, [r3, #12]
 8001214:	b299      	uxth	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b29a      	uxth	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	f002 f9b7 	bl	8003594 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <AHT10_detect>:

static AHT10_status AHT10_detect(AHT10_var* var)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if( var->i2c == NULL )
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <AHT10_detect+0x14>
		return false;
 8001240:	2300      	movs	r3, #0
 8001242:	e00b      	b.n	800125c <AHT10_detect+0x2c>
	uint8_t ret =  HAL_I2C_IsDeviceReady(var->i2c, var->address, 5, 100);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	b299      	uxth	r1, r3
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	2205      	movs	r2, #5
 8001252:	f002 fcc3 	bl	8003bdc <HAL_I2C_IsDeviceReady>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
	return (AHT10_status)ret;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <AHT10_begin>:

static AHT10_status AHT10_begin(AHT10_var* var, I2C_HandleTypeDef *i2c_, uint8_t address)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	71fb      	strb	r3, [r7, #7]
	var->i2c 			= i2c_;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	601a      	str	r2, [r3, #0]
	var->address 		= address<<1;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	731a      	strb	r2, [r3, #12]
	var->temperature 	= 0;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
	var->humidity 		= 0;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	uint8_t ret = AHT10_detect(var);
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ffcc 	bl	8001230 <AHT10_detect>
 8001298:	4603      	mov	r3, r0
 800129a:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <AHT10_begin+0x42>
		return ret;
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	e063      	b.n	800136e <AHT10_begin+0x10a>
	uint8_t *cmd = malloc(3 * sizeof(*cmd));
 80012a6:	2003      	movs	r0, #3
 80012a8:	f009 ff2a 	bl	800b100 <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	61bb      	str	r3, [r7, #24]
	if ( cmd != NULL )
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <AHT10_begin+0x5c>
		memset(cmd,0,3);
 80012b6:	2203      	movs	r2, #3
 80012b8:	2100      	movs	r1, #0
 80012ba:	69b8      	ldr	r0, [r7, #24]
 80012bc:	f009 ff3e 	bl	800b13c <memset>
	cmd[0] = AHTX0_CMD_SOFTRESET;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	22ba      	movs	r2, #186	; 0xba
 80012c4:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var,cmd,1);
 80012c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ca:	2201      	movs	r2, #1
 80012cc:	69b9      	ldr	r1, [r7, #24]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff90 	bl	80011f4 <AHT10_write>
 80012d4:	4603      	mov	r3, r0
 80012d6:	77fb      	strb	r3, [r7, #31]
	if( ret != AHT10_OK )
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <AHT10_begin+0x7e>
		return ret;
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	e045      	b.n	800136e <AHT10_begin+0x10a>
	AHT10_delay(20);	// time for module to warming up
 80012e2:	2014      	movs	r0, #20
 80012e4:	f7ff ff40 	bl	8001168 <AHT10_delay>

	cmd[0] = AHTX0_CMD_CALIBRATE;
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	22e1      	movs	r2, #225	; 0xe1
 80012ec:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x08;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	3301      	adds	r3, #1
 80012f2:	2208      	movs	r2, #8
 80012f4:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x00;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3302      	adds	r3, #2
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var, cmd, 3);
 80012fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001302:	2203      	movs	r2, #3
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff ff74 	bl	80011f4 <AHT10_write>
 800130c:	4603      	mov	r3, r0
 800130e:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <AHT10_begin+0xb6>
		return ret;
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	e029      	b.n	800136e <AHT10_begin+0x10a>
	uint32_t ts = AHT10_getTick();
 800131a:	f7ff ff3b 	bl	8001194 <AHT10_getTick>
 800131e:	6178      	str	r0, [r7, #20]
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001320:	e010      	b.n	8001344 <AHT10_begin+0xe0>
	{
		AHT10_delay(5);
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff ff20 	bl	8001168 <AHT10_delay>
		if( ts - AHT10_getTick() >= 5000 )
 8001328:	f7ff ff34 	bl	8001194 <AHT10_getTick>
 800132c:	4602      	mov	r2, r0
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	f241 3287 	movw	r2, #4999	; 0x1387
 8001336:	4293      	cmp	r3, r2
 8001338:	d904      	bls.n	8001344 <AHT10_begin+0xe0>
		{
			free(cmd);
 800133a:	69b8      	ldr	r0, [r7, #24]
 800133c:	f009 fee8 	bl	800b110 <free>
			return AHT10_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e014      	b.n	800136e <AHT10_begin+0x10a>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 f92b 	bl	80015a0 <AHT10_getStatus>
 800134a:	4603      	mov	r3, r0
 800134c:	b25b      	sxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	dbe7      	blt.n	8001322 <AHT10_begin+0xbe>
		}
	};
	free(cmd);
 8001352:	69b8      	ldr	r0, [r7, #24]
 8001354:	f009 fedc 	bl	800b110 <free>
	// load last status to clearing buffer
	if (!(AHT10_getStatus(var) & AHTX0_STATUS_CALIBRATED))
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f921 	bl	80015a0 <AHT10_getStatus>
 800135e:	4603      	mov	r3, r0
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <AHT10_begin+0x108>
		return AHT10_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <AHT10_begin+0x10a>
	else
		return AHT10_OK;
 800136c:	2300      	movs	r3, #0

}
 800136e:	4618      	mov	r0, r3
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <AHT10_getEvent>:

static AHT10_status AHT10_getEvent(AHT10_var* var, uint32_t timeout_)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	if (var->error_counter >= AHT10_MAX_TRIAL)   // didn't get reply yet from AHT10
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7b5b      	ldrb	r3, [r3, #13]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d91b      	bls.n	80013c2 <AHT10_getEvent+0x4a>
	{
		// need to restart module
		uint8_t address_ = var->address>>1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b1b      	ldrb	r3, [r3, #12]
 800138e:	085b      	lsrs	r3, r3, #1
 8001390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		I2C_HandleTypeDef *i2c_ = var->i2c;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
		ret = AHT10_begin(var, i2c_, address_);
 800139a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800139e:	461a      	mov	r2, r3
 80013a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff5e 	bl	8001264 <AHT10_begin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ( ret != AHT10_OK )
 80013ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <AHT10_getEvent+0x44>
			return ret;
 80013b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013ba:	e0e3      	b.n	8001584 <AHT10_getEvent+0x20c>
		var->error_counter = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	735a      	strb	r2, [r3, #13]
	}
	uint8_t cmd_TRIGGER[3] = {AHTX0_CMD_TRIGGER, 0x33, 0};
 80013c2:	4a72      	ldr	r2, [pc, #456]	; (800158c <AHT10_getEvent+0x214>)
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4611      	mov	r1, r2
 80013cc:	8019      	strh	r1, [r3, #0]
 80013ce:	3302      	adds	r3, #2
 80013d0:	0c12      	lsrs	r2, r2, #16
 80013d2:	701a      	strb	r2, [r3, #0]
	// read the data and store it!
	uint8_t *cmd_ptr = malloc(3 * sizeof(*cmd_ptr));
 80013d4:	2003      	movs	r0, #3
 80013d6:	f009 fe93 	bl	800b100 <malloc>
 80013da:	4603      	mov	r3, r0
 80013dc:	61fb      	str	r3, [r7, #28]
	if (cmd_ptr != NULL)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d021      	beq.n	8001428 <AHT10_getEvent+0xb0>
	{
		cmd_ptr[0] = AHTX0_CMD_TRIGGER;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	22ac      	movs	r2, #172	; 0xac
 80013e8:	701a      	strb	r2, [r3, #0]
		cmd_ptr[1] = 0x33;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	2233      	movs	r2, #51	; 0x33
 80013f0:	701a      	strb	r2, [r3, #0]
		cmd_ptr[2] = 0;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3302      	adds	r3, #2
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		ret = AHT10_write(var, cmd_ptr, 3);
 80013fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fe:	2203      	movs	r2, #3
 8001400:	69f9      	ldr	r1, [r7, #28]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fef6 	bl	80011f4 <AHT10_write>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != AHT10_OK )
 800140e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <AHT10_getEvent+0xb4>
		{
			var->error_counter++;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b5b      	ldrb	r3, [r3, #13]
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	735a      	strb	r2, [r3, #13]
			return ret;
 8001422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001426:	e0ad      	b.n	8001584 <AHT10_getEvent+0x20c>
		}
	}
	else
		return AHT10_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0ab      	b.n	8001584 <AHT10_getEvent+0x20c>
	free(cmd_ptr);
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	f009 fe6f 	bl	800b110 <free>
	unsigned long t = AHT10_getTick();
 8001432:	f7ff feaf 	bl	8001194 <AHT10_getTick>
 8001436:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001438:	e01b      	b.n	8001472 <AHT10_getEvent+0xfa>
	{
		AHT10_delay(10);
 800143a:	200a      	movs	r0, #10
 800143c:	f7ff fe94 	bl	8001168 <AHT10_delay>
		uint32_t rollOver = AHT10_getTick();
 8001440:	f7ff fea8 	bl	8001194 <AHT10_getTick>
 8001444:	60f8      	str	r0, [r7, #12]
		if (rollOver < t)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	429a      	cmp	r2, r3
 800144c:	d201      	bcs.n	8001452 <AHT10_getEvent+0xda>
			t = rollOver;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (AHT10_getTick() - t >= timeout_)
 8001452:	f7ff fe9f 	bl	8001194 <AHT10_getTick>
 8001456:	4602      	mov	r2, r0
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d807      	bhi.n	8001472 <AHT10_getEvent+0xfa>
		{
			var->error_counter++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7b5b      	ldrb	r3, [r3, #13]
 8001466:	3301      	adds	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	735a      	strb	r2, [r3, #13]
			return AHT10_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e088      	b.n	8001584 <AHT10_getEvent+0x20c>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f894 	bl	80015a0 <AHT10_getStatus>
 8001478:	4603      	mov	r3, r0
 800147a:	b25b      	sxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	dbdc      	blt.n	800143a <AHT10_getEvent+0xc2>
		};
	}

	uint8_t *data = malloc(6 * sizeof(*data));
 8001480:	2006      	movs	r0, #6
 8001482:	f009 fe3d 	bl	800b100 <malloc>
 8001486:	4603      	mov	r3, r0
 8001488:	61bb      	str	r3, [r7, #24]
	if (data != NULL)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <AHT10_getEvent+0x122>
	{
		// clear the data
		memset(data,0,6);
 8001490:	2206      	movs	r2, #6
 8001492:	2100      	movs	r1, #0
 8001494:	69b8      	ldr	r0, [r7, #24]
 8001496:	f009 fe51 	bl	800b13c <memset>
	}

	ret = AHT10_read(var, data, 6, timeout_);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2206      	movs	r2, #6
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fe89 	bl	80011b8 <AHT10_read>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != AHT10_OK )
 80014ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <AHT10_getEvent+0x154>
	{
		var->error_counter++;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7b5b      	ldrb	r3, [r3, #13]
 80014b8:	3301      	adds	r3, #1
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	735a      	strb	r2, [r3, #13]
		free(data);
 80014c0:	69b8      	ldr	r0, [r7, #24]
 80014c2:	f009 fe25 	bl	800b110 <free>
		return ret;
 80014c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014ca:	e05b      	b.n	8001584 <AHT10_getEvent+0x20c>
	}

	uint32_t h = data[1];
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3301      	adds	r3, #1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	617b      	str	r3, [r7, #20]
	h <<= 8;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	617b      	str	r3, [r7, #20]
	h |= data[2];
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3302      	adds	r3, #2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
	h <<= 4;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	617b      	str	r3, [r7, #20]
	h |= data[3] >> 4;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3303      	adds	r3, #3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
	var->humidity = ((float)h * 100) / 0x100000;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001590 <AHT10_getEvent+0x218>
 800150e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001512:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001594 <AHT10_getEvent+0x21c>
 8001516:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edc3 7a02 	vstr	s15, [r3, #8]

	uint32_t tdata = data[3] & 0x0F;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	3303      	adds	r3, #3
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	613b      	str	r3, [r7, #16]
	tdata |= data[4];
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3304      	adds	r3, #4
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	613b      	str	r3, [r7, #16]
	tdata |= data[5];
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3305      	adds	r3, #5
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
	var->temperature = ((float)tdata * 200 / 0x100000) - 50;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001598 <AHT10_getEvent+0x220>
 8001562:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001566:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001594 <AHT10_getEvent+0x21c>
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800159c <AHT10_getEvent+0x224>
 8001572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edc3 7a01 	vstr	s15, [r3, #4]
	free(data);
 800157c:	69b8      	ldr	r0, [r7, #24]
 800157e:	f009 fdc7 	bl	800b110 <free>
	return AHT10_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3730      	adds	r7, #48	; 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	0800ba94 	.word	0x0800ba94
 8001590:	42c80000 	.word	0x42c80000
 8001594:	49800000 	.word	0x49800000
 8001598:	43480000 	.word	0x43480000
 800159c:	42480000 	.word	0x42480000

080015a0 <AHT10_getStatus>:

static uint8_t AHT10_getStatus(AHT10_var* var)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	if ( AHT10_read(var, &ret, 1) != AHT10_OK )
 80015a8:	f107 010f 	add.w	r1, r7, #15
 80015ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015b0:	2201      	movs	r2, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe00 	bl	80011b8 <AHT10_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <AHT10_getStatus+0x22>
		return 0xFF;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	e000      	b.n	80015c4 <AHT10_getStatus+0x24>
	else
		return ret;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <AHT10_getTemperature>:


// extract Temperature value from the struct
static float AHT10_getTemperature (AHT10_var* var)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	return var->temperature;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <AHT10_getHumidity>:

// extract Humidity value from the struct
static float AHT10_getHumidity (AHT10_var* var)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return var->humidity;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	ee07 3a90 	vmov	s15, r3
}
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <delay_microsInit+0x4c>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10e      	bne.n	8001636 <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <delay_microsInit+0x4c>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <delay_microsInit+0x4c>)
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001622:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <delay_microsInit+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <delay_microsInit+0x50>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <delay_microsInit+0x50>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 8001636:	bf00      	nop
	 __NOP();
 8001638:	bf00      	nop
	 __NOP();
 800163a:	bf00      	nop
	 if(DWT->CYCCNT)
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <delay_microsInit+0x50>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 8001648:	2301      	movs	r3, #1
	 }
};
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000edf0 	.word	0xe000edf0
 8001658:	e0001000 	.word	0xe0001000

0800165c <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <delay_microSeconds+0x60>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <delay_microSeconds+0x60>)
 800166c:	685c      	ldr	r4, [r3, #4]
 800166e:	f004 fca7 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8001672:	4603      	mov	r3, r0
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <delay_microSeconds+0x64>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	4423      	add	r3, r4
 8001684:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	429a      	cmp	r2, r3
 800168c:	d906      	bls.n	800169c <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 800168e:	bf00      	nop
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <delay_microSeconds+0x60>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d8fa      	bhi.n	8001690 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 800169a:	e00a      	b.n	80016b2 <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 800169c:	bf00      	nop
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <delay_microSeconds+0x60>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3fa      	bcc.n	800169e <delay_microSeconds+0x42>
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <delay_microSeconds+0x60>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8f5      	bhi.n	800169e <delay_microSeconds+0x42>
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd90      	pop	{r4, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e0001000 	.word	0xe0001000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <digitalWrite>:
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80016d2:	4613      	mov	r3, r2
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	89b9      	ldrh	r1, [r7, #12]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fde1 	bl	80032a4 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <digitalRead>:
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	463b      	mov	r3, r7
 80016f2:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	88ba      	ldrh	r2, [r7, #4]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 fdb9 	bl	8003274 <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
static HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 8001716:	f001 f93f 	bl	8002998 <HAL_GetTick>
 800171a:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 800171c:	e023      	b.n	8001766 <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 800171e:	f001 f93b 	bl	8002998 <HAL_GetTick>
 8001722:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d206      	bcs.n	800173a <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	425b      	neglt	r3, r3
 8001738:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 800173a:	f001 f92d 	bl	8002998 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d801      	bhi.n	800174e <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e01f      	b.n	800178e <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HX710BIsReady+0x8c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HX710BIsReady+0x8c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	200a      	movs	r0, #10
 800175c:	4798      	blx	r3
 800175e:	e002      	b.n	8001766 <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8001760:	2005      	movs	r0, #5
 8001762:	f001 f925 	bl	80029b0 <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800176c:	2100      	movs	r1, #0
 800176e:	4611      	mov	r1, r2
 8001770:	7a9a      	ldrb	r2, [r3, #10]
 8001772:	7adb      	ldrb	r3, [r3, #11]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	431a      	orrs	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	f362 030f 	bfi	r3, r2, #0, #16
 800177e:	4608      	mov	r0, r1
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff ffb2 	bl	80016ea <digitalRead>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1c8      	bne.n	800171e <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000020 	.word	0x20000020

0800179c <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
static HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2100      	movs	r1, #0
 80017ae:	4611      	mov	r1, r2
 80017b0:	791a      	ldrb	r2, [r3, #4]
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	431a      	orrs	r2, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	f362 030f 	bfi	r3, r2, #0, #16
 80017be:	2200      	movs	r2, #0
 80017c0:	4608      	mov	r0, r1
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff ff7e 	bl	80016c4 <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff ff9e 	bl	800170c <HX710BIsReady>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d169      	bne.n	80018aa <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	e045      	b.n	8001870 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2100      	movs	r1, #0
 80017f0:	4611      	mov	r1, r2
 80017f2:	791a      	ldrb	r2, [r3, #4]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	431a      	orrs	r2, r3
 80017fa:	2300      	movs	r3, #0
 80017fc:	f362 030f 	bfi	r3, r2, #0, #16
 8001800:	2201      	movs	r2, #1
 8001802:	4608      	mov	r0, r1
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff ff5d 	bl	80016c4 <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2100      	movs	r1, #0
 8001816:	4611      	mov	r1, r2
 8001818:	791a      	ldrb	r2, [r3, #4]
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	431a      	orrs	r2, r3
 8001820:	2300      	movs	r3, #0
 8001822:	f362 030f 	bfi	r3, r2, #0, #16
 8001826:	2200      	movs	r2, #0
 8001828:	4608      	mov	r0, r1
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff ff4a 	bl	80016c4 <digitalWrite>
			if ( i < 24)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b17      	cmp	r3, #23
 8001834:	d819      	bhi.n	800186a <HX710BRead+0xce>
			{
				raw = raw << 1;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001842:	2100      	movs	r1, #0
 8001844:	4611      	mov	r1, r2
 8001846:	7a9a      	ldrb	r2, [r3, #10]
 8001848:	7adb      	ldrb	r3, [r3, #11]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	431a      	orrs	r2, r3
 800184e:	2300      	movs	r3, #0
 8001850:	f362 030f 	bfi	r3, r2, #0, #16
 8001854:	4608      	mov	r0, r1
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff ff47 	bl	80016ea <digitalRead>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d103      	bne.n	800186a <HX710BRead+0xce>
						raw= raw | 0x01;
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	3301      	adds	r3, #1
 800186e:	75fb      	strb	r3, [r7, #23]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
 8001874:	7dfa      	ldrb	r2, [r7, #23]
 8001876:	429a      	cmp	r2, r3
 8001878:	d3b4      	bcc.n	80017e4 <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2100      	movs	r1, #0
 8001880:	4611      	mov	r1, r2
 8001882:	791a      	ldrb	r2, [r3, #4]
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	431a      	orrs	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	f362 030f 	bfi	r3, r2, #0, #16
 8001890:	2201      	movs	r2, #1
 8001892:	4608      	mov	r0, r1
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff ff15 	bl	80016c4 <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HX710BSetMode>:


static HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
 80018c0:	4613      	mov	r3, r2
 80018c2:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	461a      	mov	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff66 	bl	800179c <HX710BRead>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HX710BInit>:


static HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 80018da:	b082      	sub	sp, #8
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	1d38      	adds	r0, r7, #4
 80018e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ea:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3306      	adds	r3, #6
 80018f0:	f107 021c 	add.w	r2, r7, #28
 80018f4:	6810      	ldr	r0, [r2, #0]
 80018f6:	6018      	str	r0, [r3, #0]
 80018f8:	8892      	ldrh	r2, [r2, #4]
 80018fa:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	6010      	str	r0, [r2, #0]
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001910:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8001912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001916:	22f4      	movs	r2, #244	; 0xf4
 8001918:	4619      	mov	r1, r3
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff ffca 	bl	80018b4 <HX710BSetMode>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800192c:	b002      	add	sp, #8
 800192e:	4770      	bx	lr

08001930 <Serial1_begin>:
//===================================
//===================================
#define  begin() begin(9600)

static void Serial1_begin(uint32_t baudrate)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HALSerial__construct (&Serial1.serialParam);
 8001938:	4815      	ldr	r0, [pc, #84]	; (8001990 <Serial1_begin+0x60>)
 800193a:	f000 f92f 	bl	8001b9c <HALSerial__construct>
  Serial1.serialParam._written = FALSE;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <Serial1_begin+0x60>)
 8001940:	2200      	movs	r2, #0
 8001942:	741a      	strb	r2, [r3, #16]
//  HAL_UART_Init(this->huart);
  while(HAL_UART_Receive_IT(&huart1, Serial1.serialParam._rx_buffer + Serial1.serialParam._rx_buffer_head, 1) == HAL_BUSY);
 8001944:	bf00      	nop
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <Serial1_begin+0x60>)
 8001948:	7c5b      	ldrb	r3, [r3, #17]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <Serial1_begin+0x64>)
 8001950:	4413      	add	r3, r2
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <Serial1_begin+0x68>)
 8001958:	f005 f897 	bl	8006a8a <HAL_UART_Receive_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	2b02      	cmp	r3, #2
 8001960:	d0f1      	beq.n	8001946 <Serial1_begin+0x16>

  Serial1.serialParam.huart->Init.BaudRate = baudrate;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <Serial1_begin+0x60>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
  HALSerial_begin(&Serial1.serialParam);
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <Serial1_begin+0x60>)
 800196c:	f000 f99f 	bl	8001cae <HALSerial_begin>
  HAL_UART_Receive_IT(&Serial1.serialParam.huart, Serial1.serialParam._rx_buffer, HALSERIAL_RX_BUFFER_SIZE);
 8001970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001974:	4907      	ldr	r1, [pc, #28]	; (8001994 <Serial1_begin+0x64>)
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <Serial1_begin+0x6c>)
 8001978:	f005 f887 	bl	8006a8a <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&Serial1.serialParam.huart, Serial1.serialParam._tx_buffer, HALSERIAL_TX_BUFFER_SIZE);
 800197c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <Serial1_begin+0x70>)
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <Serial1_begin+0x6c>)
 8001984:	f005 f83c 	bl	8006a00 <HAL_UART_Transmit_IT>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000034 	.word	0x20000034
 8001994:	20000054 	.word	0x20000054
 8001998:	20000748 	.word	0x20000748
 800199c:	20000040 	.word	0x20000040
 80019a0:	20000154 	.word	0x20000154

080019a4 <Serial1_setTimeout>:

static void Serial1_setTimeout(uint32_t timeout)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  Serial1.serialParam._timeout = timeout;
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <Serial1_setTimeout+0x1c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6053      	str	r3, [r2, #4]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000034 	.word	0x20000034

080019c4 <Serial1_end>:

static void Serial1_end(void)	 	{HALSerial_end(&Serial1.serialParam);}
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <Serial1_end+0x10>)
 80019ca:	f000 f991 	bl	8001cf0 <HALSerial_end>
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000034 	.word	0x20000034

080019d8 <Serial1_available>:
static int Serial1_available(void)	{return HALSerial_available(&Serial1.serialParam);}
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <Serial1_available+0x10>)
 80019de:	f000 f997 	bl	8001d10 <HALSerial_available>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000034 	.word	0x20000034

080019ec <Serial1_peek>:
static int Serial1_peek(void)		{return HALSerial_peek(&Serial1.serialParam);}
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <Serial1_peek+0x10>)
 80019f2:	f000 f9a1 	bl	8001d38 <HALSerial_peek>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000034 	.word	0x20000034

08001a00 <Serial1_availableForWrite>:
static int Serial1_availableForWrite(void){return HALSerial_availableForWrite(&Serial1.serialParam);}
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <Serial1_availableForWrite+0x10>)
 8001a06:	f000 f9da 	bl	8001dbe <HALSerial_availableForWrite>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000034 	.word	0x20000034

08001a14 <Serial1_flush>:
static void Serial1_flush(void)		{HALSerial_flush(&Serial1.serialParam);}
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <Serial1_flush+0x10>)
 8001a1a:	f000 f9ee 	bl	8001dfa <HALSerial_flush>
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000034 	.word	0x20000034

08001a28 <Serial1_write>:
static size_t Serial1_write(uint8_t c)	{return HALSerial_writeByte(&Serial1.serialParam, c);}
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4804      	ldr	r0, [pc, #16]	; (8001a48 <Serial1_write+0x20>)
 8001a38:	f000 fa06 	bl	8001e48 <HALSerial_writeByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000034 	.word	0x20000034

08001a4c <Serial1_puts>:
static size_t Serial1_puts(const uint8_t *str, size_t size){return HALSerial_write(&Serial1.serialParam, str, size);}
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4804      	ldr	r0, [pc, #16]	; (8001a6c <Serial1_puts+0x20>)
 8001a5c:	f000 fa40 	bl	8001ee0 <HALSerial_write>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000034 	.word	0x20000034

08001a70 <Serial1_read>:
static int Serial1_read(void)		{return HALSerial_read(&Serial1.serialParam);}
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <Serial1_read+0x10>)
 8001a76:	f000 f97c 	bl	8001d72 <HALSerial_read>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000034 	.word	0x20000034

08001a84 <Serial1_readUntil>:
static size_t Serial1_readUntil(char terminator, char *buffer, size_t length) {return HALSerial_readBytesUntil(&Serial1.serialParam,terminator,buffer, length);}
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	7bf9      	ldrb	r1, [r7, #15]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4803      	ldr	r0, [pc, #12]	; (8001aa8 <Serial1_readUntil+0x24>)
 8001a9a:	f000 faaf 	bl	8001ffc <HALSerial_readBytesUntil>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000034 	.word	0x20000034

08001aac <Serial1_readTimeout>:
static int Serial1_readTimeout(void)	{return HALSerial_timedRead(&Serial1.serialParam);}
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <Serial1_readTimeout+0x10>)
 8001ab2:	f000 fa57 	bl	8001f64 <HALSerial_timedRead>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000034 	.word	0x20000034

08001ac0 <Serial1_gets>:
static size_t Serial1_gets(char* buffer, size_t len) {return HALSerial_readBytes(&Serial1.serialParam, buffer, len);}
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <Serial1_gets+0x20>)
 8001ad0:	f000 fa70 	bl	8001fb4 <HALSerial_readBytes>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000034 	.word	0x20000034

08001ae4 <Serial1_print>:
char serial_buffer_print[256];
static size_t Serial1_print(const char fmt[], ...)
{
 8001ae4:	b40f      	push	{r0, r1, r2, r3}
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	603b      	str	r3, [r7, #0]
  vsnprintf(serial_buffer_print, sizeof(serial_buffer_print), fmt, args);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afa:	480a      	ldr	r0, [pc, #40]	; (8001b24 <Serial1_print+0x40>)
 8001afc:	f009 fc2c 	bl	800b358 <vsniprintf>
  va_end(args);
  size_t ret = Serial1_puts(serial_buffer_print, strlen(serial_buffer_print));
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <Serial1_print+0x40>)
 8001b02:	f7fe fb6d 	bl	80001e0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <Serial1_print+0x40>)
 8001b0c:	f7ff ff9e 	bl	8001a4c <Serial1_puts>
 8001b10:	6078      	str	r0, [r7, #4]
  return ret;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b1e:	b004      	add	sp, #16
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200007f4 	.word	0x200007f4

08001b28 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	if( huart != NULL )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <HAL_UART_RxCpltCallback+0x2e>
	{
		if (huart->Instance == USART1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_UART_RxCpltCallback+0x38>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_UART_RxCpltCallback+0x1e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <HAL_UART_RxCpltCallback+0x3c>)
 8001b42:	f000 f847 	bl	8001bd4 <HALSerial__rx_complete_irq>
		if (huart->Instance == USART2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_UART_RxCpltCallback+0x40>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d102      	bne.n	8001b56 <HAL_UART_RxCpltCallback+0x2e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <HAL_UART_RxCpltCallback+0x3c>)
 8001b52:	f000 f83f 	bl	8001bd4 <HALSerial__rx_complete_irq>
	}

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40011000 	.word	0x40011000
 8001b64:	20000034 	.word	0x20000034
 8001b68:	40004400 	.word	0x40004400

08001b6c <HAL_UART_TxCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	if ( huart == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_UART_TxCpltCallback+0x20>
		return;
  if (huart->Instance == USART1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_UART_TxCpltCallback+0x28>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d104      	bne.n	8001b8e <HAL_UART_TxCpltCallback+0x22>
	HALSerial__tx_complete_irq(&Serial1.serialParam);
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <HAL_UART_TxCpltCallback+0x2c>)
 8001b86:	f000 f850 	bl	8001c2a <HALSerial__tx_complete_irq>
 8001b8a:	e000      	b.n	8001b8e <HAL_UART_TxCpltCallback+0x22>
		return;
 8001b8c:	bf00      	nop
}
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40011000 	.word	0x40011000
 8001b98:	20000034 	.word	0x20000034

08001b9c <HALSerial__construct>:


void HALSerial__construct(HALSerial *this)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  Stream___construct((Stream *)this);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fa5e 	bl	8002066 <Stream___construct>
  this->_rx_buffer_head = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	745a      	strb	r2, [r3, #17]
  this->_rx_buffer_tail = 0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	749a      	strb	r2, [r3, #18]
  this->_tx_buffer_head = 0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	74da      	strb	r2, [r3, #19]
  this->_tx_buffer_tail = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	751a      	strb	r2, [r3, #20]
  this-> huart = &huart1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a02      	ldr	r2, [pc, #8]	; (8001bd0 <HALSerial__construct+0x34>)
 8001bc6:	60da      	str	r2, [r3, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000748 	.word	0x20000748

08001bd4 <HALSerial__rx_complete_irq>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

static void HALSerial__rx_complete_irq(HALSerial *this)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  hal_rx_buffer_index_t i = ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->huart->pRxBuffPtr - this->_rx_buffer)) % HALSERIAL_RX_BUFFER_SIZE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3320      	adds	r3, #32
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	73fb      	strb	r3, [r7, #15]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != this->_rx_buffer_tail)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7c9b      	ldrb	r3, [r3, #18]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d002      	beq.n	8001c00 <HALSerial__rx_complete_irq+0x2c>
    this->_rx_buffer_head = i;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	745a      	strb	r2, [r3, #17]
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8001c00:	bf00      	nop
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68d8      	ldr	r0, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3320      	adds	r3, #32
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	7c52      	ldrb	r2, [r2, #17]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	4413      	add	r3, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	f004 ff38 	bl	8006a8a <HAL_UART_Receive_IT>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d0f0      	beq.n	8001c02 <HALSerial__rx_complete_irq+0x2e>
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HALSerial__tx_complete_irq>:

static void HALSerial__tx_complete_irq(HALSerial *this) {
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b084      	sub	sp, #16
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  this->_tx_buffer_tail = ((unsigned int)(HALSERIAL_TX_BUFFER_SIZE + this->huart->pTxBuffPtr - this->_tx_buffer)) % HALSERIAL_TX_BUFFER_SIZE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	751a      	strb	r2, [r3, #20]

  uint16_t size;
  if (this->_tx_buffer_head < this->_tx_buffer_tail)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7cdb      	ldrb	r3, [r3, #19]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7d1b      	ldrb	r3, [r3, #20]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d207      	bcs.n	8001c6a <HALSerial__tx_complete_irq+0x40>
    size = HALSERIAL_TX_BUFFER_SIZE - this->_tx_buffer_tail;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7d1b      	ldrb	r3, [r3, #20]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001c66:	81fb      	strh	r3, [r7, #14]
 8001c68:	e009      	b.n	8001c7e <HALSerial__tx_complete_irq+0x54>
  else
    size = this->_tx_buffer_head - this->_tx_buffer_tail;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7cdb      	ldrb	r3, [r3, #19]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7d1b      	ldrb	r3, [r3, #20]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	81fb      	strh	r3, [r7, #14]

  if (size > 0)
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HALSerial__tx_complete_irq+0x7c>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, size) == HAL_BUSY);
 8001c84:	bf00      	nop
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68d8      	ldr	r0, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	7d12      	ldrb	r2, [r2, #20]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4413      	add	r3, r2
 8001c98:	89fa      	ldrh	r2, [r7, #14]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f004 feb0 	bl	8006a00 <HAL_UART_Transmit_IT>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d0ef      	beq.n	8001c86 <HALSerial__tx_complete_irq+0x5c>
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HALSerial_begin>:

// Public Methods //////////////////////////////////////////////////////////////

void HALSerial_begin(HALSerial *this)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  this->_written = FALSE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	741a      	strb	r2, [r3, #16]
  HAL_UART_Init(this->huart);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 fe21 	bl	8006908 <HAL_UART_Init>
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8001cc6:	bf00      	nop
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68d8      	ldr	r0, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3320      	adds	r3, #32
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	7c52      	ldrb	r2, [r2, #17]
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f004 fed5 	bl	8006a8a <HAL_UART_Receive_IT>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d0f0      	beq.n	8001cc8 <HALSerial_begin+0x1a>
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HALSerial_end>:

void HALSerial_end(HALSerial *this)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  // wait for transmission of outgoing data
  HALSerial_flush(this);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f87e 	bl	8001dfa <HALSerial_flush>

  HAL_UART_DeInit(this->huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fe4d 	bl	80069a2 <HAL_UART_DeInit>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HALSerial_available>:

int __attribute__((weak)) HALSerial_available(HALSerial *this)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->_rx_buffer_head - this->_rx_buffer_tail)) % HALSERIAL_RX_BUFFER_SIZE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7c5b      	ldrb	r3, [r3, #17]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	7c92      	ldrb	r2, [r2, #18]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	b2db      	uxtb	r3, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HALSerial_peek>:

int __attribute__((weak)) HALSerial_peek(HALSerial *this)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7c5b      	ldrb	r3, [r3, #17]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7c9b      	ldrb	r3, [r3, #18]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d102      	bne.n	8001d56 <HALSerial_peek+0x1e>
  {
    return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	e007      	b.n	8001d66 <HALSerial_peek+0x2e>
  }
  else
  {
    return this->_rx_buffer[this->_rx_buffer_tail];
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7c9b      	ldrb	r3, [r3, #18]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	f893 3020 	ldrb.w	r3, [r3, #32]
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HALSerial_read>:

int __attribute__((weak)) HALSerial_read(HALSerial *this)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  // if the head isn't ahead of the tail, we don't have any characters
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7c5b      	ldrb	r3, [r3, #17]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7c9b      	ldrb	r3, [r3, #18]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d102      	bne.n	8001d90 <HALSerial_read+0x1e>
  {
    return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e010      	b.n	8001db2 <HALSerial_read+0x40>
  }
  else
  {
    unsigned char c = this->_rx_buffer[this->_rx_buffer_tail];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7c9b      	ldrb	r3, [r3, #18]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	73fb      	strb	r3, [r7, #15]
    this->_rx_buffer_tail = (hal_rx_buffer_index_t)(this->_rx_buffer_tail + 1) % HALSERIAL_RX_BUFFER_SIZE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7c9b      	ldrb	r3, [r3, #18]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	749a      	strb	r2, [r3, #18]
    return c;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HALSerial_availableForWrite>:

int __attribute__((weak)) HALSerial_availableForWrite(HALSerial *this)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  hal_tx_buffer_index_t head;
  hal_tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = this->_tx_buffer_head;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7cdb      	ldrb	r3, [r3, #19]
 8001dca:	73fb      	strb	r3, [r7, #15]
    tail = this->_tx_buffer_tail;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d1b      	ldrb	r3, [r3, #20]
 8001dd0:	73bb      	strb	r3, [r7, #14]
  }
  if (head >= tail)
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d305      	bcc.n	8001de6 <HALSerial_availableForWrite+0x28>
    return HALSERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	4413      	add	r3, r2
 8001de4:	e003      	b.n	8001dee <HALSerial_availableForWrite+0x30>
  return tail - head - 1;
 8001de6:	7bba      	ldrb	r2, [r7, #14]
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	3b01      	subs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HALSerial_flush>:

void __attribute__((weak)) HALSerial_flush(HALSerial *this)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!this->_written)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7c1b      	ldrb	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <HALSerial_flush+0x46>
    return;

  unsigned long ticks = HALSerial_millis(this);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f890 	bl	8001f30 <HALSerial_millis>
 8001e10:	60f8      	str	r0, [r7, #12]
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 8001e12:	e003      	b.n	8001e1c <HALSerial_flush+0x22>
    HALSerial_delay(this, 1);
 8001e14:	2101      	movs	r1, #1
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f896 	bl	8001f48 <HALSerial_delay>
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7cdb      	ldrb	r3, [r3, #19]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7d1b      	ldrb	r3, [r3, #20]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d00a      	beq.n	8001e42 <HALSerial_flush+0x48>
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f87f 	bl	8001f30 <HALSerial_millis>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3c:	d3ea      	bcc.n	8001e14 <HALSerial_flush+0x1a>
 8001e3e:	e000      	b.n	8001e42 <HALSerial_flush+0x48>
    return;
 8001e40:	bf00      	nop
  }
}
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HALSerial_writeByte>:

size_t __attribute__((weak)) HALSerial_writeByte(HALSerial *this, uint8_t c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  this->_written = TRUE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	741a      	strb	r2, [r3, #16]

  hal_tx_buffer_index_t i = (this->_tx_buffer_head + 1) % HALSERIAL_TX_BUFFER_SIZE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7cdb      	ldrb	r3, [r3, #19]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	425a      	negs	r2, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	73fb      	strb	r3, [r7, #15]

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == this->_tx_buffer_tail) {
 8001e6e:	e003      	b.n	8001e78 <HALSerial_writeByte+0x30>
    HALSerial_delay(this, 1);
 8001e70:	2101      	movs	r1, #1
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f868 	bl	8001f48 <HALSerial_delay>
  while (i == this->_tx_buffer_tail) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7d1b      	ldrb	r3, [r3, #20]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d0f5      	beq.n	8001e70 <HALSerial_writeByte+0x28>
  }

  this->_tx_buffer[this->_tx_buffer_head] = c;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7cdb      	ldrb	r3, [r3, #19]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  if (this->_tx_buffer_head == this->_tx_buffer_tail) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7cdb      	ldrb	r3, [r3, #19]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d114      	bne.n	8001ed0 <HALSerial_writeByte+0x88>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 8001ea6:	e003      	b.n	8001eb0 <HALSerial_writeByte+0x68>
      HALSerial_delay(this, 1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f84c 	bl	8001f48 <HALSerial_delay>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68d8      	ldr	r0, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	7d12      	ldrb	r2, [r2, #20]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f004 fd9b 	bl	8006a00 <HAL_UART_Transmit_IT>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d0eb      	beq.n	8001ea8 <HALSerial_writeByte+0x60>
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  TX_BUFFER_ATOMIC
  {
    this->_tx_buffer_head = i;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	74da      	strb	r2, [r3, #19]
  }

  return 1;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HALSerial_write>:

size_t HALSerial_write(HALSerial *this, const uint8_t *buffer, size_t size)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  if (buffer == NULL)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HALSerial_write+0x16>
    return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e018      	b.n	8001f28 <HALSerial_write+0x48>
  size_t n = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  while (size--)
 8001efa:	e00d      	b.n	8001f18 <HALSerial_write+0x38>
  {
    if (HALSerial_writeByte(this, *buffer++))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff ff9e 	bl	8001e48 <HALSerial_writeByte>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HALSerial_write+0x44>
      n++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (size--)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ec      	bne.n	8001efc <HALSerial_write+0x1c>
 8001f22:	e000      	b.n	8001f26 <HALSerial_write+0x46>
    else
      break;
 8001f24:	bf00      	nop
  }
//  HAL_UART_Transmit(this->huart, buffer, size, 100);
//  HALSerial__rx_complete_irq(this); // ini tadi lupa di comment
  return n;
 8001f26:	697b      	ldr	r3, [r7, #20]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HALSerial_millis>:

/* Parent */

unsigned long HALSerial_millis(HALSerial *this) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return this->millis();
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4798      	blx	r3
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HALSerial_delay>:

unsigned char HALSerial_delay(HALSerial *this, unsigned long value) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  return this->delay(value);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	4798      	blx	r3
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HALSerial_timedRead>:

// protected method to read stream with timeout
int HALSerial_timedRead(HALSerial *this)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  int c;
  this->_startMillis = HALSerial_millis(this);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffdf 	bl	8001f30 <HALSerial_millis>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
  do
  {
    c = HALSerial_read(this);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fefa 	bl	8001d72 <HALSerial_read>
 8001f7e:	60f8      	str	r0, [r7, #12]
    if (c >= 0)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db01      	blt.n	8001f8a <HALSerial_timedRead+0x26>
      return c;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	e010      	b.n	8001fac <HALSerial_timedRead+0x48>
    else HALSerial_delay(this, 1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ffdb 	bl	8001f48 <HALSerial_delay>
  } while (HALSerial_millis(this) - this->_startMillis < this->_timeout);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffcc 	bl	8001f30 <HALSerial_millis>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	1ad2      	subs	r2, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d3e7      	bcc.n	8001f78 <HALSerial_timedRead+0x14>
  return -1; // -1 indicates timeout
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HALSerial_readBytes>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t HALSerial_readBytes(HALSerial *this, char *buffer, size_t length)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  size_t count = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  while (count < length)
 8001fc4:	e00f      	b.n	8001fe6 <HALSerial_readBytes+0x32>
  {
    int c = HALSerial_timedRead(this);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff ffcc 	bl	8001f64 <HALSerial_timedRead>
 8001fcc:	6138      	str	r0, [r7, #16]
    if (c < 0)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0d      	blt.n	8001ff0 <HALSerial_readBytes+0x3c>
      break;
    *buffer++ = (char)c;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
    count++;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  while (count < length)
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3eb      	bcc.n	8001fc6 <HALSerial_readBytes+0x12>
 8001fee:	e000      	b.n	8001ff2 <HALSerial_readBytes+0x3e>
      break;
 8001ff0:	bf00      	nop
  }
  return count;
 8001ff2:	697b      	ldr	r3, [r7, #20]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HALSerial_readBytesUntil>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t HALSerial_readBytesUntil(HALSerial *this, char terminator, char *buffer, size_t length)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	72fb      	strb	r3, [r7, #11]
  size_t index = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  while (index < length)
 8002010:	e013      	b.n	800203a <HALSerial_readBytesUntil+0x3e>
  {
    int c = HALSerial_timedRead(this);
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff ffa6 	bl	8001f64 <HALSerial_timedRead>
 8002018:	6138      	str	r0, [r7, #16]
    if (c < 0 || c == terminator)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db10      	blt.n	8002042 <HALSerial_readBytesUntil+0x46>
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d00c      	beq.n	8002042 <HALSerial_readBytesUntil+0x46>
      break;
    *buffer++ = (char)c;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
    index++;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  while (index < length)
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3e7      	bcc.n	8002012 <HALSerial_readBytesUntil+0x16>
  }
  return index; // return number of characters, not including null terminator
 8002042:	697b      	ldr	r3, [r7, #20]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <Print___construct>:
}

// Public Methods //////////////////////////////////////////////////////////////

void Print___construct(Print *this)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  this->write_error = 0;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <Stream___construct>:
// These overload exists for compatibility with any class that has derived
// Stream and used parseFloat/Int with a custom ignore character. To keep
// the public API simple, these overload remains protected.

void Stream___construct(Stream *this)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  Print___construct((Print *)this);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffec 	bl	800204c <Print___construct>
  this->_timeout = 1000;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207a:	605a      	str	r2, [r3, #4]
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  CDC_init();
 8002088:	f008 fbd6 	bl	800a838 <CDC_init>
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <SerialUSB_end>:

static void SerialUSB_end(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  CDC_DeInit();
 8002094:	f008 fbd7 	bl	800a846 <CDC_DeInit>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <SerialUSB_availableForWrite+0x10>)
 80020a2:	f000 f905 	bl	80022b0 <CDC_TransmitQueue_WriteSize>
 80020a6:	4603      	mov	r3, r0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000bc8 	.word	0x20000bc8

080020b0 <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f806 	bl	80020d0 <SerialUSB_puts>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 80020de:	e01c      	b.n	800211a <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 80020e0:	4815      	ldr	r0, [pc, #84]	; (8002138 <SerialUSB_puts+0x68>)
 80020e2:	f000 f8e5 	bl	80022b0 <CDC_TransmitQueue_WriteSize>
 80020e6:	4603      	mov	r3, r0
 80020e8:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d201      	bcs.n	80020f6 <SerialUSB_puts+0x26>
        portion = rest;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <SerialUSB_puts+0x68>)
 8002102:	f000 f90c 	bl	800231e <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	60fb      	str	r3, [r7, #12]
        buf += portion;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4413      	add	r3, r2
 8002114:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 8002116:	f008 fb37 	bl	800a788 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <SerialUSB_puts+0x5a>
 8002120:	f008 fb06 	bl	800a730 <CDC_connected>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1da      	bne.n	80020e0 <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000bc8 	.word	0x20000bc8

0800213c <SerialUSB_available>:

static int SerialUSB_available(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <SerialUSB_available+0x10>)
 8002142:	f000 fa1c 	bl	800257e <CDC_ReceiveQueue_ReadSize>
 8002146:	4603      	mov	r3, r0
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20001c50 	.word	0x20001c50

08002150 <SerialUSB_read>:

static int SerialUSB_read(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <SerialUSB_read+0x1c>)
 8002158:	f000 fa41 	bl	80025de <CDC_ReceiveQueue_Dequeue>
 800215c:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 800215e:	f008 fb41 	bl	800a7e4 <CDC_resume_receive>
  return ch;
 8002162:	687b      	ldr	r3, [r7, #4]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20001c50 	.word	0x20001c50

08002170 <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 8002180:	f000 fc0a 	bl	8002998 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4811      	ldr	r0, [pc, #68]	; (80021d4 <SerialUSB_readbytes+0x64>)
 8002190:	f000 fa9c 	bl	80026cc <CDC_ReceiveQueue_Read>
 8002194:	4603      	mov	r3, r0
 8002196:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 8002198:	f008 fb24 	bl	800a7e4 <CDC_resume_receive>
      rest -= read;
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
      buffer += read;
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <SerialUSB_readbytes+0x46>
        return length;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	e009      	b.n	80021ca <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 80021b6:	f000 fbef 	bl	8002998 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b31      	cmp	r3, #49	; 0x31
 80021c2:	d9e0      	bls.n	8002186 <SerialUSB_readbytes+0x16>
    return length - rest;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	1ad3      	subs	r3, r2, r3
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20001c50 	.word	0x20001c50

080021d8 <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af02      	add	r7, sp, #8
 80021de:	4603      	mov	r3, r0
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 80021ec:	f000 fbd4 	bl	8002998 <HAL_GetTick>
 80021f0:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	7bf9      	ldrb	r1, [r7, #15]
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4815      	ldr	r0, [pc, #84]	; (8002258 <SerialUSB_readBytesUntil+0x80>)
 8002204:	f000 fac5 	bl	8002792 <CDC_ReceiveQueue_ReadUntil>
 8002208:	4603      	mov	r3, r0
 800220a:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 800220c:	f008 faea 	bl	800a7e4 <CDC_resume_receive>
      rest -= read;
 8002210:	8abb      	ldrh	r3, [r7, #20]
 8002212:	461a      	mov	r2, r3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	61fb      	str	r3, [r7, #28]
      buffer += read;
 800221a:	8abb      	ldrh	r3, [r7, #20]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4413      	add	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
      if (found) {
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	e00e      	b.n	8002250 <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <SerialUSB_readBytesUntil+0x64>
        return length;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	e009      	b.n	8002250 <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 800223c:	f000 fbac 	bl	8002998 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b31      	cmp	r3, #49	; 0x31
 8002248:	d9d3      	bls.n	80021f2 <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	1ad3      	subs	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20001c50 	.word	0x20001c50

0800225c <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <SerialUSB_peek+0x10>)
 8002262:	f000 fa01 	bl	8002668 <CDC_ReceiveQueue_Peek>
 8002266:	4603      	mov	r3, r0
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20001c50 	.word	0x20001c50

08002270 <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 8002274:	bf00      	nop
 8002276:	4804      	ldr	r0, [pc, #16]	; (8002288 <SerialUSB_flush+0x18>)
 8002278:	f000 f836 	bl	80022e8 <CDC_TransmitQueue_ReadSize>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	dcf9      	bgt.n	8002276 <SerialUSB_flush+0x6>
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000bc8 	.word	0x20000bc8

0800228c <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3380      	adds	r3, #128	; 0x80
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80022c8:	b292      	uxth	r2, r2
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 80022ce:	425a      	negs	r2, r3
 80022d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022d8:	bf58      	it	pl
 80022da:	4253      	negpl	r3, r2
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3380      	adds	r3, #128	; 0x80
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8002300:	b292      	uxth	r2, r2
 8002302:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8002304:	425a      	negs	r2, r3
 8002306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800230e:	bf58      	it	pl
 8002310:	4253      	negpl	r3, r2
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002330:	b29b      	uxth	r3, r3
 8002332:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002336:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d90c      	bls.n	800235a <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f008 fee4 	bl	800b120 <memcpy>
 8002358:	e015      	b.n	8002386 <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	4618      	mov	r0, r3
 800236e:	f008 fed7 	bl	800b120 <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	18d1      	adds	r1, r2, r3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	461a      	mov	r2, r3
 8002382:	f008 fecd 	bl	800b120 <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	b29b      	uxth	r3, r3
 8002396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d30c      	bcc.n	80023e2 <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	801a      	strh	r2, [r3, #0]
 80023e0:	e008      	b.n	80023f4 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002404:	b29b      	uxth	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800242e:	b29b      	uxth	r3, r3
 8002430:	4413      	add	r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	22c0      	movs	r2, #192	; 0xc0
 8002468:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800248a:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002492:	b29b      	uxth	r3, r3
 8002494:	89ba      	ldrh	r2, [r7, #12]
 8002496:	429a      	cmp	r2, r3
 8002498:	d82c      	bhi.n	80024f4 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	89fa      	ldrh	r2, [r7, #14]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d809      	bhi.n	80024bc <CDC_ReceiveQueue_ReserveBlock+0x44>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	89fa      	ldrh	r2, [r7, #14]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d109      	bne.n	80024ca <CDC_ReceiveQueue_ReserveBlock+0x52>
 80024b6:	89bb      	ldrh	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80024c4:	b292      	uxth	r2, r2
 80024c6:	4413      	add	r3, r2
 80024c8:	e025      	b.n	8002516 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 80024ca:	89bb      	ldrh	r3, [r7, #12]
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d921      	bls.n	8002514 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80024ee:	b292      	uxth	r2, r2
 80024f0:	4413      	add	r3, r2
 80024f2:	e010      	b.n	8002516 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002500:	89bb      	ldrh	r3, [r7, #12]
 8002502:	429a      	cmp	r2, r3
 8002504:	d206      	bcs.n	8002514 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800250e:	b292      	uxth	r2, r2
 8002510:	4413      	add	r3, r2
 8002512:	e000      	b.n	8002516 <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002534:	b29a      	uxth	r2, r3
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	4413      	add	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002550:	b29b      	uxth	r3, r3
 8002552:	429a      	cmp	r2, r3
 8002554:	d303      	bcc.n	800255e <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	22c0      	movs	r2, #192	; 0xc0
 800255a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002564:	b29b      	uxth	r3, r3
 8002566:	2bbf      	cmp	r3, #191	; 0xbf
 8002568:	d903      	bls.n	8002572 <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800258c:	b29b      	uxth	r3, r3
 800258e:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002596:	b29b      	uxth	r3, r3
 8002598:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d808      	bhi.n	80025bc <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 80025aa:	89fb      	ldrh	r3, [r7, #14]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	e00a      	b.n	80025d2 <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 80025ce:	b292      	uxth	r2, r2
 80025d0:	1a9b      	subs	r3, r3, r2
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002600:	b29a      	uxth	r2, r3
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b29b      	uxth	r3, r3
 8002606:	429a      	cmp	r2, r3
 8002608:	d103      	bne.n	8002612 <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002618:	b29a      	uxth	r2, r3
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	b29b      	uxth	r3, r3
 800261e:	429a      	cmp	r2, r3
 8002620:	d102      	bne.n	8002628 <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e019      	b.n	800265c <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800262e:	b29b      	uxth	r3, r3
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	b291      	uxth	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002648:	b29a      	uxth	r2, r3
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b29b      	uxth	r3, r3
 800264e:	429a      	cmp	r2, r3
 8002650:	d303      	bcc.n	800265a <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002676:	b29b      	uxth	r3, r3
 8002678:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002680:	b29b      	uxth	r3, r3
 8002682:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800268a:	b29a      	uxth	r2, r3
 800268c:	89bb      	ldrh	r3, [r7, #12]
 800268e:	b29b      	uxth	r3, r3
 8002690:	429a      	cmp	r2, r3
 8002692:	d303      	bcc.n	800269c <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	89fb      	ldrh	r3, [r7, #14]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d102      	bne.n	80026b2 <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	e006      	b.n	80026c0 <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	5c9b      	ldrb	r3, [r3, r2]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	8a7b      	ldrh	r3, [r7, #18]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d303      	bcc.n	8002706 <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800270c:	b29a      	uxth	r2, r3
 800270e:	8abb      	ldrh	r3, [r7, #20]
 8002710:	b29b      	uxth	r3, r3
 8002712:	429a      	cmp	r2, r3
 8002714:	d808      	bhi.n	8002728 <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 8002716:	8abb      	ldrh	r3, [r7, #20]
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	82fb      	strh	r3, [r7, #22]
 8002726:	e007      	b.n	8002738 <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002732:	b29b      	uxth	r3, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 8002738:	8afa      	ldrh	r2, [r7, #22]
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	429a      	cmp	r2, r3
 800273e:	d201      	bcs.n	8002744 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 8002740:	8afb      	ldrh	r3, [r7, #22]
 8002742:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	4619      	mov	r1, r3
 8002756:	68b8      	ldr	r0, [r7, #8]
 8002758:	f008 fce2 	bl	800b120 <memcpy>
  queue->read = queue->read + size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002762:	b29a      	uxth	r2, r3
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	4413      	add	r3, r2
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002776:	b29a      	uxth	r2, r3
 8002778:	8a7b      	ldrh	r3, [r7, #18]
 800277a:	b29b      	uxth	r3, r3
 800277c:	429a      	cmp	r2, r3
 800277e:	d303      	bcc.n	8002788 <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 8002788:	88fb      	ldrh	r3, [r7, #6]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 8002792:	b480      	push	{r7}
 8002794:	b089      	sub	sp, #36	; 0x24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	461a      	mov	r2, r3
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
 80027a2:	4613      	mov	r3, r2
 80027a4:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	8a7b      	ldrh	r3, [r7, #18]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d303      	bcc.n	80027d2 <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80027d8:	b29a      	uxth	r2, r3
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	429a      	cmp	r2, r3
 80027e0:	d808      	bhi.n	80027f4 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 80027e2:	8abb      	ldrh	r3, [r7, #20]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	83fb      	strh	r3, [r7, #30]
 80027f2:	e007      	b.n	8002804 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 80027f4:	8a7b      	ldrh	r3, [r7, #18]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 8002804:	8bfa      	ldrh	r2, [r7, #30]
 8002806:	893b      	ldrh	r3, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d201      	bcs.n	8002810 <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 800280c:	8bfb      	ldrh	r3, [r7, #30]
 800280e:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 8002820:	2300      	movs	r3, #0
 8002822:	83bb      	strh	r3, [r7, #28]
 8002824:	e02d      	b.n	8002882 <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 8002826:	8bbb      	ldrh	r3, [r7, #28]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 8002830:	7dfa      	ldrb	r2, [r7, #23]
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	429a      	cmp	r2, r3
 8002836:	d11c      	bne.n	8002872 <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800283e:	b29a      	uxth	r2, r3
 8002840:	8bbb      	ldrh	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002856:	b29a      	uxth	r2, r3
 8002858:	8a7b      	ldrh	r3, [r7, #18]
 800285a:	b29b      	uxth	r3, r3
 800285c:	429a      	cmp	r2, r3
 800285e:	d303      	bcc.n	8002868 <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	8bba      	ldrh	r2, [r7, #28]
 800286c:	801a      	strh	r2, [r3, #0]
      return true;
 800286e:	2301      	movs	r3, #1
 8002870:	e025      	b.n	80028be <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 8002872:	8bbb      	ldrh	r3, [r7, #28]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	7dfa      	ldrb	r2, [r7, #23]
 800287a:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 800287c:	8bbb      	ldrh	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	83bb      	strh	r3, [r7, #28]
 8002882:	8bba      	ldrh	r2, [r7, #28]
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d3cd      	bcc.n	8002826 <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	893a      	ldrh	r2, [r7, #8]
 800288e:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002896:	b29a      	uxth	r2, r3
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	4413      	add	r3, r2
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d303      	bcc.n	80028bc <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_Init+0x40>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_Init+0x40>)
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_Init+0x40>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f000 f973 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 f808 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002900:	f7fe fa68 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f999 	bl	8002c66 <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f000 f953 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000000 	.word	0x20000000
 8002968:	200002bc 	.word	0x200002bc
 800296c:	200002b8 	.word	0x200002b8

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	200002bc 	.word	0x200002bc
 8002994:	200008f4 	.word	0x200008f4

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200008f4 	.word	0x200008f4

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200002bc 	.word	0x200002bc

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db12      	blt.n	8002ad0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	490a      	ldr	r1, [pc, #40]	; (8002adc <__NVIC_DisableIRQ+0x44>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	3320      	adds	r3, #32
 8002ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac4:	f3bf 8f4f 	dsb	sy
}
 8002ac8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002aca:	f3bf 8f6f 	isb	sy
}
 8002ace:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff05 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff1a 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff0d 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff1d 	bl	8002a98 <__NVIC_DisableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff94 	bl	8002b9c <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff fe84 	bl	8002998 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d008      	beq.n	8002cb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e052      	b.n	8002d56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0216 	bic.w	r2, r2, #22
 8002cbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <HAL_DMA_Abort+0x62>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0208 	bic.w	r2, r2, #8
 8002cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	e013      	b.n	8002d2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff fe49 	bl	8002998 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d90c      	bls.n	8002d2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e015      	b.n	8002d56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e4      	bne.n	8002d02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	223f      	movs	r2, #63	; 0x3f
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d004      	beq.n	8002d7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2280      	movs	r2, #128	; 0x80
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00c      	b.n	8002d96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2205      	movs	r2, #5
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e159      	b.n	8003074 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 8148 	bne.w	800306e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d130      	bne.n	8002e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80a2 	beq.w	800306e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a56      	ldr	r2, [pc, #344]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <HAL_GPIO_Init+0x2e8>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f46:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_GPIO_Init+0x2f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_Init+0x202>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x2f4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x1fe>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_GPIO_Init+0x2f8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x1fa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a46      	ldr	r2, [pc, #280]	; (80030a0 <HAL_GPIO_Init+0x2fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x1f6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a45      	ldr	r2, [pc, #276]	; (80030a4 <HAL_GPIO_Init+0x300>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x1f2>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e004      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x204>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f002 0203 	and.w	r2, r2, #3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb8:	4935      	ldr	r1, [pc, #212]	; (8003090 <HAL_GPIO_Init+0x2ec>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_GPIO_Init+0x304>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <HAL_GPIO_Init+0x304>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	f67f aea2 	bls.w	8002dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40013800 	.word	0x40013800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40013c00 	.word	0x40013c00

080030ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e0bb      	b.n	8003240 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c8:	2201      	movs	r2, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	429a      	cmp	r2, r3
 80030e0:	f040 80ab 	bne.w	800323a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030e4:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_GPIO_DeInit+0x1ac>)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_GPIO_DeInit+0x1b0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_DeInit+0x96>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a53      	ldr	r2, [pc, #332]	; (8003260 <HAL_GPIO_DeInit+0x1b4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_DeInit+0x92>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_GPIO_DeInit+0x1b8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_DeInit+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a51      	ldr	r2, [pc, #324]	; (8003268 <HAL_GPIO_DeInit+0x1bc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_DeInit+0x8a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a50      	ldr	r2, [pc, #320]	; (800326c <HAL_GPIO_DeInit+0x1c0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_DeInit+0x86>
 800312e:	2304      	movs	r3, #4
 8003130:	e008      	b.n	8003144 <HAL_GPIO_DeInit+0x98>
 8003132:	2307      	movs	r3, #7
 8003134:	e006      	b.n	8003144 <HAL_GPIO_DeInit+0x98>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_DeInit+0x98>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_DeInit+0x98>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_DeInit+0x98>
 8003142:	2300      	movs	r3, #0
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d132      	bne.n	80031ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	4944      	ldr	r1, [pc, #272]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 800315e:	4013      	ands	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	4941      	ldr	r1, [pc, #260]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 800316c:	4013      	ands	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	493d      	ldr	r1, [pc, #244]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 800317a:	4013      	ands	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	493a      	ldr	r1, [pc, #232]	; (8003270 <HAL_GPIO_DeInit+0x1c4>)
 8003188:	4013      	ands	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800319c:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_GPIO_DeInit+0x1ac>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	482a      	ldr	r0, [pc, #168]	; (8003258 <HAL_GPIO_DeInit+0x1ac>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	400a      	ands	r2, r1
 80031b4:	3302      	adds	r3, #2
 80031b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2103      	movs	r1, #3
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	08d2      	lsrs	r2, r2, #3
 80031f0:	4019      	ands	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2103      	movs	r1, #3
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2101      	movs	r1, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	2103      	movs	r1, #3
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f af40 	bls.w	80030c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40013800 	.word	0x40013800
 800325c:	40020000 	.word	0x40020000
 8003260:	40020400 	.word	0x40020400
 8003264:	40020800 	.word	0x40020800
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40021000 	.word	0x40021000
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e001      	b.n	8003296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e8:	887a      	ldrh	r2, [r7, #2]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	041a      	lsls	r2, r3, #16
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	400b      	ands	r3, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e12b      	b.n	8003576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fd76 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800336e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003370:	f002 fe32 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a81      	ldr	r2, [pc, #516]	; (8003580 <HAL_I2C_Init+0x274>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d807      	bhi.n	8003390 <HAL_I2C_Init+0x84>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_I2C_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e006      	b.n	800339e <HAL_I2C_Init+0x92>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a7d      	ldr	r2, [pc, #500]	; (8003588 <HAL_I2C_Init+0x27c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0e7      	b.n	8003576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a78      	ldr	r2, [pc, #480]	; (800358c <HAL_I2C_Init+0x280>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a6a      	ldr	r2, [pc, #424]	; (8003580 <HAL_I2C_Init+0x274>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d802      	bhi.n	80033e0 <HAL_I2C_Init+0xd4>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3301      	adds	r3, #1
 80033de:	e009      	b.n	80033f4 <HAL_I2C_Init+0xe8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a69      	ldr	r2, [pc, #420]	; (8003590 <HAL_I2C_Init+0x284>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	495c      	ldr	r1, [pc, #368]	; (8003580 <HAL_I2C_Init+0x274>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d819      	bhi.n	8003448 <HAL_I2C_Init+0x13c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003428:	400b      	ands	r3, r1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_Init+0x138>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e59      	subs	r1, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	e051      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003444:	2304      	movs	r3, #4
 8003446:	e04f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_I2C_Init+0x168>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e012      	b.n	800349a <HAL_I2C_Init+0x18e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x196>
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_I2C_Init+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	440b      	add	r3, r1
 80034b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	0099      	lsls	r1, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6911      	ldr	r1, [r2, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	000186a0 	.word	0x000186a0
 8003584:	001e847f 	.word	0x001e847f
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	431bde83 	.word	0x431bde83
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	817b      	strh	r3, [r7, #10]
 80035a4:	4613      	mov	r3, r2
 80035a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff f9f6 	bl	8002998 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	f040 80e0 	bne.w	800377c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2319      	movs	r3, #25
 80035c2:	2201      	movs	r2, #1
 80035c4:	4970      	ldr	r1, [pc, #448]	; (8003788 <HAL_I2C_Master_Transmit+0x1f4>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fd86 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0d3      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_Master_Transmit+0x50>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0cc      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d007      	beq.n	800360a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2221      	movs	r2, #33	; 0x21
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2210      	movs	r2, #16
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	893a      	ldrh	r2, [r7, #8]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_I2C_Master_Transmit+0x1f8>)
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fbf0 	bl	8003e38 <I2C_MasterRequestWrite>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e08d      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003678:	e066      	b.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fe00 	bl	8004284 <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_I2C_Master_Transmit+0x188>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fdf0 	bl	8004306 <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e01a      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d194      	bne.n	800367a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	460b      	mov	r3, r1
 800379e:	817b      	strh	r3, [r7, #10]
 80037a0:	4613      	mov	r3, r2
 80037a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7ff f8f8 	bl	8002998 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 820b 	bne.w	8003bce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2319      	movs	r3, #25
 80037be:	2201      	movs	r2, #1
 80037c0:	497c      	ldr	r1, [pc, #496]	; (80039b4 <HAL_I2C_Master_Receive+0x224>)
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fc88 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	e1fe      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2C_Master_Receive+0x50>
 80037dc:	2302      	movs	r3, #2
 80037de:	e1f7      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d007      	beq.n	8003806 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003814:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2222      	movs	r2, #34	; 0x22
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2210      	movs	r2, #16
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	893a      	ldrh	r2, [r7, #8]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <HAL_I2C_Master_Receive+0x228>)
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fb74 	bl	8003f3c <I2C_MasterRequestRead>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1b8      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d113      	bne.n	800388e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e18c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11b      	bne.n	80038ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e16c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11b      	bne.n	800390e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	e14c      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003934:	e138      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b03      	cmp	r3, #3
 800393c:	f200 80f1 	bhi.w	8003b22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b01      	cmp	r3, #1
 8003946:	d123      	bne.n	8003990 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fd1b 	bl	8004388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e139      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398e:	e10b      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	d14e      	bne.n	8003a36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_I2C_Master_Receive+0x22c>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fb98 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e10e      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000
 80039bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e0b8      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4966      	ldr	r1, [pc, #408]	; (8003bd8 <HAL_I2C_Master_Receive+0x448>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fb49 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0bf      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2200      	movs	r2, #0
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <HAL_I2C_Master_Receive+0x448>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fb1b 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e091      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b20:	e042      	b.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fc2e 	bl	8004388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04c      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d118      	bne.n	8003ba8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f47f aec2 	bne.w	8003936 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00010004 	.word	0x00010004

08003bdc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bec:	f7fe fed4 	bl	8002998 <HAL_GetTick>
 8003bf0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 8111 	bne.w	8003e26 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2319      	movs	r3, #25
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	4988      	ldr	r1, [pc, #544]	; (8003e30 <HAL_I2C_IsDeviceReady+0x254>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa62 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e104      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_I2C_IsDeviceReady+0x50>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0fd      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d007      	beq.n	8003c52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2224      	movs	r2, #36	; 0x24
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a70      	ldr	r2, [pc, #448]	; (8003e34 <HAL_I2C_IsDeviceReady+0x258>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa20 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cac:	d103      	bne.n	8003cb6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0b6      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cca:	f7fe fe65 	bl	8002998 <HAL_GetTick>
 8003cce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cfe:	e025      	b.n	8003d4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fe fe4a 	bl	8002998 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <HAL_I2C_IsDeviceReady+0x13a>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	22a0      	movs	r2, #160	; 0xa0
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2ba0      	cmp	r3, #160	; 0xa0
 8003d56:	d005      	beq.n	8003d64 <HAL_I2C_IsDeviceReady+0x188>
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_I2C_IsDeviceReady+0x188>
 8003d5e:	7dbb      	ldrb	r3, [r7, #22]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0cd      	beq.n	8003d00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d129      	bne.n	8003dce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2319      	movs	r3, #25
 8003da6:	2201      	movs	r2, #1
 8003da8:	4921      	ldr	r1, [pc, #132]	; (8003e30 <HAL_I2C_IsDeviceReady+0x254>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f994 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e036      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e02c      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003de6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2319      	movs	r3, #25
 8003dee:	2201      	movs	r2, #1
 8003df0:	490f      	ldr	r1, [pc, #60]	; (8003e30 <HAL_I2C_IsDeviceReady+0x254>)
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f970 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e012      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	f4ff af32 	bcc.w	8003c76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00100002 	.word	0x00100002
 8003e34:	ffff0000 	.word	0xffff0000

08003e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d006      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d108      	bne.n	8003e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e00b      	b.n	8003e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d107      	bne.n	8003e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f91d 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e035      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e01b      	b.n	8003f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003edc:	897b      	ldrh	r3, [r7, #10]
 8003ede:	11db      	asrs	r3, r3, #7
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f063 030f 	orn	r3, r3, #15
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <I2C_MasterRequestWrite+0xfc>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f943 	bl	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e010      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <I2C_MasterRequestWrite+0x100>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f933 	bl	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010008 	.word	0x00010008
 8003f38:	00010002 	.word	0x00010002

08003f3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d006      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d003      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f74:	d108      	bne.n	8003f88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00b      	b.n	8003fa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b11      	cmp	r3, #17
 8003f8e:	d107      	bne.n	8003fa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f893 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d103      	bne.n	8003fd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e079      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	e05f      	b.n	80040b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	11db      	asrs	r3, r3, #7
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0306 	and.w	r3, r3, #6
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f063 030f 	orn	r3, r3, #15
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4930      	ldr	r1, [pc, #192]	; (80040d0 <I2C_MasterRequestRead+0x194>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f8b9 	bl	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e054      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4929      	ldr	r1, [pc, #164]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8a9 	bl	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e044      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f831 	bl	80040d8 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d103      	bne.n	8004094 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e017      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	11db      	asrs	r3, r3, #7
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f063 030e 	orn	r3, r3, #14
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f865 	bl	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00010008 	.word	0x00010008
 80040d4:	00010002 	.word	0x00010002

080040d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e8:	e025      	b.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d021      	beq.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fe fc51 	bl	8002998 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d116      	bne.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e023      	b.n	800417e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10d      	bne.n	800415c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	e00c      	b.n	8004176 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d0b6      	beq.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004194:	e051      	b.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a4:	d123      	bne.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e046      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d021      	beq.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fe fbcf 	bl	8002998 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e020      	b.n	800427c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10c      	bne.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf14      	ite	ne
 8004256:	2301      	movne	r3, #1
 8004258:	2300      	moveq	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e00b      	b.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	43da      	mvns	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d18d      	bne.n	8004196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004290:	e02d      	b.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8ce 	bl	8004434 <I2C_IsAcknowledgeFailed>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e02d      	b.n	80042fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d021      	beq.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fb75 	bl	8002998 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e007      	b.n	80042fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d1ca      	bne.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004312:	e02d      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f88d 	bl	8004434 <I2C_IsAcknowledgeFailed>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e02d      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d021      	beq.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432c:	f7fe fb34 	bl	8002998 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e007      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d1ca      	bne.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004394:	e042      	b.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d119      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0210 	mvn.w	r2, #16
 80043ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e029      	b.n	800442c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d8:	f7fe fade 	bl	8002998 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e007      	b.n	800442c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d1b5      	bne.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444a:	d11b      	bne.n	8004484 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004454:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0204 	orr.w	r2, r3, #4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004494:	b08f      	sub	sp, #60	; 0x3c
 8004496:	af0a      	add	r7, sp, #40	; 0x28
 8004498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e10f      	b.n	80046c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f006 faea 	bl	800aa98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2203      	movs	r2, #3
 80044c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 f91b 	bl	800771e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	687e      	ldr	r6, [r7, #4]
 80044f0:	466d      	mov	r5, sp
 80044f2:	f106 0410 	add.w	r4, r6, #16
 80044f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004502:	e885 0003 	stmia.w	r5, {r0, r1}
 8004506:	1d33      	adds	r3, r6, #4
 8004508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f002 fff2 	bl	80074f4 <USB_CoreInit>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0d0      	b.n	80046c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f003 f909 	bl	8007740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e04a      	b.n	80045ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	333d      	adds	r3, #61	; 0x3d
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	333c      	adds	r3, #60	; 0x3c
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	b298      	uxth	r0, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	3342      	adds	r3, #66	; 0x42
 8004570:	4602      	mov	r2, r0
 8004572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	333f      	adds	r3, #63	; 0x3f
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3344      	adds	r3, #68	; 0x44
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3348      	adds	r3, #72	; 0x48
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3350      	adds	r3, #80	; 0x50
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	3301      	adds	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3af      	bcc.n	8004534 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e044      	b.n	8004664 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	3301      	adds	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3b5      	bcc.n	80045da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	687e      	ldr	r6, [r7, #4]
 8004676:	466d      	mov	r5, sp
 8004678:	f106 0410 	add.w	r4, r6, #16
 800467c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004688:	e885 0003 	stmia.w	r5, {r0, r1}
 800468c:	1d33      	adds	r3, r6, #4
 800468e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f003 f87f 	bl	8007794 <USB_DevInit>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e00d      	b.n	80046c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f004 f8c7 	bl	8008850 <USB_DevDisconnect>

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_PCD_Start+0x1c>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e020      	b.n	800472a <HAL_PCD_Start+0x5e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d109      	bne.n	800470c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d005      	beq.n	800470c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f002 fff3 	bl	80076fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f004 f877 	bl	800880e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004732:	b590      	push	{r4, r7, lr}
 8004734:	b08d      	sub	sp, #52	; 0x34
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f004 f935 	bl	80089b8 <USB_GetMode>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 839d 	bne.w	8004e90 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f004 f899 	bl	8008892 <USB_ReadInterrupts>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8393 	beq.w	8004e8e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f004 f890 	bl	8008892 <USB_ReadInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d107      	bne.n	800478c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f002 0202 	and.w	r2, r2, #2
 800478a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f004 f87e 	bl	8008892 <USB_ReadInterrupts>
 8004796:	4603      	mov	r3, r0
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b10      	cmp	r3, #16
 800479e:	d161      	bne.n	8004864 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0210 	bic.w	r2, r2, #16
 80047ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 020f 	and.w	r2, r3, #15
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	3304      	adds	r3, #4
 80047ce:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	0c5b      	lsrs	r3, r3, #17
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d124      	bne.n	8004826 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d035      	beq.n	8004854 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80047f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6a38      	ldr	r0, [r7, #32]
 80047fc:	f003 fee4 	bl	80085c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800480c:	441a      	add	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800481e:	441a      	add	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	619a      	str	r2, [r3, #24]
 8004824:	e016      	b.n	8004854 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	0c5b      	lsrs	r3, r3, #17
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	2b06      	cmp	r3, #6
 8004830:	d110      	bne.n	8004854 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004838:	2208      	movs	r2, #8
 800483a:	4619      	mov	r1, r3
 800483c:	6a38      	ldr	r0, [r7, #32]
 800483e:	f003 fec3 	bl	80085c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484e:	441a      	add	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0210 	orr.w	r2, r2, #16
 8004862:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 f812 	bl	8008892 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004878:	d16e      	bne.n	8004958 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f004 f818 	bl	80088b8 <USB_ReadDevAllOutEpInterrupt>
 8004888:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800488a:	e062      	b.n	8004952 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d057      	beq.n	8004946 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 f83d 	bl	8008920 <USB_ReadDevOutEPInterrupt>
 80048a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	461a      	mov	r2, r3
 80048c0:	2301      	movs	r3, #1
 80048c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fdb0 	bl	800542c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	2308      	movs	r3, #8
 80048e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80048e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 feaa 	bl	8005644 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2310      	movs	r3, #16
 800490a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	461a      	mov	r2, r3
 8004924:	2320      	movs	r3, #32
 8004926:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	461a      	mov	r2, r3
 8004940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004944:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	3301      	adds	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d199      	bne.n	800488c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f003 ff98 	bl	8008892 <USB_ReadInterrupts>
 8004962:	4603      	mov	r3, r0
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800496c:	f040 80c0 	bne.w	8004af0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f003 ffb9 	bl	80088ec <USB_ReadDevAllInEpInterrupt>
 800497a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004980:	e0b2      	b.n	8004ae8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a7 	beq.w	8004adc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f003 ffdf 	bl	800895c <USB_ReadDevInEPInterrupt>
 800499e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d057      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	2201      	movs	r2, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69f9      	ldr	r1, [r7, #28]
 80049c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ca:	4013      	ands	r3, r2
 80049cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	461a      	mov	r2, r3
 80049dc:	2301      	movs	r3, #1
 80049de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d132      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	3348      	adds	r3, #72	; 0x48
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4403      	add	r3, r0
 8004a08:	3344      	adds	r3, #68	; 0x44
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4419      	add	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4403      	add	r3, r0
 8004a1c:	3348      	adds	r3, #72	; 0x48
 8004a1e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d113      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x31c>
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3350      	adds	r3, #80	; 0x50
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a46:	461a      	mov	r2, r3
 8004a48:	2101      	movs	r1, #1
 8004a4a:	f003 ffe7 	bl	8008a1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f006 f8a0 	bl	800ab9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	2308      	movs	r3, #8
 8004a74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2310      	movs	r3, #16
 8004a90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fc1b 	bl	8005312 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	3301      	adds	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f47f af49 	bne.w	8004982 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f003 fecc 	bl	8008892 <USB_ReadInterrupts>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b04:	d122      	bne.n	8004b4c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d108      	bne.n	8004b36 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fe26 	bl	8005780 <HAL_PCDEx_LPM_Callback>
 8004b34:	e002      	b.n	8004b3c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f006 f89c 	bl	800ac74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f003 fe9e 	bl	8008892 <USB_ReadInterrupts>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	d112      	bne.n	8004b88 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d102      	bne.n	8004b78 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f006 f858 	bl	800ac28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004b86:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f003 fe80 	bl	8008892 <USB_ReadInterrupts>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	f040 80c7 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2110      	movs	r1, #16
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 ff4e 	bl	8007a5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	e056      	b.n	8004c74 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bf8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c26:	461a      	mov	r2, r3
 8004c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	69fa      	ldr	r2, [r7, #28]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	3301      	adds	r3, #1
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3a3      	bcc.n	8004bc6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004caa:	f043 030b 	orr.w	r3, r3, #11
 8004cae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc0:	f043 030b 	orr.w	r3, r3, #11
 8004cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc6:	e015      	b.n	8004cf4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cda:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cde:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cee:	f043 030b 	orr.w	r3, r3, #11
 8004cf2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f003 fe7f 	bl	8008a1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 fdad 	bl	8008892 <USB_ReadInterrupts>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d42:	d124      	bne.n	8004d8e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f003 fe43 	bl	80089d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 fee3 	bl	8007b1e <USB_GetDevSpeed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681c      	ldr	r4, [r3, #0]
 8004d64:	f001 f92c 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8004d68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	4620      	mov	r0, r4
 8004d74:	f002 fc20 	bl	80075b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f005 ff36 	bl	800abea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fd7d 	bl	8008892 <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d10a      	bne.n	8004db8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f005 ff13 	bl	800abce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f002 0208 	and.w	r2, r2, #8
 8004db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f003 fd68 	bl	8008892 <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dcc:	d10f      	bne.n	8004dee <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f005 ff6b 	bl	800acb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f003 fd4d 	bl	8008892 <USB_ReadInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e02:	d10f      	bne.n	8004e24 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f005 ff3e 	bl	800ac90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f003 fd32 	bl	8008892 <USB_ReadInterrupts>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d10a      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f005 ff4c 	bl	800acd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fd1c 	bl	8008892 <USB_ReadInterrupts>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d115      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f005 ff3c 	bl	800acf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e000      	b.n	8004e90 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004e8e:	bf00      	nop
    }
  }
}
 8004e90:	3734      	adds	r7, #52	; 0x34
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}

08004e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_PCD_SetAddress+0x1a>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e013      	b.n	8004ed8 <HAL_PCD_SetAddress+0x42>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	78fa      	ldrb	r2, [r7, #3]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f003 fc7a 	bl	80087c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	70fb      	strb	r3, [r7, #3]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	803b      	strh	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da0f      	bge.n	8004f26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	3338      	adds	r3, #56	; 0x38
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	705a      	strb	r2, [r3, #1]
 8004f24:	e00f      	b.n	8004f46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f52:	883a      	ldrh	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	78ba      	ldrb	r2, [r7, #2]
 8004f5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f70:	78bb      	ldrb	r3, [r7, #2]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d102      	bne.n	8004f7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_PCD_EP_Open+0xaa>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e00e      	b.n	8004fa8 <HAL_PCD_EP_Open+0xc8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f002 fde5 	bl	8007b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da0f      	bge.n	8004fe4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	3338      	adds	r3, #56	; 0x38
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3304      	adds	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	705a      	strb	r2, [r3, #1]
 8004fe2:	e00f      	b.n	8005004 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_PCD_EP_Close+0x6e>
 800501a:	2302      	movs	r3, #2
 800501c:	e00e      	b.n	800503c <HAL_PCD_EP_Close+0x8c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	4618      	mov	r0, r3
 800502e:	f002 fe23 	bl	8007c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	460b      	mov	r3, r1
 8005052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005054:	7afb      	ldrb	r3, [r7, #11]
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	b2da      	uxtb	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d102      	bne.n	80050a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050a0:	7afb      	ldrb	r3, [r7, #11]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	f003 f8fe 	bl	80082b8 <USB_EP0StartXfer>
 80050bc:	e008      	b.n	80050d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	f002 feb0 	bl	8007e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	460b      	mov	r3, r1
 80050e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	f003 020f 	and.w	r2, r3, #15
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050fc:	681b      	ldr	r3, [r3, #0]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	460b      	mov	r3, r1
 8005118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	f003 020f 	and.w	r2, r3, #15
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	3338      	adds	r3, #56	; 0x38
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	3304      	adds	r3, #4
 8005130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2201      	movs	r2, #1
 8005148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	b2da      	uxtb	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005164:	7afb      	ldrb	r3, [r7, #11]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	6979      	ldr	r1, [r7, #20]
 800517c:	f003 f89c 	bl	80082b8 <USB_EP0StartXfer>
 8005180:	e008      	b.n	8005194 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	f002 fe4e 	bl	8007e30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d901      	bls.n	80051bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e050      	b.n	800525e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da0f      	bge.n	80051e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 020f 	and.w	r2, r3, #15
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3338      	adds	r3, #56	; 0x38
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	3304      	adds	r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	705a      	strb	r2, [r3, #1]
 80051e2:	e00d      	b.n	8005200 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	3304      	adds	r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_PCD_EP_SetStall+0x82>
 800521c:	2302      	movs	r3, #2
 800521e:	e01e      	b.n	800525e <HAL_PCD_EP_SetStall+0xc0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68f9      	ldr	r1, [r7, #12]
 800522e:	4618      	mov	r0, r3
 8005230:	f003 f9f3 	bl	800861a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	b2d9      	uxtb	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800524e:	461a      	mov	r2, r3
 8005250:	f003 fbe4 	bl	8008a1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	460b      	mov	r3, r1
 8005270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d901      	bls.n	8005284 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e042      	b.n	800530a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	da0f      	bge.n	80052ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	f003 020f 	and.w	r2, r3, #15
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	3338      	adds	r3, #56	; 0x38
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	4413      	add	r3, r2
 80052a0:	3304      	adds	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	705a      	strb	r2, [r3, #1]
 80052aa:	e00f      	b.n	80052cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	3304      	adds	r3, #4
 80052c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_PCD_EP_ClrStall+0x86>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e00e      	b.n	800530a <HAL_PCD_EP_ClrStall+0xa4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f003 f9fb 	bl	80086f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b08a      	sub	sp, #40	; 0x28
 8005316:	af02      	add	r7, sp, #8
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	3338      	adds	r3, #56	; 0x38
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4413      	add	r3, r2
 8005336:	3304      	adds	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	429a      	cmp	r2, r3
 8005344:	d901      	bls.n	800534a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e06c      	b.n	8005424 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	429a      	cmp	r2, r3
 800535e:	d902      	bls.n	8005366 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3303      	adds	r3, #3
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800536e:	e02b      	b.n	80053c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	429a      	cmp	r2, r3
 8005384:	d902      	bls.n	800538c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	3303      	adds	r3, #3
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	68d9      	ldr	r1, [r3, #12]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	4603      	mov	r3, r0
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f003 f8d7 	bl	800855e <USB_WritePacket>

    ep->xfer_buff  += len;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	441a      	add	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	441a      	add	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d809      	bhi.n	80053f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d203      	bcs.n	80053f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1be      	bne.n	8005370 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d811      	bhi.n	8005422 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	2201      	movs	r2, #1
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	43db      	mvns	r3, r3
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541e:	4013      	ands	r3, r2
 8005420:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	333c      	adds	r3, #60	; 0x3c
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b01      	cmp	r3, #1
 8005460:	f040 80a0 	bne.w	80055a4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a72      	ldr	r2, [pc, #456]	; (800563c <PCD_EP_OutXfrComplete_int+0x210>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f240 80dd 	bls.w	8005632 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80d7 	beq.w	8005632 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	461a      	mov	r2, r3
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	6093      	str	r3, [r2, #8]
 8005498:	e0cb      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2320      	movs	r3, #32
 80054b4:	6093      	str	r3, [r2, #8]
 80054b6:	e0bc      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 80b7 	bne.w	8005632 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a5d      	ldr	r2, [pc, #372]	; (800563c <PCD_EP_OutXfrComplete_int+0x210>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d90f      	bls.n	80054ec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e8:	6093      	str	r3, [r2, #8]
 80054ea:	e0a2      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054fe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	0159      	lsls	r1, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	440b      	add	r3, r1
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005512:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4403      	add	r3, r0
 8005522:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005526:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4403      	add	r3, r0
 800554a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4419      	add	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4403      	add	r3, r0
 8005560:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005564:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d114      	bne.n	8005596 <PCD_EP_OutXfrComplete_int+0x16a>
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800558e:	461a      	mov	r2, r3
 8005590:	2101      	movs	r1, #1
 8005592:	f003 fa43 	bl	8008a1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f005 fae1 	bl	800ab64 <HAL_PCD_DataOutStageCallback>
 80055a2:	e046      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a26      	ldr	r2, [pc, #152]	; (8005640 <PCD_EP_OutXfrComplete_int+0x214>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d124      	bne.n	80055f6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	461a      	mov	r2, r3
 80055c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c8:	6093      	str	r3, [r2, #8]
 80055ca:	e032      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	2320      	movs	r3, #32
 80055e6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f005 fab8 	bl	800ab64 <HAL_PCD_DataOutStageCallback>
 80055f4:	e01d      	b.n	8005632 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d114      	bne.n	8005626 <PCD_EP_OutXfrComplete_int+0x1fa>
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800561e:	461a      	mov	r2, r3
 8005620:	2100      	movs	r1, #0
 8005622:	f003 f9fb 	bl	8008a1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f005 fa99 	bl	800ab64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	4f54300a 	.word	0x4f54300a
 8005640:	4f54310a 	.word	0x4f54310a

08005644 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	333c      	adds	r3, #60	; 0x3c
 800565c:	3304      	adds	r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <PCD_EP_OutSetupPacket_int+0x88>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d90e      	bls.n	8005698 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	461a      	mov	r2, r3
 8005692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005696:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f005 fa51 	bl	800ab40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <PCD_EP_OutSetupPacket_int+0x88>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d90c      	bls.n	80056c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d108      	bne.n	80056c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056b8:	461a      	mov	r2, r3
 80056ba:	2101      	movs	r1, #1
 80056bc:	f003 f9ae 	bl	8008a1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	4f54300a 	.word	0x4f54300a

080056d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
 80056dc:	4613      	mov	r3, r2
 80056de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056ee:	883b      	ldrh	r3, [r7, #0]
 80056f0:	0419      	lsls	r1, r3, #16
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
 80056fc:	e028      	b.n	8005750 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]
 8005710:	e00d      	b.n	800572e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	3340      	adds	r3, #64	; 0x40
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4413      	add	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	3301      	adds	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	3b01      	subs	r3, #1
 8005734:	429a      	cmp	r2, r3
 8005736:	d3ec      	bcc.n	8005712 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005738:	883b      	ldrh	r3, [r7, #0]
 800573a:	0418      	lsls	r0, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	3b01      	subs	r3, #1
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4302      	orrs	r2, r0
 8005748:	3340      	adds	r3, #64	; 0x40
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e264      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d075      	beq.n	80058a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b6:	4ba3      	ldr	r3, [pc, #652]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00c      	beq.n	80057dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c2:	4ba0      	ldr	r3, [pc, #640]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d112      	bne.n	80057f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ce:	4b9d      	ldr	r3, [pc, #628]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057da:	d10b      	bne.n	80057f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	4b99      	ldr	r3, [pc, #612]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05b      	beq.n	80058a0 <HAL_RCC_OscConfig+0x108>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d157      	bne.n	80058a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e23f      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d106      	bne.n	800580c <HAL_RCC_OscConfig+0x74>
 80057fe:	4b91      	ldr	r3, [pc, #580]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a90      	ldr	r2, [pc, #576]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e01d      	b.n	8005848 <HAL_RCC_OscConfig+0xb0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005814:	d10c      	bne.n	8005830 <HAL_RCC_OscConfig+0x98>
 8005816:	4b8b      	ldr	r3, [pc, #556]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a8a      	ldr	r2, [pc, #552]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 800581c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4b88      	ldr	r3, [pc, #544]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a87      	ldr	r2, [pc, #540]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e00b      	b.n	8005848 <HAL_RCC_OscConfig+0xb0>
 8005830:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a83      	ldr	r2, [pc, #524]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	4b81      	ldr	r3, [pc, #516]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a80      	ldr	r2, [pc, #512]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d013      	beq.n	8005878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fd f8a2 	bl	8002998 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005858:	f7fd f89e 	bl	8002998 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e204      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	4b76      	ldr	r3, [pc, #472]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0xc0>
 8005876:	e014      	b.n	80058a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fd f88e 	bl	8002998 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005880:	f7fd f88a 	bl	8002998 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e1f0      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005892:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0xe8>
 800589e:	e000      	b.n	80058a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d063      	beq.n	8005976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ae:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ba:	4b62      	ldr	r3, [pc, #392]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d11c      	bne.n	8005900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c6:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d116      	bne.n	8005900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	4b5c      	ldr	r3, [pc, #368]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x152>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e1c4      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4952      	ldr	r1, [pc, #328]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fe:	e03a      	b.n	8005976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d020      	beq.n	800594a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005908:	4b4f      	ldr	r3, [pc, #316]	; (8005a48 <HAL_RCC_OscConfig+0x2b0>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fd f843 	bl	8002998 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005916:	f7fd f83f 	bl	8002998 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e1a5      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005928:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005934:	4b43      	ldr	r3, [pc, #268]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4940      	ldr	r1, [pc, #256]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	600b      	str	r3, [r1, #0]
 8005948:	e015      	b.n	8005976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800594a:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <HAL_RCC_OscConfig+0x2b0>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fd f822 	bl	8002998 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005958:	f7fd f81e 	bl	8002998 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e184      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800596a:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d030      	beq.n	80059e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d016      	beq.n	80059b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800598a:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <HAL_RCC_OscConfig+0x2b4>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005990:	f7fd f802 	bl	8002998 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005998:	f7fc fffe 	bl	8002998 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e164      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059aa:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x200>
 80059b6:	e015      	b.n	80059e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <HAL_RCC_OscConfig+0x2b4>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059be:	f7fc ffeb 	bl	8002998 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c6:	f7fc ffe7 	bl	8002998 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e14d      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80059da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a0 	beq.w	8005b32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10f      	bne.n	8005a22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
 8005a12:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCC_OscConfig+0x2b8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d121      	bne.n	8005a72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_RCC_OscConfig+0x2b8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <HAL_RCC_OscConfig+0x2b8>)
 8005a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3a:	f7fc ffad 	bl	8002998 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a40:	e011      	b.n	8005a66 <HAL_RCC_OscConfig+0x2ce>
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	42470000 	.word	0x42470000
 8005a4c:	42470e80 	.word	0x42470e80
 8005a50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a54:	f7fc ffa0 	bl	8002998 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e106      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCC_OscConfig+0x4e4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d106      	bne.n	8005a88 <HAL_RCC_OscConfig+0x2f0>
 8005a7a:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a80      	ldr	r2, [pc, #512]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	e01c      	b.n	8005ac2 <HAL_RCC_OscConfig+0x32a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d10c      	bne.n	8005aaa <HAL_RCC_OscConfig+0x312>
 8005a90:	4b7b      	ldr	r3, [pc, #492]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a7a      	ldr	r2, [pc, #488]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a77      	ldr	r2, [pc, #476]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	e00b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x32a>
 8005aaa:	4b75      	ldr	r3, [pc, #468]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	4a74      	ldr	r2, [pc, #464]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab6:	4b72      	ldr	r3, [pc, #456]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	4a71      	ldr	r2, [pc, #452]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005abc:	f023 0304 	bic.w	r3, r3, #4
 8005ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d015      	beq.n	8005af6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aca:	f7fc ff65 	bl	8002998 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad2:	f7fc ff61 	bl	8002998 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0c5      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae8:	4b65      	ldr	r3, [pc, #404]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ee      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x33a>
 8005af4:	e014      	b.n	8005b20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af6:	f7fc ff4f 	bl	8002998 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fc ff4b 	bl	8002998 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0af      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b14:	4b5a      	ldr	r3, [pc, #360]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ee      	bne.n	8005afe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b26:	4b56      	ldr	r3, [pc, #344]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a55      	ldr	r2, [pc, #340]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 809b 	beq.w	8005c72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b3c:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d05c      	beq.n	8005c02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d141      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b50:	4b4c      	ldr	r3, [pc, #304]	; (8005c84 <HAL_RCC_OscConfig+0x4ec>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b56:	f7fc ff1f 	bl	8002998 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fc ff1b 	bl	8002998 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e081      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b70:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	019b      	lsls	r3, r3, #6
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	3b01      	subs	r3, #1
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	4937      	ldr	r1, [pc, #220]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba6:	4b37      	ldr	r3, [pc, #220]	; (8005c84 <HAL_RCC_OscConfig+0x4ec>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fc fef4 	bl	8002998 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fc fef0 	bl	8002998 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e056      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x41c>
 8005bd2:	e04e      	b.n	8005c72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd4:	4b2b      	ldr	r3, [pc, #172]	; (8005c84 <HAL_RCC_OscConfig+0x4ec>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7fc fedd 	bl	8002998 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fc fed9 	bl	8002998 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e03f      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf4:	4b22      	ldr	r3, [pc, #136]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x44a>
 8005c00:	e037      	b.n	8005c72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e032      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_RCC_OscConfig+0x4e8>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d028      	beq.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d121      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d11a      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c3e:	4013      	ands	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d111      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	3b01      	subs	r3, #1
 8005c58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d001      	beq.n	8005c72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	40023800 	.word	0x40023800
 8005c84:	42470060 	.word	0x42470060

08005c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0cc      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b68      	ldr	r3, [pc, #416]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d90c      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b65      	ldr	r3, [pc, #404]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b63      	ldr	r3, [pc, #396]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0b8      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d020      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cdc:	4b59      	ldr	r3, [pc, #356]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a58      	ldr	r2, [pc, #352]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cf4:	4b53      	ldr	r3, [pc, #332]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d00:	4b50      	ldr	r3, [pc, #320]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	494d      	ldr	r1, [pc, #308]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d044      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d119      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e07f      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d46:	4b3f      	ldr	r3, [pc, #252]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e06f      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d56:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e067      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d66:	4b37      	ldr	r3, [pc, #220]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 0203 	bic.w	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	4934      	ldr	r1, [pc, #208]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d78:	f7fc fe0e 	bl	8002998 <HAL_GetTick>
 8005d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d80:	f7fc fe0a 	bl	8002998 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e04f      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 020c 	and.w	r2, r3, #12
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1eb      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005da8:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d20c      	bcs.n	8005dd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db6:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dbe:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e032      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4916      	ldr	r1, [pc, #88]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dfa:	4b12      	ldr	r3, [pc, #72]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	490e      	ldr	r1, [pc, #56]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e0e:	f000 f821 	bl	8005e54 <HAL_RCC_GetSysClockFreq>
 8005e12:	4602      	mov	r2, r0
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	490a      	ldr	r1, [pc, #40]	; (8005e48 <HAL_RCC_ClockConfig+0x1c0>)
 8005e20:	5ccb      	ldrb	r3, [r1, r3]
 8005e22:	fa22 f303 	lsr.w	r3, r2, r3
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <HAL_RCC_ClockConfig+0x1c4>)
 8005e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fc fd6e 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40023c00 	.word	0x40023c00
 8005e44:	40023800 	.word	0x40023800
 8005e48:	0800baec 	.word	0x0800baec
 8005e4c:	20000000 	.word	0x20000000
 8005e50:	200002b8 	.word	0x200002b8

08005e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e54:	b5b0      	push	{r4, r5, r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	6079      	str	r1, [r7, #4]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	60f9      	str	r1, [r7, #12]
 8005e62:	2100      	movs	r1, #0
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e66:	2100      	movs	r1, #0
 8005e68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e6a:	4952      	ldr	r1, [pc, #328]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e6c:	6889      	ldr	r1, [r1, #8]
 8005e6e:	f001 010c 	and.w	r1, r1, #12
 8005e72:	2908      	cmp	r1, #8
 8005e74:	d00d      	beq.n	8005e92 <HAL_RCC_GetSysClockFreq+0x3e>
 8005e76:	2908      	cmp	r1, #8
 8005e78:	f200 8094 	bhi.w	8005fa4 <HAL_RCC_GetSysClockFreq+0x150>
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_RCC_GetSysClockFreq+0x32>
 8005e80:	2904      	cmp	r1, #4
 8005e82:	d003      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x38>
 8005e84:	e08e      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e86:	4b4c      	ldr	r3, [pc, #304]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e88:	60bb      	str	r3, [r7, #8]
       break;
 8005e8a:	e08e      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8005e8e:	60bb      	str	r3, [r7, #8]
      break;
 8005e90:	e08b      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e92:	4948      	ldr	r1, [pc, #288]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e94:	6849      	ldr	r1, [r1, #4]
 8005e96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005e9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e9c:	4945      	ldr	r1, [pc, #276]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e9e:	6849      	ldr	r1, [r1, #4]
 8005ea0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d024      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea8:	4942      	ldr	r1, [pc, #264]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	0989      	lsrs	r1, r1, #6
 8005eae:	4608      	mov	r0, r1
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005eb8:	f04f 0500 	mov.w	r5, #0
 8005ebc:	ea00 0204 	and.w	r2, r0, r4
 8005ec0:	ea01 0305 	and.w	r3, r1, r5
 8005ec4:	493d      	ldr	r1, [pc, #244]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8005ec6:	fb01 f003 	mul.w	r0, r1, r3
 8005eca:	2100      	movs	r1, #0
 8005ecc:	fb01 f102 	mul.w	r1, r1, r2
 8005ed0:	1844      	adds	r4, r0, r1
 8005ed2:	493a      	ldr	r1, [pc, #232]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x168>)
 8005ed4:	fba2 0101 	umull	r0, r1, r2, r1
 8005ed8:	1863      	adds	r3, r4, r1
 8005eda:	4619      	mov	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	f7fa f9d4 	bl	8000290 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	e04a      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef2:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f02:	f04f 0100 	mov.w	r1, #0
 8005f06:	ea02 0400 	and.w	r4, r2, r0
 8005f0a:	ea03 0501 	and.w	r5, r3, r1
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	014b      	lsls	r3, r1, #5
 8005f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f20:	0142      	lsls	r2, r0, #5
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	1b00      	subs	r0, r0, r4
 8005f28:	eb61 0105 	sbc.w	r1, r1, r5
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	018b      	lsls	r3, r1, #6
 8005f36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f3a:	0182      	lsls	r2, r0, #6
 8005f3c:	1a12      	subs	r2, r2, r0
 8005f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	00d9      	lsls	r1, r3, #3
 8005f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f50:	00d0      	lsls	r0, r2, #3
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	1912      	adds	r2, r2, r4
 8005f58:	eb45 0303 	adc.w	r3, r5, r3
 8005f5c:	f04f 0000 	mov.w	r0, #0
 8005f60:	f04f 0100 	mov.w	r1, #0
 8005f64:	0299      	lsls	r1, r3, #10
 8005f66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f6a:	0290      	lsls	r0, r2, #10
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f7fa f988 	bl	8000290 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	3301      	adds	r3, #1
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	60bb      	str	r3, [r7, #8]
      break;
 8005fa2:	e002      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005fa6:	60bb      	str	r3, [r7, #8]
      break;
 8005fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005faa:	68bb      	ldr	r3, [r7, #8]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	017d7840 	.word	0x017d7840

08005fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000000 	.word	0x20000000

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fdc:	f7ff fff0 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0a9b      	lsrs	r3, r3, #10
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0800bafc 	.word	0x0800bafc

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006004:	f7ff ffdc 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	0800bafc 	.word	0x0800bafc

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800604c:	2b00      	cmp	r3, #0
 800604e:	d038      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006050:	4b68      	ldr	r3, [pc, #416]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006056:	f7fc fc9f 	bl	8002998 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800605e:	f7fc fc9b 	bl	8002998 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0bd      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006070:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	495a      	ldr	r1, [pc, #360]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006096:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609c:	f7fc fc7c 	bl	8002998 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060a4:	f7fc fc78 	bl	8002998 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e09a      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060b6:	4b50      	ldr	r3, [pc, #320]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8083 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	4a47      	ldr	r2, [pc, #284]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060de:	6413      	str	r3, [r2, #64]	; 0x40
 80060e0:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ec:	4b43      	ldr	r3, [pc, #268]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a42      	ldr	r2, [pc, #264]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060f8:	f7fc fc4e 	bl	8002998 <HAL_GetTick>
 80060fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006100:	f7fc fc4a 	bl	8002998 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e06c      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006112:	4b3a      	ldr	r3, [pc, #232]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006126:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d02f      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d028      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800613c:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800614c:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006152:	4a29      	ldr	r2, [pc, #164]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006158:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d114      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006164:	f7fc fc18 	bl	8002998 <HAL_GetTick>
 8006168:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616a:	e00a      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616c:	f7fc fc14 	bl	8002998 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e034      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006182:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ee      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d10d      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b0:	4911      	ldr	r1, [pc, #68]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	608b      	str	r3, [r1, #8]
 80061b6:	e005      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061c2:	6093      	str	r3, [r2, #8]
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d0:	4909      	ldr	r1, [pc, #36]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7d1a      	ldrb	r2, [r3, #20]
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80061e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	42470068 	.word	0x42470068
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40007000 	.word	0x40007000
 8006200:	42470e40 	.word	0x42470e40
 8006204:	424711e0 	.word	0x424711e0

08006208 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e083      	b.n	8006322 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7f5b      	ldrb	r3, [r3, #29]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fa fe42 	bl	8000eb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	22ca      	movs	r2, #202	; 0xca
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2253      	movs	r2, #83	; 0x53
 8006244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f897 	bl	800637a <RTC_EnterInitMode>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e05e      	b.n	8006322 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68d2      	ldr	r2, [r2, #12]
 800629e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6919      	ldr	r1, [r3, #16]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	041a      	lsls	r2, r3, #16
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10e      	bne.n	80062f0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f829 	bl	800632a <HAL_RTC_WaitForSynchro>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	22ff      	movs	r2, #255	; 0xff
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e018      	b.n	8006322 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006320:	2300      	movs	r3, #0
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006344:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006346:	f7fc fb27 	bl	8002998 <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800634c:	e009      	b.n	8006362 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800634e:	f7fc fb23 	bl	8002998 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635c:	d901      	bls.n	8006362 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e007      	b.n	8006372 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0ee      	beq.n	800634e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d119      	bne.n	80063c8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639e:	f7fc fafb 	bl	8002998 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063a4:	e009      	b.n	80063ba <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063a6:	f7fc faf7 	bl	8002998 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b4:	d901      	bls.n	80063ba <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e007      	b.n	80063ca <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0ee      	beq.n	80063a6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e041      	b.n	8006468 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa fd71 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 f8f1 	bl	80065f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIM_ConfigClockSource+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e0b3      	b.n	80065f0 <HAL_TIM_ConfigClockSource+0x180>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c0:	d03e      	beq.n	8006540 <HAL_TIM_ConfigClockSource+0xd0>
 80064c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c6:	f200 8087 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ce:	f000 8085 	beq.w	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d87f      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d01a      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0xa2>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d87b      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064e0:	2b60      	cmp	r3, #96	; 0x60
 80064e2:	d050      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x116>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d877      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d03c      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0xf6>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d873      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d058      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x136>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d86f      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d064      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x156>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d86b      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d060      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x156>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d867      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05c      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x156>
 800650c:	2b10      	cmp	r3, #16
 800650e:	d05a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006510:	e062      	b.n	80065d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6899      	ldr	r1, [r3, #8]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f000 f963 	bl	80067ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006534:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	609a      	str	r2, [r3, #8]
      break;
 800653e:	e04e      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6899      	ldr	r1, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f000 f94c 	bl	80067ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006562:	609a      	str	r2, [r3, #8]
      break;
 8006564:	e03b      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	461a      	mov	r2, r3
 8006574:	f000 f8c0 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2150      	movs	r1, #80	; 0x50
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f919 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 8006584:	e02b      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6859      	ldr	r1, [r3, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	f000 f8df 	bl	8006756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2160      	movs	r1, #96	; 0x60
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f909 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 80065a4:	e01b      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 f8a0 	bl	80066f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f8f9 	bl	80067b6 <TIM_ITRx_SetConfig>
      break;
 80065c4:	e00b      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f000 f8f0 	bl	80067b6 <TIM_ITRx_SetConfig>
        break;
 80065d6:	e002      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a34      	ldr	r2, [pc, #208]	; (80066dc <TIM_Base_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00f      	beq.n	8006630 <TIM_Base_SetConfig+0x38>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d00b      	beq.n	8006630 <TIM_Base_SetConfig+0x38>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a31      	ldr	r2, [pc, #196]	; (80066e0 <TIM_Base_SetConfig+0xe8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <TIM_Base_SetConfig+0x38>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <TIM_Base_SetConfig+0xec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_Base_SetConfig+0x38>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2f      	ldr	r2, [pc, #188]	; (80066e8 <TIM_Base_SetConfig+0xf0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d108      	bne.n	8006642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a25      	ldr	r2, [pc, #148]	; (80066dc <TIM_Base_SetConfig+0xe4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01b      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d017      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a22      	ldr	r2, [pc, #136]	; (80066e0 <TIM_Base_SetConfig+0xe8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <TIM_Base_SetConfig+0xec>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00f      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a20      	ldr	r2, [pc, #128]	; (80066e8 <TIM_Base_SetConfig+0xf0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00b      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <TIM_Base_SetConfig+0xf4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <TIM_Base_SetConfig+0xf8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_Base_SetConfig+0x8a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <TIM_Base_SetConfig+0xfc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d108      	bne.n	8006694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <TIM_Base_SetConfig+0xe4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0201 	bic.w	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 030a 	bic.w	r3, r3, #10
 8006734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006756:	b480      	push	{r7}
 8006758:	b087      	sub	sp, #28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f023 0210 	bic.w	r2, r3, #16
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	031b      	lsls	r3, r3, #12
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	621a      	str	r2, [r3, #32]
}
 80067aa:	bf00      	nop
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f043 0307 	orr.w	r3, r3, #7
 80067d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	609a      	str	r2, [r3, #8]
}
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	021a      	lsls	r2, r3, #8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	431a      	orrs	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4313      	orrs	r3, r2
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	609a      	str	r2, [r3, #8]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006840:	2302      	movs	r3, #2
 8006842:	e050      	b.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006890:	d013      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a16      	ldr	r2, [pc, #88]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10c      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40014000 	.word	0x40014000

08006908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e03f      	b.n	800699a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fa faf8 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800694a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fc09 	bl	8007164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e021      	b.n	80069f8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	; 0x24
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ca:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fa faf9 	bl	8000fc4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d130      	bne.n	8006a7c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_UART_Transmit_IT+0x26>
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e029      	b.n	8006a7e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_UART_Transmit_IT+0x38>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e022      	b.n	8006a7e <HAL_UART_Transmit_IT+0x7e>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	88fa      	ldrh	r2, [r7, #6]
 8006a4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2221      	movs	r2, #33	; 0x21
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a76:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	4613      	mov	r3, r2
 8006a96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d11d      	bne.n	8006ae0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_UART_Receive_IT+0x26>
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e016      	b.n	8006ae2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Receive_IT+0x38>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e00f      	b.n	8006ae2 <HAL_UART_Receive_IT+0x58>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f9ca 	bl	8006e70 <UART_Start_Receive_IT>
 8006adc:	4603      	mov	r3, r0
 8006ade:	e000      	b.n	8006ae2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10d      	bne.n	8006b3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_UART_IRQHandler+0x52>
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa7d 	bl	8007036 <UART_Receive_IT>
      return;
 8006b3c:	e17c      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80b1 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x1bc>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <HAL_UART_IRQHandler+0x70>
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a6 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_UART_IRQHandler+0x90>
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_UART_IRQHandler+0xb0>
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	f043 0202 	orr.w	r2, r3, #2
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_UART_IRQHandler+0xd0>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f043 0204 	orr.w	r2, r3, #4
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00f      	beq.n	8006be6 <HAL_UART_IRQHandler+0xfa>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d104      	bne.n	8006bda <HAL_UART_IRQHandler+0xee>
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0208 	orr.w	r2, r3, #8
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 811f 	beq.w	8006e2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_UART_IRQHandler+0x11e>
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa16 	bl	8007036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_UART_IRQHandler+0x146>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d031      	beq.n	8006c96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f956 	bl	8006ee4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d123      	bne.n	8006c8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d013      	beq.n	8006c86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	4a77      	ldr	r2, [pc, #476]	; (8006e40 <HAL_UART_IRQHandler+0x354>)
 8006c64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fc f877 	bl	8002d5e <HAL_DMA_Abort_IT>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c80:	4610      	mov	r0, r2
 8006c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	e00e      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8dc 	bl	8006e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	e00a      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8d8 	bl	8006e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	e006      	b.n	8006ca4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8d4 	bl	8006e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ca2:	e0c4      	b.n	8006e2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	bf00      	nop
    return;
 8006ca6:	e0c2      	b.n	8006e2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 80a2 	bne.w	8006df6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 809c 	beq.w	8006df6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8096 	beq.w	8006df6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d14f      	bne.n	8006d8e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006cf8:	8a3b      	ldrh	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8099 	beq.w	8006e32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d04:	8a3a      	ldrh	r2, [r7, #16]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f080 8093 	bcs.w	8006e32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8a3a      	ldrh	r2, [r7, #16]
 8006d10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1c:	d02b      	beq.n	8006d76 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d2c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695a      	ldr	r2, [r3, #20]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0210 	bic.w	r2, r2, #16
 8006d6a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fb ff84 	bl	8002c7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f866 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d8c:	e051      	b.n	8006e32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d047      	beq.n	8006e36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006da6:	8a7b      	ldrh	r3, [r7, #18]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d044      	beq.n	8006e36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dba:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0201 	bic.w	r2, r2, #1
 8006dca:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0210 	bic.w	r2, r2, #16
 8006de8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dea:	8a7b      	ldrh	r3, [r7, #18]
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f832 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006df4:	e01f      	b.n	8006e36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <HAL_UART_IRQHandler+0x326>
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8ab 	bl	8006f66 <UART_Transmit_IT>
    return;
 8006e10:	e012      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <HAL_UART_IRQHandler+0x34c>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d008      	beq.n	8006e38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8ed 	bl	8007006 <UART_EndTransmit_IT>
    return;
 8006e2c:	e004      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
    return;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <HAL_UART_IRQHandler+0x34c>
      return;
 8006e36:	bf00      	nop
  }
}
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08006f3f 	.word	0x08006f3f

08006e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2222      	movs	r2, #34	; 0x22
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0220 	orr.w	r2, r2, #32
 8006ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006efa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0210 	bic.w	r2, r2, #16
 8006f22:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff ff73 	bl	8006e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b21      	cmp	r3, #33	; 0x21
 8006f78:	d13e      	bne.n	8006ff8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f82:	d114      	bne.n	8006fae <UART_Transmit_IT+0x48>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d110      	bne.n	8006fae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	1c9a      	adds	r2, r3, #2
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	621a      	str	r2, [r3, #32]
 8006fac:	e008      	b.n	8006fc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	1c59      	adds	r1, r3, #1
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6211      	str	r1, [r2, #32]
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10f      	bne.n	8006ff4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e000      	b.n	8006ffa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa fda0 	bl	8001b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b22      	cmp	r3, #34	; 0x22
 8007048:	f040 8087 	bne.w	800715a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007054:	d117      	bne.n	8007086 <UART_Receive_IT+0x50>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d113      	bne.n	8007086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007074:	b29a      	uxth	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	1c9a      	adds	r2, r3, #2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
 8007084:	e026      	b.n	80070d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007098:	d007      	beq.n	80070aa <UART_Receive_IT+0x74>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <UART_Receive_IT+0x82>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e008      	b.n	80070ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4619      	mov	r1, r3
 80070e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d136      	bne.n	8007156 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0220 	bic.w	r2, r2, #32
 80070f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0201 	bic.w	r2, r2, #1
 8007116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10e      	bne.n	8007146 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0210 	bic.w	r2, r2, #16
 8007136:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fe8a 	bl	8006e58 <HAL_UARTEx_RxEventCallback>
 8007144:	e002      	b.n	800714c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa fcee 	bl	8001b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	e002      	b.n	800715c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e000      	b.n	800715c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800715a:	2302      	movs	r3, #2
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	b09f      	sub	sp, #124	; 0x7c
 800716a:	af00      	add	r7, sp, #0
 800716c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717a:	68d9      	ldr	r1, [r3, #12]
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	ea40 0301 	orr.w	r3, r0, r1
 8007184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	431a      	orrs	r2, r3
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	431a      	orrs	r2, r3
 8007196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4313      	orrs	r3, r2
 800719c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800719e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071a8:	f021 010c 	bic.w	r1, r1, #12
 80071ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b2:	430b      	orrs	r3, r1
 80071b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c2:	6999      	ldr	r1, [r3, #24]
 80071c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	ea40 0301 	orr.w	r3, r0, r1
 80071cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4bc5      	ldr	r3, [pc, #788]	; (80074e8 <UART_SetConfig+0x384>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d004      	beq.n	80071e2 <UART_SetConfig+0x7e>
 80071d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4bc3      	ldr	r3, [pc, #780]	; (80074ec <UART_SetConfig+0x388>)
 80071de:	429a      	cmp	r2, r3
 80071e0:	d103      	bne.n	80071ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071e2:	f7fe ff0d 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 80071e6:	6778      	str	r0, [r7, #116]	; 0x74
 80071e8:	e002      	b.n	80071f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ea:	f7fe fef5 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80071ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f8:	f040 80b6 	bne.w	8007368 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071fe:	461c      	mov	r4, r3
 8007200:	f04f 0500 	mov.w	r5, #0
 8007204:	4622      	mov	r2, r4
 8007206:	462b      	mov	r3, r5
 8007208:	1891      	adds	r1, r2, r2
 800720a:	6439      	str	r1, [r7, #64]	; 0x40
 800720c:	415b      	adcs	r3, r3
 800720e:	647b      	str	r3, [r7, #68]	; 0x44
 8007210:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007214:	1912      	adds	r2, r2, r4
 8007216:	eb45 0303 	adc.w	r3, r5, r3
 800721a:	f04f 0000 	mov.w	r0, #0
 800721e:	f04f 0100 	mov.w	r1, #0
 8007222:	00d9      	lsls	r1, r3, #3
 8007224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007228:	00d0      	lsls	r0, r2, #3
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	1911      	adds	r1, r2, r4
 8007230:	6639      	str	r1, [r7, #96]	; 0x60
 8007232:	416b      	adcs	r3, r5
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
 8007236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	461a      	mov	r2, r3
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	1891      	adds	r1, r2, r2
 8007242:	63b9      	str	r1, [r7, #56]	; 0x38
 8007244:	415b      	adcs	r3, r3
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800724c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007250:	f7f9 f81e 	bl	8000290 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4ba5      	ldr	r3, [pc, #660]	; (80074f0 <UART_SetConfig+0x38c>)
 800725a:	fba3 2302 	umull	r2, r3, r3, r2
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	011e      	lsls	r6, r3, #4
 8007262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007264:	461c      	mov	r4, r3
 8007266:	f04f 0500 	mov.w	r5, #0
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	1891      	adds	r1, r2, r2
 8007270:	6339      	str	r1, [r7, #48]	; 0x30
 8007272:	415b      	adcs	r3, r3
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
 8007276:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800727a:	1912      	adds	r2, r2, r4
 800727c:	eb45 0303 	adc.w	r3, r5, r3
 8007280:	f04f 0000 	mov.w	r0, #0
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	00d9      	lsls	r1, r3, #3
 800728a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800728e:	00d0      	lsls	r0, r2, #3
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	1911      	adds	r1, r2, r4
 8007296:	65b9      	str	r1, [r7, #88]	; 0x58
 8007298:	416b      	adcs	r3, r5
 800729a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	461a      	mov	r2, r3
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	1891      	adds	r1, r2, r2
 80072a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80072aa:	415b      	adcs	r3, r3
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80072b6:	f7f8 ffeb 	bl	8000290 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4b8c      	ldr	r3, [pc, #560]	; (80074f0 <UART_SetConfig+0x38c>)
 80072c0:	fba3 1302 	umull	r1, r3, r3, r2
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	2164      	movs	r1, #100	; 0x64
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	3332      	adds	r3, #50	; 0x32
 80072d2:	4a87      	ldr	r2, [pc, #540]	; (80074f0 <UART_SetConfig+0x38c>)
 80072d4:	fba2 2303 	umull	r2, r3, r2, r3
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072e0:	441e      	add	r6, r3
 80072e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e4:	4618      	mov	r0, r3
 80072e6:	f04f 0100 	mov.w	r1, #0
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	1894      	adds	r4, r2, r2
 80072f0:	623c      	str	r4, [r7, #32]
 80072f2:	415b      	adcs	r3, r3
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
 80072f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072fa:	1812      	adds	r2, r2, r0
 80072fc:	eb41 0303 	adc.w	r3, r1, r3
 8007300:	f04f 0400 	mov.w	r4, #0
 8007304:	f04f 0500 	mov.w	r5, #0
 8007308:	00dd      	lsls	r5, r3, #3
 800730a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800730e:	00d4      	lsls	r4, r2, #3
 8007310:	4622      	mov	r2, r4
 8007312:	462b      	mov	r3, r5
 8007314:	1814      	adds	r4, r2, r0
 8007316:	653c      	str	r4, [r7, #80]	; 0x50
 8007318:	414b      	adcs	r3, r1
 800731a:	657b      	str	r3, [r7, #84]	; 0x54
 800731c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	461a      	mov	r2, r3
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	1891      	adds	r1, r2, r2
 8007328:	61b9      	str	r1, [r7, #24]
 800732a:	415b      	adcs	r3, r3
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007332:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007336:	f7f8 ffab 	bl	8000290 <__aeabi_uldivmod>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4b6c      	ldr	r3, [pc, #432]	; (80074f0 <UART_SetConfig+0x38c>)
 8007340:	fba3 1302 	umull	r1, r3, r3, r2
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	2164      	movs	r1, #100	; 0x64
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	3332      	adds	r3, #50	; 0x32
 8007352:	4a67      	ldr	r2, [pc, #412]	; (80074f0 <UART_SetConfig+0x38c>)
 8007354:	fba2 2303 	umull	r2, r3, r2, r3
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	f003 0207 	and.w	r2, r3, #7
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4432      	add	r2, r6
 8007364:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007366:	e0b9      	b.n	80074dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736a:	461c      	mov	r4, r3
 800736c:	f04f 0500 	mov.w	r5, #0
 8007370:	4622      	mov	r2, r4
 8007372:	462b      	mov	r3, r5
 8007374:	1891      	adds	r1, r2, r2
 8007376:	6139      	str	r1, [r7, #16]
 8007378:	415b      	adcs	r3, r3
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007380:	1912      	adds	r2, r2, r4
 8007382:	eb45 0303 	adc.w	r3, r5, r3
 8007386:	f04f 0000 	mov.w	r0, #0
 800738a:	f04f 0100 	mov.w	r1, #0
 800738e:	00d9      	lsls	r1, r3, #3
 8007390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007394:	00d0      	lsls	r0, r2, #3
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	eb12 0804 	adds.w	r8, r2, r4
 800739e:	eb43 0905 	adc.w	r9, r3, r5
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	008b      	lsls	r3, r1, #2
 80073b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073ba:	0082      	lsls	r2, r0, #2
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f8 ff66 	bl	8000290 <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4b49      	ldr	r3, [pc, #292]	; (80074f0 <UART_SetConfig+0x38c>)
 80073ca:	fba3 2302 	umull	r2, r3, r3, r2
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	011e      	lsls	r6, r3, #4
 80073d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d4:	4618      	mov	r0, r3
 80073d6:	f04f 0100 	mov.w	r1, #0
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	1894      	adds	r4, r2, r2
 80073e0:	60bc      	str	r4, [r7, #8]
 80073e2:	415b      	adcs	r3, r3
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ea:	1812      	adds	r2, r2, r0
 80073ec:	eb41 0303 	adc.w	r3, r1, r3
 80073f0:	f04f 0400 	mov.w	r4, #0
 80073f4:	f04f 0500 	mov.w	r5, #0
 80073f8:	00dd      	lsls	r5, r3, #3
 80073fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073fe:	00d4      	lsls	r4, r2, #3
 8007400:	4622      	mov	r2, r4
 8007402:	462b      	mov	r3, r5
 8007404:	1814      	adds	r4, r2, r0
 8007406:	64bc      	str	r4, [r7, #72]	; 0x48
 8007408:	414b      	adcs	r3, r1
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	f04f 0100 	mov.w	r1, #0
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	008b      	lsls	r3, r1, #2
 8007420:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007424:	0082      	lsls	r2, r0, #2
 8007426:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800742a:	f7f8 ff31 	bl	8000290 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4b2f      	ldr	r3, [pc, #188]	; (80074f0 <UART_SetConfig+0x38c>)
 8007434:	fba3 1302 	umull	r1, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2164      	movs	r1, #100	; 0x64
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	3332      	adds	r3, #50	; 0x32
 8007446:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <UART_SetConfig+0x38c>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007452:	441e      	add	r6, r3
 8007454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007456:	4618      	mov	r0, r3
 8007458:	f04f 0100 	mov.w	r1, #0
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	1894      	adds	r4, r2, r2
 8007462:	603c      	str	r4, [r7, #0]
 8007464:	415b      	adcs	r3, r3
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746c:	1812      	adds	r2, r2, r0
 800746e:	eb41 0303 	adc.w	r3, r1, r3
 8007472:	f04f 0400 	mov.w	r4, #0
 8007476:	f04f 0500 	mov.w	r5, #0
 800747a:	00dd      	lsls	r5, r3, #3
 800747c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007480:	00d4      	lsls	r4, r2, #3
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	eb12 0a00 	adds.w	sl, r2, r0
 800748a:	eb43 0b01 	adc.w	fp, r3, r1
 800748e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4618      	mov	r0, r3
 8007494:	f04f 0100 	mov.w	r1, #0
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	008b      	lsls	r3, r1, #2
 80074a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074a6:	0082      	lsls	r2, r0, #2
 80074a8:	4650      	mov	r0, sl
 80074aa:	4659      	mov	r1, fp
 80074ac:	f7f8 fef0 	bl	8000290 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <UART_SetConfig+0x38c>)
 80074b6:	fba3 1302 	umull	r1, r3, r3, r2
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	2164      	movs	r1, #100	; 0x64
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	3332      	adds	r3, #50	; 0x32
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <UART_SetConfig+0x38c>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	095b      	lsrs	r3, r3, #5
 80074d0:	f003 020f 	and.w	r2, r3, #15
 80074d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4432      	add	r2, r6
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	377c      	adds	r7, #124	; 0x7c
 80074e0:	46bd      	mov	sp, r7
 80074e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e6:	bf00      	nop
 80074e8:	40011000 	.word	0x40011000
 80074ec:	40011400 	.word	0x40011400
 80074f0:	51eb851f 	.word	0x51eb851f

080074f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074f4:	b084      	sub	sp, #16
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b084      	sub	sp, #16
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	f107 001c 	add.w	r0, r7, #28
 8007502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	2b01      	cmp	r3, #1
 800750a:	d122      	bne.n	8007552 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d105      	bne.n	8007546 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 fac6 	bl	8008ad8 <USB_CoreReset>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	e01a      	b.n	8007588 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 faba 	bl	8008ad8 <USB_CoreReset>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
 800757a:	e005      	b.n	8007588 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10b      	bne.n	80075a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f043 0206 	orr.w	r2, r3, #6
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f043 0220 	orr.w	r2, r3, #32
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075b2:	b004      	add	sp, #16
 80075b4:	4770      	bx	lr
	...

080075b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d165      	bne.n	8007698 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a41      	ldr	r2, [pc, #260]	; (80076d4 <USB_SetTurnaroundTime+0x11c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d906      	bls.n	80075e2 <USB_SetTurnaroundTime+0x2a>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a40      	ldr	r2, [pc, #256]	; (80076d8 <USB_SetTurnaroundTime+0x120>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d202      	bcs.n	80075e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075dc:	230f      	movs	r3, #15
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e062      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	4a3c      	ldr	r2, [pc, #240]	; (80076d8 <USB_SetTurnaroundTime+0x120>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d306      	bcc.n	80075f8 <USB_SetTurnaroundTime+0x40>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4a3b      	ldr	r2, [pc, #236]	; (80076dc <USB_SetTurnaroundTime+0x124>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d202      	bcs.n	80075f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80075f2:	230e      	movs	r3, #14
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e057      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4a38      	ldr	r2, [pc, #224]	; (80076dc <USB_SetTurnaroundTime+0x124>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d306      	bcc.n	800760e <USB_SetTurnaroundTime+0x56>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4a37      	ldr	r2, [pc, #220]	; (80076e0 <USB_SetTurnaroundTime+0x128>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d202      	bcs.n	800760e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007608:	230d      	movs	r3, #13
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	e04c      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4a33      	ldr	r2, [pc, #204]	; (80076e0 <USB_SetTurnaroundTime+0x128>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d306      	bcc.n	8007624 <USB_SetTurnaroundTime+0x6c>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4a32      	ldr	r2, [pc, #200]	; (80076e4 <USB_SetTurnaroundTime+0x12c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d802      	bhi.n	8007624 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800761e:	230c      	movs	r3, #12
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e041      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <USB_SetTurnaroundTime+0x12c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d906      	bls.n	800763a <USB_SetTurnaroundTime+0x82>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4a2e      	ldr	r2, [pc, #184]	; (80076e8 <USB_SetTurnaroundTime+0x130>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d802      	bhi.n	800763a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007634:	230b      	movs	r3, #11
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	e036      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4a2a      	ldr	r2, [pc, #168]	; (80076e8 <USB_SetTurnaroundTime+0x130>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d906      	bls.n	8007650 <USB_SetTurnaroundTime+0x98>
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4a29      	ldr	r2, [pc, #164]	; (80076ec <USB_SetTurnaroundTime+0x134>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d802      	bhi.n	8007650 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800764a:	230a      	movs	r3, #10
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e02b      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4a26      	ldr	r2, [pc, #152]	; (80076ec <USB_SetTurnaroundTime+0x134>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d906      	bls.n	8007666 <USB_SetTurnaroundTime+0xae>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <USB_SetTurnaroundTime+0x138>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d202      	bcs.n	8007666 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007660:	2309      	movs	r3, #9
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	e020      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a21      	ldr	r2, [pc, #132]	; (80076f0 <USB_SetTurnaroundTime+0x138>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d306      	bcc.n	800767c <USB_SetTurnaroundTime+0xc4>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4a20      	ldr	r2, [pc, #128]	; (80076f4 <USB_SetTurnaroundTime+0x13c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d802      	bhi.n	800767c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007676:	2308      	movs	r3, #8
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	e015      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <USB_SetTurnaroundTime+0x13c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d906      	bls.n	8007692 <USB_SetTurnaroundTime+0xda>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <USB_SetTurnaroundTime+0x140>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d202      	bcs.n	8007692 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800768c:	2307      	movs	r3, #7
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	e00a      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007692:	2306      	movs	r3, #6
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e007      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800769e:	2309      	movs	r3, #9
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e001      	b.n	80076a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076a4:	2309      	movs	r3, #9
 80076a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	029b      	lsls	r3, r3, #10
 80076bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	00d8acbf 	.word	0x00d8acbf
 80076d8:	00e4e1c0 	.word	0x00e4e1c0
 80076dc:	00f42400 	.word	0x00f42400
 80076e0:	01067380 	.word	0x01067380
 80076e4:	011a499f 	.word	0x011a499f
 80076e8:	01312cff 	.word	0x01312cff
 80076ec:	014ca43f 	.word	0x014ca43f
 80076f0:	016e3600 	.word	0x016e3600
 80076f4:	01a6ab1f 	.word	0x01a6ab1f
 80076f8:	01e84800 	.word	0x01e84800

080076fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f043 0201 	orr.w	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 0201 	bic.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d106      	bne.n	800776c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	e00b      	b.n	8007784 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	e001      	b.n	8007784 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e003      	b.n	800778c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007784:	2032      	movs	r0, #50	; 0x32
 8007786:	f7fb f913 	bl	80029b0 <HAL_Delay>

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007794:	b084      	sub	sp, #16
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	e009      	b.n	80077c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3340      	adds	r3, #64	; 0x40
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	2200      	movs	r2, #0
 80077c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3301      	adds	r3, #1
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b0e      	cmp	r3, #14
 80077cc:	d9f2      	bls.n	80077b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11c      	bne.n	800780e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e2:	f043 0302 	orr.w	r3, r3, #2
 80077e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
 800780c:	e00b      	b.n	8007826 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800782c:	461a      	mov	r2, r3
 800782e:	2300      	movs	r3, #0
 8007830:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	4619      	mov	r1, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	461a      	mov	r2, r3
 8007842:	680b      	ldr	r3, [r1, #0]
 8007844:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	2b01      	cmp	r3, #1
 800784a:	d10c      	bne.n	8007866 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007852:	2100      	movs	r1, #0
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f949 	bl	8007aec <USB_SetDevSpeed>
 800785a:	e008      	b.n	800786e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f944 	bl	8007aec <USB_SetDevSpeed>
 8007864:	e003      	b.n	800786e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007866:	2103      	movs	r1, #3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f93f 	bl	8007aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800786e:	2110      	movs	r1, #16
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8f3 	bl	8007a5c <USB_FlushTxFifo>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f911 	bl	8007aa8 <USB_FlushRxFifo>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	461a      	mov	r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a2:	461a      	mov	r2, r3
 80078a4:	2300      	movs	r3, #0
 80078a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b4:	2300      	movs	r3, #0
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	e043      	b.n	8007942 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d0:	d118      	bne.n	8007904 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e4:	461a      	mov	r2, r3
 80078e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e013      	b.n	8007916 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fa:	461a      	mov	r2, r3
 80078fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e008      	b.n	8007916 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	461a      	mov	r2, r3
 8007912:	2300      	movs	r3, #0
 8007914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007922:	461a      	mov	r2, r3
 8007924:	2300      	movs	r3, #0
 8007926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007934:	461a      	mov	r2, r3
 8007936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800793a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	3301      	adds	r3, #1
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	429a      	cmp	r2, r3
 8007948:	d3b7      	bcc.n	80078ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	e043      	b.n	80079d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007966:	d118      	bne.n	800799a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797a:	461a      	mov	r2, r3
 800797c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e013      	b.n	80079ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	461a      	mov	r2, r3
 8007992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	e008      	b.n	80079ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	461a      	mov	r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	461a      	mov	r2, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	461a      	mov	r2, r3
 80079cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3301      	adds	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3b7      	bcc.n	8007950 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	f043 0210 	orr.w	r2, r3, #16
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <USB_DevInit+0x2c4>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f043 0208 	orr.w	r2, r3, #8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d107      	bne.n	8007a48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a40:	f043 0304 	orr.w	r3, r3, #4
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a54:	b004      	add	sp, #16
 8007a56:	4770      	bx	lr
 8007a58:	803c3800 	.word	0x803c3800

08007a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <USB_FlushTxFifo+0x48>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d901      	bls.n	8007a88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e006      	b.n	8007a96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d0f0      	beq.n	8007a76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	00030d40 	.word	0x00030d40

08007aa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3301      	adds	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <USB_FlushRxFifo+0x40>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e006      	b.n	8007ada <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d0f0      	beq.n	8007aba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	00030d40 	.word	0x00030d40

08007aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b087      	sub	sp, #28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0306 	and.w	r3, r3, #6
 8007b36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	e00a      	b.n	8007b5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d002      	beq.n	8007b50 <USB_GetDevSpeed+0x32>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b06      	cmp	r3, #6
 8007b4e:	d102      	bne.n	8007b56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007b50:	2302      	movs	r3, #2
 8007b52:	75fb      	strb	r3, [r7, #23]
 8007b54:	e001      	b.n	8007b5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007b56:	230f      	movs	r3, #15
 8007b58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d13a      	bne.n	8007bfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	68f9      	ldr	r1, [r7, #12]
 8007b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d155      	bne.n	8007c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	78db      	ldrb	r3, [r3, #3]
 8007bd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007bd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007be0:	4313      	orrs	r3, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e036      	b.n	8007c68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	69da      	ldr	r2, [r3, #28]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11a      	bne.n	8007c68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	78db      	ldrb	r3, [r3, #3]
 8007c4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d161      	bne.n	8007d58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007caa:	d11f      	bne.n	8007cec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	2101      	movs	r1, #1
 8007d22:	fa01 f303 	lsl.w	r3, r1, r3
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d30:	4013      	ands	r3, r2
 8007d32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	0159      	lsls	r1, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	440b      	add	r3, r1
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <USB_DeactivateEndpoint+0x1b0>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	600b      	str	r3, [r1, #0]
 8007d56:	e060      	b.n	8007e1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d6e:	d11f      	bne.n	8007db0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 030f 	and.w	r3, r3, #15
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dea:	041b      	lsls	r3, r3, #16
 8007dec:	43db      	mvns	r3, r3
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007df4:	4013      	ands	r3, r2
 8007df6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	0159      	lsls	r1, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	4619      	mov	r1, r3
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <USB_DeactivateEndpoint+0x1b4>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	ec337800 	.word	0xec337800
 8007e2c:	eff37800 	.word	0xeff37800

08007e30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	f040 815c 	bne.w	800810a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d132      	bne.n	8007ec0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb8:	0cdb      	lsrs	r3, r3, #19
 8007eba:	04db      	lsls	r3, r3, #19
 8007ebc:	6113      	str	r3, [r2, #16]
 8007ebe:	e074      	b.n	8007faa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	0cdb      	lsrs	r3, r3, #19
 8007edc:	04db      	lsls	r3, r3, #19
 8007ede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007efe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6959      	ldr	r1, [r3, #20]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	440b      	add	r3, r1
 8007f1c:	1e59      	subs	r1, r3, #1
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f26:	04d9      	lsls	r1, r3, #19
 8007f28:	4b9d      	ldr	r3, [pc, #628]	; (80081a0 <USB_EPStartXfer+0x370>)
 8007f2a:	400b      	ands	r3, r1
 8007f2c:	69b9      	ldr	r1, [r7, #24]
 8007f2e:	0148      	lsls	r0, r1, #5
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	4401      	add	r1, r0
 8007f34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f52:	69b9      	ldr	r1, [r7, #24]
 8007f54:	0148      	lsls	r0, r1, #5
 8007f56:	69f9      	ldr	r1, [r7, #28]
 8007f58:	4401      	add	r1, r0
 8007f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d11f      	bne.n	8007faa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	69fa      	ldr	r2, [r7, #28]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d14b      	bne.n	8008048 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	78db      	ldrb	r3, [r3, #3]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d128      	bne.n	8008026 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d110      	bne.n	8008006 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e00f      	b.n	8008026 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	0151      	lsls	r1, r2, #5
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	440a      	add	r2, r1
 800801c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008024:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	440a      	add	r2, r1
 800803c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	e12f      	b.n	80082a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008066:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d015      	beq.n	800809c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8117 	beq.w	80082a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	2101      	movs	r1, #1
 800808c:	fa01 f303 	lsl.w	r3, r1, r3
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008096:	4313      	orrs	r3, r2
 8008098:	634b      	str	r3, [r1, #52]	; 0x34
 800809a:	e105      	b.n	80082a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d110      	bne.n	80080ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	69fa      	ldr	r2, [r7, #28]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e00f      	b.n	80080ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	68d9      	ldr	r1, [r3, #12]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	781a      	ldrb	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	b298      	uxth	r0, r3
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4603      	mov	r3, r0
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa2b 	bl	800855e <USB_WritePacket>
 8008108:	e0ce      	b.n	80082a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	0cdb      	lsrs	r3, r3, #19
 8008126:	04db      	lsls	r3, r3, #19
 8008128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800814c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d126      	bne.n	80081a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816c:	69b9      	ldr	r1, [r7, #24]
 800816e:	0148      	lsls	r0, r1, #5
 8008170:	69f9      	ldr	r1, [r7, #28]
 8008172:	4401      	add	r1, r0
 8008174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008178:	4313      	orrs	r3, r2
 800817a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	440a      	add	r2, r1
 8008192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800819a:	6113      	str	r3, [r2, #16]
 800819c:	e036      	b.n	800820c <USB_EPStartXfer+0x3dc>
 800819e:	bf00      	nop
 80081a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	8afb      	ldrh	r3, [r7, #22]
 80081ca:	04d9      	lsls	r1, r3, #19
 80081cc:	4b39      	ldr	r3, [pc, #228]	; (80082b4 <USB_EPStartXfer+0x484>)
 80081ce:	400b      	ands	r3, r1
 80081d0:	69b9      	ldr	r1, [r7, #24]
 80081d2:	0148      	lsls	r0, r1, #5
 80081d4:	69f9      	ldr	r1, [r7, #28]
 80081d6:	4401      	add	r1, r0
 80081d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081dc:	4313      	orrs	r3, r2
 80081de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	8af9      	ldrh	r1, [r7, #22]
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fc:	69b9      	ldr	r1, [r7, #24]
 80081fe:	0148      	lsls	r0, r1, #5
 8008200:	69f9      	ldr	r1, [r7, #28]
 8008202:	4401      	add	r1, r0
 8008204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008208:	4313      	orrs	r3, r2
 800820a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d10d      	bne.n	800822e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	460a      	mov	r2, r1
 800822c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d128      	bne.n	8008288 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d110      	bne.n	8008268 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e00f      	b.n	8008288 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	1ff80000 	.word	0x1ff80000

080082b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f040 80cd 	bne.w	8008474 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d132      	bne.n	8008348 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	0151      	lsls	r1, r2, #5
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	440a      	add	r2, r1
 800831c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	0cdb      	lsrs	r3, r3, #19
 8008342:	04db      	lsls	r3, r3, #19
 8008344:	6113      	str	r3, [r2, #16]
 8008346:	e04e      	b.n	80083e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	0cdb      	lsrs	r3, r3, #19
 8008364:	04db      	lsls	r3, r3, #19
 8008366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800838a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	d903      	bls.n	80083a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d6:	6939      	ldr	r1, [r7, #16]
 80083d8:	0148      	lsls	r0, r1, #5
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	4401      	add	r1, r0
 80083de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083e2:	4313      	orrs	r3, r2
 80083e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d11e      	bne.n	800842a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008400:	461a      	mov	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e092      	b.n	8008550 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008448:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d07e      	beq.n	8008550 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	2101      	movs	r1, #1
 8008464:	fa01 f303 	lsl.w	r3, r1, r3
 8008468:	6979      	ldr	r1, [r7, #20]
 800846a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846e:	4313      	orrs	r3, r2
 8008470:	634b      	str	r3, [r1, #52]	; 0x34
 8008472:	e06d      	b.n	8008550 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	0151      	lsls	r1, r2, #5
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	440a      	add	r2, r1
 800848a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848e:	0cdb      	lsrs	r3, r3, #19
 8008490:	04db      	lsls	r3, r3, #19
 8008492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fe:	6939      	ldr	r1, [r7, #16]
 8008500:	0148      	lsls	r0, r1, #5
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	4401      	add	r1, r0
 8008506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800850a:	4313      	orrs	r3, r2
 800850c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d10d      	bne.n	8008530 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d009      	beq.n	8008530 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	68d9      	ldr	r1, [r3, #12]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	460a      	mov	r2, r1
 800852e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	0151      	lsls	r1, r2, #5
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	440a      	add	r2, r1
 8008546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800854a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800854e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800855e:	b480      	push	{r7}
 8008560:	b089      	sub	sp, #36	; 0x24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	4611      	mov	r1, r2
 800856a:	461a      	mov	r2, r3
 800856c:	460b      	mov	r3, r1
 800856e:	71fb      	strb	r3, [r7, #7]
 8008570:	4613      	mov	r3, r2
 8008572:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800857c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d11a      	bne.n	80085ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008584:	88bb      	ldrh	r3, [r7, #4]
 8008586:	3303      	adds	r3, #3
 8008588:	089b      	lsrs	r3, r3, #2
 800858a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	e00f      	b.n	80085b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	031a      	lsls	r2, r3, #12
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	4413      	add	r3, r2
 800859a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800859e:	461a      	mov	r2, r3
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3304      	adds	r3, #4
 80085aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	3301      	adds	r3, #1
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d3eb      	bcc.n	8008592 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3724      	adds	r7, #36	; 0x24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b089      	sub	sp, #36	; 0x24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	3303      	adds	r3, #3
 80085e2:	089b      	lsrs	r3, r3, #2
 80085e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e00b      	b.n	8008604 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3304      	adds	r3, #4
 80085fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	3301      	adds	r3, #1
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	429a      	cmp	r2, r3
 800860a:	d3ef      	bcc.n	80085ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800860c:	69fb      	ldr	r3, [r7, #28]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3724      	adds	r7, #36	; 0x24
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d12c      	bne.n	8008690 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	db12      	blt.n	800866e <USB_EPSetStall+0x54>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00f      	beq.n	800866e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	0151      	lsls	r1, r2, #5
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	440a      	add	r2, r1
 8008664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800866c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	440a      	add	r2, r1
 8008684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e02b      	b.n	80086e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	db12      	blt.n	80086c8 <USB_EPSetStall+0xae>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00f      	beq.n	80086c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	0151      	lsls	r1, r2, #5
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	440a      	add	r2, r1
 80086de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b085      	sub	sp, #20
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d128      	bne.n	8008764 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	2b03      	cmp	r3, #3
 8008738:	d003      	beq.n	8008742 <USB_EPClearStall+0x4c>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	78db      	ldrb	r3, [r3, #3]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d138      	bne.n	80087b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	e027      	b.n	80087b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	0151      	lsls	r1, r2, #5
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	440a      	add	r2, r1
 800877a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	78db      	ldrb	r3, [r3, #3]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d003      	beq.n	8008794 <USB_EPClearStall+0x9e>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	78db      	ldrb	r3, [r3, #3]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d10f      	bne.n	80087b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80087e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087fc:	4313      	orrs	r3, r2
 80087fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008828:	f023 0303 	bic.w	r3, r3, #3
 800882c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800883c:	f023 0302 	bic.w	r3, r3, #2
 8008840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800887e:	f043 0302 	orr.w	r3, r3, #2
 8008882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008892:	b480      	push	{r7}
 8008894:	b085      	sub	sp, #20
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4013      	ands	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4013      	ands	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	0c1b      	lsrs	r3, r3, #16
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4013      	ands	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	b29b      	uxth	r3, r3
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4013      	ands	r3, r2
 800894c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800894e:	68bb      	ldr	r3, [r7, #8]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	fa22 f303 	lsr.w	r3, r2, r3
 800898c:	01db      	lsls	r3, r3, #7
 800898e:	b2db      	uxtb	r3, r3
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4313      	orrs	r3, r2
 8008994:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4013      	ands	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089aa:	68bb      	ldr	r3, [r7, #8]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	f003 0301 	and.w	r3, r3, #1
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	460b      	mov	r3, r1
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	333c      	adds	r3, #60	; 0x3c
 8008a32:	3304      	adds	r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <USB_EP0_OutStart+0xb8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d90a      	bls.n	8008a56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a50:	d101      	bne.n	8008a56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e037      	b.n	8008ac6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a84:	f043 0318 	orr.w	r3, r3, #24
 8008a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008a9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d10f      	bne.n	8008ac4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aaa:	461a      	mov	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	4f54300a 	.word	0x4f54300a

08008ad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a13      	ldr	r2, [pc, #76]	; (8008b3c <USB_CoreReset+0x64>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e01b      	b.n	8008b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	daf2      	bge.n	8008ae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3301      	adds	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <USB_CoreReset+0x64>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e006      	b.n	8008b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d0f0      	beq.n	8008b0e <USB_CoreReset+0x36>

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	00030d40 	.word	0x00030d40

08008b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b50:	f002 fa68 	bl	800b024 <USBD_static_malloc>
 8008b54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d105      	bne.n	8008b68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008b64:	2302      	movs	r3, #2
 8008b66:	e066      	b.n	8008c36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7c1b      	ldrb	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d119      	bne.n	8008bac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	2181      	movs	r1, #129	; 0x81
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f002 f92c 	bl	800adde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b90:	2202      	movs	r2, #2
 8008b92:	2101      	movs	r1, #1
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f002 f922 	bl	800adde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2210      	movs	r2, #16
 8008ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008baa:	e016      	b.n	8008bda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bac:	2340      	movs	r3, #64	; 0x40
 8008bae:	2202      	movs	r2, #2
 8008bb0:	2181      	movs	r1, #129	; 0x81
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f002 f913 	bl	800adde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bbe:	2340      	movs	r3, #64	; 0x40
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f002 f90a 	bl	800adde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2210      	movs	r2, #16
 8008bd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bda:	2308      	movs	r3, #8
 8008bdc:	2203      	movs	r2, #3
 8008bde:	2182      	movs	r1, #130	; 0x82
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f002 f8fc 	bl	800adde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1b      	ldrb	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f002 f9cd 	bl	800afbc <USBD_LL_PrepareReceive>
 8008c22:	e007      	b.n	8008c34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f002 f9c4 	bl	800afbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c4a:	2181      	movs	r1, #129	; 0x81
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f002 f8ec 	bl	800ae2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c58:	2101      	movs	r1, #1
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f002 f8e5 	bl	800ae2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c68:	2182      	movs	r1, #130	; 0x82
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f002 f8dd 	bl	800ae2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 f9d0 	bl	800b040 <USBD_static_free>
    pdev->pClassData = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e0af      	b.n	8008e3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d03f      	beq.n	8008d68 <USBD_CDC_Setup+0xb4>
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	f040 809f 	bne.w	8008e2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d02e      	beq.n	8008d54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b25b      	sxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da16      	bge.n	8008d2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008d0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	88d2      	ldrh	r2, [r2, #6]
 8008d12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	88db      	ldrh	r3, [r3, #6]
 8008d18:	2b07      	cmp	r3, #7
 8008d1a:	bf28      	it	cs
 8008d1c:	2307      	movcs	r3, #7
 8008d1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	89fa      	ldrh	r2, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fb19 	bl	800a35e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008d2c:	e085      	b.n	8008e3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	785a      	ldrb	r2, [r3, #1]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	88db      	ldrh	r3, [r3, #6]
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008d44:	6939      	ldr	r1, [r7, #16]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	88db      	ldrh	r3, [r3, #6]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fb32 	bl	800a3b6 <USBD_CtlPrepareRx>
      break;
 8008d52:	e072      	b.n	8008e3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	7850      	ldrb	r0, [r2, #1]
 8008d60:	2200      	movs	r2, #0
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	4798      	blx	r3
      break;
 8008d66:	e068      	b.n	8008e3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d852      	bhi.n	8008e16 <USBD_CDC_Setup+0x162>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_CDC_Setup+0xc4>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008da9 	.word	0x08008da9
 8008d7c:	08008e25 	.word	0x08008e25
 8008d80:	08008e17 	.word	0x08008e17
 8008d84:	08008e17 	.word	0x08008e17
 8008d88:	08008e17 	.word	0x08008e17
 8008d8c:	08008e17 	.word	0x08008e17
 8008d90:	08008e17 	.word	0x08008e17
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e17 	.word	0x08008e17
 8008d9c:	08008e17 	.word	0x08008e17
 8008da0:	08008dd3 	.word	0x08008dd3
 8008da4:	08008dfd 	.word	0x08008dfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d107      	bne.n	8008dc4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008db4:	f107 030a 	add.w	r3, r7, #10
 8008db8:	2202      	movs	r2, #2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 face 	bl	800a35e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dc2:	e032      	b.n	8008e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fa58 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	75fb      	strb	r3, [r7, #23]
          break;
 8008dd0:	e02b      	b.n	8008e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d107      	bne.n	8008dee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008dde:	f107 030d 	add.w	r3, r7, #13
 8008de2:	2201      	movs	r2, #1
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fab9 	bl	800a35e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dec:	e01d      	b.n	8008e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 fa43 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8008df6:	2303      	movs	r3, #3
 8008df8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dfa:	e016      	b.n	8008e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d00f      	beq.n	8008e28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f001 fa36 	bl	800a27c <USBD_CtlError>
            ret = USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e14:	e008      	b.n	8008e28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fa2f 	bl	800a27c <USBD_CtlError>
          ret = USBD_FAIL;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	75fb      	strb	r3, [r7, #23]
          break;
 8008e22:	e002      	b.n	8008e2a <USBD_CDC_Setup+0x176>
          break;
 8008e24:	bf00      	nop
 8008e26:	e008      	b.n	8008e3a <USBD_CDC_Setup+0x186>
          break;
 8008e28:	bf00      	nop
      }
      break;
 8008e2a:	e006      	b.n	8008e3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 fa24 	bl	800a27c <USBD_CtlError>
      ret = USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
      break;
 8008e38:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e04f      	b.n	8008f06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3318      	adds	r3, #24
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d029      	beq.n	8008ed8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3318      	adds	r3, #24
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	78f9      	ldrb	r1, [r7, #3]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	00db      	lsls	r3, r3, #3
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4403      	add	r3, r0
 8008ea4:	3344      	adds	r3, #68	; 0x44
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eac:	fb03 f301 	mul.w	r3, r3, r1
 8008eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d110      	bne.n	8008ed8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3318      	adds	r3, #24
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008eca:	78f9      	ldrb	r1, [r7, #3]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f002 f852 	bl	800af7a <USBD_LL_Transmit>
 8008ed6:	e015      	b.n	8008f04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e015      	b.n	8008f5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f002 f862 	bl	800affe <USBD_LL_GetRxDataSize>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f56:	4611      	mov	r1, r2
 8008f58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e01b      	b.n	8008fb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d015      	beq.n	8008fb4 <USBD_CDC_EP0_RxReady+0x50>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f8e:	2bff      	cmp	r3, #255	; 0xff
 8008f90:	d010      	beq.n	8008fb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2243      	movs	r2, #67	; 0x43
 8008fcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	20000348 	.word	0x20000348

08008fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2243      	movs	r2, #67	; 0x43
 8008fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008fee:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20000304 	.word	0x20000304

08009000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2243      	movs	r2, #67	; 0x43
 800900c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800900e:	4b03      	ldr	r3, [pc, #12]	; (800901c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	2000038c 	.word	0x2000038c

08009020 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	220a      	movs	r2, #10
 800902c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800902e:	4b03      	ldr	r3, [pc, #12]	; (800903c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	200002c0 	.word	0x200002c0

08009040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	e004      	b.n	800905e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800906a:	b480      	push	{r7}
 800906c:	b087      	sub	sp, #28
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800907c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009084:	2303      	movs	r3, #3
 8009086:	e008      	b.n	800909a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80090be:	2303      	movs	r3, #3
 80090c0:	e004      	b.n	80090cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e01a      	b.n	8009130 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009100:	2b00      	cmp	r3, #0
 8009102:	d114      	bne.n	800912e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2201      	movs	r2, #1
 8009108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009122:	2181      	movs	r1, #129	; 0x81
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 ff28 	bl	800af7a <USBD_LL_Transmit>

    ret = USBD_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009152:	2303      	movs	r3, #3
 8009154:	e016      	b.n	8009184 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7c1b      	ldrb	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009168:	2101      	movs	r1, #1
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 ff26 	bl	800afbc <USBD_LL_PrepareReceive>
 8009170:	e007      	b.n	8009182 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009178:	2340      	movs	r3, #64	; 0x40
 800917a:	2101      	movs	r1, #1
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 ff1d 	bl	800afbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e01f      	b.n	80091e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	79fa      	ldrb	r2, [r7, #7]
 80091d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f001 fd99 	bl	800ad10 <USBD_LL_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	e016      	b.n	8009232 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	f107 020e 	add.w	r2, r7, #14
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	4602      	mov	r2, r0
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fdb0 	bl	800ada8 <USBD_LL_Start>
 8009248:	4603      	mov	r3, r0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009274:	2303      	movs	r3, #3
 8009276:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d007      	beq.n	80092c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	4611      	mov	r1, r2
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	4798      	blx	r3
  }

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ff90 	bl	800a208 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009304:	f003 031f 	and.w	r3, r3, #31
 8009308:	2b02      	cmp	r3, #2
 800930a:	d01a      	beq.n	8009342 <USBD_LL_SetupStage+0x72>
 800930c:	2b02      	cmp	r3, #2
 800930e:	d822      	bhi.n	8009356 <USBD_LL_SetupStage+0x86>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <USBD_LL_SetupStage+0x4a>
 8009314:	2b01      	cmp	r3, #1
 8009316:	d00a      	beq.n	800932e <USBD_LL_SetupStage+0x5e>
 8009318:	e01d      	b.n	8009356 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa62 	bl	80097ec <USBD_StdDevReq>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
      break;
 800932c:	e020      	b.n	8009370 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fac6 	bl	80098c8 <USBD_StdItfReq>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]
      break;
 8009340:	e016      	b.n	8009370 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fb05 	bl	800995a <USBD_StdEPReq>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e00c      	b.n	8009370 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800935c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009360:	b2db      	uxtb	r3, r3
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 fd7f 	bl	800ae68 <USBD_LL_StallEP>
 800936a:	4603      	mov	r3, r0
 800936c:	73fb      	strb	r3, [r7, #15]
      break;
 800936e:	bf00      	nop
  }

  return ret;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	460b      	mov	r3, r1
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d138      	bne.n	8009400 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009394:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939c:	2b03      	cmp	r3, #3
 800939e:	d14a      	bne.n	8009436 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d913      	bls.n	80093d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	1ad2      	subs	r2, r2, r3
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bf28      	it	cs
 80093c6:	4613      	movcs	r3, r2
 80093c8:	461a      	mov	r2, r3
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f001 f80f 	bl	800a3f0 <USBD_CtlContinueRx>
 80093d2:	e030      	b.n	8009436 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d10b      	bne.n	80093f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f001 f80a 	bl	800a412 <USBD_CtlSendStatus>
 80093fe:	e01a      	b.n	8009436 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b03      	cmp	r3, #3
 800940a:	d114      	bne.n	8009436 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	7afa      	ldrb	r2, [r7, #11]
 8009422:	4611      	mov	r1, r2
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	4798      	blx	r3
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	e000      	b.n	8009438 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	460b      	mov	r3, r1
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d16b      	bne.n	800952c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3314      	adds	r3, #20
 8009458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009460:	2b02      	cmp	r3, #2
 8009462:	d156      	bne.n	8009512 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	429a      	cmp	r2, r3
 800946e:	d914      	bls.n	800949a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	689a      	ldr	r2, [r3, #8]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	1ad2      	subs	r2, r2, r3
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	461a      	mov	r2, r3
 8009484:	6879      	ldr	r1, [r7, #4]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 ff84 	bl	800a394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800948c:	2300      	movs	r3, #0
 800948e:	2200      	movs	r2, #0
 8009490:	2100      	movs	r1, #0
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f001 fd92 	bl	800afbc <USBD_LL_PrepareReceive>
 8009498:	e03b      	b.n	8009512 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d11c      	bne.n	80094e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d316      	bcc.n	80094e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094bc:	429a      	cmp	r2, r3
 80094be:	d20f      	bcs.n	80094e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094c0:	2200      	movs	r2, #0
 80094c2:	2100      	movs	r1, #0
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 ff65 	bl	800a394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094d2:	2300      	movs	r3, #0
 80094d4:	2200      	movs	r2, #0
 80094d6:	2100      	movs	r1, #0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f001 fd6f 	bl	800afbc <USBD_LL_PrepareReceive>
 80094de:	e018      	b.n	8009512 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d10b      	bne.n	8009504 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009504:	2180      	movs	r1, #128	; 0x80
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 fcae 	bl	800ae68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 ff93 	bl	800a438 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009518:	2b01      	cmp	r3, #1
 800951a:	d122      	bne.n	8009562 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff fe98 	bl	8009252 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800952a:	e01a      	b.n	8009562 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b03      	cmp	r3, #3
 8009536:	d114      	bne.n	8009562 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00e      	beq.n	8009562 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	7afa      	ldrb	r2, [r7, #11]
 800954e:	4611      	mov	r1, r2
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	e000      	b.n	8009564 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800959c:	2303      	movs	r3, #3
 800959e:	e02f      	b.n	8009600 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6852      	ldr	r2, [r2, #4]
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	4611      	mov	r1, r2
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ca:	2340      	movs	r3, #64	; 0x40
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f001 fc04 	bl	800adde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2240      	movs	r2, #64	; 0x40
 80095e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e6:	2340      	movs	r3, #64	; 0x40
 80095e8:	2200      	movs	r2, #0
 80095ea:	2180      	movs	r1, #128	; 0x80
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 fbf6 	bl	800adde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2240      	movs	r2, #64	; 0x40
 80095fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009636:	b2da      	uxtb	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2204      	movs	r2, #4
 8009642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b04      	cmp	r3, #4
 8009666:	d106      	bne.n	8009676 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800966e:	b2da      	uxtb	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009696:	2303      	movs	r3, #3
 8009698:	e012      	b.n	80096c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d10b      	bne.n	80096be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80096de:	2303      	movs	r3, #3
 80096e0:	e014      	b.n	800970c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d10d      	bne.n	800970a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800972a:	2303      	movs	r3, #3
 800972c:	e014      	b.n	8009758 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b03      	cmp	r3, #3
 8009738:	d10d      	bne.n	8009756 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	4611      	mov	r1, r2
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6852      	ldr	r2, [r2, #4]
 800979c:	b2d2      	uxtb	r2, r2
 800979e:	4611      	mov	r1, r2
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
  }

  return USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b087      	sub	sp, #28
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80097cc:	8a3b      	ldrh	r3, [r7, #16]
 80097ce:	021b      	lsls	r3, r3, #8
 80097d0:	b21a      	sxth	r2, r3
 80097d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	b21b      	sxth	r3, r3
 80097da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097dc:	89fb      	ldrh	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	d005      	beq.n	8009812 <USBD_StdDevReq+0x26>
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d853      	bhi.n	80098b2 <USBD_StdDevReq+0xc6>
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <USBD_StdDevReq+0x3a>
 800980e:	2b20      	cmp	r3, #32
 8009810:	d14f      	bne.n	80098b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e04a      	b.n	80098bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d83b      	bhi.n	80098a6 <USBD_StdDevReq+0xba>
 800982e:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <USBD_StdDevReq+0x48>)
 8009830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009834:	08009889 	.word	0x08009889
 8009838:	0800989d 	.word	0x0800989d
 800983c:	080098a7 	.word	0x080098a7
 8009840:	08009893 	.word	0x08009893
 8009844:	080098a7 	.word	0x080098a7
 8009848:	08009867 	.word	0x08009867
 800984c:	0800985d 	.word	0x0800985d
 8009850:	080098a7 	.word	0x080098a7
 8009854:	0800987f 	.word	0x0800987f
 8009858:	08009871 	.word	0x08009871
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f9de 	bl	8009c20 <USBD_GetDescriptor>
          break;
 8009864:	e024      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fb43 	bl	8009ef4 <USBD_SetAddress>
          break;
 800986e:	e01f      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb82 	bl	8009f7c <USBD_SetConfig>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
          break;
 800987c:	e018      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fc21 	bl	800a0c8 <USBD_GetConfig>
          break;
 8009886:	e013      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fc52 	bl	800a134 <USBD_GetStatus>
          break;
 8009890:	e00e      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fc81 	bl	800a19c <USBD_SetFeature>
          break;
 800989a:	e009      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fc90 	bl	800a1c4 <USBD_ClrFeature>
          break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fce7 	bl	800a27c <USBD_CtlError>
          break;
 80098ae:	bf00      	nop
      }
      break;
 80098b0:	e004      	b.n	80098bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fce1 	bl	800a27c <USBD_CtlError>
      break;
 80098ba:	bf00      	nop
  }

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop

080098c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098de:	2b40      	cmp	r3, #64	; 0x40
 80098e0:	d005      	beq.n	80098ee <USBD_StdItfReq+0x26>
 80098e2:	2b40      	cmp	r3, #64	; 0x40
 80098e4:	d82f      	bhi.n	8009946 <USBD_StdItfReq+0x7e>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBD_StdItfReq+0x26>
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d12b      	bne.n	8009946 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d81d      	bhi.n	8009938 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	889b      	ldrh	r3, [r3, #4]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b01      	cmp	r3, #1
 8009904:	d813      	bhi.n	800992e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	88db      	ldrh	r3, [r3, #6]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d110      	bne.n	8009942 <USBD_StdItfReq+0x7a>
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10d      	bne.n	8009942 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fd73 	bl	800a412 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800992c:	e009      	b.n	8009942 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fca3 	bl	800a27c <USBD_CtlError>
          break;
 8009936:	e004      	b.n	8009942 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fc9e 	bl	800a27c <USBD_CtlError>
          break;
 8009940:	e000      	b.n	8009944 <USBD_StdItfReq+0x7c>
          break;
 8009942:	bf00      	nop
      }
      break;
 8009944:	e004      	b.n	8009950 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fc97 	bl	800a27c <USBD_CtlError>
      break;
 800994e:	bf00      	nop
  }

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	889b      	ldrh	r3, [r3, #4]
 800996c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d007      	beq.n	800998a <USBD_StdEPReq+0x30>
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	f200 8145 	bhi.w	8009c0a <USBD_StdEPReq+0x2b0>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00c      	beq.n	800999e <USBD_StdEPReq+0x44>
 8009984:	2b20      	cmp	r3, #32
 8009986:	f040 8140 	bne.w	8009c0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
      break;
 800999c:	e13a      	b.n	8009c14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d007      	beq.n	80099b6 <USBD_StdEPReq+0x5c>
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	f300 8129 	bgt.w	8009bfe <USBD_StdEPReq+0x2a4>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d07f      	beq.n	8009ab0 <USBD_StdEPReq+0x156>
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d03c      	beq.n	8009a2e <USBD_StdEPReq+0xd4>
 80099b4:	e123      	b.n	8009bfe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d002      	beq.n	80099c8 <USBD_StdEPReq+0x6e>
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d016      	beq.n	80099f4 <USBD_StdEPReq+0x9a>
 80099c6:	e02c      	b.n	8009a22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <USBD_StdEPReq+0x90>
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d00a      	beq.n	80099ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 fa45 	bl	800ae68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099de:	2180      	movs	r1, #128	; 0x80
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fa41 	bl	800ae68 <USBD_LL_StallEP>
 80099e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099e8:	e020      	b.n	8009a2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fc45 	bl	800a27c <USBD_CtlError>
              break;
 80099f2:	e01b      	b.n	8009a2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	885b      	ldrh	r3, [r3, #2]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10e      	bne.n	8009a1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00b      	beq.n	8009a1a <USBD_StdEPReq+0xc0>
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b80      	cmp	r3, #128	; 0x80
 8009a06:	d008      	beq.n	8009a1a <USBD_StdEPReq+0xc0>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 fa27 	bl	800ae68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fcf9 	bl	800a412 <USBD_CtlSendStatus>

              break;
 8009a20:	e004      	b.n	8009a2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fc29 	bl	800a27c <USBD_CtlError>
              break;
 8009a2a:	bf00      	nop
          }
          break;
 8009a2c:	e0ec      	b.n	8009c08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d002      	beq.n	8009a40 <USBD_StdEPReq+0xe6>
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d016      	beq.n	8009a6c <USBD_StdEPReq+0x112>
 8009a3e:	e030      	b.n	8009aa2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00d      	beq.n	8009a62 <USBD_StdEPReq+0x108>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d00a      	beq.n	8009a62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f001 fa09 	bl	800ae68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a56:	2180      	movs	r1, #128	; 0x80
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 fa05 	bl	800ae68 <USBD_LL_StallEP>
 8009a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a60:	e025      	b.n	8009aae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fc09 	bl	800a27c <USBD_CtlError>
              break;
 8009a6a:	e020      	b.n	8009aae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	885b      	ldrh	r3, [r3, #2]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11b      	bne.n	8009aac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fa0f 	bl	800aea6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fcc2 	bl	800a412 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fbe9 	bl	800a27c <USBD_CtlError>
              break;
 8009aaa:	e000      	b.n	8009aae <USBD_StdEPReq+0x154>
              break;
 8009aac:	bf00      	nop
          }
          break;
 8009aae:	e0ab      	b.n	8009c08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d002      	beq.n	8009ac2 <USBD_StdEPReq+0x168>
 8009abc:	2b03      	cmp	r3, #3
 8009abe:	d032      	beq.n	8009b26 <USBD_StdEPReq+0x1cc>
 8009ac0:	e097      	b.n	8009bf2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <USBD_StdEPReq+0x17e>
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b80      	cmp	r3, #128	; 0x80
 8009acc:	d004      	beq.n	8009ad8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fbd3 	bl	800a27c <USBD_CtlError>
                break;
 8009ad6:	e091      	b.n	8009bfc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	da0b      	bge.n	8009af8 <USBD_StdEPReq+0x19e>
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	3310      	adds	r3, #16
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	4413      	add	r3, r2
 8009af4:	3304      	adds	r3, #4
 8009af6:	e00b      	b.n	8009b10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	3304      	adds	r3, #4
 8009b10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc1d 	bl	800a35e <USBD_CtlSendData>
              break;
 8009b24:	e06a      	b.n	8009bfc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da11      	bge.n	8009b52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	f003 020f 	and.w	r2, r3, #15
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3324      	adds	r3, #36	; 0x24
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d117      	bne.n	8009b78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb96 	bl	800a27c <USBD_CtlError>
                  break;
 8009b50:	e054      	b.n	8009bfc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	f003 020f 	and.w	r2, r3, #15
 8009b58:	6879      	ldr	r1, [r7, #4]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d104      	bne.n	8009b78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fb83 	bl	800a27c <USBD_CtlError>
                  break;
 8009b76:	e041      	b.n	8009bfc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	da0b      	bge.n	8009b98 <USBD_StdEPReq+0x23e>
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	3310      	adds	r3, #16
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	e00b      	b.n	8009bb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	3304      	adds	r3, #4
 8009bb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <USBD_StdEPReq+0x264>
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b80      	cmp	r3, #128	; 0x80
 8009bbc:	d103      	bne.n	8009bc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e00e      	b.n	8009be4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 f98a 	bl	800aee4 <USBD_LL_IsStallEP>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	e002      	b.n	8009be4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2202      	movs	r2, #2
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fbb7 	bl	800a35e <USBD_CtlSendData>
              break;
 8009bf0:	e004      	b.n	8009bfc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fb41 	bl	800a27c <USBD_CtlError>
              break;
 8009bfa:	bf00      	nop
          }
          break;
 8009bfc:	e004      	b.n	8009c08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fb3b 	bl	800a27c <USBD_CtlError>
          break;
 8009c06:	bf00      	nop
      }
      break;
 8009c08:	e004      	b.n	8009c14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fb35 	bl	800a27c <USBD_CtlError>
      break;
 8009c12:	bf00      	nop
  }

  return ret;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	885b      	ldrh	r3, [r3, #2]
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b06      	cmp	r3, #6
 8009c42:	f200 8128 	bhi.w	8009e96 <USBD_GetDescriptor+0x276>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <USBD_GetDescriptor+0x2c>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c81 	.word	0x08009c81
 8009c54:	08009cc1 	.word	0x08009cc1
 8009c58:	08009e97 	.word	0x08009e97
 8009c5c:	08009e97 	.word	0x08009e97
 8009c60:	08009e37 	.word	0x08009e37
 8009c64:	08009e63 	.word	0x08009e63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	7c12      	ldrb	r2, [r2, #16]
 8009c74:	f107 0108 	add.w	r1, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
      break;
 8009c7e:	e112      	b.n	8009ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7c1b      	ldrb	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10d      	bne.n	8009ca4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c90:	f107 0208 	add.w	r2, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ca2:	e100      	b.n	8009ea6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	f107 0208 	add.w	r2, r7, #8
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
 8009cb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
      break;
 8009cbe:	e0f2      	b.n	8009ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	885b      	ldrh	r3, [r3, #2]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b05      	cmp	r3, #5
 8009cc8:	f200 80ac 	bhi.w	8009e24 <USBD_GetDescriptor+0x204>
 8009ccc:	a201      	add	r2, pc, #4	; (adr r2, 8009cd4 <USBD_GetDescriptor+0xb4>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009ced 	.word	0x08009ced
 8009cd8:	08009d21 	.word	0x08009d21
 8009cdc:	08009d55 	.word	0x08009d55
 8009ce0:	08009d89 	.word	0x08009d89
 8009ce4:	08009dbd 	.word	0x08009dbd
 8009ce8:	08009df1 	.word	0x08009df1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0e:	e091      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fab2 	bl	800a27c <USBD_CtlError>
            err++;
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1e:	e089      	b.n	8009e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	7c12      	ldrb	r2, [r2, #16]
 8009d38:	f107 0108 	add.w	r1, r7, #8
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
 8009d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d42:	e077      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa98 	bl	800a27c <USBD_CtlError>
            err++;
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	72fb      	strb	r3, [r7, #11]
          break;
 8009d52:	e06f      	b.n	8009e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7c12      	ldrb	r2, [r2, #16]
 8009d6c:	f107 0108 	add.w	r1, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d76:	e05d      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa7e 	bl	800a27c <USBD_CtlError>
            err++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
          break;
 8009d86:	e055      	b.n	8009e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	7c12      	ldrb	r2, [r2, #16]
 8009da0:	f107 0108 	add.w	r1, r7, #8
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
 8009da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009daa:	e043      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fa64 	bl	800a27c <USBD_CtlError>
            err++;
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	3301      	adds	r3, #1
 8009db8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dba:	e03b      	b.n	8009e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00b      	beq.n	8009de0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	7c12      	ldrb	r2, [r2, #16]
 8009dd4:	f107 0108 	add.w	r1, r7, #8
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dde:	e029      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fa4a 	bl	800a27c <USBD_CtlError>
            err++;
 8009de8:	7afb      	ldrb	r3, [r7, #11]
 8009dea:	3301      	adds	r3, #1
 8009dec:	72fb      	strb	r3, [r7, #11]
          break;
 8009dee:	e021      	b.n	8009e34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00b      	beq.n	8009e14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7c12      	ldrb	r2, [r2, #16]
 8009e08:	f107 0108 	add.w	r1, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e12:	e00f      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa30 	bl	800a27c <USBD_CtlError>
            err++;
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	72fb      	strb	r3, [r7, #11]
          break;
 8009e22:	e007      	b.n	8009e34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa28 	bl	800a27c <USBD_CtlError>
          err++;
 8009e2c:	7afb      	ldrb	r3, [r7, #11]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009e32:	bf00      	nop
      }
      break;
 8009e34:	e037      	b.n	8009ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7c1b      	ldrb	r3, [r3, #16]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	f107 0208 	add.w	r2, r7, #8
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	4798      	blx	r3
 8009e4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e50:	e029      	b.n	8009ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa11 	bl	800a27c <USBD_CtlError>
        err++;
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e60:	e021      	b.n	8009ea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	7c1b      	ldrb	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10d      	bne.n	8009e86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	f107 0208 	add.w	r2, r7, #8
 8009e76:	4610      	mov	r0, r2
 8009e78:	4798      	blx	r3
 8009e7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	2207      	movs	r2, #7
 8009e82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e84:	e00f      	b.n	8009ea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f9f7 	bl	800a27c <USBD_CtlError>
        err++;
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	3301      	adds	r3, #1
 8009e92:	72fb      	strb	r3, [r7, #11]
      break;
 8009e94:	e007      	b.n	8009ea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9ef 	bl	800a27c <USBD_CtlError>
      err++;
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ea4:	bf00      	nop
  }

  if (err != 0U)
 8009ea6:	7afb      	ldrb	r3, [r7, #11]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d11e      	bne.n	8009eea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	88db      	ldrh	r3, [r3, #6]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d016      	beq.n	8009ee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009eb4:	893b      	ldrh	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00e      	beq.n	8009ed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	88da      	ldrh	r2, [r3, #6]
 8009ebe:	893b      	ldrh	r3, [r7, #8]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bf28      	it	cs
 8009ec4:	4613      	movcs	r3, r2
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009eca:	893b      	ldrh	r3, [r7, #8]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68f9      	ldr	r1, [r7, #12]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fa44 	bl	800a35e <USBD_CtlSendData>
 8009ed6:	e009      	b.n	8009eec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f9ce 	bl	800a27c <USBD_CtlError>
 8009ee0:	e004      	b.n	8009eec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa95 	bl	800a412 <USBD_CtlSendStatus>
 8009ee8:	e000      	b.n	8009eec <USBD_GetDescriptor+0x2cc>
    return;
 8009eea:	bf00      	nop
  }
}
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop

08009ef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	889b      	ldrh	r3, [r3, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d131      	bne.n	8009f6a <USBD_SetAddress+0x76>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	88db      	ldrh	r3, [r3, #6]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12d      	bne.n	8009f6a <USBD_SetAddress+0x76>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	2b7f      	cmp	r3, #127	; 0x7f
 8009f14:	d829      	bhi.n	8009f6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d104      	bne.n	8009f38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9a3 	bl	800a27c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f36:	e01d      	b.n	8009f74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7bfa      	ldrb	r2, [r7, #15]
 8009f3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fff9 	bl	800af3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa61 	bl	800a412 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f5e:	e009      	b.n	8009f74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f68:	e004      	b.n	8009f74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f985 	bl	800a27c <USBD_CtlError>
  }
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	885b      	ldrh	r3, [r3, #2]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	4b4c      	ldr	r3, [pc, #304]	; (800a0c4 <USBD_SetConfig+0x148>)
 8009f92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f94:	4b4b      	ldr	r3, [pc, #300]	; (800a0c4 <USBD_SetConfig+0x148>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d905      	bls.n	8009fa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f96c 	bl	800a27c <USBD_CtlError>
    return USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e088      	b.n	800a0ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d002      	beq.n	8009fba <USBD_SetConfig+0x3e>
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d025      	beq.n	800a004 <USBD_SetConfig+0x88>
 8009fb8:	e071      	b.n	800a09e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009fba:	4b42      	ldr	r3, [pc, #264]	; (800a0c4 <USBD_SetConfig+0x148>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d01c      	beq.n	8009ffc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009fc2:	4b40      	ldr	r3, [pc, #256]	; (800a0c4 <USBD_SetConfig+0x148>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fcc:	4b3d      	ldr	r3, [pc, #244]	; (800a0c4 <USBD_SetConfig+0x148>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff f948 	bl	8009268 <USBD_SetClassConfig>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f949 	bl	800a27c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fea:	e065      	b.n	800a0b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fa10 	bl	800a412 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2203      	movs	r2, #3
 8009ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ffa:	e05d      	b.n	800a0b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fa08 	bl	800a412 <USBD_CtlSendStatus>
      break;
 800a002:	e059      	b.n	800a0b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a004:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d112      	bne.n	800a032 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2202      	movs	r2, #2
 800a010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a014:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a01e:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff f93b 	bl	80092a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f9f1 	bl	800a412 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a030:	e042      	b.n	800a0b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a032:	4b24      	ldr	r3, [pc, #144]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d02a      	beq.n	800a096 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff f929 	bl	80092a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a04e:	4b1d      	ldr	r3, [pc, #116]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff f902 	bl	8009268 <USBD_SetClassConfig>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f903 	bl	800a27c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff f90e 	bl	80092a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a08c:	e014      	b.n	800a0b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f9bf 	bl	800a412 <USBD_CtlSendStatus>
      break;
 800a094:	e010      	b.n	800a0b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f9bb 	bl	800a412 <USBD_CtlSendStatus>
      break;
 800a09c:	e00c      	b.n	800a0b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f8eb 	bl	800a27c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a0a6:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <USBD_SetConfig+0x148>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff f8f7 	bl	80092a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b6:	bf00      	nop
  }

  return ret;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200004c0 	.word	0x200004c0

0800a0c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	88db      	ldrh	r3, [r3, #6]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d004      	beq.n	800a0e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f8cd 	bl	800a27c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0e2:	e023      	b.n	800a12c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	dc02      	bgt.n	800a0f6 <USBD_GetConfig+0x2e>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dc03      	bgt.n	800a0fc <USBD_GetConfig+0x34>
 800a0f4:	e015      	b.n	800a122 <USBD_GetConfig+0x5a>
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d00b      	beq.n	800a112 <USBD_GetConfig+0x4a>
 800a0fa:	e012      	b.n	800a122 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	3308      	adds	r3, #8
 800a106:	2201      	movs	r2, #1
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f927 	bl	800a35e <USBD_CtlSendData>
        break;
 800a110:	e00c      	b.n	800a12c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3304      	adds	r3, #4
 800a116:	2201      	movs	r2, #1
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f91f 	bl	800a35e <USBD_CtlSendData>
        break;
 800a120:	e004      	b.n	800a12c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f8a9 	bl	800a27c <USBD_CtlError>
        break;
 800a12a:	bf00      	nop
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d81e      	bhi.n	800a18a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	88db      	ldrh	r3, [r3, #6]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d004      	beq.n	800a15e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f890 	bl	800a27c <USBD_CtlError>
        break;
 800a15c:	e01a      	b.n	800a194 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	f043 0202 	orr.w	r2, r3, #2
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	330c      	adds	r3, #12
 800a17e:	2202      	movs	r2, #2
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8eb 	bl	800a35e <USBD_CtlSendData>
      break;
 800a188:	e004      	b.n	800a194 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f875 	bl	800a27c <USBD_CtlError>
      break;
 800a192:	bf00      	nop
  }
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	885b      	ldrh	r3, [r3, #2]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d106      	bne.n	800a1bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f92b 	bl	800a412 <USBD_CtlSendStatus>
  }
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d80b      	bhi.n	800a1f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10c      	bne.n	800a1fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f910 	bl	800a412 <USBD_CtlSendStatus>
      }
      break;
 800a1f2:	e004      	b.n	800a1fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f840 	bl	800a27c <USBD_CtlError>
      break;
 800a1fc:	e000      	b.n	800a200 <USBD_ClrFeature+0x3c>
      break;
 800a1fe:	bf00      	nop
  }
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3301      	adds	r3, #1
 800a222:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f7ff fabb 	bl	80097ae <SWAPBYTE>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3301      	adds	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3301      	adds	r3, #1
 800a24a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff faae 	bl	80097ae <SWAPBYTE>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	3301      	adds	r3, #1
 800a25e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff faa1 	bl	80097ae <SWAPBYTE>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461a      	mov	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	80da      	strh	r2, [r3, #6]
}
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a286:	2180      	movs	r1, #128	; 0x80
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fded 	bl	800ae68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a28e:	2100      	movs	r1, #0
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fde9 	bl	800ae68 <USBD_LL_StallEP>
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d036      	beq.n	800a322 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2b8:	6938      	ldr	r0, [r7, #16]
 800a2ba:	f000 f836 	bl	800a32a <USBD_GetLen>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	7812      	ldrb	r2, [r2, #0]
 800a2d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2ee:	e013      	b.n	800a318 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	7812      	ldrb	r2, [r2, #0]
 800a2fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3301      	adds	r3, #1
 800a300:	613b      	str	r3, [r7, #16]
    idx++;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	3301      	adds	r3, #1
 800a306:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	701a      	strb	r2, [r3, #0]
    idx++;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	3301      	adds	r3, #1
 800a316:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e7      	bne.n	800a2f0 <USBD_GetString+0x52>
 800a320:	e000      	b.n	800a324 <USBD_GetString+0x86>
    return;
 800a322:	bf00      	nop
  }
}
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a33a:	e005      	b.n	800a348 <USBD_GetLen+0x1e>
  {
    len++;
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	3301      	adds	r3, #1
 800a340:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	3301      	adds	r3, #1
 800a346:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f5      	bne.n	800a33c <USBD_GetLen+0x12>
  }

  return len;
 800a350:	7bfb      	ldrb	r3, [r7, #15]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2202      	movs	r2, #2
 800a36e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	2100      	movs	r1, #0
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fdf8 	bl	800af7a <USBD_LL_Transmit>

  return USBD_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 fde7 	bl	800af7a <USBD_LL_Transmit>

  return USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	2100      	movs	r1, #0
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 fdeb 	bl	800afbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	2100      	movs	r1, #0
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f000 fdda 	bl	800afbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2204      	movs	r2, #4
 800a41e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a422:	2300      	movs	r3, #0
 800a424:	2200      	movs	r2, #0
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fda6 	bl	800af7a <USBD_LL_Transmit>

  return USBD_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2205      	movs	r2, #5
 800a444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a448:	2300      	movs	r3, #0
 800a44a:	2200      	movs	r2, #0
 800a44c:	2100      	movs	r1, #0
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fdb4 	bl	800afbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a464:	2200      	movs	r2, #0
 800a466:	4912      	ldr	r1, [pc, #72]	; (800a4b0 <MX_USB_DEVICE_Init+0x50>)
 800a468:	4812      	ldr	r0, [pc, #72]	; (800a4b4 <MX_USB_DEVICE_Init+0x54>)
 800a46a:	f7fe fe8f 	bl	800918c <USBD_Init>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a474:	f7f6 fca8 	bl	8000dc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a478:	490f      	ldr	r1, [pc, #60]	; (800a4b8 <MX_USB_DEVICE_Init+0x58>)
 800a47a:	480e      	ldr	r0, [pc, #56]	; (800a4b4 <MX_USB_DEVICE_Init+0x54>)
 800a47c:	f7fe feb6 	bl	80091ec <USBD_RegisterClass>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a486:	f7f6 fc9f 	bl	8000dc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a48a:	490c      	ldr	r1, [pc, #48]	; (800a4bc <MX_USB_DEVICE_Init+0x5c>)
 800a48c:	4809      	ldr	r0, [pc, #36]	; (800a4b4 <MX_USB_DEVICE_Init+0x54>)
 800a48e:	f7fe fdd7 	bl	8009040 <USBD_CDC_RegisterInterface>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a498:	f7f6 fc96 	bl	8000dc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <MX_USB_DEVICE_Init+0x54>)
 800a49e:	f7fe fecc 	bl	800923a <USBD_Start>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4a8:	f7f6 fc8e 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4ac:	bf00      	nop
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200003ec 	.word	0x200003ec
 800a4b4:	200008f8 	.word	0x200008f8
 800a4b8:	200002cc 	.word	0x200002cc
 800a4bc:	200003d8 	.word	0x200003d8

0800a4c0 <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fd6f 	bl	800afbc <USBD_LL_PrepareReceive>
    return USBD_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e000      	b.n	800a4e4 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 800a4e2:	2303      	movs	r3, #3
  }
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 800a4f0:	480e      	ldr	r0, [pc, #56]	; (800a52c <CDC_Init_FS+0x40>)
 800a4f2:	f7f7 fecb 	bl	800228c <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 800a4f6:	480e      	ldr	r0, [pc, #56]	; (800a530 <CDC_Init_FS+0x44>)
 800a4f8:	f7f7 ffa8 	bl	800244c <CDC_ReceiveQueue_Init>
  receivePended = true;
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <CDC_Init_FS+0x48>)
 800a4fe:	2201      	movs	r2, #1
 800a500:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 800a502:	480b      	ldr	r0, [pc, #44]	; (800a530 <CDC_Init_FS+0x44>)
 800a504:	f7f7 ffb8 	bl	8002478 <CDC_ReceiveQueue_ReserveBlock>
 800a508:	4603      	mov	r3, r0
 800a50a:	4619      	mov	r1, r3
 800a50c:	480a      	ldr	r0, [pc, #40]	; (800a538 <CDC_Init_FS+0x4c>)
 800a50e:	f7fe fdca 	bl	80090a6 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a512:	2200      	movs	r2, #0
 800a514:	4909      	ldr	r1, [pc, #36]	; (800a53c <CDC_Init_FS+0x50>)
 800a516:	4808      	ldr	r0, [pc, #32]	; (800a538 <CDC_Init_FS+0x4c>)
 800a518:	f7fe fda7 	bl	800906a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a51c:	4908      	ldr	r1, [pc, #32]	; (800a540 <CDC_Init_FS+0x54>)
 800a51e:	4806      	ldr	r0, [pc, #24]	; (800a538 <CDC_Init_FS+0x4c>)
 800a520:	f7fe fdc1 	bl	80090a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a524:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a526:	4618      	mov	r0, r3
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000bc8 	.word	0x20000bc8
 800a530:	20001c50 	.word	0x20001c50
 800a534:	200003cf 	.word	0x200003cf
 800a538:	200008f8 	.word	0x200008f8
 800a53c:	20001450 	.word	0x20001450
 800a540:	20000c50 	.word	0x20000c50

0800a544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	71fb      	strb	r3, [r7, #7]
 800a560:	4613      	mov	r3, r2
 800a562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	2b23      	cmp	r3, #35	; 0x23
 800a568:	f200 80ac 	bhi.w	800a6c4 <CDC_Control_FS+0x170>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <CDC_Control_FS+0x20>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a6c5 	.word	0x0800a6c5
 800a578:	0800a6c5 	.word	0x0800a6c5
 800a57c:	0800a6c5 	.word	0x0800a6c5
 800a580:	0800a6c5 	.word	0x0800a6c5
 800a584:	0800a6c5 	.word	0x0800a6c5
 800a588:	0800a6c5 	.word	0x0800a6c5
 800a58c:	0800a6c5 	.word	0x0800a6c5
 800a590:	0800a6c5 	.word	0x0800a6c5
 800a594:	0800a6c5 	.word	0x0800a6c5
 800a598:	0800a6c5 	.word	0x0800a6c5
 800a59c:	0800a6c5 	.word	0x0800a6c5
 800a5a0:	0800a6c5 	.word	0x0800a6c5
 800a5a4:	0800a6c5 	.word	0x0800a6c5
 800a5a8:	0800a6c5 	.word	0x0800a6c5
 800a5ac:	0800a6c5 	.word	0x0800a6c5
 800a5b0:	0800a6c5 	.word	0x0800a6c5
 800a5b4:	0800a6c5 	.word	0x0800a6c5
 800a5b8:	0800a6c5 	.word	0x0800a6c5
 800a5bc:	0800a6c5 	.word	0x0800a6c5
 800a5c0:	0800a6c5 	.word	0x0800a6c5
 800a5c4:	0800a6c5 	.word	0x0800a6c5
 800a5c8:	0800a6c5 	.word	0x0800a6c5
 800a5cc:	0800a6c5 	.word	0x0800a6c5
 800a5d0:	0800a6c5 	.word	0x0800a6c5
 800a5d4:	0800a6c5 	.word	0x0800a6c5
 800a5d8:	0800a6c5 	.word	0x0800a6c5
 800a5dc:	0800a6c5 	.word	0x0800a6c5
 800a5e0:	0800a6c5 	.word	0x0800a6c5
 800a5e4:	0800a6c5 	.word	0x0800a6c5
 800a5e8:	0800a6c5 	.word	0x0800a6c5
 800a5ec:	0800a6c5 	.word	0x0800a6c5
 800a5f0:	0800a6c5 	.word	0x0800a6c5
 800a5f4:	0800a605 	.word	0x0800a605
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a69d 	.word	0x0800a69d
 800a600:	0800a6c5 	.word	0x0800a6c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	461a      	mov	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	3302      	adds	r3, #2
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800a61c:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	3303      	adds	r3, #3
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800a628:	461a      	mov	r2, r3
 800a62a:	4b2b      	ldr	r3, [pc, #172]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a62c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	791a      	ldrb	r2, [r3, #4]
 800a632:	4b29      	ldr	r3, [pc, #164]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a634:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	795a      	ldrb	r2, [r3, #5]
 800a63a:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a63c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	799a      	ldrb	r2, [r3, #6]
 800a642:	4b25      	ldr	r3, [pc, #148]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a644:	719a      	strb	r2, [r3, #6]
    break;
 800a646:	e040      	b.n	800a6ca <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800a648:	4b23      	ldr	r3, [pc, #140]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800a652:	4b21      	ldr	r3, [pc, #132]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	0a1a      	lsrs	r2, r3, #8
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	b2d2      	uxtb	r2, r2
 800a65e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800a660:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	0c1a      	lsrs	r2, r3, #16
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	3302      	adds	r3, #2
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800a66e:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	0e1a      	lsrs	r2, r3, #24
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	3303      	adds	r3, #3
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	3304      	adds	r3, #4
 800a680:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a682:	7912      	ldrb	r2, [r2, #4]
 800a684:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	3305      	adds	r3, #5
 800a68a:	4a13      	ldr	r2, [pc, #76]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a68c:	7952      	ldrb	r2, [r2, #5]
 800a68e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	3306      	adds	r3, #6
 800a694:	4a10      	ldr	r2, [pc, #64]	; (800a6d8 <CDC_Control_FS+0x184>)
 800a696:	7992      	ldrb	r2, [r2, #6]
 800a698:	701a      	strb	r2, [r3, #0]
    break;
 800a69a:	e016      	b.n	800a6ca <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	885b      	ldrh	r3, [r3, #2]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bf14      	ite	ne
 800a6a8:	2301      	movne	r3, #1
 800a6aa:	2300      	moveq	r3, #0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	461a      	mov	r2, r3
      lineState =
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <CDC_Control_FS+0x188>)
 800a6b2:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 800a6b4:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <CDC_Control_FS+0x188>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d005      	beq.n	800a6c8 <CDC_Control_FS+0x174>
              transmitStart = 0;
 800a6bc:	4b08      	ldr	r3, [pc, #32]	; (800a6e0 <CDC_Control_FS+0x18c>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800a6c2:	e001      	b.n	800a6c8 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6c4:	bf00      	nop
 800a6c6:	e000      	b.n	800a6ca <CDC_Control_FS+0x176>
    break;
 800a6c8:	bf00      	nop
  }

  return (USBD_OK);
 800a6ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	200003d0 	.word	0x200003d0
 800a6dc:	200004c4 	.word	0x200004c4
 800a6e0:	200004c8 	.word	0x200004c8

0800a6e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	480b      	ldr	r0, [pc, #44]	; (800a724 <CDC_Receive_FS+0x40>)
 800a6f8:	f7f7 ff13 	bl	8002522 <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <CDC_Receive_FS+0x44>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 800a702:	f000 f86f 	bl	800a7e4 <CDC_resume_receive>
 800a706:	4603      	mov	r3, r0
 800a708:	f083 0301 	eor.w	r3, r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 800a712:	4806      	ldr	r0, [pc, #24]	; (800a72c <CDC_Receive_FS+0x48>)
 800a714:	f7ff fed4 	bl	800a4c0 <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 800a718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20001c50 	.word	0x20001c50
 800a728:	200003cf 	.word	0x200003cf
 800a72c:	200008f8 	.word	0x200008f8

0800a730 <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 800a736:	4b11      	ldr	r3, [pc, #68]	; (800a77c <CDC_connected+0x4c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 800a742:	f7f8 f929 	bl	8002998 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 800a74e:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <CDC_connected+0x50>)
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 800a756:	2b03      	cmp	r3, #3
 800a758:	d108      	bne.n	800a76c <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d805      	bhi.n	800a76c <CDC_connected+0x3c>
         && lineState;
 800a760:	4b08      	ldr	r3, [pc, #32]	; (800a784 <CDC_connected+0x54>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <CDC_connected+0x3c>
 800a768:	2301      	movs	r3, #1
 800a76a:	e000      	b.n	800a76e <CDC_connected+0x3e>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	b2db      	uxtb	r3, r3
}
 800a774:	4618      	mov	r0, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	200004c8 	.word	0x200004c8
 800a780:	200008f8 	.word	0x200008f8
 800a784:	200004c4 	.word	0x200004c4

0800a788 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <CDC_continue_transmit+0x50>)
 800a790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a794:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d116      	bne.n	800a7ce <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 800a7a0:	1dbb      	adds	r3, r7, #6
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	480d      	ldr	r0, [pc, #52]	; (800a7dc <CDC_continue_transmit+0x54>)
 800a7a6:	f7f7 fe00 	bl	80023aa <CDC_TransmitQueue_ReadBlock>
 800a7aa:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00d      	beq.n	800a7ce <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 800a7b2:	f7f8 f8f1 	bl	8002998 <HAL_GetTick>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4a09      	ldr	r2, [pc, #36]	; (800a7e0 <CDC_continue_transmit+0x58>)
 800a7ba:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4805      	ldr	r0, [pc, #20]	; (800a7d8 <CDC_continue_transmit+0x50>)
 800a7c4:	f7fe fc51 	bl	800906a <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7c8:	4803      	ldr	r0, [pc, #12]	; (800a7d8 <CDC_continue_transmit+0x50>)
 800a7ca:	f7fe fc85 	bl	80090d8 <USBD_CDC_TransmitPacket>
    }
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200008f8 	.word	0x200008f8
 800a7dc:	20000bc8 	.word	0x20000bc8
 800a7e0:	200004c8 	.word	0x200004c8

0800a7e4 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 800a7ea:	4b10      	ldr	r3, [pc, #64]	; (800a82c <CDC_resume_receive+0x48>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f083 0301 	eor.w	r3, r3, #1
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d012      	beq.n	800a820 <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 800a7fa:	480d      	ldr	r0, [pc, #52]	; (800a830 <CDC_resume_receive+0x4c>)
 800a7fc:	f7f7 fe3c 	bl	8002478 <CDC_ReceiveQueue_ReserveBlock>
 800a800:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00b      	beq.n	800a820 <CDC_resume_receive+0x3c>
      receivePended = true;
 800a808:	4b08      	ldr	r3, [pc, #32]	; (800a82c <CDC_resume_receive+0x48>)
 800a80a:	2201      	movs	r2, #1
 800a80c:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4808      	ldr	r0, [pc, #32]	; (800a834 <CDC_resume_receive+0x50>)
 800a812:	f7fe fc48 	bl	80090a6 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a816:	4807      	ldr	r0, [pc, #28]	; (800a834 <CDC_resume_receive+0x50>)
 800a818:	f7fe fc8e 	bl	8009138 <USBD_CDC_ReceivePacket>
      return true;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e000      	b.n	800a822 <CDC_resume_receive+0x3e>
    }
  }
  return false;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	200003cf 	.word	0x200003cf
 800a830:	20001c50 	.word	0x20001c50
 800a834:	200008f8 	.word	0x200008f8

0800a838 <CDC_init>:

int8_t CDC_init(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 800a83c:	f7ff fe56 	bl	800a4ec <CDC_Init_FS>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	bd80      	pop	{r7, pc}

0800a846 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 800a84a:	f7ff fe7b 	bl	800a544 <CDC_DeInit_FS>
 800a84e:	4603      	mov	r3, r0
}
 800a850:	4618      	mov	r0, r3
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  transmitStart = 0;
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <USBD_CDC_Transferred+0x1c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 800a85e:	4805      	ldr	r0, [pc, #20]	; (800a874 <USBD_CDC_Transferred+0x20>)
 800a860:	f7f7 fdda 	bl	8002418 <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 800a864:	f7ff ff90 	bl	800a788 <CDC_continue_transmit>
  return (USBD_OK);
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	200004c8 	.word	0x200004c8
 800a874:	20000bc8 	.word	0x20000bc8

0800a878 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2212      	movs	r2, #18
 800a888:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a88a:	4b03      	ldr	r3, [pc, #12]	; (800a898 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	20000408 	.word	0x20000408

0800a89c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2204      	movs	r2, #4
 800a8ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8ae:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	2000041c 	.word	0x2000041c

0800a8c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d105      	bne.n	800a8de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	4907      	ldr	r1, [pc, #28]	; (800a8f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8d6:	4808      	ldr	r0, [pc, #32]	; (800a8f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8d8:	f7ff fce1 	bl	800a29e <USBD_GetString>
 800a8dc:	e004      	b.n	800a8e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	4904      	ldr	r1, [pc, #16]	; (800a8f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8e2:	4805      	ldr	r0, [pc, #20]	; (800a8f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8e4:	f7ff fcdb 	bl	800a29e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20001d18 	.word	0x20001d18
 800a8f8:	0800ba98 	.word	0x0800ba98

0800a8fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	4603      	mov	r3, r0
 800a904:	6039      	str	r1, [r7, #0]
 800a906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	4904      	ldr	r1, [pc, #16]	; (800a91c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a90c:	4804      	ldr	r0, [pc, #16]	; (800a920 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a90e:	f7ff fcc6 	bl	800a29e <USBD_GetString>
  return USBD_StrDesc;
 800a912:	4b02      	ldr	r3, [pc, #8]	; (800a91c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20001d18 	.word	0x20001d18
 800a920:	0800baac 	.word	0x0800baac

0800a924 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	221a      	movs	r2, #26
 800a934:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a936:	f000 f843 	bl	800a9c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a93a:	4b02      	ldr	r3, [pc, #8]	; (800a944 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000420 	.word	0x20000420

0800a948 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	4907      	ldr	r1, [pc, #28]	; (800a97c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a95e:	4808      	ldr	r0, [pc, #32]	; (800a980 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a960:	f7ff fc9d 	bl	800a29e <USBD_GetString>
 800a964:	e004      	b.n	800a970 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	4904      	ldr	r1, [pc, #16]	; (800a97c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a96a:	4805      	ldr	r0, [pc, #20]	; (800a980 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a96c:	f7ff fc97 	bl	800a29e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20001d18 	.word	0x20001d18
 800a980:	0800babc 	.word	0x0800babc

0800a984 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	4907      	ldr	r1, [pc, #28]	; (800a9b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a99a:	4808      	ldr	r0, [pc, #32]	; (800a9bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a99c:	f7ff fc7f 	bl	800a29e <USBD_GetString>
 800a9a0:	e004      	b.n	800a9ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	4904      	ldr	r1, [pc, #16]	; (800a9b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9a6:	4805      	ldr	r0, [pc, #20]	; (800a9bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9a8:	f7ff fc79 	bl	800a29e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9ac:	4b02      	ldr	r3, [pc, #8]	; (800a9b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20001d18 	.word	0x20001d18
 800a9bc:	0800bac8 	.word	0x0800bac8

0800a9c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <Get_SerialNum+0x44>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9cc:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <Get_SerialNum+0x48>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9d2:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <Get_SerialNum+0x4c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d009      	beq.n	800a9fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	4909      	ldr	r1, [pc, #36]	; (800aa10 <Get_SerialNum+0x50>)
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 f814 	bl	800aa18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	4908      	ldr	r1, [pc, #32]	; (800aa14 <Get_SerialNum+0x54>)
 800a9f4:	68b8      	ldr	r0, [r7, #8]
 800a9f6:	f000 f80f 	bl	800aa18 <IntToUnicode>
  }
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	1fff7a10 	.word	0x1fff7a10
 800aa08:	1fff7a14 	.word	0x1fff7a14
 800aa0c:	1fff7a18 	.word	0x1fff7a18
 800aa10:	20000422 	.word	0x20000422
 800aa14:	20000432 	.word	0x20000432

0800aa18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	75fb      	strb	r3, [r7, #23]
 800aa2e:	e027      	b.n	800aa80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	0f1b      	lsrs	r3, r3, #28
 800aa34:	2b09      	cmp	r3, #9
 800aa36:	d80b      	bhi.n	800aa50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	0f1b      	lsrs	r3, r3, #28
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	4619      	mov	r1, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	440b      	add	r3, r1
 800aa48:	3230      	adds	r2, #48	; 0x30
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
 800aa4e:	e00a      	b.n	800aa66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	0f1b      	lsrs	r3, r3, #28
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	440b      	add	r3, r1
 800aa60:	3237      	adds	r2, #55	; 0x37
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	3301      	adds	r3, #1
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	4413      	add	r3, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
 800aa80:	7dfa      	ldrb	r2, [r7, #23]
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d3d3      	bcc.n	800aa30 <IntToUnicode+0x18>
  }
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
	...

0800aa98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaa0:	f107 0314 	add.w	r3, r7, #20
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	605a      	str	r2, [r3, #4]
 800aaaa:	609a      	str	r2, [r3, #8]
 800aaac:	60da      	str	r2, [r3, #12]
 800aaae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aab8:	d13a      	bne.n	800ab30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaba:	2300      	movs	r3, #0
 800aabc:	613b      	str	r3, [r7, #16]
 800aabe:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800aac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac2:	4a1d      	ldr	r2, [pc, #116]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800aac4:	f043 0301 	orr.w	r3, r3, #1
 800aac8:	6313      	str	r3, [r2, #48]	; 0x30
 800aaca:	4b1b      	ldr	r3, [pc, #108]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aad6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aadc:	2302      	movs	r3, #2
 800aade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aae4:	2303      	movs	r3, #3
 800aae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aae8:	230a      	movs	r3, #10
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4812      	ldr	r0, [pc, #72]	; (800ab3c <HAL_PCD_MspInit+0xa4>)
 800aaf4:	f7f8 f956 	bl	8002da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800aafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafc:	4a0e      	ldr	r2, [pc, #56]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800aafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab02:	6353      	str	r3, [r2, #52]	; 0x34
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800ab0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0c:	4a0a      	ldr	r2, [pc, #40]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800ab0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab12:	6453      	str	r3, [r2, #68]	; 0x44
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <HAL_PCD_MspInit+0xa0>)
 800ab16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab20:	2200      	movs	r2, #0
 800ab22:	2100      	movs	r1, #0
 800ab24:	2043      	movs	r0, #67	; 0x43
 800ab26:	f7f8 f866 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab2a:	2043      	movs	r0, #67	; 0x43
 800ab2c:	f7f8 f87f 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab30:	bf00      	nop
 800ab32:	3728      	adds	r7, #40	; 0x28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	40023800 	.word	0x40023800
 800ab3c:	40020000 	.word	0x40020000

0800ab40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fe fbba 	bl	80092d0 <USBD_LL_SetupStage>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	00db      	lsls	r3, r3, #3
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f7fe fbf4 	bl	800937a <USBD_LL_DataOutStage>
}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	4613      	mov	r3, r2
 800abb2:	00db      	lsls	r3, r3, #3
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	440b      	add	r3, r1
 800abba:	3348      	adds	r3, #72	; 0x48
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	4619      	mov	r1, r3
 800abc2:	f7fe fc3d 	bl	8009440 <USBD_LL_DataInStage>
}
 800abc6:	bf00      	nop
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fd51 	bl	8009684 <USBD_LL_SOF>
}
 800abe2:	bf00      	nop
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abf2:	2301      	movs	r3, #1
 800abf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d001      	beq.n	800ac02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abfe:	f7f6 f8e3 	bl	8000dc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac08:	7bfa      	ldrb	r2, [r7, #15]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe fcfb 	bl	8009608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fca7 	bl	800956c <USBD_LL_Reset>
}
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fcf6 	bl	8009628 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac4e:	f043 0301 	orr.w	r3, r3, #1
 800ac52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac5c:	4b04      	ldr	r3, [pc, #16]	; (800ac70 <HAL_PCD_SuspendCallback+0x48>)
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	4a03      	ldr	r2, [pc, #12]	; (800ac70 <HAL_PCD_SuspendCallback+0x48>)
 800ac62:	f043 0306 	orr.w	r3, r3, #6
 800ac66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	e000ed00 	.word	0xe000ed00

0800ac74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fce6 	bl	8009654 <USBD_LL_Resume>
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fd34 	bl	8009714 <USBD_LL_IsoOUTIncomplete>
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	4611      	mov	r1, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fcfc 	bl	80096c8 <USBD_LL_IsoINIncomplete>
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe fd3a 	bl	8009760 <USBD_LL_DevConnected>
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fd37 	bl	8009776 <USBD_LL_DevDisconnected>
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d13c      	bne.n	800ad9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ad20:	4a20      	ldr	r2, [pc, #128]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a1e      	ldr	r2, [pc, #120]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad30:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad38:	4b1a      	ldr	r3, [pc, #104]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad3e:	4b19      	ldr	r3, [pc, #100]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad40:	2202      	movs	r2, #2
 800ad42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad44:	4b17      	ldr	r3, [pc, #92]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad4a:	4b16      	ldr	r3, [pc, #88]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad50:	4b14      	ldr	r3, [pc, #80]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad56:	4b13      	ldr	r3, [pc, #76]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad5c:	4b11      	ldr	r3, [pc, #68]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad62:	4b10      	ldr	r3, [pc, #64]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad68:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad6e:	480d      	ldr	r0, [pc, #52]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad70:	f7f9 fb8f 	bl	8004492 <HAL_PCD_Init>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad7a:	f7f6 f825 	bl	8000dc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad7e:	2180      	movs	r1, #128	; 0x80
 800ad80:	4808      	ldr	r0, [pc, #32]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad82:	f7fa fcec 	bl	800575e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad86:	2240      	movs	r2, #64	; 0x40
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4806      	ldr	r0, [pc, #24]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad8c:	f7fa fca0 	bl	80056d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad90:	2280      	movs	r2, #128	; 0x80
 800ad92:	2101      	movs	r1, #1
 800ad94:	4803      	ldr	r0, [pc, #12]	; (800ada4 <USBD_LL_Init+0x94>)
 800ad96:	f7fa fc9b 	bl	80056d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	20001f18 	.word	0x20001f18

0800ada8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f9 fc84 	bl	80046cc <HAL_PCD_Start>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f942 	bl	800b054 <USBD_Get_USB_Status>
 800add0:	4603      	mov	r3, r0
 800add2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add4:	7bbb      	ldrb	r3, [r7, #14]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	4608      	mov	r0, r1
 800ade8:	4611      	mov	r1, r2
 800adea:	461a      	mov	r2, r3
 800adec:	4603      	mov	r3, r0
 800adee:	70fb      	strb	r3, [r7, #3]
 800adf0:	460b      	mov	r3, r1
 800adf2:	70bb      	strb	r3, [r7, #2]
 800adf4:	4613      	mov	r3, r2
 800adf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae06:	78bb      	ldrb	r3, [r7, #2]
 800ae08:	883a      	ldrh	r2, [r7, #0]
 800ae0a:	78f9      	ldrb	r1, [r7, #3]
 800ae0c:	f7fa f868 	bl	8004ee0 <HAL_PCD_EP_Open>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f91c 	bl	800b054 <USBD_Get_USB_Status>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fa f8b1 	bl	8004fb0 <HAL_PCD_EP_Close>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f000 f8fd 	bl	800b054 <USBD_Get_USB_Status>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fa f989 	bl	800519e <HAL_PCD_EP_SetStall>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f8de 	bl	800b054 <USBD_Get_USB_Status>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	4611      	mov	r1, r2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fa f9ce 	bl	8005266 <HAL_PCD_EP_ClrStall>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f8bf 	bl	800b054 <USBD_Get_USB_Status>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aef6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	da0b      	bge.n	800af18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af06:	68f9      	ldr	r1, [r7, #12]
 800af08:	4613      	mov	r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	1a9b      	subs	r3, r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	440b      	add	r3, r1
 800af12:	333e      	adds	r3, #62	; 0x3e
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	e00b      	b.n	800af30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af1e:	68f9      	ldr	r1, [r7, #12]
 800af20:	4613      	mov	r3, r2
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af56:	78fa      	ldrb	r2, [r7, #3]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f9 ff9b 	bl	8004e96 <HAL_PCD_SetAddress>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f874 	bl	800b054 <USBD_Get_USB_Status>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af70:	7bbb      	ldrb	r3, [r7, #14]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b086      	sub	sp, #24
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]
 800af86:	460b      	mov	r3, r1
 800af88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af98:	7af9      	ldrb	r1, [r7, #11]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	f7fa f8b4 	bl	800510a <HAL_PCD_EP_Transmit>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 f853 	bl	800b054 <USBD_Get_USB_Status>
 800afae:	4603      	mov	r3, r0
 800afb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	603b      	str	r3, [r7, #0]
 800afc8:	460b      	mov	r3, r1
 800afca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800afda:	7af9      	ldrb	r1, [r7, #11]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	f7fa f830 	bl	8005044 <HAL_PCD_EP_Receive>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 f832 	bl	800b054 <USBD_Get_USB_Status>
 800aff0:	4603      	mov	r3, r0
 800aff2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aff4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b010:	78fa      	ldrb	r2, [r7, #3]
 800b012:	4611      	mov	r1, r2
 800b014:	4618      	mov	r0, r3
 800b016:	f7fa f860 	bl	80050da <HAL_PCD_EP_GetRxCount>
 800b01a:	4603      	mov	r3, r0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b02c:	4b03      	ldr	r3, [pc, #12]	; (800b03c <USBD_static_malloc+0x18>)
}
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	200004cc 	.word	0x200004cc

0800b040 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]

}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	2b03      	cmp	r3, #3
 800b066:	d817      	bhi.n	800b098 <USBD_Get_USB_Status+0x44>
 800b068:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <USBD_Get_USB_Status+0x1c>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b081 	.word	0x0800b081
 800b074:	0800b087 	.word	0x0800b087
 800b078:	0800b08d 	.word	0x0800b08d
 800b07c:	0800b093 	.word	0x0800b093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
    break;
 800b084:	e00b      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	73fb      	strb	r3, [r7, #15]
    break;
 800b08a:	e008      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b08c:	2301      	movs	r3, #1
 800b08e:	73fb      	strb	r3, [r7, #15]
    break;
 800b090:	e005      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b092:	2303      	movs	r3, #3
 800b094:	73fb      	strb	r3, [r7, #15]
    break;
 800b096:	e002      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b098:	2303      	movs	r3, #3
 800b09a:	73fb      	strb	r3, [r7, #15]
    break;
 800b09c:	bf00      	nop
  }
  return usb_status;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <__errno>:
 800b0ac:	4b01      	ldr	r3, [pc, #4]	; (800b0b4 <__errno+0x8>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	2000043c 	.word	0x2000043c

0800b0b8 <__libc_init_array>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	4d0d      	ldr	r5, [pc, #52]	; (800b0f0 <__libc_init_array+0x38>)
 800b0bc:	4c0d      	ldr	r4, [pc, #52]	; (800b0f4 <__libc_init_array+0x3c>)
 800b0be:	1b64      	subs	r4, r4, r5
 800b0c0:	10a4      	asrs	r4, r4, #2
 800b0c2:	2600      	movs	r6, #0
 800b0c4:	42a6      	cmp	r6, r4
 800b0c6:	d109      	bne.n	800b0dc <__libc_init_array+0x24>
 800b0c8:	4d0b      	ldr	r5, [pc, #44]	; (800b0f8 <__libc_init_array+0x40>)
 800b0ca:	4c0c      	ldr	r4, [pc, #48]	; (800b0fc <__libc_init_array+0x44>)
 800b0cc:	f000 fc98 	bl	800ba00 <_init>
 800b0d0:	1b64      	subs	r4, r4, r5
 800b0d2:	10a4      	asrs	r4, r4, #2
 800b0d4:	2600      	movs	r6, #0
 800b0d6:	42a6      	cmp	r6, r4
 800b0d8:	d105      	bne.n	800b0e6 <__libc_init_array+0x2e>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e0:	4798      	blx	r3
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	e7ee      	b.n	800b0c4 <__libc_init_array+0xc>
 800b0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ea:	4798      	blx	r3
 800b0ec:	3601      	adds	r6, #1
 800b0ee:	e7f2      	b.n	800b0d6 <__libc_init_array+0x1e>
 800b0f0:	0800bb40 	.word	0x0800bb40
 800b0f4:	0800bb40 	.word	0x0800bb40
 800b0f8:	0800bb40 	.word	0x0800bb40
 800b0fc:	0800bb44 	.word	0x0800bb44

0800b100 <malloc>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <malloc+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f000 b871 	b.w	800b1ec <_malloc_r>
 800b10a:	bf00      	nop
 800b10c:	2000043c 	.word	0x2000043c

0800b110 <free>:
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <free+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f000 b819 	b.w	800b14c <_free_r>
 800b11a:	bf00      	nop
 800b11c:	2000043c 	.word	0x2000043c

0800b120 <memcpy>:
 800b120:	440a      	add	r2, r1
 800b122:	4291      	cmp	r1, r2
 800b124:	f100 33ff 	add.w	r3, r0, #4294967295
 800b128:	d100      	bne.n	800b12c <memcpy+0xc>
 800b12a:	4770      	bx	lr
 800b12c:	b510      	push	{r4, lr}
 800b12e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b132:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b136:	4291      	cmp	r1, r2
 800b138:	d1f9      	bne.n	800b12e <memcpy+0xe>
 800b13a:	bd10      	pop	{r4, pc}

0800b13c <memset>:
 800b13c:	4402      	add	r2, r0
 800b13e:	4603      	mov	r3, r0
 800b140:	4293      	cmp	r3, r2
 800b142:	d100      	bne.n	800b146 <memset+0xa>
 800b144:	4770      	bx	lr
 800b146:	f803 1b01 	strb.w	r1, [r3], #1
 800b14a:	e7f9      	b.n	800b140 <memset+0x4>

0800b14c <_free_r>:
 800b14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14e:	2900      	cmp	r1, #0
 800b150:	d048      	beq.n	800b1e4 <_free_r+0x98>
 800b152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b156:	9001      	str	r0, [sp, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f1a1 0404 	sub.w	r4, r1, #4
 800b15e:	bfb8      	it	lt
 800b160:	18e4      	addlt	r4, r4, r3
 800b162:	f000 f907 	bl	800b374 <__malloc_lock>
 800b166:	4a20      	ldr	r2, [pc, #128]	; (800b1e8 <_free_r+0x9c>)
 800b168:	9801      	ldr	r0, [sp, #4]
 800b16a:	6813      	ldr	r3, [r2, #0]
 800b16c:	4615      	mov	r5, r2
 800b16e:	b933      	cbnz	r3, 800b17e <_free_r+0x32>
 800b170:	6063      	str	r3, [r4, #4]
 800b172:	6014      	str	r4, [r2, #0]
 800b174:	b003      	add	sp, #12
 800b176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b17a:	f000 b901 	b.w	800b380 <__malloc_unlock>
 800b17e:	42a3      	cmp	r3, r4
 800b180:	d90b      	bls.n	800b19a <_free_r+0x4e>
 800b182:	6821      	ldr	r1, [r4, #0]
 800b184:	1862      	adds	r2, r4, r1
 800b186:	4293      	cmp	r3, r2
 800b188:	bf04      	itt	eq
 800b18a:	681a      	ldreq	r2, [r3, #0]
 800b18c:	685b      	ldreq	r3, [r3, #4]
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	bf04      	itt	eq
 800b192:	1852      	addeq	r2, r2, r1
 800b194:	6022      	streq	r2, [r4, #0]
 800b196:	602c      	str	r4, [r5, #0]
 800b198:	e7ec      	b.n	800b174 <_free_r+0x28>
 800b19a:	461a      	mov	r2, r3
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b10b      	cbz	r3, 800b1a4 <_free_r+0x58>
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	d9fa      	bls.n	800b19a <_free_r+0x4e>
 800b1a4:	6811      	ldr	r1, [r2, #0]
 800b1a6:	1855      	adds	r5, r2, r1
 800b1a8:	42a5      	cmp	r5, r4
 800b1aa:	d10b      	bne.n	800b1c4 <_free_r+0x78>
 800b1ac:	6824      	ldr	r4, [r4, #0]
 800b1ae:	4421      	add	r1, r4
 800b1b0:	1854      	adds	r4, r2, r1
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	6011      	str	r1, [r2, #0]
 800b1b6:	d1dd      	bne.n	800b174 <_free_r+0x28>
 800b1b8:	681c      	ldr	r4, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	6053      	str	r3, [r2, #4]
 800b1be:	4421      	add	r1, r4
 800b1c0:	6011      	str	r1, [r2, #0]
 800b1c2:	e7d7      	b.n	800b174 <_free_r+0x28>
 800b1c4:	d902      	bls.n	800b1cc <_free_r+0x80>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	e7d3      	b.n	800b174 <_free_r+0x28>
 800b1cc:	6825      	ldr	r5, [r4, #0]
 800b1ce:	1961      	adds	r1, r4, r5
 800b1d0:	428b      	cmp	r3, r1
 800b1d2:	bf04      	itt	eq
 800b1d4:	6819      	ldreq	r1, [r3, #0]
 800b1d6:	685b      	ldreq	r3, [r3, #4]
 800b1d8:	6063      	str	r3, [r4, #4]
 800b1da:	bf04      	itt	eq
 800b1dc:	1949      	addeq	r1, r1, r5
 800b1de:	6021      	streq	r1, [r4, #0]
 800b1e0:	6054      	str	r4, [r2, #4]
 800b1e2:	e7c7      	b.n	800b174 <_free_r+0x28>
 800b1e4:	b003      	add	sp, #12
 800b1e6:	bd30      	pop	{r4, r5, pc}
 800b1e8:	200006ec 	.word	0x200006ec

0800b1ec <_malloc_r>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	1ccd      	adds	r5, r1, #3
 800b1f0:	f025 0503 	bic.w	r5, r5, #3
 800b1f4:	3508      	adds	r5, #8
 800b1f6:	2d0c      	cmp	r5, #12
 800b1f8:	bf38      	it	cc
 800b1fa:	250c      	movcc	r5, #12
 800b1fc:	2d00      	cmp	r5, #0
 800b1fe:	4606      	mov	r6, r0
 800b200:	db01      	blt.n	800b206 <_malloc_r+0x1a>
 800b202:	42a9      	cmp	r1, r5
 800b204:	d903      	bls.n	800b20e <_malloc_r+0x22>
 800b206:	230c      	movs	r3, #12
 800b208:	6033      	str	r3, [r6, #0]
 800b20a:	2000      	movs	r0, #0
 800b20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b20e:	f000 f8b1 	bl	800b374 <__malloc_lock>
 800b212:	4921      	ldr	r1, [pc, #132]	; (800b298 <_malloc_r+0xac>)
 800b214:	680a      	ldr	r2, [r1, #0]
 800b216:	4614      	mov	r4, r2
 800b218:	b99c      	cbnz	r4, 800b242 <_malloc_r+0x56>
 800b21a:	4f20      	ldr	r7, [pc, #128]	; (800b29c <_malloc_r+0xb0>)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	b923      	cbnz	r3, 800b22a <_malloc_r+0x3e>
 800b220:	4621      	mov	r1, r4
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f83c 	bl	800b2a0 <_sbrk_r>
 800b228:	6038      	str	r0, [r7, #0]
 800b22a:	4629      	mov	r1, r5
 800b22c:	4630      	mov	r0, r6
 800b22e:	f000 f837 	bl	800b2a0 <_sbrk_r>
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	d123      	bne.n	800b27e <_malloc_r+0x92>
 800b236:	230c      	movs	r3, #12
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	4630      	mov	r0, r6
 800b23c:	f000 f8a0 	bl	800b380 <__malloc_unlock>
 800b240:	e7e3      	b.n	800b20a <_malloc_r+0x1e>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	1b5b      	subs	r3, r3, r5
 800b246:	d417      	bmi.n	800b278 <_malloc_r+0x8c>
 800b248:	2b0b      	cmp	r3, #11
 800b24a:	d903      	bls.n	800b254 <_malloc_r+0x68>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	441c      	add	r4, r3
 800b250:	6025      	str	r5, [r4, #0]
 800b252:	e004      	b.n	800b25e <_malloc_r+0x72>
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	42a2      	cmp	r2, r4
 800b258:	bf0c      	ite	eq
 800b25a:	600b      	streq	r3, [r1, #0]
 800b25c:	6053      	strne	r3, [r2, #4]
 800b25e:	4630      	mov	r0, r6
 800b260:	f000 f88e 	bl	800b380 <__malloc_unlock>
 800b264:	f104 000b 	add.w	r0, r4, #11
 800b268:	1d23      	adds	r3, r4, #4
 800b26a:	f020 0007 	bic.w	r0, r0, #7
 800b26e:	1ac2      	subs	r2, r0, r3
 800b270:	d0cc      	beq.n	800b20c <_malloc_r+0x20>
 800b272:	1a1b      	subs	r3, r3, r0
 800b274:	50a3      	str	r3, [r4, r2]
 800b276:	e7c9      	b.n	800b20c <_malloc_r+0x20>
 800b278:	4622      	mov	r2, r4
 800b27a:	6864      	ldr	r4, [r4, #4]
 800b27c:	e7cc      	b.n	800b218 <_malloc_r+0x2c>
 800b27e:	1cc4      	adds	r4, r0, #3
 800b280:	f024 0403 	bic.w	r4, r4, #3
 800b284:	42a0      	cmp	r0, r4
 800b286:	d0e3      	beq.n	800b250 <_malloc_r+0x64>
 800b288:	1a21      	subs	r1, r4, r0
 800b28a:	4630      	mov	r0, r6
 800b28c:	f000 f808 	bl	800b2a0 <_sbrk_r>
 800b290:	3001      	adds	r0, #1
 800b292:	d1dd      	bne.n	800b250 <_malloc_r+0x64>
 800b294:	e7cf      	b.n	800b236 <_malloc_r+0x4a>
 800b296:	bf00      	nop
 800b298:	200006ec 	.word	0x200006ec
 800b29c:	200006f0 	.word	0x200006f0

0800b2a0 <_sbrk_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d06      	ldr	r5, [pc, #24]	; (800b2bc <_sbrk_r+0x1c>)
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	f7f5 feea 	bl	8001084 <_sbrk>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_sbrk_r+0x1a>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_sbrk_r+0x1a>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20002320 	.word	0x20002320

0800b2c0 <siprintf>:
 800b2c0:	b40e      	push	{r1, r2, r3}
 800b2c2:	b500      	push	{lr}
 800b2c4:	b09c      	sub	sp, #112	; 0x70
 800b2c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b2c8:	9002      	str	r0, [sp, #8]
 800b2ca:	9006      	str	r0, [sp, #24]
 800b2cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2d0:	4809      	ldr	r0, [pc, #36]	; (800b2f8 <siprintf+0x38>)
 800b2d2:	9107      	str	r1, [sp, #28]
 800b2d4:	9104      	str	r1, [sp, #16]
 800b2d6:	4909      	ldr	r1, [pc, #36]	; (800b2fc <siprintf+0x3c>)
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	9105      	str	r1, [sp, #20]
 800b2de:	6800      	ldr	r0, [r0, #0]
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	a902      	add	r1, sp, #8
 800b2e4:	f000 f8ae 	bl	800b444 <_svfiprintf_r>
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	b01c      	add	sp, #112	; 0x70
 800b2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f4:	b003      	add	sp, #12
 800b2f6:	4770      	bx	lr
 800b2f8:	2000043c 	.word	0x2000043c
 800b2fc:	ffff0208 	.word	0xffff0208

0800b300 <_vsniprintf_r>:
 800b300:	b530      	push	{r4, r5, lr}
 800b302:	1e14      	subs	r4, r2, #0
 800b304:	4605      	mov	r5, r0
 800b306:	b09b      	sub	sp, #108	; 0x6c
 800b308:	4618      	mov	r0, r3
 800b30a:	da05      	bge.n	800b318 <_vsniprintf_r+0x18>
 800b30c:	238b      	movs	r3, #139	; 0x8b
 800b30e:	602b      	str	r3, [r5, #0]
 800b310:	f04f 30ff 	mov.w	r0, #4294967295
 800b314:	b01b      	add	sp, #108	; 0x6c
 800b316:	bd30      	pop	{r4, r5, pc}
 800b318:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b31c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b320:	bf14      	ite	ne
 800b322:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b326:	4623      	moveq	r3, r4
 800b328:	9302      	str	r3, [sp, #8]
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	9104      	str	r1, [sp, #16]
 800b334:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b338:	4602      	mov	r2, r0
 800b33a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b33c:	4669      	mov	r1, sp
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f880 	bl	800b444 <_svfiprintf_r>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	bfbc      	itt	lt
 800b348:	238b      	movlt	r3, #139	; 0x8b
 800b34a:	602b      	strlt	r3, [r5, #0]
 800b34c:	2c00      	cmp	r4, #0
 800b34e:	d0e1      	beq.n	800b314 <_vsniprintf_r+0x14>
 800b350:	9b00      	ldr	r3, [sp, #0]
 800b352:	2200      	movs	r2, #0
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	e7dd      	b.n	800b314 <_vsniprintf_r+0x14>

0800b358 <vsniprintf>:
 800b358:	b507      	push	{r0, r1, r2, lr}
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	460a      	mov	r2, r1
 800b360:	4601      	mov	r1, r0
 800b362:	4803      	ldr	r0, [pc, #12]	; (800b370 <vsniprintf+0x18>)
 800b364:	6800      	ldr	r0, [r0, #0]
 800b366:	f7ff ffcb 	bl	800b300 <_vsniprintf_r>
 800b36a:	b003      	add	sp, #12
 800b36c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b370:	2000043c 	.word	0x2000043c

0800b374 <__malloc_lock>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__malloc_lock+0x8>)
 800b376:	f000 baf9 	b.w	800b96c <__retarget_lock_acquire_recursive>
 800b37a:	bf00      	nop
 800b37c:	20002328 	.word	0x20002328

0800b380 <__malloc_unlock>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__malloc_unlock+0x8>)
 800b382:	f000 baf4 	b.w	800b96e <__retarget_lock_release_recursive>
 800b386:	bf00      	nop
 800b388:	20002328 	.word	0x20002328

0800b38c <__ssputs_r>:
 800b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	688e      	ldr	r6, [r1, #8]
 800b392:	429e      	cmp	r6, r3
 800b394:	4682      	mov	sl, r0
 800b396:	460c      	mov	r4, r1
 800b398:	4690      	mov	r8, r2
 800b39a:	461f      	mov	r7, r3
 800b39c:	d838      	bhi.n	800b410 <__ssputs_r+0x84>
 800b39e:	898a      	ldrh	r2, [r1, #12]
 800b3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a4:	d032      	beq.n	800b40c <__ssputs_r+0x80>
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	6909      	ldr	r1, [r1, #16]
 800b3aa:	eba5 0901 	sub.w	r9, r5, r1
 800b3ae:	6965      	ldr	r5, [r4, #20]
 800b3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	444b      	add	r3, r9
 800b3bc:	106d      	asrs	r5, r5, #1
 800b3be:	429d      	cmp	r5, r3
 800b3c0:	bf38      	it	cc
 800b3c2:	461d      	movcc	r5, r3
 800b3c4:	0553      	lsls	r3, r2, #21
 800b3c6:	d531      	bpl.n	800b42c <__ssputs_r+0xa0>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7ff ff0f 	bl	800b1ec <_malloc_r>
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	b950      	cbnz	r0, 800b3e8 <__ssputs_r+0x5c>
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	f8ca 3000 	str.w	r3, [sl]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e8:	6921      	ldr	r1, [r4, #16]
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	f7ff fe98 	bl	800b120 <memcpy>
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fa:	81a3      	strh	r3, [r4, #12]
 800b3fc:	6126      	str	r6, [r4, #16]
 800b3fe:	6165      	str	r5, [r4, #20]
 800b400:	444e      	add	r6, r9
 800b402:	eba5 0509 	sub.w	r5, r5, r9
 800b406:	6026      	str	r6, [r4, #0]
 800b408:	60a5      	str	r5, [r4, #8]
 800b40a:	463e      	mov	r6, r7
 800b40c:	42be      	cmp	r6, r7
 800b40e:	d900      	bls.n	800b412 <__ssputs_r+0x86>
 800b410:	463e      	mov	r6, r7
 800b412:	4632      	mov	r2, r6
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	4641      	mov	r1, r8
 800b418:	f000 faaa 	bl	800b970 <memmove>
 800b41c:	68a3      	ldr	r3, [r4, #8]
 800b41e:	6822      	ldr	r2, [r4, #0]
 800b420:	1b9b      	subs	r3, r3, r6
 800b422:	4432      	add	r2, r6
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	2000      	movs	r0, #0
 800b42a:	e7db      	b.n	800b3e4 <__ssputs_r+0x58>
 800b42c:	462a      	mov	r2, r5
 800b42e:	f000 fab9 	bl	800b9a4 <_realloc_r>
 800b432:	4606      	mov	r6, r0
 800b434:	2800      	cmp	r0, #0
 800b436:	d1e1      	bne.n	800b3fc <__ssputs_r+0x70>
 800b438:	6921      	ldr	r1, [r4, #16]
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7ff fe86 	bl	800b14c <_free_r>
 800b440:	e7c7      	b.n	800b3d2 <__ssputs_r+0x46>
	...

0800b444 <_svfiprintf_r>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	4698      	mov	r8, r3
 800b44a:	898b      	ldrh	r3, [r1, #12]
 800b44c:	061b      	lsls	r3, r3, #24
 800b44e:	b09d      	sub	sp, #116	; 0x74
 800b450:	4607      	mov	r7, r0
 800b452:	460d      	mov	r5, r1
 800b454:	4614      	mov	r4, r2
 800b456:	d50e      	bpl.n	800b476 <_svfiprintf_r+0x32>
 800b458:	690b      	ldr	r3, [r1, #16]
 800b45a:	b963      	cbnz	r3, 800b476 <_svfiprintf_r+0x32>
 800b45c:	2140      	movs	r1, #64	; 0x40
 800b45e:	f7ff fec5 	bl	800b1ec <_malloc_r>
 800b462:	6028      	str	r0, [r5, #0]
 800b464:	6128      	str	r0, [r5, #16]
 800b466:	b920      	cbnz	r0, 800b472 <_svfiprintf_r+0x2e>
 800b468:	230c      	movs	r3, #12
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e0d1      	b.n	800b616 <_svfiprintf_r+0x1d2>
 800b472:	2340      	movs	r3, #64	; 0x40
 800b474:	616b      	str	r3, [r5, #20]
 800b476:	2300      	movs	r3, #0
 800b478:	9309      	str	r3, [sp, #36]	; 0x24
 800b47a:	2320      	movs	r3, #32
 800b47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b480:	f8cd 800c 	str.w	r8, [sp, #12]
 800b484:	2330      	movs	r3, #48	; 0x30
 800b486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b630 <_svfiprintf_r+0x1ec>
 800b48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48e:	f04f 0901 	mov.w	r9, #1
 800b492:	4623      	mov	r3, r4
 800b494:	469a      	mov	sl, r3
 800b496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b49a:	b10a      	cbz	r2, 800b4a0 <_svfiprintf_r+0x5c>
 800b49c:	2a25      	cmp	r2, #37	; 0x25
 800b49e:	d1f9      	bne.n	800b494 <_svfiprintf_r+0x50>
 800b4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a4:	d00b      	beq.n	800b4be <_svfiprintf_r+0x7a>
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff ff6d 	bl	800b38c <__ssputs_r>
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	f000 80aa 	beq.w	800b60c <_svfiprintf_r+0x1c8>
 800b4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ba:	445a      	add	r2, fp
 800b4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4be:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80a2 	beq.w	800b60c <_svfiprintf_r+0x1c8>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d2:	f10a 0a01 	add.w	sl, sl, #1
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	9307      	str	r3, [sp, #28]
 800b4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4de:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e0:	4654      	mov	r4, sl
 800b4e2:	2205      	movs	r2, #5
 800b4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e8:	4851      	ldr	r0, [pc, #324]	; (800b630 <_svfiprintf_r+0x1ec>)
 800b4ea:	f7f4 fe81 	bl	80001f0 <memchr>
 800b4ee:	9a04      	ldr	r2, [sp, #16]
 800b4f0:	b9d8      	cbnz	r0, 800b52a <_svfiprintf_r+0xe6>
 800b4f2:	06d0      	lsls	r0, r2, #27
 800b4f4:	bf44      	itt	mi
 800b4f6:	2320      	movmi	r3, #32
 800b4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fc:	0711      	lsls	r1, r2, #28
 800b4fe:	bf44      	itt	mi
 800b500:	232b      	movmi	r3, #43	; 0x2b
 800b502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b506:	f89a 3000 	ldrb.w	r3, [sl]
 800b50a:	2b2a      	cmp	r3, #42	; 0x2a
 800b50c:	d015      	beq.n	800b53a <_svfiprintf_r+0xf6>
 800b50e:	9a07      	ldr	r2, [sp, #28]
 800b510:	4654      	mov	r4, sl
 800b512:	2000      	movs	r0, #0
 800b514:	f04f 0c0a 	mov.w	ip, #10
 800b518:	4621      	mov	r1, r4
 800b51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51e:	3b30      	subs	r3, #48	; 0x30
 800b520:	2b09      	cmp	r3, #9
 800b522:	d94e      	bls.n	800b5c2 <_svfiprintf_r+0x17e>
 800b524:	b1b0      	cbz	r0, 800b554 <_svfiprintf_r+0x110>
 800b526:	9207      	str	r2, [sp, #28]
 800b528:	e014      	b.n	800b554 <_svfiprintf_r+0x110>
 800b52a:	eba0 0308 	sub.w	r3, r0, r8
 800b52e:	fa09 f303 	lsl.w	r3, r9, r3
 800b532:	4313      	orrs	r3, r2
 800b534:	9304      	str	r3, [sp, #16]
 800b536:	46a2      	mov	sl, r4
 800b538:	e7d2      	b.n	800b4e0 <_svfiprintf_r+0x9c>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	1d19      	adds	r1, r3, #4
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	9103      	str	r1, [sp, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	bfbb      	ittet	lt
 800b546:	425b      	neglt	r3, r3
 800b548:	f042 0202 	orrlt.w	r2, r2, #2
 800b54c:	9307      	strge	r3, [sp, #28]
 800b54e:	9307      	strlt	r3, [sp, #28]
 800b550:	bfb8      	it	lt
 800b552:	9204      	strlt	r2, [sp, #16]
 800b554:	7823      	ldrb	r3, [r4, #0]
 800b556:	2b2e      	cmp	r3, #46	; 0x2e
 800b558:	d10c      	bne.n	800b574 <_svfiprintf_r+0x130>
 800b55a:	7863      	ldrb	r3, [r4, #1]
 800b55c:	2b2a      	cmp	r3, #42	; 0x2a
 800b55e:	d135      	bne.n	800b5cc <_svfiprintf_r+0x188>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	1d1a      	adds	r2, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	9203      	str	r2, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfb8      	it	lt
 800b56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b570:	3402      	adds	r4, #2
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b640 <_svfiprintf_r+0x1fc>
 800b578:	7821      	ldrb	r1, [r4, #0]
 800b57a:	2203      	movs	r2, #3
 800b57c:	4650      	mov	r0, sl
 800b57e:	f7f4 fe37 	bl	80001f0 <memchr>
 800b582:	b140      	cbz	r0, 800b596 <_svfiprintf_r+0x152>
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	eba0 000a 	sub.w	r0, r0, sl
 800b58a:	fa03 f000 	lsl.w	r0, r3, r0
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	4303      	orrs	r3, r0
 800b592:	3401      	adds	r4, #1
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59a:	4826      	ldr	r0, [pc, #152]	; (800b634 <_svfiprintf_r+0x1f0>)
 800b59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a0:	2206      	movs	r2, #6
 800b5a2:	f7f4 fe25 	bl	80001f0 <memchr>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d038      	beq.n	800b61c <_svfiprintf_r+0x1d8>
 800b5aa:	4b23      	ldr	r3, [pc, #140]	; (800b638 <_svfiprintf_r+0x1f4>)
 800b5ac:	bb1b      	cbnz	r3, 800b5f6 <_svfiprintf_r+0x1b2>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	f023 0307 	bic.w	r3, r3, #7
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	9303      	str	r3, [sp, #12]
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	4433      	add	r3, r6
 800b5be:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c0:	e767      	b.n	800b492 <_svfiprintf_r+0x4e>
 800b5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	2001      	movs	r0, #1
 800b5ca:	e7a5      	b.n	800b518 <_svfiprintf_r+0xd4>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	3401      	adds	r4, #1
 800b5d0:	9305      	str	r3, [sp, #20]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	f04f 0c0a 	mov.w	ip, #10
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5de:	3a30      	subs	r2, #48	; 0x30
 800b5e0:	2a09      	cmp	r2, #9
 800b5e2:	d903      	bls.n	800b5ec <_svfiprintf_r+0x1a8>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0c5      	beq.n	800b574 <_svfiprintf_r+0x130>
 800b5e8:	9105      	str	r1, [sp, #20]
 800b5ea:	e7c3      	b.n	800b574 <_svfiprintf_r+0x130>
 800b5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7f0      	b.n	800b5d8 <_svfiprintf_r+0x194>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <_svfiprintf_r+0x1f8>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4638      	mov	r0, r7
 800b602:	f3af 8000 	nop.w
 800b606:	1c42      	adds	r2, r0, #1
 800b608:	4606      	mov	r6, r0
 800b60a:	d1d6      	bne.n	800b5ba <_svfiprintf_r+0x176>
 800b60c:	89ab      	ldrh	r3, [r5, #12]
 800b60e:	065b      	lsls	r3, r3, #25
 800b610:	f53f af2c 	bmi.w	800b46c <_svfiprintf_r+0x28>
 800b614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b616:	b01d      	add	sp, #116	; 0x74
 800b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	462a      	mov	r2, r5
 800b622:	4b06      	ldr	r3, [pc, #24]	; (800b63c <_svfiprintf_r+0x1f8>)
 800b624:	a904      	add	r1, sp, #16
 800b626:	4638      	mov	r0, r7
 800b628:	f000 f87a 	bl	800b720 <_printf_i>
 800b62c:	e7eb      	b.n	800b606 <_svfiprintf_r+0x1c2>
 800b62e:	bf00      	nop
 800b630:	0800bb04 	.word	0x0800bb04
 800b634:	0800bb0e 	.word	0x0800bb0e
 800b638:	00000000 	.word	0x00000000
 800b63c:	0800b38d 	.word	0x0800b38d
 800b640:	0800bb0a 	.word	0x0800bb0a

0800b644 <_printf_common>:
 800b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b648:	4616      	mov	r6, r2
 800b64a:	4699      	mov	r9, r3
 800b64c:	688a      	ldr	r2, [r1, #8]
 800b64e:	690b      	ldr	r3, [r1, #16]
 800b650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b654:	4293      	cmp	r3, r2
 800b656:	bfb8      	it	lt
 800b658:	4613      	movlt	r3, r2
 800b65a:	6033      	str	r3, [r6, #0]
 800b65c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b660:	4607      	mov	r7, r0
 800b662:	460c      	mov	r4, r1
 800b664:	b10a      	cbz	r2, 800b66a <_printf_common+0x26>
 800b666:	3301      	adds	r3, #1
 800b668:	6033      	str	r3, [r6, #0]
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	0699      	lsls	r1, r3, #26
 800b66e:	bf42      	ittt	mi
 800b670:	6833      	ldrmi	r3, [r6, #0]
 800b672:	3302      	addmi	r3, #2
 800b674:	6033      	strmi	r3, [r6, #0]
 800b676:	6825      	ldr	r5, [r4, #0]
 800b678:	f015 0506 	ands.w	r5, r5, #6
 800b67c:	d106      	bne.n	800b68c <_printf_common+0x48>
 800b67e:	f104 0a19 	add.w	sl, r4, #25
 800b682:	68e3      	ldr	r3, [r4, #12]
 800b684:	6832      	ldr	r2, [r6, #0]
 800b686:	1a9b      	subs	r3, r3, r2
 800b688:	42ab      	cmp	r3, r5
 800b68a:	dc26      	bgt.n	800b6da <_printf_common+0x96>
 800b68c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b690:	1e13      	subs	r3, r2, #0
 800b692:	6822      	ldr	r2, [r4, #0]
 800b694:	bf18      	it	ne
 800b696:	2301      	movne	r3, #1
 800b698:	0692      	lsls	r2, r2, #26
 800b69a:	d42b      	bmi.n	800b6f4 <_printf_common+0xb0>
 800b69c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	47c0      	blx	r8
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d01e      	beq.n	800b6e8 <_printf_common+0xa4>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	68e5      	ldr	r5, [r4, #12]
 800b6ae:	6832      	ldr	r2, [r6, #0]
 800b6b0:	f003 0306 	and.w	r3, r3, #6
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	bf08      	it	eq
 800b6b8:	1aad      	subeq	r5, r5, r2
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	6922      	ldr	r2, [r4, #16]
 800b6be:	bf0c      	ite	eq
 800b6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6c4:	2500      	movne	r5, #0
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	bfc4      	itt	gt
 800b6ca:	1a9b      	subgt	r3, r3, r2
 800b6cc:	18ed      	addgt	r5, r5, r3
 800b6ce:	2600      	movs	r6, #0
 800b6d0:	341a      	adds	r4, #26
 800b6d2:	42b5      	cmp	r5, r6
 800b6d4:	d11a      	bne.n	800b70c <_printf_common+0xc8>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e008      	b.n	800b6ec <_printf_common+0xa8>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4652      	mov	r2, sl
 800b6de:	4649      	mov	r1, r9
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	47c0      	blx	r8
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d103      	bne.n	800b6f0 <_printf_common+0xac>
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	e7c6      	b.n	800b682 <_printf_common+0x3e>
 800b6f4:	18e1      	adds	r1, r4, r3
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	2030      	movs	r0, #48	; 0x30
 800b6fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6fe:	4422      	add	r2, r4
 800b700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b708:	3302      	adds	r3, #2
 800b70a:	e7c7      	b.n	800b69c <_printf_common+0x58>
 800b70c:	2301      	movs	r3, #1
 800b70e:	4622      	mov	r2, r4
 800b710:	4649      	mov	r1, r9
 800b712:	4638      	mov	r0, r7
 800b714:	47c0      	blx	r8
 800b716:	3001      	adds	r0, #1
 800b718:	d0e6      	beq.n	800b6e8 <_printf_common+0xa4>
 800b71a:	3601      	adds	r6, #1
 800b71c:	e7d9      	b.n	800b6d2 <_printf_common+0x8e>
	...

0800b720 <_printf_i>:
 800b720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b724:	460c      	mov	r4, r1
 800b726:	4691      	mov	r9, r2
 800b728:	7e27      	ldrb	r7, [r4, #24]
 800b72a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b72c:	2f78      	cmp	r7, #120	; 0x78
 800b72e:	4680      	mov	r8, r0
 800b730:	469a      	mov	sl, r3
 800b732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b736:	d807      	bhi.n	800b748 <_printf_i+0x28>
 800b738:	2f62      	cmp	r7, #98	; 0x62
 800b73a:	d80a      	bhi.n	800b752 <_printf_i+0x32>
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	f000 80d8 	beq.w	800b8f2 <_printf_i+0x1d2>
 800b742:	2f58      	cmp	r7, #88	; 0x58
 800b744:	f000 80a3 	beq.w	800b88e <_printf_i+0x16e>
 800b748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b74c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b750:	e03a      	b.n	800b7c8 <_printf_i+0xa8>
 800b752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b756:	2b15      	cmp	r3, #21
 800b758:	d8f6      	bhi.n	800b748 <_printf_i+0x28>
 800b75a:	a001      	add	r0, pc, #4	; (adr r0, 800b760 <_printf_i+0x40>)
 800b75c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b760:	0800b7b9 	.word	0x0800b7b9
 800b764:	0800b7cd 	.word	0x0800b7cd
 800b768:	0800b749 	.word	0x0800b749
 800b76c:	0800b749 	.word	0x0800b749
 800b770:	0800b749 	.word	0x0800b749
 800b774:	0800b749 	.word	0x0800b749
 800b778:	0800b7cd 	.word	0x0800b7cd
 800b77c:	0800b749 	.word	0x0800b749
 800b780:	0800b749 	.word	0x0800b749
 800b784:	0800b749 	.word	0x0800b749
 800b788:	0800b749 	.word	0x0800b749
 800b78c:	0800b8d9 	.word	0x0800b8d9
 800b790:	0800b7fd 	.word	0x0800b7fd
 800b794:	0800b8bb 	.word	0x0800b8bb
 800b798:	0800b749 	.word	0x0800b749
 800b79c:	0800b749 	.word	0x0800b749
 800b7a0:	0800b8fb 	.word	0x0800b8fb
 800b7a4:	0800b749 	.word	0x0800b749
 800b7a8:	0800b7fd 	.word	0x0800b7fd
 800b7ac:	0800b749 	.word	0x0800b749
 800b7b0:	0800b749 	.word	0x0800b749
 800b7b4:	0800b8c3 	.word	0x0800b8c3
 800b7b8:	680b      	ldr	r3, [r1, #0]
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	600a      	str	r2, [r1, #0]
 800b7c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e0a3      	b.n	800b914 <_printf_i+0x1f4>
 800b7cc:	6825      	ldr	r5, [r4, #0]
 800b7ce:	6808      	ldr	r0, [r1, #0]
 800b7d0:	062e      	lsls	r6, r5, #24
 800b7d2:	f100 0304 	add.w	r3, r0, #4
 800b7d6:	d50a      	bpl.n	800b7ee <_printf_i+0xce>
 800b7d8:	6805      	ldr	r5, [r0, #0]
 800b7da:	600b      	str	r3, [r1, #0]
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	da03      	bge.n	800b7e8 <_printf_i+0xc8>
 800b7e0:	232d      	movs	r3, #45	; 0x2d
 800b7e2:	426d      	negs	r5, r5
 800b7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e8:	485e      	ldr	r0, [pc, #376]	; (800b964 <_printf_i+0x244>)
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	e019      	b.n	800b822 <_printf_i+0x102>
 800b7ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7f2:	6805      	ldr	r5, [r0, #0]
 800b7f4:	600b      	str	r3, [r1, #0]
 800b7f6:	bf18      	it	ne
 800b7f8:	b22d      	sxthne	r5, r5
 800b7fa:	e7ef      	b.n	800b7dc <_printf_i+0xbc>
 800b7fc:	680b      	ldr	r3, [r1, #0]
 800b7fe:	6825      	ldr	r5, [r4, #0]
 800b800:	1d18      	adds	r0, r3, #4
 800b802:	6008      	str	r0, [r1, #0]
 800b804:	0628      	lsls	r0, r5, #24
 800b806:	d501      	bpl.n	800b80c <_printf_i+0xec>
 800b808:	681d      	ldr	r5, [r3, #0]
 800b80a:	e002      	b.n	800b812 <_printf_i+0xf2>
 800b80c:	0669      	lsls	r1, r5, #25
 800b80e:	d5fb      	bpl.n	800b808 <_printf_i+0xe8>
 800b810:	881d      	ldrh	r5, [r3, #0]
 800b812:	4854      	ldr	r0, [pc, #336]	; (800b964 <_printf_i+0x244>)
 800b814:	2f6f      	cmp	r7, #111	; 0x6f
 800b816:	bf0c      	ite	eq
 800b818:	2308      	moveq	r3, #8
 800b81a:	230a      	movne	r3, #10
 800b81c:	2100      	movs	r1, #0
 800b81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b822:	6866      	ldr	r6, [r4, #4]
 800b824:	60a6      	str	r6, [r4, #8]
 800b826:	2e00      	cmp	r6, #0
 800b828:	bfa2      	ittt	ge
 800b82a:	6821      	ldrge	r1, [r4, #0]
 800b82c:	f021 0104 	bicge.w	r1, r1, #4
 800b830:	6021      	strge	r1, [r4, #0]
 800b832:	b90d      	cbnz	r5, 800b838 <_printf_i+0x118>
 800b834:	2e00      	cmp	r6, #0
 800b836:	d04d      	beq.n	800b8d4 <_printf_i+0x1b4>
 800b838:	4616      	mov	r6, r2
 800b83a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b83e:	fb03 5711 	mls	r7, r3, r1, r5
 800b842:	5dc7      	ldrb	r7, [r0, r7]
 800b844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b848:	462f      	mov	r7, r5
 800b84a:	42bb      	cmp	r3, r7
 800b84c:	460d      	mov	r5, r1
 800b84e:	d9f4      	bls.n	800b83a <_printf_i+0x11a>
 800b850:	2b08      	cmp	r3, #8
 800b852:	d10b      	bne.n	800b86c <_printf_i+0x14c>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	07df      	lsls	r7, r3, #31
 800b858:	d508      	bpl.n	800b86c <_printf_i+0x14c>
 800b85a:	6923      	ldr	r3, [r4, #16]
 800b85c:	6861      	ldr	r1, [r4, #4]
 800b85e:	4299      	cmp	r1, r3
 800b860:	bfde      	ittt	le
 800b862:	2330      	movle	r3, #48	; 0x30
 800b864:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b86c:	1b92      	subs	r2, r2, r6
 800b86e:	6122      	str	r2, [r4, #16]
 800b870:	f8cd a000 	str.w	sl, [sp]
 800b874:	464b      	mov	r3, r9
 800b876:	aa03      	add	r2, sp, #12
 800b878:	4621      	mov	r1, r4
 800b87a:	4640      	mov	r0, r8
 800b87c:	f7ff fee2 	bl	800b644 <_printf_common>
 800b880:	3001      	adds	r0, #1
 800b882:	d14c      	bne.n	800b91e <_printf_i+0x1fe>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	b004      	add	sp, #16
 800b88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88e:	4835      	ldr	r0, [pc, #212]	; (800b964 <_printf_i+0x244>)
 800b890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	680e      	ldr	r6, [r1, #0]
 800b898:	061f      	lsls	r7, r3, #24
 800b89a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b89e:	600e      	str	r6, [r1, #0]
 800b8a0:	d514      	bpl.n	800b8cc <_printf_i+0x1ac>
 800b8a2:	07d9      	lsls	r1, r3, #31
 800b8a4:	bf44      	itt	mi
 800b8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800b8aa:	6023      	strmi	r3, [r4, #0]
 800b8ac:	b91d      	cbnz	r5, 800b8b6 <_printf_i+0x196>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	f023 0320 	bic.w	r3, r3, #32
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	2310      	movs	r3, #16
 800b8b8:	e7b0      	b.n	800b81c <_printf_i+0xfc>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	f043 0320 	orr.w	r3, r3, #32
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	2378      	movs	r3, #120	; 0x78
 800b8c4:	4828      	ldr	r0, [pc, #160]	; (800b968 <_printf_i+0x248>)
 800b8c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ca:	e7e3      	b.n	800b894 <_printf_i+0x174>
 800b8cc:	065e      	lsls	r6, r3, #25
 800b8ce:	bf48      	it	mi
 800b8d0:	b2ad      	uxthmi	r5, r5
 800b8d2:	e7e6      	b.n	800b8a2 <_printf_i+0x182>
 800b8d4:	4616      	mov	r6, r2
 800b8d6:	e7bb      	b.n	800b850 <_printf_i+0x130>
 800b8d8:	680b      	ldr	r3, [r1, #0]
 800b8da:	6826      	ldr	r6, [r4, #0]
 800b8dc:	6960      	ldr	r0, [r4, #20]
 800b8de:	1d1d      	adds	r5, r3, #4
 800b8e0:	600d      	str	r5, [r1, #0]
 800b8e2:	0635      	lsls	r5, r6, #24
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	d501      	bpl.n	800b8ec <_printf_i+0x1cc>
 800b8e8:	6018      	str	r0, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <_printf_i+0x1d2>
 800b8ec:	0671      	lsls	r1, r6, #25
 800b8ee:	d5fb      	bpl.n	800b8e8 <_printf_i+0x1c8>
 800b8f0:	8018      	strh	r0, [r3, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6123      	str	r3, [r4, #16]
 800b8f6:	4616      	mov	r6, r2
 800b8f8:	e7ba      	b.n	800b870 <_printf_i+0x150>
 800b8fa:	680b      	ldr	r3, [r1, #0]
 800b8fc:	1d1a      	adds	r2, r3, #4
 800b8fe:	600a      	str	r2, [r1, #0]
 800b900:	681e      	ldr	r6, [r3, #0]
 800b902:	6862      	ldr	r2, [r4, #4]
 800b904:	2100      	movs	r1, #0
 800b906:	4630      	mov	r0, r6
 800b908:	f7f4 fc72 	bl	80001f0 <memchr>
 800b90c:	b108      	cbz	r0, 800b912 <_printf_i+0x1f2>
 800b90e:	1b80      	subs	r0, r0, r6
 800b910:	6060      	str	r0, [r4, #4]
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	6123      	str	r3, [r4, #16]
 800b916:	2300      	movs	r3, #0
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	e7a8      	b.n	800b870 <_printf_i+0x150>
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	4632      	mov	r2, r6
 800b922:	4649      	mov	r1, r9
 800b924:	4640      	mov	r0, r8
 800b926:	47d0      	blx	sl
 800b928:	3001      	adds	r0, #1
 800b92a:	d0ab      	beq.n	800b884 <_printf_i+0x164>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	079b      	lsls	r3, r3, #30
 800b930:	d413      	bmi.n	800b95a <_printf_i+0x23a>
 800b932:	68e0      	ldr	r0, [r4, #12]
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	4298      	cmp	r0, r3
 800b938:	bfb8      	it	lt
 800b93a:	4618      	movlt	r0, r3
 800b93c:	e7a4      	b.n	800b888 <_printf_i+0x168>
 800b93e:	2301      	movs	r3, #1
 800b940:	4632      	mov	r2, r6
 800b942:	4649      	mov	r1, r9
 800b944:	4640      	mov	r0, r8
 800b946:	47d0      	blx	sl
 800b948:	3001      	adds	r0, #1
 800b94a:	d09b      	beq.n	800b884 <_printf_i+0x164>
 800b94c:	3501      	adds	r5, #1
 800b94e:	68e3      	ldr	r3, [r4, #12]
 800b950:	9903      	ldr	r1, [sp, #12]
 800b952:	1a5b      	subs	r3, r3, r1
 800b954:	42ab      	cmp	r3, r5
 800b956:	dcf2      	bgt.n	800b93e <_printf_i+0x21e>
 800b958:	e7eb      	b.n	800b932 <_printf_i+0x212>
 800b95a:	2500      	movs	r5, #0
 800b95c:	f104 0619 	add.w	r6, r4, #25
 800b960:	e7f5      	b.n	800b94e <_printf_i+0x22e>
 800b962:	bf00      	nop
 800b964:	0800bb15 	.word	0x0800bb15
 800b968:	0800bb26 	.word	0x0800bb26

0800b96c <__retarget_lock_acquire_recursive>:
 800b96c:	4770      	bx	lr

0800b96e <__retarget_lock_release_recursive>:
 800b96e:	4770      	bx	lr

0800b970 <memmove>:
 800b970:	4288      	cmp	r0, r1
 800b972:	b510      	push	{r4, lr}
 800b974:	eb01 0402 	add.w	r4, r1, r2
 800b978:	d902      	bls.n	800b980 <memmove+0x10>
 800b97a:	4284      	cmp	r4, r0
 800b97c:	4623      	mov	r3, r4
 800b97e:	d807      	bhi.n	800b990 <memmove+0x20>
 800b980:	1e43      	subs	r3, r0, #1
 800b982:	42a1      	cmp	r1, r4
 800b984:	d008      	beq.n	800b998 <memmove+0x28>
 800b986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b98a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b98e:	e7f8      	b.n	800b982 <memmove+0x12>
 800b990:	4402      	add	r2, r0
 800b992:	4601      	mov	r1, r0
 800b994:	428a      	cmp	r2, r1
 800b996:	d100      	bne.n	800b99a <memmove+0x2a>
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b99e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9a2:	e7f7      	b.n	800b994 <memmove+0x24>

0800b9a4 <_realloc_r>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	460e      	mov	r6, r1
 800b9ac:	b921      	cbnz	r1, 800b9b8 <_realloc_r+0x14>
 800b9ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	f7ff bc1a 	b.w	800b1ec <_malloc_r>
 800b9b8:	b922      	cbnz	r2, 800b9c4 <_realloc_r+0x20>
 800b9ba:	f7ff fbc7 	bl	800b14c <_free_r>
 800b9be:	4625      	mov	r5, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c4:	f000 f814 	bl	800b9f0 <_malloc_usable_size_r>
 800b9c8:	42a0      	cmp	r0, r4
 800b9ca:	d20f      	bcs.n	800b9ec <_realloc_r+0x48>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f7ff fc0c 	bl	800b1ec <_malloc_r>
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d0f2      	beq.n	800b9c0 <_realloc_r+0x1c>
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4622      	mov	r2, r4
 800b9de:	f7ff fb9f 	bl	800b120 <memcpy>
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	f7ff fbb1 	bl	800b14c <_free_r>
 800b9ea:	e7e9      	b.n	800b9c0 <_realloc_r+0x1c>
 800b9ec:	4635      	mov	r5, r6
 800b9ee:	e7e7      	b.n	800b9c0 <_realloc_r+0x1c>

0800b9f0 <_malloc_usable_size_r>:
 800b9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f4:	1f18      	subs	r0, r3, #4
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfbc      	itt	lt
 800b9fa:	580b      	ldrlt	r3, [r1, r0]
 800b9fc:	18c0      	addlt	r0, r0, r3
 800b9fe:	4770      	bx	lr

0800ba00 <_init>:
 800ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba02:	bf00      	nop
 800ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba06:	bc08      	pop	{r3}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	4770      	bx	lr

0800ba0c <_fini>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	bf00      	nop
 800ba10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba12:	bc08      	pop	{r3}
 800ba14:	469e      	mov	lr, r3
 800ba16:	4770      	bx	lr
