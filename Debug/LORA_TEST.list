
LORA_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c8  0800d0c8  000204bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d0  0800d0d0  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0800d0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e90  200004bc  0800d594  000204bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000234c  0800d594  0002234c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002be38  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c67  00000000  00000000  0004c324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00051f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b48  00000000  00000000  00053ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e608  00000000  00000000  000557f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000246ae  00000000  00000000  00073df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f758  00000000  00000000  000984a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ef8  00000000  00000000  00137c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004bc 	.word	0x200004bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf60 	.word	0x0800cf60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c0 	.word	0x200004c0
 80001dc:	0800cf60 	.word	0x0800cf60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2uiz>:
 8000608:	004a      	lsls	r2, r1, #1
 800060a:	d211      	bcs.n	8000630 <__aeabi_d2uiz+0x28>
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d211      	bcs.n	8000636 <__aeabi_d2uiz+0x2e>
 8000612:	d50d      	bpl.n	8000630 <__aeabi_d2uiz+0x28>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d40e      	bmi.n	800063c <__aeabi_d2uiz+0x34>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	fa23 f002 	lsr.w	r0, r3, r2
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d102      	bne.n	8000642 <__aeabi_d2uiz+0x3a>
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <digitalToggle>:
{
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
}

static void __inline__ digitalToggle(PORT_IO port_map)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	463b      	mov	r3, r7
 8000948:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_GPIO_TogglePin(port_map.port, port_map.pin);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fed7 	bl	8003706 <HAL_GPIO_TogglePin>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <ftoa>:
	sprintf(buff, "%02X%02X%02X%02X%02X%02X", uid.b[11], uid.b[10] + uid.b[2], uid.b[9], uid.b[8] + uid.b[0], uid.b[7], uid.b[6]);
	return buff;
}

char* ftoa(float f, char * buf, int precision)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	ed87 0a03 	vstr	s0, [r7, #12]
 800096a:	60b8      	str	r0, [r7, #8]
 800096c:	6079      	str	r1, [r7, #4]
	char * ptr = buf;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;
	if (precision > MAX_PRECISION)		// check precision bounds
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b04      	cmp	r3, #4
 800097a:	dd01      	ble.n	8000980 <ftoa+0x20>
		precision = MAX_PRECISION;
 800097c:	2304      	movs	r3, #4
 800097e:	607b      	str	r3, [r7, #4]
	if (f < 0) {		// sign stuff
 8000980:	edd7 7a03 	vldr	s15, [r7, #12]
 8000984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098c:	d50a      	bpl.n	80009a4 <ftoa+0x44>
		f = -f;
 800098e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000992:	eef1 7a67 	vneg.f32	s15, s15
 8000996:	edc7 7a03 	vstr	s15, [r7, #12]
		*ptr++ = '-';
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	627a      	str	r2, [r7, #36]	; 0x24
 80009a0:	222d      	movs	r2, #45	; 0x2d
 80009a2:	701a      	strb	r2, [r3, #0]
	}
	if (precision < 0) {  // negative precision == automatic precision guess
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da31      	bge.n	8000a0e <ftoa+0xae>
		if (f < 1.0) precision = 4;
 80009aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80009ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ba:	d502      	bpl.n	80009c2 <ftoa+0x62>
 80009bc:	2304      	movs	r3, #4
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	e025      	b.n	8000a0e <ftoa+0xae>
		else if (f < 10.0) precision = 3;
 80009c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80009ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d2:	d502      	bpl.n	80009da <ftoa+0x7a>
 80009d4:	2303      	movs	r3, #3
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	e019      	b.n	8000a0e <ftoa+0xae>
		else if (f < 100.0) precision = 2;
 80009da:	edd7 7a03 	vldr	s15, [r7, #12]
 80009de:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000b48 <ftoa+0x1e8>
 80009e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ea:	d502      	bpl.n	80009f2 <ftoa+0x92>
 80009ec:	2302      	movs	r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e00d      	b.n	8000a0e <ftoa+0xae>
		else if (f < 1000.0) precision = 1;
 80009f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000b4c <ftoa+0x1ec>
 80009fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a02:	d502      	bpl.n	8000a0a <ftoa+0xaa>
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e001      	b.n	8000a0e <ftoa+0xae>
		else precision = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
	}
	if (precision)  	// round value according the precision
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00b      	beq.n	8000a2c <ftoa+0xcc>
		f += rounders[precision];
 8000a14:	4a4e      	ldr	r2, [pc, #312]	; (8000b50 <ftoa+0x1f0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a28:	edc7 7a03 	vstr	s15, [r7, #12]
	// integer part...
	intPart = f;
 8000a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a34:	ee17 3a90 	vmov	r3, s15
 8000a38:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a44:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4c:	edc7 7a03 	vstr	s15, [r7, #12]
	if (!intPart)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d105      	bne.n	8000a62 <ftoa+0x102>
		*ptr++ = '0';
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8000a5c:	2230      	movs	r2, #48	; 0x30
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e038      	b.n	8000ad4 <ftoa+0x174>
	else
	{
		p = ptr;	// save start pointer
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	623b      	str	r3, [r7, #32]
		while (intPart) { // convert (reverse order)
 8000a66:	e01a      	b.n	8000a9e <ftoa+0x13e>
			*p++ = '0' + intPart % 10;
 8000a68:	69fa      	ldr	r2, [r7, #28]
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <ftoa+0x1f4>)
 8000a6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a70:	1099      	asrs	r1, r3, #2
 8000a72:	17d3      	asrs	r3, r2, #31
 8000a74:	1ac9      	subs	r1, r1, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad1      	subs	r1, r2, r3
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	1c59      	adds	r1, r3, #1
 8000a86:	6239      	str	r1, [r7, #32]
 8000a88:	3230      	adds	r2, #48	; 0x30
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4a30      	ldr	r2, [pc, #192]	; (8000b54 <ftoa+0x1f4>)
 8000a92:	fb82 1203 	smull	r1, r2, r2, r3
 8000a96:	1092      	asrs	r2, r2, #2
 8000a98:	17db      	asrs	r3, r3, #31
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	61fb      	str	r3, [r7, #28]
		while (intPart) { // convert (reverse order)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1e1      	bne.n	8000a68 <ftoa+0x108>
		}
		p1 = p;  // save end pos
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	61bb      	str	r3, [r7, #24]
		while (p > ptr)	{ // reverse result
 8000aa8:	e00e      	b.n	8000ac8 <ftoa+0x168>
			c = *--p;
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8000ac4:	7dfa      	ldrb	r2, [r7, #23]
 8000ac6:	701a      	strb	r2, [r3, #0]
		while (p > ptr)	{ // reverse result
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8ec      	bhi.n	8000aaa <ftoa+0x14a>
		}
		ptr = p1;	// restore end pos
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (precision) {	// decimal part
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d02c      	beq.n	8000b34 <ftoa+0x1d4>
		*ptr++ = '.';	// place decimal point
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	627a      	str	r2, [r7, #36]	; 0x24
 8000ae0:	222e      	movs	r2, #46	; 0x2e
 8000ae2:	701a      	strb	r2, [r3, #0]
		while (precision--)	 { // convert
 8000ae4:	e021      	b.n	8000b2a <ftoa+0x1ca>
			f *= 10.0;
 8000ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af2:	edc7 7a03 	vstr	s15, [r7, #12]
			c = f;
 8000af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afe:	edc7 7a00 	vstr	s15, [r7]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	7dfa      	ldrb	r2, [r7, #23]
 8000b0e:	3230      	adds	r2, #48	; 0x30
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	701a      	strb	r2, [r3, #0]
			f -= c;
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b26:	edc7 7a03 	vstr	s15, [r7, #12]
		while (precision--)	 { // convert
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	1e5a      	subs	r2, r3, #1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1d8      	bne.n	8000ae6 <ftoa+0x186>
		}
	}
	*ptr = 0;	// terminating zero
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	return buf;
 8000b3a:	68bb      	ldr	r3, [r7, #8]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	372c      	adds	r7, #44	; 0x2c
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	42c80000 	.word	0x42c80000
 8000b4c:	447a0000 	.word	0x447a0000
 8000b50:	0800d048 	.word	0x0800d048
 8000b54:	66666667 	.word	0x66666667

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5a:	b0d5      	sub	sp, #340	; 0x154
 8000b5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f002 f8cd 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f975 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 fac3 	bl	80010f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b6a:	f000 fa97 	bl	800109c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b6e:	f000 fa45 	bl	8000ffc <MX_TIM1_Init>
  MX_RTC_Init();
 8000b72:	f000 fa1d 	bl	8000fb0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000b76:	f00a ff23 	bl	800b9c0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000b7a:	f000 f9eb 	bl	8000f54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PORT_IO LED_pin_ = {
 8000b7e:	4aa3      	ldr	r2, [pc, #652]	; (8000e0c <main+0x2b4>)
 8000b80:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b88:	6018      	str	r0, [r3, #0]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	8019      	strh	r1, [r3, #0]
		  .port = LED_GPIO_Port,
		  .pin = LED_Pin,
  };
  PORT_IO SDI_ = {
 8000b8e:	4aa0      	ldr	r2, [pc, #640]	; (8000e10 <main+0x2b8>)
 8000b90:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b98:	6018      	str	r0, [r3, #0]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SDO_GPIO_Port,
		  .pin  = Pres1_SDO_Pin,
  };
  PORT_IO SCK_ = {
 8000b9e:	4a9d      	ldr	r2, [pc, #628]	; (8000e14 <main+0x2bc>)
 8000ba0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba8:	6018      	str	r0, [r3, #0]
 8000baa:	3304      	adds	r3, #4
 8000bac:	8019      	strh	r1, [r3, #0]
		  .port = Pres1_SCK_GPIO_Port,
		  .pin = Pres1_SCK_Pin,
  };
  HX710B_var pressure_sensor1;
  SGP40_var VOC_sensor;
  SGP40.halt = HAL_Delay;
 8000bae:	4b9a      	ldr	r3, [pc, #616]	; (8000e18 <main+0x2c0>)
 8000bb0:	4a9a      	ldr	r2, [pc, #616]	; (8000e1c <main+0x2c4>)
 8000bb2:	601a      	str	r2, [r3, #0]

  USBSerial.begin();
 8000bb4:	4b9a      	ldr	r3, [pc, #616]	; (8000e20 <main+0x2c8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4798      	blx	r3
  Serial1.begin(9600);
 8000bba:	4b9a      	ldr	r3, [pc, #616]	; (8000e24 <main+0x2cc>)
 8000bbc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000bc0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000bc4:	4798      	blx	r3
  delay_microsInit();
 8000bc6:	f000 ff37 	bl	8001a38 <delay_microsInit>
  HX710B.halt = delay_microSeconds;
 8000bca:	4b97      	ldr	r3, [pc, #604]	; (8000e28 <main+0x2d0>)
 8000bcc:	4a97      	ldr	r2, [pc, #604]	; (8000e2c <main+0x2d4>)
 8000bce:	601a      	str	r2, [r3, #0]
  HX710B.init(&pressure_sensor1,SCK_, SDI_, MODE_DIFF1);
 8000bd0:	4b95      	ldr	r3, [pc, #596]	; (8000e28 <main+0x2d0>)
 8000bd2:	685c      	ldr	r4, [r3, #4]
 8000bd4:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000bd8:	2319      	movs	r3, #25
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8000be0:	f8ad 3000 	strh.w	r3, [sp]
 8000be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000be8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8000bec:	ca06      	ldmia	r2, {r1, r2}
 8000bee:	47a0      	blx	r4
//  HX710B.init(&pressure_sensor1,SDI_, SCK_);

  AHT10.halt = HAL_Delay;
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <main+0x2d8>)
 8000bf2:	4a8a      	ldr	r2, [pc, #552]	; (8000e1c <main+0x2c4>)
 8000bf4:	601a      	str	r2, [r3, #0]
  AHT10.getTick = HAL_GetTick;
 8000bf6:	4b8e      	ldr	r3, [pc, #568]	; (8000e30 <main+0x2d8>)
 8000bf8:	4a8e      	ldr	r2, [pc, #568]	; (8000e34 <main+0x2dc>)
 8000bfa:	605a      	str	r2, [r3, #4]
  AHT10_var AHT1;
  AHT10.begin(&AHT1, &hi2c1,0x38);
 8000bfc:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <main+0x2d8>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000c04:	2238      	movs	r2, #56	; 0x38
 8000c06:	498c      	ldr	r1, [pc, #560]	; (8000e38 <main+0x2e0>)
 8000c08:	4798      	blx	r3

  SGP40.begin(&VOC_sensor, &hi2c1,DFRobot_SGP40_ICC_ADDR, 1000UL );
 8000c0a:	4b83      	ldr	r3, [pc, #524]	; (8000e18 <main+0x2c0>)
 8000c0c:	685c      	ldr	r4, [r3, #4]
 8000c0e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	2259      	movs	r2, #89	; 0x59
 8000c18:	4987      	ldr	r1, [pc, #540]	; (8000e38 <main+0x2e0>)
 8000c1a:	47a0      	blx	r4
  char txt[20]="halloooo \n";
 8000c1c:	4a87      	ldr	r2, [pc, #540]	; (8000e3c <main+0x2e4>)
 8000c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c24:	c303      	stmia	r3!, {r0, r1}
 8000c26:	801a      	strh	r2, [r3, #0]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	0c12      	lsrs	r2, r2, #16
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	721a      	strb	r2, [r3, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( USBSerial.peek() >= USB_OTG_FS_MAX_PACKET_SIZE )
 8000c3a:	4b79      	ldr	r3, [pc, #484]	; (8000e20 <main+0x2c8>)
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	4798      	blx	r3
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b3f      	cmp	r3, #63	; 0x3f
 8000c44:	d902      	bls.n	8000c4c <main+0xf4>
	  	  USBSerial.flush();
 8000c46:	4b76      	ldr	r3, [pc, #472]	; (8000e20 <main+0x2c8>)
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	4798      	blx	r3
//	  USBSerial.puts((uint8_t*)txt,strlen(txt));
	  int press_adc = 0;
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
	  if ( HX710B.read(&pressure_sensor1,&press_adc, 1000) == HX710B_OK )
 8000c54:	4b74      	ldr	r3, [pc, #464]	; (8000e28 <main+0x2d0>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f107 0110 	add.w	r1, r7, #16
 8000c5c:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c64:	4798      	blx	r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d115      	bne.n	8000c98 <main+0x140>
	  {
//		  uint32_t press_offset = 7240000;
		  sprintf(tmp,"value sensor = %i \n\r",press_adc);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4972      	ldr	r1, [pc, #456]	; (8000e40 <main+0x2e8>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00b fdd1 	bl	800c820 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <main+0x2c8>)
 8000c80:	691c      	ldr	r4, [r3, #16]
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff faaa 	bl	80001e0 <strlen>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	47a0      	blx	r4
//		  float scale = press_adc * (-0.000018);
//		  sprintf(tmp,"voltage = %i \n\r",scale*1E+6);
//		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
	  }

	  if( AHT10.getEvent(&AHT1, 100UL) == AHT10_OK )
 8000c98:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <main+0x2d8>)
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000ca0:	2164      	movs	r1, #100	; 0x64
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4798      	blx	r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d12f      	bne.n	8000d0c <main+0x1b4>
	  {
		  sprintf(tmp,"AHT ada \n\r");
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4964      	ldr	r1, [pc, #400]	; (8000e44 <main+0x2ec>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00b fdb4 	bl	800c820 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 8000cb8:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <main+0x2c8>)
 8000cba:	691c      	ldr	r4, [r3, #16]
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fa8d 	bl	80001e0 <strlen>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	47a0      	blx	r4
		  char val[10];
		  sprintf(tmp, "temperature %s", ftoa(AHT1.temperature, val, 3));
 8000cd2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce0:	f7ff fe3e 	bl	8000960 <ftoa>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4957      	ldr	r1, [pc, #348]	; (8000e48 <main+0x2f0>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00b fd97 	bl	800c820 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 8000cf2:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <main+0x2c8>)
 8000cf4:	691c      	ldr	r4, [r3, #16]
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa70 	bl	80001e0 <strlen>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	47a0      	blx	r4
	  }
	  uint16_t voc_index = 0;
 8000d0c:	f107 030e 	add.w	r3, r7, #14
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]
	  if ( SGP40.getVOCIndex(&VOC_sensor, &voc_index, 1000) == SGP40_OK )
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <main+0x2c0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f107 010e 	add.w	r1, r7, #14
 8000d1c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d24:	4798      	blx	r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d116      	bne.n	8000d5a <main+0x202>
	  {
		  sprintf(tmp, "VOC = %i \n\r", voc_index);
 8000d2c:	f107 030e 	add.w	r3, r7, #14
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4944      	ldr	r1, [pc, #272]	; (8000e4c <main+0x2f4>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f00b fd70 	bl	800c820 <siprintf>
		  USBSerial.puts((uint8_t*)tmp, strlen(tmp));
 8000d40:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <main+0x2c8>)
 8000d42:	691c      	ldr	r4, [r3, #16]
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa49 	bl	80001e0 <strlen>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	47a0      	blx	r4
	  }

	  HAL_Delay(500);
 8000d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5e:	f002 f83f 	bl	8002de0 <HAL_Delay>
	  digitalToggle(LED_pin_);
 8000d62:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000d66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d6a:	f7ff fde9 	bl	8000940 <digitalToggle>
	  if(Serial1.available() > 0)
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <main+0x2cc>)
 8000d70:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000d74:	4798      	blx	r3
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f77f af5e 	ble.w	8000c3a <main+0xe2>
	  {
 8000d7e:	466b      	mov	r3, sp
 8000d80:	461e      	mov	r6, r3
		  size_t n_ = Serial1.available();
 8000d82:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <main+0x2cc>)
 8000d84:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000d88:	4798      	blx	r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		  char tBuf[n_];
 8000d90:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 8000d94:	4623      	mov	r3, r4
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f04f 0100 	mov.w	r1, #0
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	00cb      	lsls	r3, r1, #3
 8000dac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000db0:	00c2      	lsls	r2, r0, #3
 8000db2:	4620      	mov	r0, r4
 8000db4:	f04f 0100 	mov.w	r1, #0
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	00cb      	lsls	r3, r1, #3
 8000dc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000dc6:	00c2      	lsls	r2, r0, #3
 8000dc8:	1de3      	adds	r3, r4, #7
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	ebad 0d03 	sub.w	sp, sp, r3
 8000dd2:	ab02      	add	r3, sp, #8
 8000dd4:	3300      	adds	r3, #0
 8000dd6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		  Serial1.gets(tBuf,n_);
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <main+0x2cc>)
 8000ddc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8000de0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000de4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000de8:	4610      	mov	r0, r2
 8000dea:	4798      	blx	r3
		  USBSerial.puts((uint8_t*)tBuf, strlen(tBuf));
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <main+0x2c8>)
 8000dee:	691c      	ldr	r4, [r3, #16]
 8000df0:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8000df4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9f1 	bl	80001e0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4628      	mov	r0, r5
 8000e04:	47a0      	blx	r4
 8000e06:	46b5      	mov	sp, r6
  {
 8000e08:	e717      	b.n	8000c3a <main+0xe2>
 8000e0a:	bf00      	nop
 8000e0c:	0800cfd4 	.word	0x0800cfd4
 8000e10:	0800cfdc 	.word	0x0800cfdc
 8000e14:	0800cfe4 	.word	0x0800cfe4
 8000e18:	200002c0 	.word	0x200002c0
 8000e1c:	08002de1 	.word	0x08002de1
 8000e20:	2000028c 	.word	0x2000028c
 8000e24:	20000034 	.word	0x20000034
 8000e28:	20000020 	.word	0x20000020
 8000e2c:	08001a8d 	.word	0x08001a8d
 8000e30:	20000004 	.word	0x20000004
 8000e34:	08002dc9 	.word	0x08002dc9
 8000e38:	20000710 	.word	0x20000710
 8000e3c:	0800cfec 	.word	0x0800cfec
 8000e40:	0800cf94 	.word	0x0800cf94
 8000e44:	0800cfac 	.word	0x0800cfac
 8000e48:	0800cfb8 	.word	0x0800cfb8
 8000e4c:	0800cfc8 	.word	0x0800cfc8

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	; 0x68
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e5a:	2230      	movs	r2, #48	; 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00b fc1c 	bl	800c69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <SystemClock_Config+0xfc>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <SystemClock_Config+0xfc>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <SystemClock_Config+0xfc>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <SystemClock_Config+0x100>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <SystemClock_Config+0x100>)
 8000eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <SystemClock_Config+0x100>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000eda:	2390      	movs	r3, #144	; 0x90
 8000edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fe6c 	bl	8005bc8 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ef6:	f000 f97f 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	2101      	movs	r1, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 f8ce 	bl	80060b8 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000f22:	f000 f969 	bl	80011f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f26:	2302      	movs	r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 fa8f 	bl	8006458 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f40:	f000 f95a 	bl	80011f8 <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	3768      	adds	r7, #104	; 0x68
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_I2C1_Init+0x54>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_I2C1_Init+0x58>)
 8000f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f92:	f002 fbd3 	bl	800373c <HAL_I2C_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 f92c 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000710 	.word	0x20000710
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	000186a0 	.word	0x000186a0

08000fb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <MX_RTC_Init+0x48>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fc2:	227f      	movs	r2, #127	; 0x7f
 8000fc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_RTC_Init+0x44>)
 8000fe0:	f005 fb2a 	bl	8006638 <HAL_RTC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fea:	f000 f905 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200007a8 	.word	0x200007a8
 8000ff8:	40002800 	.word	0x40002800

08000ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM1_Init+0x98>)
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <MX_TIM1_Init+0x9c>)
 800101c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_TIM1_Init+0x98>)
 8001020:	2247      	movs	r2, #71	; 0x47
 8001022:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_TIM1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_TIM1_Init+0x98>)
 800102c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001030:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_TIM1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_TIM1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_TIM1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001044:	4813      	ldr	r0, [pc, #76]	; (8001094 <MX_TIM1_Init+0x98>)
 8001046:	f005 fbdc 	bl	8006802 <HAL_TIM_Base_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f8d2 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_TIM1_Init+0x98>)
 8001062:	f005 fc1d 	bl	80068a0 <HAL_TIM_ConfigClockSource>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800106c:	f000 f8c4 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_TIM1_Init+0x98>)
 800107e:	f005 fded 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001088:	f000 f8b6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200007c8 	.word	0x200007c8
 8001098:	40010000 	.word	0x40010000

0800109c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f005 fe30 	bl	8006d38 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 f88b 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000764 	.word	0x20000764
 80010ec:	40011000 	.word	0x40011000

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <MX_GPIO_Init+0xfc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a37      	ldr	r2, [pc, #220]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <MX_GPIO_Init+0xfc>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a29      	ldr	r2, [pc, #164]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <MX_GPIO_Init+0xfc>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_GPIO_Init+0xfc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <MX_GPIO_Init+0x100>)
 800117e:	f002 faa9 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pres1_SCK_GPIO_Port, Pres1_SCK_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <MX_GPIO_Init+0x104>)
 800118a:	f002 faa3 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800118e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_GPIO_Init+0x100>)
 80011a8:	f002 f814 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SCK_Pin */
  GPIO_InitStruct.Pin = Pres1_SCK_Pin;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Pres1_SCK_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <MX_GPIO_Init+0x104>)
 80011c6:	f002 f805 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pres1_SDO_Pin */
  GPIO_InitStruct.Pin = Pres1_SDO_Pin;
 80011ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pres1_SDO_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_GPIO_Init+0x104>)
 80011e0:	f001 fff8 	bl	80031d4 <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020400 	.word	0x40020400

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <HAL_MspInit+0x4c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x4c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_I2C_MspInit+0x84>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d12b      	bne.n	80012ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_I2C_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a17      	ldr	r2, [pc, #92]	; (80012dc <HAL_I2C_MspInit+0x88>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_I2C_MspInit+0x8c>)
 80012ae:	f001 ff91 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_I2C_MspInit+0x88>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_I2C_MspInit+0x88>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_I2C_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400

080012e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_RTC_MspInit+0x24>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d102      	bne.n	80012fc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RTC_MspInit+0x28>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40002800 	.word	0x40002800
 800130c:	42470e3c 	.word	0x42470e3c

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_TIM_Base_MspInit+0x3c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10d      	bne.n	800133e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_TIM_Base_MspInit+0x40>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_UART_MspInit+0x94>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d134      	bne.n	80013e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_UART_MspInit+0x98>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_UART_MspInit+0x98>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_UART_MspInit+0x98>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c0:	2307      	movs	r3, #7
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_UART_MspInit+0x9c>)
 80013cc:	f001 ff02 	bl	80031d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2025      	movs	r0, #37	; 0x25
 80013d6:	f001 fe26 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013da:	2025      	movs	r0, #37	; 0x25
 80013dc:	f001 fe3f 	bl	800305e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40011000 	.word	0x40011000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_UART_MspDeInit+0x38>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10d      	bne.n	8001422 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_UART_MspDeInit+0x3c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_UART_MspDeInit+0x3c>)
 800140c:	f023 0310 	bic.w	r3, r3, #16
 8001410:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001412:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <HAL_UART_MspDeInit+0x40>)
 8001418:	f002 f860 	bl	80034dc <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800141c:	2025      	movs	r0, #37	; 0x25
 800141e:	f001 fe2c 	bl	800307a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40011000 	.word	0x40011000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f001 fc8c 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART1_IRQHandler+0x10>)
 8001492:	f005 fd43 	bl	8006f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000764 	.word	0x20000764

080014a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <OTG_FS_IRQHandler+0x10>)
 80014a6:	f003 fb5c 	bl	8004b62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20001f34 	.word	0x20001f34

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f00b f892 	bl	800c60c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20020000 	.word	0x20020000
 8001514:	00000400 	.word	0x00000400
 8001518:	200004d8 	.word	0x200004d8
 800151c:	20002350 	.word	0x20002350

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001550:	e002      	b.n	8001558 <LoopCopyDataInit>

08001552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001556:	3304      	adds	r3, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800155c:	d3f9      	bcc.n	8001552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001560:	4c0b      	ldr	r4, [pc, #44]	; (8001590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001564:	e001      	b.n	800156a <LoopFillZerobss>

08001566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001568:	3204      	adds	r2, #4

0800156a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800156c:	d3fb      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800156e:	f7ff ffd7 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001572:	f00b f851 	bl	800c618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff faef 	bl	8000b58 <main>
  bx  lr    
 800157a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800157c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8001588:	0800d0d8 	.word	0x0800d0d8
  ldr r2, =_sbss
 800158c:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8001590:	2000234c 	.word	0x2000234c

08001594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC_IRQHandler>
	...

08001598 <AHT10_delay>:


#include "AHT10.h"

static void AHT10_delay(uint32_t time_)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if(AHT10.halt != NULL)
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <AHT10_delay+0x28>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <AHT10_delay+0x1a>
		AHT10.halt(time_);
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <AHT10_delay+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
	else
		HAL_Delay(time_);
}
 80015b0:	e002      	b.n	80015b8 <AHT10_delay+0x20>
		HAL_Delay(time_);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f001 fc14 	bl	8002de0 <HAL_Delay>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000004 	.word	0x20000004

080015c4 <AHT10_getTick>:

static uint32_t AHT10_getTick(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	if(AHT10.getTick != NULL)
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <AHT10_getTick+0x20>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <AHT10_getTick+0x16>
		return AHT10.getTick();
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <AHT10_getTick+0x20>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4798      	blx	r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	e002      	b.n	80015e0 <AHT10_getTick+0x1c>
	else
		return HAL_GetTick();
 80015da:	f001 fbf5 	bl	8002dc8 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000004 	.word	0x20000004

080015e8 <AHT10_read>:

static AHT10_status AHT10_read(AHT10_var* var, uint8_t *buffer, size_t len, uint32_t timeout_)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
    if (len > _maxBufferSize)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d901      	bls.n	8001600 <AHT10_read+0x18>
        return AHT10_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00d      	b.n	800161c <AHT10_read+0x34>
//    HAL_I2C
    return HAL_I2C_Master_Receive(var->i2c, var->address, buffer, len, timeout_);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7b1b      	ldrb	r3, [r3, #12]
 8001608:	b299      	uxth	r1, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b29a      	uxth	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	f002 fad3 	bl	8003bc0 <HAL_I2C_Master_Receive>
 800161a:	4603      	mov	r3, r0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <AHT10_write>:

static AHT10_status AHT10_write(AHT10_var* var, const uint8_t *buffer, size_t len, uint32_t timeout_)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
	 if ( len > _maxBufferSize )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b20      	cmp	r3, #32
 8001636:	d901      	bls.n	800163c <AHT10_write+0x18>
	        return AHT10_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00d      	b.n	8001658 <AHT10_write+0x34>
	 return HAL_I2C_Master_Transmit(var->i2c, var->address, buffer, len, timeout_);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	7b1b      	ldrb	r3, [r3, #12]
 8001644:	b299      	uxth	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	b29a      	uxth	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	f002 f9b7 	bl	80039c4 <HAL_I2C_Master_Transmit>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <AHT10_detect>:

static AHT10_status AHT10_detect(AHT10_var* var)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	if( var->i2c == NULL )
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <AHT10_detect+0x14>
		return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e00b      	b.n	800168c <AHT10_detect+0x2c>
	uint8_t ret =  HAL_I2C_IsDeviceReady(var->i2c, var->address, 5, 100);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	b299      	uxth	r1, r3
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	2205      	movs	r2, #5
 8001682:	f002 fcc3 	bl	800400c <HAL_I2C_IsDeviceReady>
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]
	return (AHT10_status)ret;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <AHT10_begin>:

static AHT10_status AHT10_begin(AHT10_var* var, I2C_HandleTypeDef *i2c_, uint8_t address)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	4613      	mov	r3, r2
 80016a0:	71fb      	strb	r3, [r7, #7]
	var->i2c 			= i2c_;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	601a      	str	r2, [r3, #0]
	var->address 		= address<<1;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	731a      	strb	r2, [r3, #12]
	var->temperature 	= 0;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
	var->humidity 		= 0;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
	uint8_t ret = AHT10_detect(var);
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff ffcc 	bl	8001660 <AHT10_detect>
 80016c8:	4603      	mov	r3, r0
 80016ca:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <AHT10_begin+0x42>
		return ret;
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	e063      	b.n	800179e <AHT10_begin+0x10a>
	uint8_t *cmd = malloc(3 * sizeof(*cmd));
 80016d6:	2003      	movs	r0, #3
 80016d8:	f00a ffc2 	bl	800c660 <malloc>
 80016dc:	4603      	mov	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
	if ( cmd != NULL )
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <AHT10_begin+0x5c>
		memset(cmd,0,3);
 80016e6:	2203      	movs	r2, #3
 80016e8:	2100      	movs	r1, #0
 80016ea:	69b8      	ldr	r0, [r7, #24]
 80016ec:	f00a ffd6 	bl	800c69c <memset>
	cmd[0] = AHTX0_CMD_SOFTRESET;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	22ba      	movs	r2, #186	; 0xba
 80016f4:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var,cmd,1);
 80016f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016fa:	2201      	movs	r2, #1
 80016fc:	69b9      	ldr	r1, [r7, #24]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff ff90 	bl	8001624 <AHT10_write>
 8001704:	4603      	mov	r3, r0
 8001706:	77fb      	strb	r3, [r7, #31]
	if( ret != AHT10_OK )
 8001708:	7ffb      	ldrb	r3, [r7, #31]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <AHT10_begin+0x7e>
		return ret;
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	e045      	b.n	800179e <AHT10_begin+0x10a>
	AHT10_delay(20);	// time for module to warming up
 8001712:	2014      	movs	r0, #20
 8001714:	f7ff ff40 	bl	8001598 <AHT10_delay>

	cmd[0] = AHTX0_CMD_CALIBRATE;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	22e1      	movs	r2, #225	; 0xe1
 800171c:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x08;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3301      	adds	r3, #1
 8001722:	2208      	movs	r2, #8
 8001724:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x00;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3302      	adds	r3, #2
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	ret = AHT10_write(var, cmd, 3);
 800172e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001732:	2203      	movs	r2, #3
 8001734:	69b9      	ldr	r1, [r7, #24]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff ff74 	bl	8001624 <AHT10_write>
 800173c:	4603      	mov	r3, r0
 800173e:	77fb      	strb	r3, [r7, #31]
	if ( ret != AHT10_OK )
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <AHT10_begin+0xb6>
		return ret;
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	e029      	b.n	800179e <AHT10_begin+0x10a>
	uint32_t ts = AHT10_getTick();
 800174a:	f7ff ff3b 	bl	80015c4 <AHT10_getTick>
 800174e:	6178      	str	r0, [r7, #20]
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001750:	e010      	b.n	8001774 <AHT10_begin+0xe0>
	{
		AHT10_delay(5);
 8001752:	2005      	movs	r0, #5
 8001754:	f7ff ff20 	bl	8001598 <AHT10_delay>
		if( ts - AHT10_getTick() >= 5000 )
 8001758:	f7ff ff34 	bl	80015c4 <AHT10_getTick>
 800175c:	4602      	mov	r2, r0
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	f241 3287 	movw	r2, #4999	; 0x1387
 8001766:	4293      	cmp	r3, r2
 8001768:	d904      	bls.n	8001774 <AHT10_begin+0xe0>
		{
			free(cmd);
 800176a:	69b8      	ldr	r0, [r7, #24]
 800176c:	f00a ff80 	bl	800c670 <free>
			return AHT10_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e014      	b.n	800179e <AHT10_begin+0x10a>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f92b 	bl	80019d0 <AHT10_getStatus>
 800177a:	4603      	mov	r3, r0
 800177c:	b25b      	sxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	dbe7      	blt.n	8001752 <AHT10_begin+0xbe>
		}
	};
	free(cmd);
 8001782:	69b8      	ldr	r0, [r7, #24]
 8001784:	f00a ff74 	bl	800c670 <free>
	// load last status to clearing buffer
	if (!(AHT10_getStatus(var) & AHTX0_STATUS_CALIBRATED))
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f921 	bl	80019d0 <AHT10_getStatus>
 800178e:	4603      	mov	r3, r0
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <AHT10_begin+0x108>
		return AHT10_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <AHT10_begin+0x10a>
	else
		return AHT10_OK;
 800179c:	2300      	movs	r3, #0

}
 800179e:	4618      	mov	r0, r3
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <AHT10_getEvent>:

static AHT10_status AHT10_getEvent(AHT10_var* var, uint32_t timeout_)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	; 0x30
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	uint8_t ret;
	if (var->error_counter >= AHT10_MAX_TRIAL)   // didn't get reply yet from AHT10
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b5b      	ldrb	r3, [r3, #13]
 80017b6:	2b09      	cmp	r3, #9
 80017b8:	d91b      	bls.n	80017f2 <AHT10_getEvent+0x4a>
	{
		// need to restart module
		uint8_t address_ = var->address>>1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		I2C_HandleTypeDef *i2c_ = var->i2c;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
		ret = AHT10_begin(var, i2c_, address_);
 80017ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017ce:	461a      	mov	r2, r3
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ff5e 	bl	8001694 <AHT10_begin>
 80017d8:	4603      	mov	r3, r0
 80017da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ( ret != AHT10_OK )
 80017de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <AHT10_getEvent+0x44>
			return ret;
 80017e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017ea:	e0e3      	b.n	80019b4 <AHT10_getEvent+0x20c>
		var->error_counter = 0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	735a      	strb	r2, [r3, #13]
	}
	uint8_t cmd_TRIGGER[3] = {AHTX0_CMD_TRIGGER, 0x33, 0};
 80017f2:	4a72      	ldr	r2, [pc, #456]	; (80019bc <AHT10_getEvent+0x214>)
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	4611      	mov	r1, r2
 80017fc:	8019      	strh	r1, [r3, #0]
 80017fe:	3302      	adds	r3, #2
 8001800:	0c12      	lsrs	r2, r2, #16
 8001802:	701a      	strb	r2, [r3, #0]
	// read the data and store it!
	uint8_t *cmd_ptr = malloc(3 * sizeof(*cmd_ptr));
 8001804:	2003      	movs	r0, #3
 8001806:	f00a ff2b 	bl	800c660 <malloc>
 800180a:	4603      	mov	r3, r0
 800180c:	61fb      	str	r3, [r7, #28]
	if (cmd_ptr != NULL)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d021      	beq.n	8001858 <AHT10_getEvent+0xb0>
	{
		cmd_ptr[0] = AHTX0_CMD_TRIGGER;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	22ac      	movs	r2, #172	; 0xac
 8001818:	701a      	strb	r2, [r3, #0]
		cmd_ptr[1] = 0x33;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	2233      	movs	r2, #51	; 0x33
 8001820:	701a      	strb	r2, [r3, #0]
		cmd_ptr[2] = 0;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3302      	adds	r3, #2
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		ret = AHT10_write(var, cmd_ptr, 3);
 800182a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800182e:	2203      	movs	r2, #3
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fef6 	bl	8001624 <AHT10_write>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (ret != AHT10_OK )
 800183e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <AHT10_getEvent+0xb4>
		{
			var->error_counter++;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7b5b      	ldrb	r3, [r3, #13]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	735a      	strb	r2, [r3, #13]
			return ret;
 8001852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001856:	e0ad      	b.n	80019b4 <AHT10_getEvent+0x20c>
		}
	}
	else
		return AHT10_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0ab      	b.n	80019b4 <AHT10_getEvent+0x20c>
	free(cmd_ptr);
 800185c:	69f8      	ldr	r0, [r7, #28]
 800185e:	f00a ff07 	bl	800c670 <free>
	unsigned long t = AHT10_getTick();
 8001862:	f7ff feaf 	bl	80015c4 <AHT10_getTick>
 8001866:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 8001868:	e01b      	b.n	80018a2 <AHT10_getEvent+0xfa>
	{
		AHT10_delay(10);
 800186a:	200a      	movs	r0, #10
 800186c:	f7ff fe94 	bl	8001598 <AHT10_delay>
		uint32_t rollOver = AHT10_getTick();
 8001870:	f7ff fea8 	bl	80015c4 <AHT10_getTick>
 8001874:	60f8      	str	r0, [r7, #12]
		if (rollOver < t)
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187a:	429a      	cmp	r2, r3
 800187c:	d201      	bcs.n	8001882 <AHT10_getEvent+0xda>
			t = rollOver;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (AHT10_getTick() - t >= timeout_)
 8001882:	f7ff fe9f 	bl	80015c4 <AHT10_getTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d807      	bhi.n	80018a2 <AHT10_getEvent+0xfa>
		{
			var->error_counter++;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7b5b      	ldrb	r3, [r3, #13]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	735a      	strb	r2, [r3, #13]
			return AHT10_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e088      	b.n	80019b4 <AHT10_getEvent+0x20c>
	while (AHT10_getStatus(var) & AHTX0_STATUS_BUSY)
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f894 	bl	80019d0 <AHT10_getStatus>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dbdc      	blt.n	800186a <AHT10_getEvent+0xc2>
		};
	}

	uint8_t *data = malloc(6 * sizeof(*data));
 80018b0:	2006      	movs	r0, #6
 80018b2:	f00a fed5 	bl	800c660 <malloc>
 80018b6:	4603      	mov	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]
	if (data != NULL)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <AHT10_getEvent+0x122>
	{
		// clear the data
		memset(data,0,6);
 80018c0:	2206      	movs	r2, #6
 80018c2:	2100      	movs	r1, #0
 80018c4:	69b8      	ldr	r0, [r7, #24]
 80018c6:	f00a fee9 	bl	800c69c <memset>
	}

	ret = AHT10_read(var, data, 6, timeout_);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2206      	movs	r2, #6
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fe89 	bl	80015e8 <AHT10_read>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (ret != AHT10_OK )
 80018dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00b      	beq.n	80018fc <AHT10_getEvent+0x154>
	{
		var->error_counter++;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7b5b      	ldrb	r3, [r3, #13]
 80018e8:	3301      	adds	r3, #1
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	735a      	strb	r2, [r3, #13]
		free(data);
 80018f0:	69b8      	ldr	r0, [r7, #24]
 80018f2:	f00a febd 	bl	800c670 <free>
		return ret;
 80018f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018fa:	e05b      	b.n	80019b4 <AHT10_getEvent+0x20c>
	}

	uint32_t h = data[1];
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	617b      	str	r3, [r7, #20]
	h <<= 8;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	617b      	str	r3, [r7, #20]
	h |= data[2];
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	3302      	adds	r3, #2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
	h <<= 4;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	617b      	str	r3, [r7, #20]
	h |= data[3] >> 4;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	3303      	adds	r3, #3
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
	var->humidity = ((float)h * 100) / 0x100000;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019c0 <AHT10_getEvent+0x218>
 800193e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001942:	eddf 6a20 	vldr	s13, [pc, #128]	; 80019c4 <AHT10_getEvent+0x21c>
 8001946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	edc3 7a02 	vstr	s15, [r3, #8]

	uint32_t tdata = data[3] & 0x0F;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3303      	adds	r3, #3
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	613b      	str	r3, [r7, #16]
	tdata |= data[4];
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3304      	adds	r3, #4
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
	tdata <<= 8;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	613b      	str	r3, [r7, #16]
	tdata |= data[5];
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	3305      	adds	r3, #5
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
	var->temperature = ((float)tdata * 200 / 0x100000) - 50;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800198e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80019c8 <AHT10_getEvent+0x220>
 8001992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001996:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019c4 <AHT10_getEvent+0x21c>
 800199a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019cc <AHT10_getEvent+0x224>
 80019a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edc3 7a01 	vstr	s15, [r3, #4]
	free(data);
 80019ac:	69b8      	ldr	r0, [r7, #24]
 80019ae:	f00a fe5f 	bl	800c670 <free>
	return AHT10_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	0800d000 	.word	0x0800d000
 80019c0:	42c80000 	.word	0x42c80000
 80019c4:	49800000 	.word	0x49800000
 80019c8:	43480000 	.word	0x43480000
 80019cc:	42480000 	.word	0x42480000

080019d0 <AHT10_getStatus>:

static uint8_t AHT10_getStatus(AHT10_var* var)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	if ( AHT10_read(var, &ret, 1) != AHT10_OK )
 80019d8:	f107 010f 	add.w	r1, r7, #15
 80019dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019e0:	2201      	movs	r2, #1
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fe00 	bl	80015e8 <AHT10_read>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <AHT10_getStatus+0x22>
		return 0xFF;
 80019ee:	23ff      	movs	r3, #255	; 0xff
 80019f0:	e000      	b.n	80019f4 <AHT10_getStatus+0x24>
	else
		return ret;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <AHT10_getTemperature>:


// extract Temperature value from the struct
static float AHT10_getTemperature (AHT10_var* var)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	return var->temperature;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	ee07 3a90 	vmov	s15, r3
}
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <AHT10_getHumidity>:

// extract Humidity value from the struct
static float AHT10_getHumidity (AHT10_var* var)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
	return var->humidity;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	ee07 3a90 	vmov	s15, r3
}
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <delay_microsInit>:
 */

#include "micro_delay.h"

DWTdelay_status  delay_microsInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	 if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <delay_microsInit+0x4c>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10e      	bne.n	8001a66 <delay_microsInit+0x2e>
	        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <delay_microsInit+0x4c>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <delay_microsInit+0x4c>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60d3      	str	r3, [r2, #12]
	        DWT->CYCCNT = 0;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <delay_microsInit+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
	        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <delay_microsInit+0x50>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <delay_microsInit+0x50>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
	    }
	 __NOP();
 8001a66:	bf00      	nop
	 __NOP();
 8001a68:	bf00      	nop
	 __NOP();
 8001a6a:	bf00      	nop
	 if(DWT->CYCCNT)
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <delay_microsInit+0x50>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <delay_microsInit+0x40>
	 {
		return DWTDelay_OK; /*clock cycle counter started*/
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <delay_microsInit+0x42>
	 }
	 else
	 {
	   return DWTDelay_ERROR; /*clock cycle counter not started*/
 8001a78:	2301      	movs	r3, #1
	 }
};
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000edf0 	.word	0xe000edf0
 8001a88:	e0001000 	.word	0xe0001000

08001a8c <delay_microSeconds>:

#if DWT_DELAY_EX
void delay_microSeconds(uint32_t us)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	uint32_t startTick  = DWT->CYCCNT,
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <delay_microSeconds+0x60>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
//			 targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
			targetTick = DWT->CYCCNT + us * (HAL_RCC_GetHCLKFreq()/1000000);
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <delay_microSeconds+0x60>)
 8001a9c:	685c      	ldr	r4, [r3, #4]
 8001a9e:	f004 fca7 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <delay_microSeconds+0x64>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4423      	add	r3, r4
 8001ab4:	60bb      	str	r3, [r7, #8]

	// Must check if target tick is out of bounds and overflowed
	if (targetTick > startTick) {
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d906      	bls.n	8001acc <delay_microSeconds+0x40>
		// Not overflowed
		while (DWT->CYCCNT < targetTick);
 8001abe:	bf00      	nop
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <delay_microSeconds+0x60>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d8fa      	bhi.n	8001ac0 <delay_microSeconds+0x34>
	} else {
		// Overflowed
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
	}
}
 8001aca:	e00a      	b.n	8001ae2 <delay_microSeconds+0x56>
		while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
 8001acc:	bf00      	nop
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <delay_microSeconds+0x60>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3fa      	bcc.n	8001ace <delay_microSeconds+0x42>
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <delay_microSeconds+0x60>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d8f5      	bhi.n	8001ace <delay_microSeconds+0x42>
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e0001000 	.word	0xe0001000
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <digitalWrite>:
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b02:	4613      	mov	r3, r2
 8001b04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(port_map.port, port_map.pin, logic);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	89b9      	ldrh	r1, [r7, #12]
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 fde1 	bl	80036d4 <HAL_GPIO_WritePin>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <digitalRead>:
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	463b      	mov	r3, r7
 8001b22:	e883 0003 	stmia.w	r3, {r0, r1}
	return (uint8_t) HAL_GPIO_ReadPin(port_map.port, port_map.pin);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	88ba      	ldrh	r2, [r7, #4]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fdb9 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HX710BIsReady>:
/*
 *  check the state of SDO pin,
 *  if pin state is low, mean data is ready
 */
static HX710B_status HX710BIsReady(HX710B_var *var, uint32_t timeout_)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	uint32_t time_s = HAL_GetTick();
 8001b46:	f001 f93f 	bl	8002dc8 <HAL_GetTick>
 8001b4a:	60f8      	str	r0, [r7, #12]
	while( digitalRead(var->DO) != PORT_LOW )
 8001b4c:	e023      	b.n	8001b96 <HX710BIsReady+0x5a>
	{
		// preventive if counter is roll-over and start from beginning
		uint32_t rollOver = HAL_GetTick();
 8001b4e:	f001 f93b 	bl	8002dc8 <HAL_GetTick>
 8001b52:	60b8      	str	r0, [r7, #8]
		if ( rollOver < time_s )
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d206      	bcs.n	8001b6a <HX710BIsReady+0x2e>
		{
			time_s = (uint32_t) abs((int)rollOver - (int)time_s);
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bfb8      	it	lt
 8001b66:	425b      	neglt	r3, r3
 8001b68:	60fb      	str	r3, [r7, #12]
		}
		if ( time_s - HAL_GetTick() >= timeout_ )
 8001b6a:	f001 f92d 	bl	8002dc8 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d801      	bhi.n	8001b7e <HX710BIsReady+0x42>
			return HX710B_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e01f      	b.n	8001bbe <HX710BIsReady+0x82>
		// need delay;
		if ( HX710B.halt != NULL)
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HX710BIsReady+0x8c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HX710BIsReady+0x54>
			HX710B.halt(10);
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HX710BIsReady+0x8c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	4798      	blx	r3
 8001b8e:	e002      	b.n	8001b96 <HX710BIsReady+0x5a>
		else
			HAL_Delay(5);
 8001b90:	2005      	movs	r0, #5
 8001b92:	f001 f925 	bl	8002de0 <HAL_Delay>
	while( digitalRead(var->DO) != PORT_LOW )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	7a9a      	ldrb	r2, [r3, #10]
 8001ba2:	7adb      	ldrb	r3, [r3, #11]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f362 030f 	bfi	r3, r2, #0, #16
 8001bae:	4608      	mov	r0, r1
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff ffb2 	bl	8001b1a <digitalRead>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1c8      	bne.n	8001b4e <HX710BIsReady+0x12>
	}
	return HX710B_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000020 	.word	0x20000020

08001bcc <HX710BRead>:
/*
 *  Read the data conversion
 *  data range : 0x800000 to 0x7FFFFF
 */
static HX710B_status HX710BRead(HX710B_var *var, int * data, uint32_t timeout_)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	// exit sleep mode
	digitalWrite(var->SCI, PORT_LOW);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4611      	mov	r1, r2
 8001be0:	791a      	ldrb	r2, [r3, #4]
 8001be2:	795b      	ldrb	r3, [r3, #5]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	431a      	orrs	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	f362 030f 	bfi	r3, r2, #0, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff ff7e 	bl	8001af4 <digitalWrite>
	if ( HX710BIsReady ( var, timeout_) == HX710B_OK )
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff ff9e 	bl	8001b3c <HX710BIsReady>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d169      	bne.n	8001cda <HX710BRead+0x10e>
	{
		uint8_t i = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
		uint32_t raw = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
 8001c12:	e045      	b.n	8001ca0 <HX710BRead+0xd4>
		{
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
			digitalWrite(var->SCI, PORT_HIGH);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4611      	mov	r1, r2
 8001c22:	791a      	ldrb	r2, [r3, #4]
 8001c24:	795b      	ldrb	r3, [r3, #5]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f362 030f 	bfi	r3, r2, #0, #16
 8001c30:	2201      	movs	r2, #1
 8001c32:	4608      	mov	r0, r1
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <digitalWrite>
			HX710B_hlt; HX710B_hlt; HX710B_hlt;
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
			digitalWrite(var->SCI, PORT_LOW);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4611      	mov	r1, r2
 8001c48:	791a      	ldrb	r2, [r3, #4]
 8001c4a:	795b      	ldrb	r3, [r3, #5]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	f362 030f 	bfi	r3, r2, #0, #16
 8001c56:	2200      	movs	r2, #0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7ff ff4a 	bl	8001af4 <digitalWrite>
			if ( i < 24)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b17      	cmp	r3, #23
 8001c64:	d819      	bhi.n	8001c9a <HX710BRead+0xce>
			{
				raw = raw << 1;
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
				if ( digitalRead(var->DO) == PORT_HIGH )
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001c72:	2100      	movs	r1, #0
 8001c74:	4611      	mov	r1, r2
 8001c76:	7a9a      	ldrb	r2, [r3, #10]
 8001c78:	7adb      	ldrb	r3, [r3, #11]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f362 030f 	bfi	r3, r2, #0, #16
 8001c84:	4608      	mov	r0, r1
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7ff ff47 	bl	8001b1a <digitalRead>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d103      	bne.n	8001c9a <HX710BRead+0xce>
						raw= raw | 0x01;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
		for ( i = 0; i < var->mode; i++ )
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	75fb      	strb	r3, [r7, #23]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
 8001ca4:	7dfa      	ldrb	r2, [r7, #23]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3b4      	bcc.n	8001c14 <HX710BRead+0x48>
			}
		}
		// force the HX710B to enter the sleep mode
		digitalWrite(var->SCI, PORT_HIGH);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	791a      	ldrb	r2, [r3, #4]
 8001cb4:	795b      	ldrb	r3, [r3, #5]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f362 030f 	bfi	r3, r2, #0, #16
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7ff ff15 	bl	8001af4 <digitalWrite>
//		if ( raw > 0x3ffffe )
//			raw -= 0x7fffff;
//		*data = raw;
		*data = raw ^ 0x800000 ;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	601a      	str	r2, [r3, #0]
		return HX710B_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HX710BRead+0x110>
	}
	return HX710B_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HX710BSetMode>:


static HX710B_status HX710BSetMode(HX710B_var *var, uint8_t mode, uint8_t timeout_)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	70bb      	strb	r3, [r7, #2]
	return HX710BRead(var, NULL, timeout_);
 8001cf4:	78bb      	ldrb	r3, [r7, #2]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff66 	bl	8001bcc <HX710BRead>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HX710BInit>:


static HX710B_status HX710BInit(HX710B_var* var, PORT_IO SCI, PORT_IO SDO, uint8_t mode_)
{
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	1d38      	adds	r0, r7, #4
 8001d16:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d1a:	61fb      	str	r3, [r7, #28]
	var->DO  = SDO;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3306      	adds	r3, #6
 8001d20:	f107 021c 	add.w	r2, r7, #28
 8001d24:	6810      	ldr	r0, [r2, #0]
 8001d26:	6018      	str	r0, [r3, #0]
 8001d28:	8892      	ldrh	r2, [r2, #4]
 8001d2a:	809a      	strh	r2, [r3, #4]
	var->SCI = SCI;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	6010      	str	r0, [r2, #0]
 8001d36:	889b      	ldrh	r3, [r3, #4]
 8001d38:	8093      	strh	r3, [r2, #4]
	var->mode= mode_;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d40:	731a      	strb	r2, [r3, #12]
	return HX710BSetMode(var, mode_);
 8001d42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001d46:	22f4      	movs	r2, #244	; 0xf4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff ffca 	bl	8001ce4 <HX710BSetMode>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d5c:	b002      	add	sp, #8
 8001d5e:	4770      	bx	lr

08001d60 <Serial1_begin>:
//===================================
//===================================
#define  begin() begin(9600)

static void Serial1_begin(uint32_t baudrate)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HALSerial__construct (&Serial1.serialParam);
 8001d68:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <Serial1_begin+0x60>)
 8001d6a:	f000 f92f 	bl	8001fcc <HALSerial__construct>
  Serial1.serialParam._written = FALSE;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <Serial1_begin+0x60>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	741a      	strb	r2, [r3, #16]
//  HAL_UART_Init(this->huart);
  while(HAL_UART_Receive_IT(&huart1, Serial1.serialParam._rx_buffer + Serial1.serialParam._rx_buffer_head, 1) == HAL_BUSY);
 8001d74:	bf00      	nop
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <Serial1_begin+0x60>)
 8001d78:	7c5b      	ldrb	r3, [r3, #17]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <Serial1_begin+0x64>)
 8001d80:	4413      	add	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	4619      	mov	r1, r3
 8001d86:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <Serial1_begin+0x68>)
 8001d88:	f005 f897 	bl	8006eba <HAL_UART_Receive_IT>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d0f1      	beq.n	8001d76 <Serial1_begin+0x16>

  Serial1.serialParam.huart->Init.BaudRate = baudrate;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <Serial1_begin+0x60>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	605a      	str	r2, [r3, #4]
  HALSerial_begin(&Serial1.serialParam);
 8001d9a:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <Serial1_begin+0x60>)
 8001d9c:	f000 f99f 	bl	80020de <HALSerial_begin>
  HAL_UART_Receive_IT(&Serial1.serialParam.huart, Serial1.serialParam._rx_buffer, HALSERIAL_RX_BUFFER_SIZE);
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <Serial1_begin+0x64>)
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <Serial1_begin+0x6c>)
 8001da8:	f005 f887 	bl	8006eba <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&Serial1.serialParam.huart, Serial1.serialParam._tx_buffer, HALSERIAL_TX_BUFFER_SIZE);
 8001dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <Serial1_begin+0x70>)
 8001db2:	4806      	ldr	r0, [pc, #24]	; (8001dcc <Serial1_begin+0x6c>)
 8001db4:	f005 f83c 	bl	8006e30 <HAL_UART_Transmit_IT>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000034 	.word	0x20000034
 8001dc4:	20000054 	.word	0x20000054
 8001dc8:	20000764 	.word	0x20000764
 8001dcc:	20000040 	.word	0x20000040
 8001dd0:	20000154 	.word	0x20000154

08001dd4 <Serial1_setTimeout>:

static void Serial1_setTimeout(uint32_t timeout)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  Serial1.serialParam._timeout = timeout;
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <Serial1_setTimeout+0x1c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6053      	str	r3, [r2, #4]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000034 	.word	0x20000034

08001df4 <Serial1_end>:

static void Serial1_end(void)	 	{HALSerial_end(&Serial1.serialParam);}
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <Serial1_end+0x10>)
 8001dfa:	f000 f991 	bl	8002120 <HALSerial_end>
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000034 	.word	0x20000034

08001e08 <Serial1_available>:
static int Serial1_available(void)	{return HALSerial_available(&Serial1.serialParam);}
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <Serial1_available+0x10>)
 8001e0e:	f000 f997 	bl	8002140 <HALSerial_available>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000034 	.word	0x20000034

08001e1c <Serial1_peek>:
static int Serial1_peek(void)		{return HALSerial_peek(&Serial1.serialParam);}
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <Serial1_peek+0x10>)
 8001e22:	f000 f9a1 	bl	8002168 <HALSerial_peek>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000034 	.word	0x20000034

08001e30 <Serial1_availableForWrite>:
static int Serial1_availableForWrite(void){return HALSerial_availableForWrite(&Serial1.serialParam);}
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <Serial1_availableForWrite+0x10>)
 8001e36:	f000 f9da 	bl	80021ee <HALSerial_availableForWrite>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000034 	.word	0x20000034

08001e44 <Serial1_flush>:
static void Serial1_flush(void)		{HALSerial_flush(&Serial1.serialParam);}
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <Serial1_flush+0x10>)
 8001e4a:	f000 f9ee 	bl	800222a <HALSerial_flush>
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000034 	.word	0x20000034

08001e58 <Serial1_write>:
static size_t Serial1_write(uint8_t c)	{return HALSerial_writeByte(&Serial1.serialParam, c);}
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <Serial1_write+0x20>)
 8001e68:	f000 fa06 	bl	8002278 <HALSerial_writeByte>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000034 	.word	0x20000034

08001e7c <Serial1_puts>:
static size_t Serial1_puts(const uint8_t *str, size_t size){return HALSerial_write(&Serial1.serialParam, str, size);}
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4804      	ldr	r0, [pc, #16]	; (8001e9c <Serial1_puts+0x20>)
 8001e8c:	f000 fa40 	bl	8002310 <HALSerial_write>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000034 	.word	0x20000034

08001ea0 <Serial1_read>:
static int Serial1_read(void)		{return HALSerial_read(&Serial1.serialParam);}
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <Serial1_read+0x10>)
 8001ea6:	f000 f97c 	bl	80021a2 <HALSerial_read>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000034 	.word	0x20000034

08001eb4 <Serial1_readUntil>:
static size_t Serial1_readUntil(char terminator, char *buffer, size_t length) {return HALSerial_readBytesUntil(&Serial1.serialParam,terminator,buffer, length);}
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	7bf9      	ldrb	r1, [r7, #15]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <Serial1_readUntil+0x24>)
 8001eca:	f000 faaf 	bl	800242c <HALSerial_readBytesUntil>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000034 	.word	0x20000034

08001edc <Serial1_readTimeout>:
static int Serial1_readTimeout(void)	{return HALSerial_timedRead(&Serial1.serialParam);}
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <Serial1_readTimeout+0x10>)
 8001ee2:	f000 fa57 	bl	8002394 <HALSerial_timedRead>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000034 	.word	0x20000034

08001ef0 <Serial1_gets>:
static size_t Serial1_gets(char* buffer, size_t len) {return HALSerial_readBytes(&Serial1.serialParam, buffer, len);}
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4804      	ldr	r0, [pc, #16]	; (8001f10 <Serial1_gets+0x20>)
 8001f00:	f000 fa70 	bl	80023e4 <HALSerial_readBytes>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000034 	.word	0x20000034

08001f14 <Serial1_print>:
char serial_buffer_print[256];
static size_t Serial1_print(const char fmt[], ...)
{
 8001f14:	b40f      	push	{r0, r1, r2, r3}
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	603b      	str	r3, [r7, #0]
  vsnprintf(serial_buffer_print, sizeof(serial_buffer_print), fmt, args);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <Serial1_print+0x40>)
 8001f2c:	f00a fcc4 	bl	800c8b8 <vsniprintf>
  va_end(args);
  size_t ret = Serial1_puts(serial_buffer_print, strlen(serial_buffer_print));
 8001f30:	4808      	ldr	r0, [pc, #32]	; (8001f54 <Serial1_print+0x40>)
 8001f32:	f7fe f955 	bl	80001e0 <strlen>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <Serial1_print+0x40>)
 8001f3c:	f7ff ff9e 	bl	8001e7c <Serial1_puts>
 8001f40:	6078      	str	r0, [r7, #4]
  return ret;
 8001f42:	687b      	ldr	r3, [r7, #4]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f4e:	b004      	add	sp, #16
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000810 	.word	0x20000810

08001f58 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	if( huart != NULL )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00f      	beq.n	8001f86 <HAL_UART_RxCpltCallback+0x2e>
	{
		if (huart->Instance == USART1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_UART_RxCpltCallback+0x38>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d102      	bne.n	8001f76 <HAL_UART_RxCpltCallback+0x1e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 8001f70:	4808      	ldr	r0, [pc, #32]	; (8001f94 <HAL_UART_RxCpltCallback+0x3c>)
 8001f72:	f000 f847 	bl	8002004 <HALSerial__rx_complete_irq>
		if (huart->Instance == USART2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_UART_RxCpltCallback+0x40>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d102      	bne.n	8001f86 <HAL_UART_RxCpltCallback+0x2e>
			HALSerial__rx_complete_irq(&Serial1.serialParam);
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <HAL_UART_RxCpltCallback+0x3c>)
 8001f82:	f000 f83f 	bl	8002004 <HALSerial__rx_complete_irq>
	}

}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40011000 	.word	0x40011000
 8001f94:	20000034 	.word	0x20000034
 8001f98:	40004400 	.word	0x40004400

08001f9c <HAL_UART_TxCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if ( huart == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_UART_TxCpltCallback+0x20>
		return;
  if (huart->Instance == USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_UART_TxCpltCallback+0x28>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d104      	bne.n	8001fbe <HAL_UART_TxCpltCallback+0x22>
	HALSerial__tx_complete_irq(&Serial1.serialParam);
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <HAL_UART_TxCpltCallback+0x2c>)
 8001fb6:	f000 f850 	bl	800205a <HALSerial__tx_complete_irq>
 8001fba:	e000      	b.n	8001fbe <HAL_UART_TxCpltCallback+0x22>
		return;
 8001fbc:	bf00      	nop
}
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	20000034 	.word	0x20000034

08001fcc <HALSerial__construct>:


void HALSerial__construct(HALSerial *this)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  Stream___construct((Stream *)this);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fa5e 	bl	8002496 <Stream___construct>
  this->_rx_buffer_head = 0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	745a      	strb	r2, [r3, #17]
  this->_rx_buffer_tail = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	749a      	strb	r2, [r3, #18]
  this->_tx_buffer_head = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	74da      	strb	r2, [r3, #19]
  this->_tx_buffer_tail = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	751a      	strb	r2, [r3, #20]
  this-> huart = &huart1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a02      	ldr	r2, [pc, #8]	; (8002000 <HALSerial__construct+0x34>)
 8001ff6:	60da      	str	r2, [r3, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000764 	.word	0x20000764

08002004 <HALSerial__rx_complete_irq>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

static void HALSerial__rx_complete_irq(HALSerial *this)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  hal_rx_buffer_index_t i = ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->huart->pRxBuffPtr - this->_rx_buffer)) % HALSERIAL_RX_BUFFER_SIZE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3320      	adds	r3, #32
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	73fb      	strb	r3, [r7, #15]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != this->_rx_buffer_tail)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7c9b      	ldrb	r3, [r3, #18]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	429a      	cmp	r2, r3
 8002028:	d002      	beq.n	8002030 <HALSerial__rx_complete_irq+0x2c>
    this->_rx_buffer_head = i;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	745a      	strb	r2, [r3, #17]
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 8002030:	bf00      	nop
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d8      	ldr	r0, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3320      	adds	r3, #32
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	7c52      	ldrb	r2, [r2, #17]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4413      	add	r3, r2
 8002042:	2201      	movs	r2, #1
 8002044:	4619      	mov	r1, r3
 8002046:	f004 ff38 	bl	8006eba <HAL_UART_Receive_IT>
 800204a:	4603      	mov	r3, r0
 800204c:	2b02      	cmp	r3, #2
 800204e:	d0f0      	beq.n	8002032 <HALSerial__rx_complete_irq+0x2e>
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HALSerial__tx_complete_irq>:

static void HALSerial__tx_complete_irq(HALSerial *this) {
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  this->_tx_buffer_tail = ((unsigned int)(HALSERIAL_TX_BUFFER_SIZE + this->huart->pTxBuffPtr - this->_tx_buffer)) % HALSERIAL_TX_BUFFER_SIZE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	751a      	strb	r2, [r3, #20]

  uint16_t size;
  if (this->_tx_buffer_head < this->_tx_buffer_tail)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7cdb      	ldrb	r3, [r3, #19]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7d1b      	ldrb	r3, [r3, #20]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	429a      	cmp	r2, r3
 8002088:	d207      	bcs.n	800209a <HALSerial__tx_complete_irq+0x40>
    size = HALSERIAL_TX_BUFFER_SIZE - this->_tx_buffer_tail;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7d1b      	ldrb	r3, [r3, #20]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002096:	81fb      	strh	r3, [r7, #14]
 8002098:	e009      	b.n	80020ae <HALSerial__tx_complete_irq+0x54>
  else
    size = this->_tx_buffer_head - this->_tx_buffer_tail;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7cdb      	ldrb	r3, [r3, #19]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7d1b      	ldrb	r3, [r3, #20]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	81fb      	strh	r3, [r7, #14]

  if (size > 0)
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HALSerial__tx_complete_irq+0x7c>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, size) == HAL_BUSY);
 80020b4:	bf00      	nop
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68d8      	ldr	r0, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	7d12      	ldrb	r2, [r2, #20]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	4413      	add	r3, r2
 80020c8:	89fa      	ldrh	r2, [r7, #14]
 80020ca:	4619      	mov	r1, r3
 80020cc:	f004 feb0 	bl	8006e30 <HAL_UART_Transmit_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d0ef      	beq.n	80020b6 <HALSerial__tx_complete_irq+0x5c>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HALSerial_begin>:

// Public Methods //////////////////////////////////////////////////////////////

void HALSerial_begin(HALSerial *this)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  this->_written = FALSE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	741a      	strb	r2, [r3, #16]
  HAL_UART_Init(this->huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fe21 	bl	8006d38 <HAL_UART_Init>
  while(HAL_UART_Receive_IT(this->huart, this->_rx_buffer + this->_rx_buffer_head, 1) == HAL_BUSY);
 80020f6:	bf00      	nop
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68d8      	ldr	r0, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3320      	adds	r3, #32
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	7c52      	ldrb	r2, [r2, #17]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	4413      	add	r3, r2
 8002108:	2201      	movs	r2, #1
 800210a:	4619      	mov	r1, r3
 800210c:	f004 fed5 	bl	8006eba <HAL_UART_Receive_IT>
 8002110:	4603      	mov	r3, r0
 8002112:	2b02      	cmp	r3, #2
 8002114:	d0f0      	beq.n	80020f8 <HALSerial_begin+0x1a>
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HALSerial_end>:

void HALSerial_end(HALSerial *this)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  // wait for transmission of outgoing data
  HALSerial_flush(this);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f87e 	bl	800222a <HALSerial_flush>

  HAL_UART_DeInit(this->huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fe4d 	bl	8006dd2 <HAL_UART_DeInit>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HALSerial_available>:

int __attribute__((weak)) HALSerial_available(HALSerial *this)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((unsigned int)(HALSERIAL_RX_BUFFER_SIZE + this->_rx_buffer_head - this->_rx_buffer_tail)) % HALSERIAL_RX_BUFFER_SIZE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7c5b      	ldrb	r3, [r3, #17]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	7c92      	ldrb	r2, [r2, #18]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	b2db      	uxtb	r3, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HALSerial_peek>:

int __attribute__((weak)) HALSerial_peek(HALSerial *this)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7c5b      	ldrb	r3, [r3, #17]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7c9b      	ldrb	r3, [r3, #18]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	429a      	cmp	r2, r3
 800217e:	d102      	bne.n	8002186 <HALSerial_peek+0x1e>
  {
    return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	e007      	b.n	8002196 <HALSerial_peek+0x2e>
  }
  else
  {
    return this->_rx_buffer[this->_rx_buffer_tail];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7c9b      	ldrb	r3, [r3, #18]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HALSerial_read>:

int __attribute__((weak)) HALSerial_read(HALSerial *this)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  // if the head isn't ahead of the tail, we don't have any characters
  if (this->_rx_buffer_head == this->_rx_buffer_tail)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7c5b      	ldrb	r3, [r3, #17]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7c9b      	ldrb	r3, [r3, #18]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d102      	bne.n	80021c0 <HALSerial_read+0x1e>
  {
    return -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e010      	b.n	80021e2 <HALSerial_read+0x40>
  }
  else
  {
    unsigned char c = this->_rx_buffer[this->_rx_buffer_tail];
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7c9b      	ldrb	r3, [r3, #18]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d0:	73fb      	strb	r3, [r7, #15]
    this->_rx_buffer_tail = (hal_rx_buffer_index_t)(this->_rx_buffer_tail + 1) % HALSERIAL_RX_BUFFER_SIZE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7c9b      	ldrb	r3, [r3, #18]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	749a      	strb	r2, [r3, #18]
    return c;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HALSerial_availableForWrite>:

int __attribute__((weak)) HALSerial_availableForWrite(HALSerial *this)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  hal_tx_buffer_index_t head;
  hal_tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = this->_tx_buffer_head;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7cdb      	ldrb	r3, [r3, #19]
 80021fa:	73fb      	strb	r3, [r7, #15]
    tail = this->_tx_buffer_tail;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7d1b      	ldrb	r3, [r3, #20]
 8002200:	73bb      	strb	r3, [r7, #14]
  }
  if (head >= tail)
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	7bbb      	ldrb	r3, [r7, #14]
 8002206:	429a      	cmp	r2, r3
 8002208:	d305      	bcc.n	8002216 <HALSerial_availableForWrite+0x28>
    return HALSERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	4413      	add	r3, r2
 8002214:	e003      	b.n	800221e <HALSerial_availableForWrite+0x30>
  return tail - head - 1;
 8002216:	7bba      	ldrb	r2, [r7, #14]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	3b01      	subs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HALSerial_flush>:

void __attribute__((weak)) HALSerial_flush(HALSerial *this)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!this->_written)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7c1b      	ldrb	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01a      	beq.n	8002270 <HALSerial_flush+0x46>
    return;

  unsigned long ticks = HALSerial_millis(this);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f890 	bl	8002360 <HALSerial_millis>
 8002240:	60f8      	str	r0, [r7, #12]
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 8002242:	e003      	b.n	800224c <HALSerial_flush+0x22>
    HALSerial_delay(this, 1);
 8002244:	2101      	movs	r1, #1
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f896 	bl	8002378 <HALSerial_delay>
  while (this->_tx_buffer_head != this->_tx_buffer_tail && HALSerial_millis(this) - ticks < 1000) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7cdb      	ldrb	r3, [r3, #19]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7d1b      	ldrb	r3, [r3, #20]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	429a      	cmp	r2, r3
 800225a:	d00a      	beq.n	8002272 <HALSerial_flush+0x48>
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f87f 	bl	8002360 <HALSerial_millis>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226c:	d3ea      	bcc.n	8002244 <HALSerial_flush+0x1a>
 800226e:	e000      	b.n	8002272 <HALSerial_flush+0x48>
    return;
 8002270:	bf00      	nop
  }
}
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HALSerial_writeByte>:

size_t __attribute__((weak)) HALSerial_writeByte(HALSerial *this, uint8_t c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  this->_written = TRUE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	741a      	strb	r2, [r3, #16]

  hal_tx_buffer_index_t i = (this->_tx_buffer_head + 1) % HALSERIAL_TX_BUFFER_SIZE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7cdb      	ldrb	r3, [r3, #19]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	425a      	negs	r2, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	bf58      	it	pl
 800229a:	4253      	negpl	r3, r2
 800229c:	73fb      	strb	r3, [r7, #15]

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == this->_tx_buffer_tail) {
 800229e:	e003      	b.n	80022a8 <HALSerial_writeByte+0x30>
    HALSerial_delay(this, 1);
 80022a0:	2101      	movs	r1, #1
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f868 	bl	8002378 <HALSerial_delay>
  while (i == this->_tx_buffer_tail) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7d1b      	ldrb	r3, [r3, #20]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d0f5      	beq.n	80022a0 <HALSerial_writeByte+0x28>
  }

  this->_tx_buffer[this->_tx_buffer_head] = c;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7cdb      	ldrb	r3, [r3, #19]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  if (this->_tx_buffer_head == this->_tx_buffer_tail) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7cdb      	ldrb	r3, [r3, #19]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7d1b      	ldrb	r3, [r3, #20]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d114      	bne.n	8002300 <HALSerial_writeByte+0x88>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 80022d6:	e003      	b.n	80022e0 <HALSerial_writeByte+0x68>
      HALSerial_delay(this, 1);
 80022d8:	2101      	movs	r1, #1
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f84c 	bl	8002378 <HALSerial_delay>
    while(HAL_UART_Transmit_IT(this->huart, this->_tx_buffer + this->_tx_buffer_tail, 1) == HAL_BUSY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68d8      	ldr	r0, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7d12      	ldrb	r2, [r2, #20]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4413      	add	r3, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	f004 fd9b 	bl	8006e30 <HAL_UART_Transmit_IT>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d0eb      	beq.n	80022d8 <HALSerial_writeByte+0x60>
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  TX_BUFFER_ATOMIC
  {
    this->_tx_buffer_head = i;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	74da      	strb	r2, [r3, #19]
  }

  return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HALSerial_write>:

size_t HALSerial_write(HALSerial *this, const uint8_t *buffer, size_t size)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  if (buffer == NULL)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HALSerial_write+0x16>
    return 0;
 8002322:	2300      	movs	r3, #0
 8002324:	e018      	b.n	8002358 <HALSerial_write+0x48>
  size_t n = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  while (size--)
 800232a:	e00d      	b.n	8002348 <HALSerial_write+0x38>
  {
    if (HALSerial_writeByte(this, *buffer++))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff ff9e 	bl	8002278 <HALSerial_writeByte>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <HALSerial_write+0x44>
      n++;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  while (size--)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ec      	bne.n	800232c <HALSerial_write+0x1c>
 8002352:	e000      	b.n	8002356 <HALSerial_write+0x46>
    else
      break;
 8002354:	bf00      	nop
  }
//  HAL_UART_Transmit(this->huart, buffer, size, 100);
//  HALSerial__rx_complete_irq(this); // ini tadi lupa di comment
  return n;
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HALSerial_millis>:

/* Parent */

unsigned long HALSerial_millis(HALSerial *this) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return this->millis();
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4798      	blx	r3
 800236e:	4603      	mov	r3, r0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HALSerial_delay>:

unsigned char HALSerial_delay(HALSerial *this, unsigned long value) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  return this->delay(value);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	4798      	blx	r3
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HALSerial_timedRead>:

// protected method to read stream with timeout
int HALSerial_timedRead(HALSerial *this)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  int c;
  this->_startMillis = HALSerial_millis(this);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ffdf 	bl	8002360 <HALSerial_millis>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
  do
  {
    c = HALSerial_read(this);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fefa 	bl	80021a2 <HALSerial_read>
 80023ae:	60f8      	str	r0, [r7, #12]
    if (c >= 0)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db01      	blt.n	80023ba <HALSerial_timedRead+0x26>
      return c;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	e010      	b.n	80023dc <HALSerial_timedRead+0x48>
    else HALSerial_delay(this, 1);
 80023ba:	2101      	movs	r1, #1
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ffdb 	bl	8002378 <HALSerial_delay>
  } while (HALSerial_millis(this) - this->_startMillis < this->_timeout);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffcc 	bl	8002360 <HALSerial_millis>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3e7      	bcc.n	80023a8 <HALSerial_timedRead+0x14>
  return -1; // -1 indicates timeout
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HALSerial_readBytes>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t HALSerial_readBytes(HALSerial *this, char *buffer, size_t length)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  size_t count = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  while (count < length)
 80023f4:	e00f      	b.n	8002416 <HALSerial_readBytes+0x32>
  {
    int c = HALSerial_timedRead(this);
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff ffcc 	bl	8002394 <HALSerial_timedRead>
 80023fc:	6138      	str	r0, [r7, #16]
    if (c < 0)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0d      	blt.n	8002420 <HALSerial_readBytes+0x3c>
      break;
    *buffer++ = (char)c;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
    count++;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  while (count < length)
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3eb      	bcc.n	80023f6 <HALSerial_readBytes+0x12>
 800241e:	e000      	b.n	8002422 <HALSerial_readBytes+0x3e>
      break;
 8002420:	bf00      	nop
  }
  return count;
 8002422:	697b      	ldr	r3, [r7, #20]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HALSerial_readBytesUntil>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t HALSerial_readBytesUntil(HALSerial *this, char terminator, char *buffer, size_t length)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	460b      	mov	r3, r1
 800243a:	72fb      	strb	r3, [r7, #11]
  size_t index = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  while (index < length)
 8002440:	e013      	b.n	800246a <HALSerial_readBytesUntil+0x3e>
  {
    int c = HALSerial_timedRead(this);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff ffa6 	bl	8002394 <HALSerial_timedRead>
 8002448:	6138      	str	r0, [r7, #16]
    if (c < 0 || c == terminator)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db10      	blt.n	8002472 <HALSerial_readBytesUntil+0x46>
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d00c      	beq.n	8002472 <HALSerial_readBytesUntil+0x46>
      break;
    *buffer++ = (char)c;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
    index++;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
  while (index < length)
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d3e7      	bcc.n	8002442 <HALSerial_readBytesUntil+0x16>
  }
  return index; // return number of characters, not including null terminator
 8002472:	697b      	ldr	r3, [r7, #20]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <Print___construct>:
}

// Public Methods //////////////////////////////////////////////////////////////

void Print___construct(Print *this)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  this->write_error = 0;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <Stream___construct>:
// These overload exists for compatibility with any class that has derived
// Stream and used parseFloat/Int with a custom ignore character. To keep
// the public API simple, these overload remains protected.

void Stream___construct(Stream *this)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  Print___construct((Print *)this);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffec 	bl	800247c <Print___construct>
  this->_timeout = 1000;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024aa:	605a      	str	r2, [r3, #4]
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <SerialUSB_begin>:

extern CDC_TransmitQueue_TypeDef TransmitQueue;
extern CDC_ReceiveQueue_TypeDef ReceiveQueue;

static void SerialUSB_begin(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  CDC_init();
 80024b8:	f009 fc6e 	bl	800bd98 <CDC_init>
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <SerialUSB_end>:

static void SerialUSB_end(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  CDC_DeInit();
 80024c4:	f009 fc6f 	bl	800bda6 <CDC_DeInit>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <SerialUSB_availableForWrite>:

static int SerialUSB_availableForWrite()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  return CDC_TransmitQueue_WriteSize(&TransmitQueue);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <SerialUSB_availableForWrite+0x10>)
 80024d2:	f000 f905 	bl	80026e0 <CDC_TransmitQueue_WriteSize>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000be4 	.word	0x20000be4

080024e0 <SerialUSB_write>:

static size_t SerialUSB_write(const uint8_t c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  return SerialUSB_puts(&c, 1);
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f806 	bl	8002500 <SerialUSB_puts>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <SerialUSB_puts>:

static size_t SerialUSB_puts(const uint8_t *buf, size_t len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  size_t rest = len;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	60fb      	str	r3, [r7, #12]
    while (rest > 0 && CDC_connected()) {
 800250e:	e01c      	b.n	800254a <SerialUSB_puts+0x4a>
      // Determine buffer size available for write
      size_t portion = (size_t)CDC_TransmitQueue_WriteSize(&TransmitQueue);
 8002510:	4815      	ldr	r0, [pc, #84]	; (8002568 <SerialUSB_puts+0x68>)
 8002512:	f000 f8e5 	bl	80026e0 <CDC_TransmitQueue_WriteSize>
 8002516:	4603      	mov	r3, r0
 8002518:	60bb      	str	r3, [r7, #8]
      // Truncate it to content size (if rest is greater)
      if (rest < portion) {
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d201      	bcs.n	8002526 <SerialUSB_puts+0x26>
        portion = rest;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	60bb      	str	r3, [r7, #8]
      }
      if (portion > 0) {
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <SerialUSB_puts+0x4a>
        // Only if some space in the buffer exists.
        // TS: Only main thread calls write and writeSize methods,
        // it's thread-safe since IRQ does not affects
        // TransmitQueue write position
        CDC_TransmitQueue_Enqueue(&TransmitQueue, buf, portion);
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <SerialUSB_puts+0x68>)
 8002532:	f000 f90c 	bl	800274e <CDC_TransmitQueue_Enqueue>
        rest -= portion;
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	60fb      	str	r3, [r7, #12]
        buf += portion;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	607b      	str	r3, [r7, #4]
        // After storing data, start transmitting process
        CDC_continue_transmit();
 8002546:	f009 fbcf 	bl	800bce8 <CDC_continue_transmit>
    while (rest > 0 && CDC_connected()) {
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <SerialUSB_puts+0x5a>
 8002550:	f009 fb9e 	bl	800bc90 <CDC_connected>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1da      	bne.n	8002510 <SerialUSB_puts+0x10>
      }
    }
    return (len - rest);
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000be4 	.word	0x20000be4

0800256c <SerialUSB_available>:

static int SerialUSB_available(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  return (CDC_ReceiveQueue_ReadSize(&ReceiveQueue));
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <SerialUSB_available+0x10>)
 8002572:	f000 fa1c 	bl	80029ae <CDC_ReceiveQueue_ReadSize>
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20001c6c 	.word	0x20001c6c

08002580 <SerialUSB_read>:

static int SerialUSB_read(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  // Dequeue only one char from queue
  // TS: it safe, because only main thread affects ReceiveQueue->read pos
  int ch = CDC_ReceiveQueue_Dequeue(&ReceiveQueue);
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <SerialUSB_read+0x1c>)
 8002588:	f000 fa41 	bl	8002a0e <CDC_ReceiveQueue_Dequeue>
 800258c:	6078      	str	r0, [r7, #4]
  // Resume receive process, if possible
  CDC_resume_receive();
 800258e:	f009 fbd9 	bl	800bd44 <CDC_resume_receive>
  return ch;
 8002592:	687b      	ldr	r3, [r7, #4]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001c6c 	.word	0x20001c6c

080025a0 <SerialUSB_readbytes>:

static size_t SerialUSB_readbytes(char *buffer, size_t length)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint16_t read;
    auto rest = (uint16_t)(length);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	617b      	str	r3, [r7, #20]
    uint32_t _startMillis = HAL_GetTick();
 80025b0:	f000 fc0a 	bl	8002dc8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]
    do {
      read = CDC_ReceiveQueue_Read(&ReceiveQueue, (uint8_t *)(buffer), rest);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <SerialUSB_readbytes+0x64>)
 80025c0:	f000 fa9c 	bl	8002afc <CDC_ReceiveQueue_Read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	81fb      	strh	r3, [r7, #14]
      CDC_resume_receive();
 80025c8:	f009 fbbc 	bl	800bd44 <CDC_resume_receive>
      rest -= read;
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
      buffer += read;
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	607b      	str	r3, [r7, #4]
      if (rest == 0) {
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <SerialUSB_readbytes+0x46>
        return length;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	e009      	b.n	80025fa <SerialUSB_readbytes+0x5a>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 80025e6:	f000 fbef 	bl	8002dc8 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b31      	cmp	r3, #49	; 0x31
 80025f2:	d9e0      	bls.n	80025b6 <SerialUSB_readbytes+0x16>
    return length - rest;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20001c6c 	.word	0x20001c6c

08002608 <SerialUSB_readBytesUntil>:

static size_t SerialUSB_readBytesUntil(char terminator, char *buffer, size_t length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af02      	add	r7, sp, #8
 800260e:	4603      	mov	r3, r0
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	73fb      	strb	r3, [r7, #15]
  uint16_t read;
    auto rest = (uint16_t)(length);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	b29b      	uxth	r3, r3
 800261a:	61fb      	str	r3, [r7, #28]
    uint32_t _startMillis = HAL_GetTick();
 800261c:	f000 fbd4 	bl	8002dc8 <HAL_GetTick>
 8002620:	61b8      	str	r0, [r7, #24]
    do {
      bool found = CDC_ReceiveQueue_ReadUntil(&ReceiveQueue, (uint8_t)(terminator),
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	b29a      	uxth	r2, r3
 8002626:	7bf9      	ldrb	r1, [r7, #15]
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	4815      	ldr	r0, [pc, #84]	; (8002688 <SerialUSB_readBytesUntil+0x80>)
 8002634:	f000 fac5 	bl	8002bc2 <CDC_ReceiveQueue_ReadUntil>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]
                                              (uint8_t*)(buffer), rest, &read);
      CDC_resume_receive();
 800263c:	f009 fb82 	bl	800bd44 <CDC_resume_receive>
      rest -= read;
 8002640:	8abb      	ldrh	r3, [r7, #20]
 8002642:	461a      	mov	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	61fb      	str	r3, [r7, #28]
      buffer += read;
 800264a:	8abb      	ldrh	r3, [r7, #20]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
      if (found) {
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <SerialUSB_readBytesUntil+0x5a>
        return length - rest;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	e00e      	b.n	8002680 <SerialUSB_readBytesUntil+0x78>
      }
      if (rest == 0) {
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <SerialUSB_readBytesUntil+0x64>
        return length;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	e009      	b.n	8002680 <SerialUSB_readBytesUntil+0x78>
      }
    } while (HAL_GetTick() - _startMillis < USB_CDC_TIMEOUT);
 800266c:	f000 fbac 	bl	8002dc8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b31      	cmp	r3, #49	; 0x31
 8002678:	d9d3      	bls.n	8002622 <SerialUSB_readBytesUntil+0x1a>
    return length - rest;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20001c6c 	.word	0x20001c6c

0800268c <SerialUSB_peek>:

static int SerialUSB_peek(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  // Peek one symbol, it can't change receive avaiablity
    return CDC_ReceiveQueue_Peek(&ReceiveQueue);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <SerialUSB_peek+0x10>)
 8002692:	f000 fa01 	bl	8002a98 <CDC_ReceiveQueue_Peek>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20001c6c 	.word	0x20001c6c

080026a0 <SerialUSB_flush>:

static void SerialUSB_flush(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  // Wait for TransmitQueue read size becomes zero
  // TS: safe, because it not be stopped while receive 0
  while (CDC_TransmitQueue_ReadSize(&TransmitQueue) > 0) {}
 80026a4:	bf00      	nop
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <SerialUSB_flush+0x18>)
 80026a8:	f000 f836 	bl	8002718 <CDC_TransmitQueue_ReadSize>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	dcf9      	bgt.n	80026a6 <SerialUSB_flush+0x6>
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000be4 	.word	0x20000be4

080026bc <CDC_TransmitQueue_Init>:

#include "cdc_queue.h"

// Initialize read and write position of queue
void CDC_TransmitQueue_Init(CDC_TransmitQueue_TypeDef *queue)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
  queue->write = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <CDC_TransmitQueue_WriteSize>:

// Determine size, available for write in queue
int CDC_TransmitQueue_WriteSize(CDC_TransmitQueue_TypeDef *queue)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (queue->read + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write - 1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3380      	adds	r3, #128	; 0x80
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 80026f8:	b292      	uxth	r2, r2
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	3b01      	subs	r3, #1
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 80026fe:	425a      	negs	r2, r3
 8002700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002708:	bf58      	it	pl
 800270a:	4253      	negpl	r3, r2
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <CDC_TransmitQueue_ReadSize>:

// Determine size of data, stored in queue
int CDC_TransmitQueue_ReadSize(CDC_TransmitQueue_TypeDef *queue)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return (queue->write + CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002726:	b29b      	uxth	r3, r3
 8002728:	3380      	adds	r3, #128	; 0x80
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8002730:	b292      	uxth	r2, r2
 8002732:	1a9b      	subs	r3, r3, r2
         % CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
 8002734:	425a      	negs	r2, r3
 8002736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800273e:	bf58      	it	pl
 8002740:	4253      	negpl	r3, r2
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <CDC_TransmitQueue_Enqueue>:

// Write provided data into queue.
void CDC_TransmitQueue_Enqueue(CDC_TransmitQueue_TypeDef *queue,
                               const uint8_t *buffer, uint32_t size)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  uint32_t sizeToEnd = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->write;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002760:	b29b      	uxth	r3, r3
 8002762:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002766:	617b      	str	r3, [r7, #20]
  if (sizeToEnd > size) {
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d90c      	bls.n	800278a <CDC_TransmitQueue_Enqueue+0x3c>
    memcpy(&queue->buffer[queue->write], &buffer[0], size);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	4618      	mov	r0, r3
 8002784:	f009 ff7c 	bl	800c680 <memcpy>
 8002788:	e015      	b.n	80027b6 <CDC_TransmitQueue_Enqueue+0x68>
  } else {
    memcpy(&queue->buffer[queue->write], &buffer[0], sizeToEnd);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f009 ff6f 	bl	800c680 <memcpy>
    memcpy(&queue->buffer[0], &buffer[sizeToEnd], size - sizeToEnd);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	18d1      	adds	r1, r2, r3
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	f009 ff65 	bl	800c680 <memcpy>
  }
  queue->write = (uint16_t)((queue->write + size) %
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
                            CDC_TRANSMIT_QUEUE_BUFFER_SIZE);
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <CDC_TransmitQueue_ReadBlock>:

// Read flat block from queue biggest as possible, but max QUEUE_MAX_PACKET_SIZE
uint8_t *CDC_TransmitQueue_ReadBlock(CDC_TransmitQueue_TypeDef *queue,
                                     uint16_t *size)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  if (queue->write >= queue->read) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d30c      	bcc.n	8002812 <CDC_TransmitQueue_ReadBlock+0x38>
    *size = queue->write - queue->read;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002806:	b29b      	uxth	r3, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	b29a      	uxth	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	e008      	b.n	8002824 <CDC_TransmitQueue_ReadBlock+0x4a>
  } else {
    *size = CDC_TRANSMIT_QUEUE_BUFFER_SIZE - queue->read;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002818:	b29b      	uxth	r3, r3
 800281a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800281e:	b29a      	uxth	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	801a      	strh	r2, [r3, #0]
  }
  queue->reserved = *size;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  return &queue->buffer[queue->read];
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4413      	add	r3, r2
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <CDC_TransmitQueue_CommitRead>:

void CDC_TransmitQueue_CommitRead(CDC_TransmitQueue_TypeDef *queue)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  queue->read = (queue->read + queue->reserved) %
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                CDC_TRANSMIT_QUEUE_BUFFER_SIZE;
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <CDC_ReceiveQueue_Init>:

// Initialize read and write position of queue.
void CDC_ReceiveQueue_Init(CDC_ReceiveQueue_TypeDef *queue)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  queue->read = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  queue->write = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	22c0      	movs	r2, #192	; 0xc0
 8002898:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <CDC_ReceiveQueue_ReserveBlock>:

// Reserve block in queue and return pointer to it.
uint8_t *CDC_ReceiveQueue_ReserveBlock(CDC_ReceiveQueue_TypeDef *queue)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint16_t limit = CDC_RECEIVE_QUEUE_BUFFER_SIZE - CDC_QUEUE_MAX_PACKET_SIZE;
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	81fb      	strh	r3, [r7, #14]
  uint16_t read = queue->read;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80028ba:	81bb      	strh	r3, [r7, #12]

  if (read <= queue->write) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	89ba      	ldrh	r2, [r7, #12]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d82c      	bhi.n	8002924 <CDC_ReceiveQueue_ReserveBlock+0x7c>
    // if write is limited only by buffer size.
    if (queue->write < limit || (queue->write == limit && read > 0)) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d809      	bhi.n	80028ec <CDC_ReceiveQueue_ReserveBlock+0x44>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	89fa      	ldrh	r2, [r7, #14]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d109      	bne.n	80028fa <CDC_ReceiveQueue_ReserveBlock+0x52>
 80028e6:	89bb      	ldrh	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <CDC_ReceiveQueue_ReserveBlock+0x52>
      // if size in the rest of buffer is enough for full packet plus 1 byte
      // or if it tight enough and write position can be set to 0
      return (queue->buffer + queue->write);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80028f4:	b292      	uxth	r2, r2
 80028f6:	4413      	add	r3, r2
 80028f8:	e025      	b.n	8002946 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    } else if (read > CDC_QUEUE_MAX_PACKET_SIZE) {
 80028fa:	89bb      	ldrh	r3, [r7, #12]
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d921      	bls.n	8002944 <CDC_ReceiveQueue_ReserveBlock+0x9c>
      // if size in the rest is not enough, but enough size in head
      queue->length = queue->write;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      queue->write = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
      return ( queue->buffer + queue->write);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800291e:	b292      	uxth	r2, r2
 8002920:	4413      	add	r3, r2
 8002922:	e010      	b.n	8002946 <CDC_ReceiveQueue_ReserveBlock+0x9e>
    }
  } else if (queue->write + CDC_QUEUE_MAX_PACKET_SIZE < read) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800292a:	b29b      	uxth	r3, r3
 800292c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002930:	89bb      	ldrh	r3, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d206      	bcs.n	8002944 <CDC_ReceiveQueue_ReserveBlock+0x9c>
    // write position must be less than read position
    // after reading largest possible packet
    return (queue->buffer + queue->write);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800293e:	b292      	uxth	r2, r2
 8002940:	4413      	add	r3, r2
 8002942:	e000      	b.n	8002946 <CDC_ReceiveQueue_ReserveBlock+0x9e>
  }
  return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <CDC_ReceiveQueue_CommitBlock>:

// Commits block in queue and make it available for reading
void CDC_ReceiveQueue_CommitBlock(CDC_ReceiveQueue_TypeDef *queue,
                                  uint16_t size)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
  queue->write += size;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002964:	b29a      	uxth	r2, r3
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	4413      	add	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  if (queue->write >= queue->length) {
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002978:	b29a      	uxth	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002980:	b29b      	uxth	r3, r3
 8002982:	429a      	cmp	r2, r3
 8002984:	d303      	bcc.n	800298e <CDC_ReceiveQueue_CommitBlock+0x3c>
    queue->length = CDC_RECEIVE_QUEUE_BUFFER_SIZE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	22c0      	movs	r2, #192	; 0xc0
 800298a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  }
  if (queue->write >= CDC_RECEIVE_QUEUE_BUFFER_SIZE) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002994:	b29b      	uxth	r3, r3
 8002996:	2bbf      	cmp	r3, #191	; 0xbf
 8002998:	d903      	bls.n	80029a2 <CDC_ReceiveQueue_CommitBlock+0x50>
    queue->write = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <CDC_ReceiveQueue_ReadSize>:

// Determine size, available for read
int CDC_ReceiveQueue_ReadSize(CDC_ReceiveQueue_TypeDef *queue)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  // reading length after write make guarantee, that length >= write
  // and determined reading size will be smaller or equal than real one.
  volatile uint16_t write = queue->write;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80029bc:	b29b      	uxth	r3, r3
 80029be:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	81bb      	strh	r3, [r7, #12]
  if (write >= queue->read) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d808      	bhi.n	80029ec <CDC_ReceiveQueue_ReadSize+0x3e>
    return write - queue->read;
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	e00a      	b.n	8002a02 <CDC_ReceiveQueue_ReadSize+0x54>
  }
  return length + write - queue->read;
 80029ec:	89bb      	ldrh	r3, [r7, #12]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	f8b2 20c2 	ldrh.w	r2, [r2, #194]	; 0xc2
 80029fe:	b292      	uxth	r2, r2
 8002a00:	1a9b      	subs	r3, r3, r2
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <CDC_ReceiveQueue_Dequeue>:

// Read one byte from queue.
int CDC_ReceiveQueue_Dequeue(CDC_ReceiveQueue_TypeDef *queue)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	81bb      	strh	r3, [r7, #12]
  volatile uint16_t length = queue->length;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	817b      	strh	r3, [r7, #10]
  if (queue->read == length) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	897b      	ldrh	r3, [r7, #10]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d103      	bne.n	8002a42 <CDC_ReceiveQueue_Dequeue+0x34>
    queue->read = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	89bb      	ldrh	r3, [r7, #12]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d102      	bne.n	8002a58 <CDC_ReceiveQueue_Dequeue+0x4a>
    return -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e019      	b.n	8002a8c <CDC_ReceiveQueue_Dequeue+0x7e>
  }
  uint8_t ch = queue->buffer[queue->read++];
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	b291      	uxth	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	73fb      	strb	r3, [r7, #15]
  if (queue->read >= length) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d303      	bcc.n	8002a8a <CDC_ReceiveQueue_Dequeue+0x7c>
    queue->read = 0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return ch;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <CDC_ReceiveQueue_Peek>:

// Peek byte from queue.
int CDC_ReceiveQueue_Peek(CDC_ReceiveQueue_TypeDef *queue)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  volatile uint16_t write = queue->write;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	81fb      	strh	r3, [r7, #14]
  volatile uint16_t length = queue->length;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	81bb      	strh	r3, [r7, #12]
  if (queue->read >= length) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	89bb      	ldrh	r3, [r7, #12]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d303      	bcc.n	8002acc <CDC_ReceiveQueue_Peek+0x34>
    queue->read = 0;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write == queue->read) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d102      	bne.n	8002ae2 <CDC_ReceiveQueue_Peek+0x4a>
    return -1;
 8002adc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae0:	e006      	b.n	8002af0 <CDC_ReceiveQueue_Peek+0x58>
  }
  return queue->buffer[queue->read];
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <CDC_ReceiveQueue_Read>:

uint16_t CDC_ReceiveQueue_Read(CDC_ReceiveQueue_TypeDef *queue,
                               uint8_t *buffer, uint16_t size)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  volatile uint16_t write = queue->write;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	8a7b      	ldrh	r3, [r7, #18]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d303      	bcc.n	8002b36 <CDC_ReceiveQueue_Read+0x3a>
    queue->read = 0;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	8abb      	ldrh	r3, [r7, #20]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d808      	bhi.n	8002b58 <CDC_ReceiveQueue_Read+0x5c>
    available = write - queue->read;
 8002b46:	8abb      	ldrh	r3, [r7, #20]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	e007      	b.n	8002b68 <CDC_ReceiveQueue_Read+0x6c>
  } else {
    available = length - queue->read;
 8002b58:	8a7b      	ldrh	r3, [r7, #18]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	82fb      	strh	r3, [r7, #22]
  }
  if (available < size) {
 8002b68:	8afa      	ldrh	r2, [r7, #22]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d201      	bcs.n	8002b74 <CDC_ReceiveQueue_Read+0x78>
    size = available;
 8002b70:	8afb      	ldrh	r3, [r7, #22]
 8002b72:	80fb      	strh	r3, [r7, #6]
  }

  memcpy(buffer, &queue->buffer[queue->read], size);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	4619      	mov	r1, r3
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f009 fd7a 	bl	800c680 <memcpy>
  queue->read = queue->read + size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	4413      	add	r3, r2
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	8a7b      	ldrh	r3, [r7, #18]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d303      	bcc.n	8002bb8 <CDC_ReceiveQueue_Read+0xbc>
    queue->read = 0;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return size;
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <CDC_ReceiveQueue_ReadUntil>:

bool CDC_ReceiveQueue_ReadUntil(CDC_ReceiveQueue_TypeDef *queue,
                                uint8_t terminator, uint8_t *buffer, uint16_t size, uint16_t *fetched)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b089      	sub	sp, #36	; 0x24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	460b      	mov	r3, r1
 8002bd0:	72fb      	strb	r3, [r7, #11]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	813b      	strh	r3, [r7, #8]
  volatile uint16_t write = queue->write;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	82bb      	strh	r3, [r7, #20]
  volatile uint16_t length = queue->length;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	827b      	strh	r3, [r7, #18]
  uint16_t available;

  if (queue->read >= length) {
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	8a7b      	ldrh	r3, [r7, #18]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d303      	bcc.n	8002c02 <CDC_ReceiveQueue_ReadUntil+0x40>
    queue->read = 0;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  if (write >= queue->read) {
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d808      	bhi.n	8002c24 <CDC_ReceiveQueue_ReadUntil+0x62>
    available = write - queue->read;
 8002c12:	8abb      	ldrh	r3, [r7, #20]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	83fb      	strh	r3, [r7, #30]
 8002c22:	e007      	b.n	8002c34 <CDC_ReceiveQueue_ReadUntil+0x72>
  } else {
    available = length - queue->read;
 8002c24:	8a7b      	ldrh	r3, [r7, #18]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	83fb      	strh	r3, [r7, #30]
  }
  if (available < size) {
 8002c34:	8bfa      	ldrh	r2, [r7, #30]
 8002c36:	893b      	ldrh	r3, [r7, #8]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d201      	bcs.n	8002c40 <CDC_ReceiveQueue_ReadUntil+0x7e>
    size = available;
 8002c3c:	8bfb      	ldrh	r3, [r7, #30]
 8002c3e:	813b      	strh	r3, [r7, #8]
  }

  uint8_t *start = &queue->buffer[queue->read];
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
  for (uint16_t i = 0; i < size; i++) {
 8002c50:	2300      	movs	r3, #0
 8002c52:	83bb      	strh	r3, [r7, #28]
 8002c54:	e02d      	b.n	8002cb2 <CDC_ReceiveQueue_ReadUntil+0xf0>
    uint8_t ch = start[i];
 8002c56:	8bbb      	ldrh	r3, [r7, #28]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	75fb      	strb	r3, [r7, #23]
    if (ch == terminator) {
 8002c60:	7dfa      	ldrb	r2, [r7, #23]
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d11c      	bne.n	8002ca2 <CDC_ReceiveQueue_ReadUntil+0xe0>
      queue->read += (uint16_t)(i + 1);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	8bbb      	ldrh	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      if (queue->read >= length) {
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d303      	bcc.n	8002c98 <CDC_ReceiveQueue_ReadUntil+0xd6>
        queue->read = 0;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
      }
      *fetched = i;
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	8bba      	ldrh	r2, [r7, #28]
 8002c9c:	801a      	strh	r2, [r3, #0]
      return true;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e025      	b.n	8002cee <CDC_ReceiveQueue_ReadUntil+0x12c>
    } else {
      buffer[i] = ch;
 8002ca2:	8bbb      	ldrh	r3, [r7, #28]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	7dfa      	ldrb	r2, [r7, #23]
 8002caa:	701a      	strb	r2, [r3, #0]
  for (uint16_t i = 0; i < size; i++) {
 8002cac:	8bbb      	ldrh	r3, [r7, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	83bb      	strh	r3, [r7, #28]
 8002cb2:	8bba      	ldrh	r2, [r7, #28]
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3cd      	bcc.n	8002c56 <CDC_ReceiveQueue_ReadUntil+0x94>
    }
  }

  *fetched = size;
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	801a      	strh	r2, [r3, #0]
  queue->read += size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	893b      	ldrh	r3, [r7, #8]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  if (queue->read >= length) {
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	8a7b      	ldrh	r3, [r7, #18]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d303      	bcc.n	8002cec <CDC_ReceiveQueue_ReadUntil+0x12a>
    queue->read = 0;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  }
  return false;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f973 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7fe fa68 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f999 	bl	8003096 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 f953 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000000 	.word	0x20000000
 8002d98:	200002bc 	.word	0x200002bc
 8002d9c:	200002b8 	.word	0x200002b8

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	200002bc 	.word	0x200002bc
 8002dc4:	20000910 	.word	0x20000910

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000910 	.word	0x20000910

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200002bc 	.word	0x200002bc

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db12      	blt.n	8002f00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	490a      	ldr	r1, [pc, #40]	; (8002f0c <__NVIC_DisableIRQ+0x44>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	3320      	adds	r3, #32
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ef4:	f3bf 8f4f 	dsb	sy
}
 8002ef8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002efa:	f3bf 8f6f 	isb	sy
}
 8002efe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	db0a      	blt.n	8002f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	490c      	ldr	r1, [pc, #48]	; (8002f5c <__NVIC_SetPriority+0x4c>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	0112      	lsls	r2, r2, #4
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	440b      	add	r3, r1
 8002f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f38:	e00a      	b.n	8002f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4908      	ldr	r1, [pc, #32]	; (8002f60 <__NVIC_SetPriority+0x50>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	3b04      	subs	r3, #4
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	761a      	strb	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f1c3 0307 	rsb	r3, r3, #7
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	bf28      	it	cs
 8002f82:	2304      	movcs	r3, #4
 8002f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d902      	bls.n	8002f94 <NVIC_EncodePriority+0x30>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3b03      	subs	r3, #3
 8002f92:	e000      	b.n	8002f96 <NVIC_EncodePriority+0x32>
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fac:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	4313      	orrs	r3, r2
         );
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff8e 	bl	8002f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff05 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff1a 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff8e 	bl	8002f64 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5d 	bl	8002f10 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff0d 	bl	8002e8c <__NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff1d 	bl	8002ec8 <__NVIC_DisableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff94 	bl	8002fcc <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff fe84 	bl	8002dc8 <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d008      	beq.n	80030e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e052      	b.n	8003186 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0216 	bic.w	r2, r2, #22
 80030ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <HAL_DMA_Abort+0x62>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0208 	bic.w	r2, r2, #8
 800311e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003130:	e013      	b.n	800315a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003132:	f7ff fe49 	bl	8002dc8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b05      	cmp	r3, #5
 800313e:	d90c      	bls.n	800315a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e015      	b.n	8003186 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e4      	bne.n	8003132 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	223f      	movs	r2, #63	; 0x3f
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d004      	beq.n	80031ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e00c      	b.n	80031c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2205      	movs	r2, #5
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e159      	b.n	80034a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	f040 8148 	bne.w	800349e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	2b02      	cmp	r3, #2
 8003224:	d130      	bne.n	8003288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0201 	and.w	r2, r3, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d017      	beq.n	80032c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d123      	bne.n	8003318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a2 	beq.w	800349e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003376:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_GPIO_Init+0x2ec>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <HAL_GPIO_Init+0x2f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x202>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_GPIO_Init+0x2f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x1fe>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a47      	ldr	r2, [pc, #284]	; (80034cc <HAL_GPIO_Init+0x2f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x1fa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a46      	ldr	r2, [pc, #280]	; (80034d0 <HAL_GPIO_Init+0x2fc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x1f6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a45      	ldr	r2, [pc, #276]	; (80034d4 <HAL_GPIO_Init+0x300>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x1f2>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x2ec>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_GPIO_Init+0x304>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f aea2 	bls.w	80031f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e0bb      	b.n	8003670 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f8:	2201      	movs	r2, #1
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	429a      	cmp	r2, r3
 8003510:	f040 80ab 	bne.w	800366a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003514:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_GPIO_DeInit+0x1ac>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003520:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	220f      	movs	r2, #15
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a54      	ldr	r2, [pc, #336]	; (800368c <HAL_GPIO_DeInit+0x1b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_DeInit+0x96>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a53      	ldr	r2, [pc, #332]	; (8003690 <HAL_GPIO_DeInit+0x1b4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_DeInit+0x92>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_GPIO_DeInit+0x1b8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_DeInit+0x8e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_GPIO_DeInit+0x1bc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_DeInit+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a50      	ldr	r2, [pc, #320]	; (800369c <HAL_GPIO_DeInit+0x1c0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_DeInit+0x86>
 800355e:	2304      	movs	r3, #4
 8003560:	e008      	b.n	8003574 <HAL_GPIO_DeInit+0x98>
 8003562:	2307      	movs	r3, #7
 8003564:	e006      	b.n	8003574 <HAL_GPIO_DeInit+0x98>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_DeInit+0x98>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_DeInit+0x98>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_DeInit+0x98>
 8003572:	2300      	movs	r3, #0
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d132      	bne.n	80035ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	4944      	ldr	r1, [pc, #272]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 800358e:	4013      	ands	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003592:	4b43      	ldr	r3, [pc, #268]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	4941      	ldr	r1, [pc, #260]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 800359c:	4013      	ands	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	493a      	ldr	r1, [pc, #232]	; (80036a0 <HAL_GPIO_DeInit+0x1c4>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035cc:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <HAL_GPIO_DeInit+0x1ac>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	43da      	mvns	r2, r3
 80035dc:	482a      	ldr	r0, [pc, #168]	; (8003688 <HAL_GPIO_DeInit+0x1ac>)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	400a      	ands	r2, r1
 80035e4:	3302      	adds	r3, #2
 80035e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2103      	movs	r1, #3
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	08d2      	lsrs	r2, r2, #3
 8003620:	4019      	ands	r1, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2103      	movs	r1, #3
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	2101      	movs	r1, #1
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2103      	movs	r1, #3
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	401a      	ands	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f67f af40 	bls.w	80034f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40013800 	.word	0x40013800
 800368c:	40020000 	.word	0x40020000
 8003690:	40020400 	.word	0x40020400
 8003694:	40020800 	.word	0x40020800
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40021000 	.word	0x40021000
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f0:	e003      	b.n	80036fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003718:	887a      	ldrh	r2, [r7, #2]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	041a      	lsls	r2, r3, #16
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43d9      	mvns	r1, r3
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	400b      	ands	r3, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	619a      	str	r2, [r3, #24]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e12b      	b.n	80039a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fd76 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a0:	f002 fe32 	bl	8006408 <HAL_RCC_GetPCLK1Freq>
 80037a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a81      	ldr	r2, [pc, #516]	; (80039b0 <HAL_I2C_Init+0x274>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d807      	bhi.n	80037c0 <HAL_I2C_Init+0x84>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a80      	ldr	r2, [pc, #512]	; (80039b4 <HAL_I2C_Init+0x278>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e006      	b.n	80037ce <HAL_I2C_Init+0x92>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a7d      	ldr	r2, [pc, #500]	; (80039b8 <HAL_I2C_Init+0x27c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	bf94      	ite	ls
 80037c8:	2301      	movls	r3, #1
 80037ca:	2300      	movhi	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0e7      	b.n	80039a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a78      	ldr	r2, [pc, #480]	; (80039bc <HAL_I2C_Init+0x280>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9b      	lsrs	r3, r3, #18
 80037e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a6a      	ldr	r2, [pc, #424]	; (80039b0 <HAL_I2C_Init+0x274>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d802      	bhi.n	8003810 <HAL_I2C_Init+0xd4>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	3301      	adds	r3, #1
 800380e:	e009      	b.n	8003824 <HAL_I2C_Init+0xe8>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	4a69      	ldr	r2, [pc, #420]	; (80039c0 <HAL_I2C_Init+0x284>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	3301      	adds	r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	430b      	orrs	r3, r1
 800382a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003836:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	495c      	ldr	r1, [pc, #368]	; (80039b0 <HAL_I2C_Init+0x274>)
 8003840:	428b      	cmp	r3, r1
 8003842:	d819      	bhi.n	8003878 <HAL_I2C_Init+0x13c>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1e59      	subs	r1, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003852:	1c59      	adds	r1, r3, #1
 8003854:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003858:	400b      	ands	r3, r1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_I2C_Init+0x138>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e59      	subs	r1, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fbb1 f3f3 	udiv	r3, r1, r3
 800386c:	3301      	adds	r3, #1
 800386e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003872:	e051      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 8003874:	2304      	movs	r3, #4
 8003876:	e04f      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d111      	bne.n	80038a4 <HAL_I2C_Init+0x168>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e012      	b.n	80038ca <HAL_I2C_Init+0x18e>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Init+0x196>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e022      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10e      	bne.n	80038f8 <HAL_I2C_Init+0x1bc>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1e58      	subs	r0, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	440b      	add	r3, r1
 80038e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f6:	e00f      	b.n	8003918 <HAL_I2C_Init+0x1dc>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1e58      	subs	r0, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	0099      	lsls	r1, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	fbb0 f3f3 	udiv	r3, r0, r3
 800390e:	3301      	adds	r3, #1
 8003910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003914:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	6809      	ldr	r1, [r1, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69da      	ldr	r2, [r3, #28]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003946:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6911      	ldr	r1, [r2, #16]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	430b      	orrs	r3, r1
 800395a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	000186a0 	.word	0x000186a0
 80039b4:	001e847f 	.word	0x001e847f
 80039b8:	003d08ff 	.word	0x003d08ff
 80039bc:	431bde83 	.word	0x431bde83
 80039c0:	10624dd3 	.word	0x10624dd3

080039c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	460b      	mov	r3, r1
 80039d2:	817b      	strh	r3, [r7, #10]
 80039d4:	4613      	mov	r3, r2
 80039d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7ff f9f6 	bl	8002dc8 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	f040 80e0 	bne.w	8003bac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2319      	movs	r3, #25
 80039f2:	2201      	movs	r2, #1
 80039f4:	4970      	ldr	r1, [pc, #448]	; (8003bb8 <HAL_I2C_Master_Transmit+0x1f4>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fd86 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0d3      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2C_Master_Transmit+0x50>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0cc      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d007      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2221      	movs	r2, #33	; 0x21
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2210      	movs	r2, #16
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	893a      	ldrh	r2, [r7, #8]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_I2C_Master_Transmit+0x1f8>)
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a7c:	8979      	ldrh	r1, [r7, #10]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fbf0 	bl	8004268 <I2C_MasterRequestWrite>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e08d      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aa8:	e066      	b.n	8003b78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fe00 	bl	80046b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d11b      	bne.n	8003b4c <HAL_I2C_Master_Transmit+0x188>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d017      	beq.n	8003b4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6a39      	ldr	r1, [r7, #32]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fdf0 	bl	8004736 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e01a      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d194      	bne.n	8003aaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7ff f8f8 	bl	8002dc8 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 820b 	bne.w	8003ffe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2319      	movs	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	497c      	ldr	r1, [pc, #496]	; (8003de4 <HAL_I2C_Master_Receive+0x224>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fc88 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e1fe      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2C_Master_Receive+0x50>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e1f7      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d007      	beq.n	8003c36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2222      	movs	r2, #34	; 0x22
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2210      	movs	r2, #16
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	893a      	ldrh	r2, [r7, #8]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a5c      	ldr	r2, [pc, #368]	; (8003de8 <HAL_I2C_Master_Receive+0x228>)
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c78:	8979      	ldrh	r1, [r7, #10]
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fb74 	bl	800436c <I2C_MasterRequestRead>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1b8      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e18c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e16c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d11b      	bne.n	8003d3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	e14c      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d64:	e138      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	f200 80f1 	bhi.w	8003f52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d123      	bne.n	8003dc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fd1b 	bl	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e139      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dbe:	e10b      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d14e      	bne.n	8003e66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_I2C_Master_Receive+0x22c>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fb98 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e10e      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e64:	e0b8      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4966      	ldr	r1, [pc, #408]	; (8004008 <HAL_I2C_Master_Receive+0x448>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fb49 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0bf      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	2200      	movs	r2, #0
 8003eca:	494f      	ldr	r1, [pc, #316]	; (8004008 <HAL_I2C_Master_Receive+0x448>)
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fb1b 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e091      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f50:	e042      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fc2e 	bl	80047b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e04c      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d118      	bne.n	8003fd8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f47f aec2 	bne.w	8003d66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	00010004 	.word	0x00010004

0800400c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	460b      	mov	r3, r1
 800401a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7fe fed4 	bl	8002dc8 <HAL_GetTick>
 8004020:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	f040 8111 	bne.w	8004256 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	2319      	movs	r3, #25
 800403a:	2201      	movs	r2, #1
 800403c:	4988      	ldr	r1, [pc, #544]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa62 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	e104      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_IsDeviceReady+0x50>
 8004058:	2302      	movs	r3, #2
 800405a:	e0fd      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2224      	movs	r2, #36	; 0x24
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a70      	ldr	r2, [pc, #448]	; (8004264 <HAL_I2C_IsDeviceReady+0x258>)
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa20 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d103      	bne.n	80040e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0b6      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ea:	897b      	ldrh	r3, [r7, #10]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fe fe65 	bl	8002dc8 <HAL_GetTick>
 80040fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800412e:	e025      	b.n	800417c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fe fe4a 	bl	8002dc8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <HAL_I2C_IsDeviceReady+0x13a>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22a0      	movs	r2, #160	; 0xa0
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2ba0      	cmp	r3, #160	; 0xa0
 8004186:	d005      	beq.n	8004194 <HAL_I2C_IsDeviceReady+0x188>
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_I2C_IsDeviceReady+0x188>
 800418e:	7dbb      	ldrb	r3, [r7, #22]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0cd      	beq.n	8004130 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d129      	bne.n	80041fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2319      	movs	r3, #25
 80041d6:	2201      	movs	r2, #1
 80041d8:	4921      	ldr	r1, [pc, #132]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f994 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e036      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e02c      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004216:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2319      	movs	r3, #25
 800421e:	2201      	movs	r2, #1
 8004220:	490f      	ldr	r1, [pc, #60]	; (8004260 <HAL_I2C_IsDeviceReady+0x254>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f970 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e012      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3301      	adds	r3, #1
 8004236:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	f4ff af32 	bcc.w	80040a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	00100002 	.word	0x00100002
 8004264:	ffff0000 	.word	0xffff0000

08004268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	460b      	mov	r3, r1
 8004276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d006      	beq.n	8004292 <I2C_MasterRequestWrite+0x2a>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d003      	beq.n	8004292 <I2C_MasterRequestWrite+0x2a>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004290:	d108      	bne.n	80042a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e00b      	b.n	80042bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b12      	cmp	r3, #18
 80042aa:	d107      	bne.n	80042bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f91d 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e2:	d103      	bne.n	80042ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e035      	b.n	800435c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f8:	d108      	bne.n	800430c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004308:	611a      	str	r2, [r3, #16]
 800430a:	e01b      	b.n	8004344 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800430c:	897b      	ldrh	r3, [r7, #10]
 800430e:	11db      	asrs	r3, r3, #7
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0306 	and.w	r3, r3, #6
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f063 030f 	orn	r3, r3, #15
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	490e      	ldr	r1, [pc, #56]	; (8004364 <I2C_MasterRequestWrite+0xfc>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f943 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e010      	b.n	800435c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <I2C_MasterRequestWrite+0x100>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f933 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010008 	.word	0x00010008
 8004368:	00010002 	.word	0x00010002

0800436c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004390:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d006      	beq.n	80043a6 <I2C_MasterRequestRead+0x3a>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d003      	beq.n	80043a6 <I2C_MasterRequestRead+0x3a>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a4:	d108      	bne.n	80043b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e00b      	b.n	80043d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2b11      	cmp	r3, #17
 80043be:	d107      	bne.n	80043d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f893 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f6:	d103      	bne.n	8004400 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e079      	b.n	80044f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440c:	d108      	bne.n	8004420 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e05f      	b.n	80044e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004420:	897b      	ldrh	r3, [r7, #10]
 8004422:	11db      	asrs	r3, r3, #7
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 0306 	and.w	r3, r3, #6
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f063 030f 	orn	r3, r3, #15
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4930      	ldr	r1, [pc, #192]	; (8004500 <I2C_MasterRequestRead+0x194>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f8b9 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e054      	b.n	80044f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4929      	ldr	r1, [pc, #164]	; (8004504 <I2C_MasterRequestRead+0x198>)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8a9 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e044      	b.n	80044f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004492:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f831 	bl	8004508 <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ba:	d103      	bne.n	80044c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e017      	b.n	80044f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044c8:	897b      	ldrh	r3, [r7, #10]
 80044ca:	11db      	asrs	r3, r3, #7
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0306 	and.w	r3, r3, #6
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	f063 030e 	orn	r3, r3, #14
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4907      	ldr	r1, [pc, #28]	; (8004504 <I2C_MasterRequestRead+0x198>)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f865 	bl	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	00010008 	.word	0x00010008
 8004504:	00010002 	.word	0x00010002

08004508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004518:	e025      	b.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d021      	beq.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fe fc51 	bl	8002dc8 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d116      	bne.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e023      	b.n	80045ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10d      	bne.n	800458c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	e00c      	b.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	43da      	mvns	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4013      	ands	r3, r2
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d0b6      	beq.n	800451a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045c4:	e051      	b.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d4:	d123      	bne.n	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e046      	b.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d021      	beq.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe fbcf 	bl	8002dc8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d116      	bne.n	800466a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e020      	b.n	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10c      	bne.n	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e00b      	b.n	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	43da      	mvns	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4013      	ands	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d18d      	bne.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c0:	e02d      	b.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f8ce 	bl	8004864 <I2C_IsAcknowledgeFailed>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e02d      	b.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d021      	beq.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fe fb75 	bl	8002dc8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e007      	b.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d1ca      	bne.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004742:	e02d      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f88d 	bl	8004864 <I2C_IsAcknowledgeFailed>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e02d      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d021      	beq.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475c:	f7fe fb34 	bl	8002dc8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	429a      	cmp	r2, r3
 800476a:	d302      	bcc.n	8004772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d116      	bne.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d1ca      	bne.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c4:	e042      	b.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d119      	bne.n	8004808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0210 	mvn.w	r2, #16
 80047dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e029      	b.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004808:	f7fe fade 	bl	8002dc8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d116      	bne.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d1b5      	bne.n	80047c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d11b      	bne.n	80048b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f043 0204 	orr.w	r2, r3, #4
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c4:	b08f      	sub	sp, #60	; 0x3c
 80048c6:	af0a      	add	r7, sp, #40	; 0x28
 80048c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e10f      	b.n	8004af4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f007 fb82 	bl	800bff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2203      	movs	r2, #3
 80048f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f003 f91b 	bl	8007b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	687e      	ldr	r6, [r7, #4]
 8004920:	466d      	mov	r5, sp
 8004922:	f106 0410 	add.w	r4, r6, #16
 8004926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004932:	e885 0003 	stmia.w	r5, {r0, r1}
 8004936:	1d33      	adds	r3, r6, #4
 8004938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	f002 fff2 	bl	8007924 <USB_CoreInit>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0d0      	b.n	8004af4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f003 f909 	bl	8007b70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e04a      	b.n	80049fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	333d      	adds	r3, #61	; 0x3d
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	333c      	adds	r3, #60	; 0x3c
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	b298      	uxth	r0, r3
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	3342      	adds	r3, #66	; 0x42
 80049a0:	4602      	mov	r2, r0
 80049a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	333f      	adds	r3, #63	; 0x3f
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	3344      	adds	r3, #68	; 0x44
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	3348      	adds	r3, #72	; 0x48
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3350      	adds	r3, #80	; 0x50
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	3301      	adds	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3af      	bcc.n	8004964 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e044      	b.n	8004a94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	3301      	adds	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	7bfa      	ldrb	r2, [r7, #15]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d3b5      	bcc.n	8004a0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	687e      	ldr	r6, [r7, #4]
 8004aa6:	466d      	mov	r5, sp
 8004aa8:	f106 0410 	add.w	r4, r6, #16
 8004aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004abc:	1d33      	adds	r3, r6, #4
 8004abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac0:	6838      	ldr	r0, [r7, #0]
 8004ac2:	f003 f87f 	bl	8007bc4 <USB_DevInit>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e00d      	b.n	8004af4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f004 f8c7 	bl	8008c80 <USB_DevDisconnect>

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004afc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_PCD_Start+0x1c>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e020      	b.n	8004b5a <HAL_PCD_Start+0x5e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d109      	bne.n	8004b3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d005      	beq.n	8004b3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f002 fff3 	bl	8007b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f004 f877 	bl	8008c3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b62:	b590      	push	{r4, r7, lr}
 8004b64:	b08d      	sub	sp, #52	; 0x34
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f004 f935 	bl	8008de8 <USB_GetMode>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f040 839d 	bne.w	80052c0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f004 f899 	bl	8008cc2 <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8393 	beq.w	80052be <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f004 f890 	bl	8008cc2 <USB_ReadInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d107      	bne.n	8004bbc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f002 0202 	and.w	r2, r2, #2
 8004bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f004 f87e 	bl	8008cc2 <USB_ReadInterrupts>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d161      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0210 	bic.w	r2, r2, #16
 8004bde:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	0c5b      	lsrs	r3, r3, #17
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d124      	bne.n	8004c56 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6a38      	ldr	r0, [r7, #32]
 8004c2c:	f003 fee4 	bl	80089f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c4e:	441a      	add	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e016      	b.n	8004c84 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	0c5b      	lsrs	r3, r3, #17
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	d110      	bne.n	8004c84 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6a38      	ldr	r0, [r7, #32]
 8004c6e:	f003 fec3 	bl	80089f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c7e:	441a      	add	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0210 	orr.w	r2, r2, #16
 8004c92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 f812 	bl	8008cc2 <USB_ReadInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ca8:	d16e      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f004 f818 	bl	8008ce8 <USB_ReadDevAllOutEpInterrupt>
 8004cb8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cba:	e062      	b.n	8004d82 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d057      	beq.n	8004d76 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 f83d 	bl	8008d50 <USB_ReadDevOutEPInterrupt>
 8004cd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fdb0 	bl	800585c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2308      	movs	r3, #8
 8004d16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 feaa 	bl	8005a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d008      	beq.n	8004d3c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	461a      	mov	r2, r3
 8004d38:	2310      	movs	r3, #16
 8004d3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	2320      	movs	r3, #32
 8004d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	3301      	adds	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d199      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f003 ff98 	bl	8008cc2 <USB_ReadInterrupts>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d9c:	f040 80c0 	bne.w	8004f20 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f003 ffb9 	bl	8008d1c <USB_ReadDevAllInEpInterrupt>
 8004daa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004db0:	e0b2      	b.n	8004f18 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80a7 	beq.w	8004f0c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 ffdf 	bl	8008d8c <USB_ReadDevInEPInterrupt>
 8004dce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d057      	beq.n	8004e8a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	2201      	movs	r2, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69f9      	ldr	r1, [r7, #28]
 8004df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d132      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3348      	adds	r3, #72	; 0x48
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4403      	add	r3, r0
 8004e38:	3344      	adds	r3, #68	; 0x44
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4419      	add	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4403      	add	r3, r0
 8004e4c:	3348      	adds	r3, #72	; 0x48
 8004e4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x31c>
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	3350      	adds	r3, #80	; 0x50
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e76:	461a      	mov	r2, r3
 8004e78:	2101      	movs	r1, #1
 8004e7a:	f003 ffe7 	bl	8008e4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f007 f938 	bl	800c0fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fc1b 	bl	8005742 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	3301      	adds	r3, #1
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f47f af49 	bne.w	8004db2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f003 fecc 	bl	8008cc2 <USB_ReadInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f34:	d122      	bne.n	8004f7c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d108      	bne.n	8004f66 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fe26 	bl	8005bb0 <HAL_PCDEx_LPM_Callback>
 8004f64:	e002      	b.n	8004f6c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f007 f934 	bl	800c1d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f003 fe9e 	bl	8008cc2 <USB_ReadInterrupts>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f90:	d112      	bne.n	8004fb8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f007 f8f0 	bl	800c188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fb6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f003 fe80 	bl	8008cc2 <USB_ReadInterrupts>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	f040 80c7 	bne.w	800515e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fde:	f023 0301 	bic.w	r3, r3, #1
 8004fe2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2110      	movs	r1, #16
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 ff4e 	bl	8007e8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	e056      	b.n	80050a4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	461a      	mov	r2, r3
 8005004:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005008:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005024:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005028:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005044:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005048:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800505c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800507c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800509c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	3301      	adds	r3, #1
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d3a3      	bcc.n	8004ff6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050da:	f043 030b 	orr.w	r3, r3, #11
 80050de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f0:	f043 030b 	orr.w	r3, r3, #11
 80050f4:	6453      	str	r3, [r2, #68]	; 0x44
 80050f6:	e015      	b.n	8005124 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800510a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800510e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511e:	f043 030b 	orr.w	r3, r3, #11
 8005122:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005132:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005136:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005148:	461a      	mov	r2, r3
 800514a:	f003 fe7f 	bl	8008e4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695a      	ldr	r2, [r3, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800515c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f003 fdad 	bl	8008cc2 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005172:	d124      	bne.n	80051be <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f003 fe43 	bl	8008e04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f002 fee3 	bl	8007f4e <USB_GetDevSpeed>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681c      	ldr	r4, [r3, #0]
 8005194:	f001 f92c 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8005198:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	4620      	mov	r0, r4
 80051a4:	f002 fc20 	bl	80079e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f006 ffce 	bl	800c14a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f003 fd7d 	bl	8008cc2 <USB_ReadInterrupts>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d10a      	bne.n	80051e8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f006 ffab 	bl	800c12e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f002 0208 	and.w	r2, r2, #8
 80051e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f003 fd68 	bl	8008cc2 <USB_ReadInterrupts>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fc:	d10f      	bne.n	800521e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	b2db      	uxtb	r3, r3
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f007 f803 	bl	800c214 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695a      	ldr	r2, [r3, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800521c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f003 fd4d 	bl	8008cc2 <USB_ReadInterrupts>
 8005228:	4603      	mov	r3, r0
 800522a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005232:	d10f      	bne.n	8005254 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	b2db      	uxtb	r3, r3
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f006 ffd6 	bl	800c1f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f003 fd32 	bl	8008cc2 <USB_ReadInterrupts>
 800525e:	4603      	mov	r3, r0
 8005260:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d10a      	bne.n	8005280 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f006 ffe4 	bl	800c238 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800527e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f003 fd1c 	bl	8008cc2 <USB_ReadInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d115      	bne.n	80052c0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f006 ffd4 	bl	800c254 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	e000      	b.n	80052c0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80052be:	bf00      	nop
    }
  }
}
 80052c0:	3734      	adds	r7, #52	; 0x34
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd90      	pop	{r4, r7, pc}

080052c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_PCD_SetAddress+0x1a>
 80052dc:	2302      	movs	r3, #2
 80052de:	e013      	b.n	8005308 <HAL_PCD_SetAddress+0x42>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 fc7a 	bl	8008bf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	70fb      	strb	r3, [r7, #3]
 8005322:	460b      	mov	r3, r1
 8005324:	803b      	strh	r3, [r7, #0]
 8005326:	4613      	mov	r3, r2
 8005328:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800532e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	da0f      	bge.n	8005356 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005336:	78fb      	ldrb	r3, [r7, #3]
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	3338      	adds	r3, #56	; 0x38
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	3304      	adds	r3, #4
 800534c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	705a      	strb	r2, [r3, #1]
 8005354:	e00f      	b.n	8005376 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	3304      	adds	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005382:	883a      	ldrh	r2, [r7, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	78ba      	ldrb	r2, [r7, #2]
 800538c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053a0:	78bb      	ldrb	r3, [r7, #2]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d102      	bne.n	80053ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_PCD_EP_Open+0xaa>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e00e      	b.n	80053d8 <HAL_PCD_EP_Open+0xc8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f002 fde5 	bl	8007f98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da0f      	bge.n	8005414 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	f003 020f 	and.w	r2, r3, #15
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3338      	adds	r3, #56	; 0x38
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	705a      	strb	r2, [r3, #1]
 8005412:	e00f      	b.n	8005434 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	3304      	adds	r3, #4
 800542c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_PCD_EP_Close+0x6e>
 800544a:	2302      	movs	r3, #2
 800544c:	e00e      	b.n	800546c <HAL_PCD_EP_Close+0x8c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	4618      	mov	r0, r3
 800545e:	f002 fe23 	bl	80080a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	460b      	mov	r3, r1
 8005482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005484:	7afb      	ldrb	r3, [r7, #11]
 8005486:	f003 020f 	and.w	r2, r3, #15
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	3304      	adds	r3, #4
 800549c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d102      	bne.n	80054d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054d0:	7afb      	ldrb	r3, [r7, #11]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	f003 f8fe 	bl	80086e8 <USB_EP0StartXfer>
 80054ec:	e008      	b.n	8005500 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	f002 feb0 	bl	8008260 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	440b      	add	r3, r1
 8005528:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800552c:	681b      	ldr	r3, [r3, #0]
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	460b      	mov	r3, r1
 8005548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	3338      	adds	r3, #56	; 0x38
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	3304      	adds	r3, #4
 8005560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2201      	movs	r2, #1
 8005578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	b2da      	uxtb	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005594:	7afb      	ldrb	r3, [r7, #11]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	f003 f89c 	bl	80086e8 <USB_EP0StartXfer>
 80055b0:	e008      	b.n	80055c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	6979      	ldr	r1, [r7, #20]
 80055c0:	f002 fe4e 	bl	8008260 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d901      	bls.n	80055ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e050      	b.n	800568e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da0f      	bge.n	8005614 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	3338      	adds	r3, #56	; 0x38
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	705a      	strb	r2, [r3, #1]
 8005612:	e00d      	b.n	8005630 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_PCD_EP_SetStall+0x82>
 800564c:	2302      	movs	r3, #2
 800564e:	e01e      	b.n	800568e <HAL_PCD_EP_SetStall+0xc0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	4618      	mov	r0, r3
 8005660:	f003 f9f3 	bl	8008a4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800567e:	461a      	mov	r2, r3
 8005680:	f003 fbe4 	bl	8008e4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d901      	bls.n	80056b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e042      	b.n	800573a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da0f      	bge.n	80056dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3338      	adds	r3, #56	; 0x38
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	705a      	strb	r2, [r3, #1]
 80056da:	e00f      	b.n	80056fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	3304      	adds	r3, #4
 80056f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_PCD_EP_ClrStall+0x86>
 8005718:	2302      	movs	r3, #2
 800571a:	e00e      	b.n	800573a <HAL_PCD_EP_ClrStall+0xa4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	4618      	mov	r0, r3
 800572c:	f003 f9fb 	bl	8008b26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08a      	sub	sp, #40	; 0x28
 8005746:	af02      	add	r7, sp, #8
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	3338      	adds	r3, #56	; 0x38
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	429a      	cmp	r2, r3
 8005774:	d901      	bls.n	800577a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e06c      	b.n	8005854 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	429a      	cmp	r2, r3
 800578e:	d902      	bls.n	8005796 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3303      	adds	r3, #3
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800579e:	e02b      	b.n	80057f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d902      	bls.n	80057bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3303      	adds	r3, #3
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68d9      	ldr	r1, [r3, #12]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	4603      	mov	r3, r0
 80057da:	6978      	ldr	r0, [r7, #20]
 80057dc:	f003 f8d7 	bl	800898e <USB_WritePacket>

    ep->xfer_buff  += len;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	441a      	add	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	b29b      	uxth	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	d809      	bhi.n	8005822 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005816:	429a      	cmp	r2, r3
 8005818:	d203      	bcs.n	8005822 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1be      	bne.n	80057a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	429a      	cmp	r2, r3
 800582c:	d811      	bhi.n	8005852 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	2201      	movs	r2, #1
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	43db      	mvns	r3, r3
 8005848:	6939      	ldr	r1, [r7, #16]
 800584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584e:	4013      	ands	r3, r2
 8005850:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	333c      	adds	r3, #60	; 0x3c
 8005874:	3304      	adds	r3, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b01      	cmp	r3, #1
 8005890:	f040 80a0 	bne.w	80059d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d015      	beq.n	80058ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a72      	ldr	r2, [pc, #456]	; (8005a6c <PCD_EP_OutXfrComplete_int+0x210>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	f240 80dd 	bls.w	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80d7 	beq.w	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	6093      	str	r3, [r2, #8]
 80058c8:	e0cb      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	461a      	mov	r2, r3
 80058e2:	2320      	movs	r3, #32
 80058e4:	6093      	str	r3, [r2, #8]
 80058e6:	e0bc      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 80b7 	bne.w	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a5d      	ldr	r2, [pc, #372]	; (8005a6c <PCD_EP_OutXfrComplete_int+0x210>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d90f      	bls.n	800591c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005918:	6093      	str	r3, [r2, #8]
 800591a:	e0a2      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800592e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	0159      	lsls	r1, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	440b      	add	r3, r1
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005942:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4403      	add	r3, r0
 8005952:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005956:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4403      	add	r3, r0
 800597a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4419      	add	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4403      	add	r3, r0
 8005990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005994:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d114      	bne.n	80059c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059be:	461a      	mov	r2, r3
 80059c0:	2101      	movs	r1, #1
 80059c2:	f003 fa43 	bl	8008e4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f006 fb79 	bl	800c0c4 <HAL_PCD_DataOutStageCallback>
 80059d2:	e046      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <PCD_EP_OutXfrComplete_int+0x214>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d124      	bne.n	8005a26 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f8:	6093      	str	r3, [r2, #8]
 80059fa:	e032      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	2320      	movs	r3, #32
 8005a16:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f006 fb50 	bl	800c0c4 <HAL_PCD_DataOutStageCallback>
 8005a24:	e01d      	b.n	8005a62 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d114      	bne.n	8005a56 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d108      	bne.n	8005a56 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2100      	movs	r1, #0
 8005a52:	f003 f9fb 	bl	8008e4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f006 fb31 	bl	800c0c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	4f54300a 	.word	0x4f54300a
 8005a70:	4f54310a 	.word	0x4f54310a

08005a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	333c      	adds	r3, #60	; 0x3c
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <PCD_EP_OutSetupPacket_int+0x88>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d90e      	bls.n	8005ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f006 fae9 	bl	800c0a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <PCD_EP_OutSetupPacket_int+0x88>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d90c      	bls.n	8005af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d108      	bne.n	8005af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2101      	movs	r1, #1
 8005aec:	f003 f9ae 	bl	8008e4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	4f54300a 	.word	0x4f54300a

08005b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b1e:	883b      	ldrh	r3, [r7, #0]
 8005b20:	0419      	lsls	r1, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b2c:	e028      	b.n	8005b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e00d      	b.n	8005b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	3340      	adds	r3, #64	; 0x40
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4413      	add	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d3ec      	bcc.n	8005b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b68:	883b      	ldrh	r3, [r7, #0]
 8005b6a:	0418      	lsls	r0, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	4302      	orrs	r2, r0
 8005b78:	3340      	adds	r3, #64	; 0x40
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	460b      	mov	r3, r1
 8005b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e264      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d075      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005be6:	4ba3      	ldr	r3, [pc, #652]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00c      	beq.n	8005c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf2:	4ba0      	ldr	r3, [pc, #640]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d112      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfe:	4b9d      	ldr	r3, [pc, #628]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c0a:	d10b      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0c:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05b      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x108>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d157      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e23f      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x74>
 8005c2e:	4b91      	ldr	r3, [pc, #580]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a90      	ldr	r2, [pc, #576]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e01d      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x98>
 8005c46:	4b8b      	ldr	r3, [pc, #556]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a8a      	ldr	r2, [pc, #552]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4b88      	ldr	r3, [pc, #544]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a87      	ldr	r2, [pc, #540]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c60:	4b84      	ldr	r3, [pc, #528]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a83      	ldr	r2, [pc, #524]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	4b81      	ldr	r3, [pc, #516]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a80      	ldr	r2, [pc, #512]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d013      	beq.n	8005ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fd f8a2 	bl	8002dc8 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fd f89e 	bl	8002dc8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	; 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e204      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b76      	ldr	r3, [pc, #472]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0xc0>
 8005ca6:	e014      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fd f88e 	bl	8002dc8 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fd f88a 	bl	8002dc8 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	; 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e1f0      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xe8>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d063      	beq.n	8005da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cde:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cea:	4b62      	ldr	r3, [pc, #392]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d11c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d02:	4b5c      	ldr	r3, [pc, #368]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e1c4      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1a:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4952      	ldr	r1, [pc, #328]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2e:	e03a      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d38:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <HAL_RCC_OscConfig+0x2b0>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fd f843 	bl	8002dc8 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d46:	f7fd f83f 	bl	8002dc8 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e1a5      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d58:	4b46      	ldr	r3, [pc, #280]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4940      	ldr	r1, [pc, #256]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]
 8005d78:	e015      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7a:	4b3f      	ldr	r3, [pc, #252]	; (8005e78 <HAL_RCC_OscConfig+0x2b0>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fd f822 	bl	8002dc8 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d88:	f7fd f81e 	bl	8002dc8 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e184      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9a:	4b36      	ldr	r3, [pc, #216]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d030      	beq.n	8005e14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x2b4>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc0:	f7fd f802 	bl	8002dc8 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dc8:	f7fc fffe 	bl	8002dc8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e164      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dda:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x200>
 8005de6:	e015      	b.n	8005e14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de8:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <HAL_RCC_OscConfig+0x2b4>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dee:	f7fc ffeb 	bl	8002dc8 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fc ffe7 	bl	8002dc8 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e14d      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80a0 	beq.w	8005f62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6413      	str	r3, [r2, #64]	; 0x40
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_RCC_OscConfig+0x2b8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d121      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <HAL_RCC_OscConfig+0x2b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a07      	ldr	r2, [pc, #28]	; (8005e80 <HAL_RCC_OscConfig+0x2b8>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6a:	f7fc ffad 	bl	8002dc8 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e70:	e011      	b.n	8005e96 <HAL_RCC_OscConfig+0x2ce>
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800
 8005e78:	42470000 	.word	0x42470000
 8005e7c:	42470e80 	.word	0x42470e80
 8005e80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e84:	f7fc ffa0 	bl	8002dc8 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e106      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e96:	4b85      	ldr	r3, [pc, #532]	; (80060ac <HAL_RCC_OscConfig+0x4e4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x2f0>
 8005eaa:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a80      	ldr	r2, [pc, #512]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb6:	e01c      	b.n	8005ef2 <HAL_RCC_OscConfig+0x32a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCC_OscConfig+0x312>
 8005ec0:	4b7b      	ldr	r3, [pc, #492]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	4a7a      	ldr	r2, [pc, #488]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ec6:	f043 0304 	orr.w	r3, r3, #4
 8005eca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ecc:	4b78      	ldr	r3, [pc, #480]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a77      	ldr	r2, [pc, #476]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	e00b      	b.n	8005ef2 <HAL_RCC_OscConfig+0x32a>
 8005eda:	4b75      	ldr	r3, [pc, #468]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4a74      	ldr	r2, [pc, #464]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee6:	4b72      	ldr	r3, [pc, #456]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	4a71      	ldr	r2, [pc, #452]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005eec:	f023 0304 	bic.w	r3, r3, #4
 8005ef0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d015      	beq.n	8005f26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efa:	f7fc ff65 	bl	8002dc8 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fc ff61 	bl	8002dc8 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e0c5      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f18:	4b65      	ldr	r3, [pc, #404]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ee      	beq.n	8005f02 <HAL_RCC_OscConfig+0x33a>
 8005f24:	e014      	b.n	8005f50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f26:	f7fc ff4f 	bl	8002dc8 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fc ff4b 	bl	8002dc8 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e0af      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f44:	4b5a      	ldr	r3, [pc, #360]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ee      	bne.n	8005f2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b56      	ldr	r3, [pc, #344]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	4a55      	ldr	r2, [pc, #340]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 809b 	beq.w	80060a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f6c:	4b50      	ldr	r3, [pc, #320]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 030c 	and.w	r3, r3, #12
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d05c      	beq.n	8006032 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d141      	bne.n	8006004 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f80:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <HAL_RCC_OscConfig+0x4ec>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f86:	f7fc ff1f 	bl	8002dc8 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8e:	f7fc ff1b 	bl	8002dc8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e081      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa0:	4b43      	ldr	r3, [pc, #268]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f0      	bne.n	8005f8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	019b      	lsls	r3, r3, #6
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	061b      	lsls	r3, r3, #24
 8005fd0:	4937      	ldr	r1, [pc, #220]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd6:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <HAL_RCC_OscConfig+0x4ec>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fdc:	f7fc fef4 	bl	8002dc8 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fc fef0 	bl	8002dc8 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e056      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	4b2e      	ldr	r3, [pc, #184]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f0      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x41c>
 8006002:	e04e      	b.n	80060a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <HAL_RCC_OscConfig+0x4ec>)
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600a:	f7fc fedd 	bl	8002dc8 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006012:	f7fc fed9 	bl	8002dc8 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e03f      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f0      	bne.n	8006012 <HAL_RCC_OscConfig+0x44a>
 8006030:	e037      	b.n	80060a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e032      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800603e:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <HAL_RCC_OscConfig+0x4e8>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d028      	beq.n	800609e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006056:	429a      	cmp	r2, r3
 8006058:	d121      	bne.n	800609e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d11a      	bne.n	800609e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800606e:	4013      	ands	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006074:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006076:	4293      	cmp	r3, r2
 8006078:	d111      	bne.n	800609e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	3b01      	subs	r3, #1
 8006088:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800608a:	429a      	cmp	r2, r3
 800608c:	d107      	bne.n	800609e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800609a:	429a      	cmp	r2, r3
 800609c:	d001      	beq.n	80060a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40007000 	.word	0x40007000
 80060b0:	40023800 	.word	0x40023800
 80060b4:	42470060 	.word	0x42470060

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0cc      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b68      	ldr	r3, [pc, #416]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90c      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b65      	ldr	r3, [pc, #404]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b63      	ldr	r3, [pc, #396]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b8      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a58      	ldr	r2, [pc, #352]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800612e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006130:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	494d      	ldr	r1, [pc, #308]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d044      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d003      	beq.n	8006176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006176:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e06f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006186:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e067      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006196:	4b37      	ldr	r3, [pc, #220]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0203 	bic.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4934      	ldr	r1, [pc, #208]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fe0e 	bl	8002dc8 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b0:	f7fc fe0a 	bl	8002dc8 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 020c 	and.w	r2, r3, #12
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d1eb      	bne.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d20c      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b22      	ldr	r3, [pc, #136]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e032      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b19      	ldr	r3, [pc, #100]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4916      	ldr	r1, [pc, #88]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	490e      	ldr	r1, [pc, #56]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800623e:	f000 f821 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8006242:	4602      	mov	r2, r0
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	490a      	ldr	r1, [pc, #40]	; (8006278 <HAL_RCC_ClockConfig+0x1c0>)
 8006250:	5ccb      	ldrb	r3, [r1, r3]
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	4a09      	ldr	r2, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1c4>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fc fd6e 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00
 8006274:	40023800 	.word	0x40023800
 8006278:	0800d05c 	.word	0x0800d05c
 800627c:	20000000 	.word	0x20000000
 8006280:	200002b8 	.word	0x200002b8

08006284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006284:	b5b0      	push	{r4, r5, r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800628a:	2100      	movs	r1, #0
 800628c:	6079      	str	r1, [r7, #4]
 800628e:	2100      	movs	r1, #0
 8006290:	60f9      	str	r1, [r7, #12]
 8006292:	2100      	movs	r1, #0
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006296:	2100      	movs	r1, #0
 8006298:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629a:	4952      	ldr	r1, [pc, #328]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800629c:	6889      	ldr	r1, [r1, #8]
 800629e:	f001 010c 	and.w	r1, r1, #12
 80062a2:	2908      	cmp	r1, #8
 80062a4:	d00d      	beq.n	80062c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80062a6:	2908      	cmp	r1, #8
 80062a8:	f200 8094 	bhi.w	80063d4 <HAL_RCC_GetSysClockFreq+0x150>
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_RCC_GetSysClockFreq+0x32>
 80062b0:	2904      	cmp	r1, #4
 80062b2:	d003      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0x38>
 80062b4:	e08e      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b6:	4b4c      	ldr	r3, [pc, #304]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80062b8:	60bb      	str	r3, [r7, #8]
       break;
 80062ba:	e08e      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062bc:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <HAL_RCC_GetSysClockFreq+0x168>)
 80062be:	60bb      	str	r3, [r7, #8]
      break;
 80062c0:	e08b      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c2:	4948      	ldr	r1, [pc, #288]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062c4:	6849      	ldr	r1, [r1, #4]
 80062c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80062ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062cc:	4945      	ldr	r1, [pc, #276]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062ce:	6849      	ldr	r1, [r1, #4]
 80062d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d024      	beq.n	8006322 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d8:	4942      	ldr	r1, [pc, #264]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80062da:	6849      	ldr	r1, [r1, #4]
 80062dc:	0989      	lsrs	r1, r1, #6
 80062de:	4608      	mov	r0, r1
 80062e0:	f04f 0100 	mov.w	r1, #0
 80062e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80062e8:	f04f 0500 	mov.w	r5, #0
 80062ec:	ea00 0204 	and.w	r2, r0, r4
 80062f0:	ea01 0305 	and.w	r3, r1, r5
 80062f4:	493d      	ldr	r1, [pc, #244]	; (80063ec <HAL_RCC_GetSysClockFreq+0x168>)
 80062f6:	fb01 f003 	mul.w	r0, r1, r3
 80062fa:	2100      	movs	r1, #0
 80062fc:	fb01 f102 	mul.w	r1, r1, r2
 8006300:	1844      	adds	r4, r0, r1
 8006302:	493a      	ldr	r1, [pc, #232]	; (80063ec <HAL_RCC_GetSysClockFreq+0x168>)
 8006304:	fba2 0101 	umull	r0, r1, r2, r1
 8006308:	1863      	adds	r3, r4, r1
 800630a:	4619      	mov	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	461a      	mov	r2, r3
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	f7fa f998 	bl	8000648 <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4613      	mov	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e04a      	b.n	80063b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006322:	4b30      	ldr	r3, [pc, #192]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	099b      	lsrs	r3, r3, #6
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	ea02 0400 	and.w	r4, r2, r0
 800633a:	ea03 0501 	and.w	r5, r3, r1
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	014b      	lsls	r3, r1, #5
 800634c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006350:	0142      	lsls	r2, r0, #5
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	1b00      	subs	r0, r0, r4
 8006358:	eb61 0105 	sbc.w	r1, r1, r5
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	018b      	lsls	r3, r1, #6
 8006366:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800636a:	0182      	lsls	r2, r0, #6
 800636c:	1a12      	subs	r2, r2, r0
 800636e:	eb63 0301 	sbc.w	r3, r3, r1
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	00d9      	lsls	r1, r3, #3
 800637c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006380:	00d0      	lsls	r0, r2, #3
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	1912      	adds	r2, r2, r4
 8006388:	eb45 0303 	adc.w	r3, r5, r3
 800638c:	f04f 0000 	mov.w	r0, #0
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	0299      	lsls	r1, r3, #10
 8006396:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800639a:	0290      	lsls	r0, r2, #10
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	f7fa f94c 	bl	8000648 <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4613      	mov	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	3301      	adds	r3, #1
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
      break;
 80063d2:	e002      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80063d6:	60bb      	str	r3, [r7, #8]
      break;
 80063d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063da:	68bb      	ldr	r3, [r7, #8]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bdb0      	pop	{r4, r5, r7, pc}
 80063e4:	40023800 	.word	0x40023800
 80063e8:	00f42400 	.word	0x00f42400
 80063ec:	017d7840 	.word	0x017d7840

080063f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f4:	4b03      	ldr	r3, [pc, #12]	; (8006404 <HAL_RCC_GetHCLKFreq+0x14>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000000 	.word	0x20000000

08006408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800640c:	f7ff fff0 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8006410:	4602      	mov	r2, r0
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	0a9b      	lsrs	r3, r3, #10
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	4903      	ldr	r1, [pc, #12]	; (800642c <HAL_RCC_GetPCLK1Freq+0x24>)
 800641e:	5ccb      	ldrb	r3, [r1, r3]
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40023800 	.word	0x40023800
 800642c:	0800d06c 	.word	0x0800d06c

08006430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006434:	f7ff ffdc 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8006438:	4602      	mov	r2, r0
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	0b5b      	lsrs	r3, r3, #13
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	4903      	ldr	r1, [pc, #12]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006446:	5ccb      	ldrb	r3, [r1, r3]
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40023800 	.word	0x40023800
 8006454:	0800d06c 	.word	0x0800d06c

08006458 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800647c:	2b00      	cmp	r3, #0
 800647e:	d038      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006480:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006486:	f7fc fc9f 	bl	8002dc8 <HAL_GetTick>
 800648a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800648e:	f7fc fc9b 	bl	8002dc8 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e0bd      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a0:	4b61      	ldr	r3, [pc, #388]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f0      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	019b      	lsls	r3, r3, #6
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	071b      	lsls	r3, r3, #28
 80064be:	495a      	ldr	r1, [pc, #360]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064c6:	4b57      	ldr	r3, [pc, #348]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064cc:	f7fc fc7c 	bl	8002dc8 <HAL_GetTick>
 80064d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064d4:	f7fc fc78 	bl	8002dc8 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e09a      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e6:	4b50      	ldr	r3, [pc, #320]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8083 	beq.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	4b48      	ldr	r3, [pc, #288]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	4a47      	ldr	r2, [pc, #284]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650e:	6413      	str	r3, [r2, #64]	; 0x40
 8006510:	4b45      	ldr	r3, [pc, #276]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800651c:	4b43      	ldr	r3, [pc, #268]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a42      	ldr	r2, [pc, #264]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006526:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006528:	f7fc fc4e 	bl	8002dc8 <HAL_GetTick>
 800652c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006530:	f7fc fc4a 	bl	8002dc8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e06c      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006542:	4b3a      	ldr	r3, [pc, #232]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800654e:	4b36      	ldr	r3, [pc, #216]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006556:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d02f      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x166>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	429a      	cmp	r2, r3
 800656a:	d028      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800656c:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006574:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006576:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006582:	4a29      	ldr	r2, [pc, #164]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006588:	4b27      	ldr	r3, [pc, #156]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d114      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006594:	f7fc fc18 	bl	8002dc8 <HAL_GetTick>
 8006598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659a:	e00a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800659c:	f7fc fc14 	bl	8002dc8 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e034      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ee      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ca:	d10d      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e0:	4911      	ldr	r1, [pc, #68]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]
 80065e6:	e005      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4a0e      	ldr	r2, [pc, #56]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065f2:	6093      	str	r3, [r2, #8]
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	4909      	ldr	r1, [pc, #36]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7d1a      	ldrb	r2, [r3, #20]
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006618:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	42470068 	.word	0x42470068
 8006628:	40023800 	.word	0x40023800
 800662c:	40007000 	.word	0x40007000
 8006630:	42470e40 	.word	0x42470e40
 8006634:	424711e0 	.word	0x424711e0

08006638 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e083      	b.n	8006752 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7f5b      	ldrb	r3, [r3, #29]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fa fe42 	bl	80012e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	22ca      	movs	r2, #202	; 0xca
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2253      	movs	r2, #83	; 0x53
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f897 	bl	80067aa <RTC_EnterInitMode>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2204      	movs	r2, #4
 800668e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e05e      	b.n	8006752 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6899      	ldr	r1, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68d2      	ldr	r2, [r2, #12]
 80066ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6919      	ldr	r1, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	041a      	lsls	r2, r3, #16
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10e      	bne.n	8006720 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f829 	bl	800675a <HAL_RTC_WaitForSynchro>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2204      	movs	r2, #4
 800671a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e018      	b.n	8006752 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	22ff      	movs	r2, #255	; 0xff
 8006748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006750:	2300      	movs	r3, #0
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006774:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006776:	f7fc fb27 	bl	8002dc8 <HAL_GetTick>
 800677a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800677c:	e009      	b.n	8006792 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800677e:	f7fc fb23 	bl	8002dc8 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800678c:	d901      	bls.n	8006792 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e007      	b.n	80067a2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0ee      	beq.n	800677e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d119      	bne.n	80067f8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067ce:	f7fc fafb 	bl	8002dc8 <HAL_GetTick>
 80067d2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067d4:	e009      	b.n	80067ea <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067d6:	f7fc faf7 	bl	8002dc8 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e4:	d901      	bls.n	80067ea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e007      	b.n	80067fa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ee      	beq.n	80067d6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e041      	b.n	8006898 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fa fd71 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2202      	movs	r2, #2
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f000 f8f1 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_ConfigClockSource+0x18>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0b3      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x180>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f0:	d03e      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0xd0>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	f200 8087 	bhi.w	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 80068fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fe:	f000 8085 	beq.w	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006906:	d87f      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006908:	2b70      	cmp	r3, #112	; 0x70
 800690a:	d01a      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0xa2>
 800690c:	2b70      	cmp	r3, #112	; 0x70
 800690e:	d87b      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006910:	2b60      	cmp	r3, #96	; 0x60
 8006912:	d050      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x116>
 8006914:	2b60      	cmp	r3, #96	; 0x60
 8006916:	d877      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006918:	2b50      	cmp	r3, #80	; 0x50
 800691a:	d03c      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0xf6>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d873      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d058      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x136>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d86f      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d064      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x156>
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d86b      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d060      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x156>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d867      	bhi.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d05c      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x156>
 800693c:	2b10      	cmp	r3, #16
 800693e:	d05a      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006940:	e062      	b.n	8006a08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6899      	ldr	r1, [r3, #8]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f000 f963 	bl	8006c1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006964:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	609a      	str	r2, [r3, #8]
      break;
 800696e:	e04e      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6899      	ldr	r1, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f000 f94c 	bl	8006c1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006992:	609a      	str	r2, [r3, #8]
      break;
 8006994:	e03b      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 f8c0 	bl	8006b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2150      	movs	r1, #80	; 0x50
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f919 	bl	8006be6 <TIM_ITRx_SetConfig>
      break;
 80069b4:	e02b      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 f8df 	bl	8006b86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2160      	movs	r1, #96	; 0x60
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f909 	bl	8006be6 <TIM_ITRx_SetConfig>
      break;
 80069d4:	e01b      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 f8a0 	bl	8006b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2140      	movs	r1, #64	; 0x40
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f8f9 	bl	8006be6 <TIM_ITRx_SetConfig>
      break;
 80069f4:	e00b      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f000 f8f0 	bl	8006be6 <TIM_ITRx_SetConfig>
        break;
 8006a06:	e002      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a34      	ldr	r2, [pc, #208]	; (8006b0c <TIM_Base_SetConfig+0xe4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00f      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d00b      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a31      	ldr	r2, [pc, #196]	; (8006b10 <TIM_Base_SetConfig+0xe8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a30      	ldr	r2, [pc, #192]	; (8006b14 <TIM_Base_SetConfig+0xec>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0x38>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2f      	ldr	r2, [pc, #188]	; (8006b18 <TIM_Base_SetConfig+0xf0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <TIM_Base_SetConfig+0xe4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01b      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d017      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a22      	ldr	r2, [pc, #136]	; (8006b10 <TIM_Base_SetConfig+0xe8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <TIM_Base_SetConfig+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00f      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <TIM_Base_SetConfig+0xf0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <TIM_Base_SetConfig+0xf4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <TIM_Base_SetConfig+0xf8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_Base_SetConfig+0x8a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <TIM_Base_SetConfig+0xfc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d108      	bne.n	8006ac4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <TIM_Base_SetConfig+0xe4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d103      	bne.n	8006af8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	615a      	str	r2, [r3, #20]
}
 8006afe:	bf00      	nop
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 030a 	bic.w	r3, r3, #10
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0210 	bic.w	r2, r3, #16
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f043 0307 	orr.w	r3, r3, #7
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	609a      	str	r2, [r3, #8]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e050      	b.n	8006d16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d013      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a13      	ldr	r2, [pc, #76]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d10c      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40010000 	.word	0x40010000
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
 8006d30:	40000c00 	.word	0x40000c00
 8006d34:	40014000 	.word	0x40014000

08006d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e03f      	b.n	8006dca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fa faf8 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2224      	movs	r2, #36	; 0x24
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc09 	bl	8007594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e021      	b.n	8006e28 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2224      	movs	r2, #36	; 0x24
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fa faf9 	bl	80013f4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d130      	bne.n	8006eac <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_UART_Transmit_IT+0x26>
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e029      	b.n	8006eae <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_UART_Transmit_IT+0x38>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e022      	b.n	8006eae <HAL_UART_Transmit_IT+0x7e>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	88fa      	ldrh	r2, [r7, #6]
 8006e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2221      	movs	r2, #33	; 0x21
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ea6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e000      	b.n	8006eae <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d11d      	bne.n	8006f10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Receive_IT+0x26>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e016      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Receive_IT+0x38>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e00f      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	461a      	mov	r2, r3
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f9ca 	bl	80072a0 <UART_Start_Receive_IT>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	e000      	b.n	8006f12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	; 0x28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <HAL_UART_IRQHandler+0x52>
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa7d 	bl	8007466 <UART_Receive_IT>
      return;
 8006f6c:	e17c      	b.n	8007268 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 80b1 	beq.w	80070d8 <HAL_UART_IRQHandler+0x1bc>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <HAL_UART_IRQHandler+0x70>
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80a6 	beq.w	80070d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <HAL_UART_IRQHandler+0x90>
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f043 0201 	orr.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_UART_IRQHandler+0xb0>
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	f043 0202 	orr.w	r2, r3, #2
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_UART_IRQHandler+0xd0>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	f043 0204 	orr.w	r2, r3, #4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	f003 0308 	and.w	r3, r3, #8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00f      	beq.n	8007016 <HAL_UART_IRQHandler+0xfa>
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_UART_IRQHandler+0xee>
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f043 0208 	orr.w	r2, r3, #8
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 811f 	beq.w	800725e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <HAL_UART_IRQHandler+0x11e>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa16 	bl	8007466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b40      	cmp	r3, #64	; 0x40
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <HAL_UART_IRQHandler+0x146>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d031      	beq.n	80070c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f956 	bl	8007314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d123      	bne.n	80070be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007084:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	4a77      	ldr	r2, [pc, #476]	; (8007270 <HAL_UART_IRQHandler+0x354>)
 8007094:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	4618      	mov	r0, r3
 800709c:	f7fc f877 	bl	800318e <HAL_DMA_Abort_IT>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00e      	b.n	80070d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8dc 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e00a      	b.n	80070d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8d8 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	e006      	b.n	80070d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f8d4 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80070d2:	e0c4      	b.n	800725e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d4:	bf00      	nop
    return;
 80070d6:	e0c2      	b.n	800725e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	2b01      	cmp	r3, #1
 80070de:	f040 80a2 	bne.w	8007226 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 809c 	beq.w	8007226 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8096 	beq.w	8007226 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d14f      	bne.n	80071be <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007128:	8a3b      	ldrh	r3, [r7, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8099 	beq.w	8007262 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007134:	8a3a      	ldrh	r2, [r7, #16]
 8007136:	429a      	cmp	r2, r3
 8007138:	f080 8093 	bcs.w	8007262 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8a3a      	ldrh	r2, [r7, #16]
 8007140:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714c:	d02b      	beq.n	80071a6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695a      	ldr	r2, [r3, #20]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0201 	bic.w	r2, r2, #1
 800716c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0210 	bic.w	r2, r2, #16
 800719a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fb ff84 	bl	80030ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f866 	bl	8007288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071bc:	e051      	b.n	8007262 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d047      	beq.n	8007266 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80071d6:	8a7b      	ldrh	r3, [r7, #18]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d044      	beq.n	8007266 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071ea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0210 	bic.w	r2, r2, #16
 8007218:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800721a:	8a7b      	ldrh	r3, [r7, #18]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f832 	bl	8007288 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007224:	e01f      	b.n	8007266 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_UART_IRQHandler+0x326>
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8ab 	bl	8007396 <UART_Transmit_IT>
    return;
 8007240:	e012      	b.n	8007268 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00d      	beq.n	8007268 <HAL_UART_IRQHandler+0x34c>
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8ed 	bl	8007436 <UART_EndTransmit_IT>
    return;
 800725c:	e004      	b.n	8007268 <HAL_UART_IRQHandler+0x34c>
    return;
 800725e:	bf00      	nop
 8007260:	e002      	b.n	8007268 <HAL_UART_IRQHandler+0x34c>
      return;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <HAL_UART_IRQHandler+0x34c>
      return;
 8007266:	bf00      	nop
  }
}
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	0800736f 	.word	0x0800736f

08007274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2222      	movs	r2, #34	; 0x22
 80072ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0201 	orr.w	r2, r2, #1
 80072f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0220 	orr.w	r2, r2, #32
 8007304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800732a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695a      	ldr	r2, [r3, #20]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	2b01      	cmp	r3, #1
 8007342:	d107      	bne.n	8007354 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0210 	bic.w	r2, r2, #16
 8007352:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ff73 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b21      	cmp	r3, #33	; 0x21
 80073a8:	d13e      	bne.n	8007428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b2:	d114      	bne.n	80073de <UART_Transmit_IT+0x48>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d110      	bne.n	80073de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	1c9a      	adds	r2, r3, #2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	621a      	str	r2, [r3, #32]
 80073dc:	e008      	b.n	80073f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	1c59      	adds	r1, r3, #1
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6211      	str	r1, [r2, #32]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4619      	mov	r1, r3
 80073fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10f      	bne.n	8007424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	e000      	b.n	800742a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007428:	2302      	movs	r3, #2
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fa fda0 	bl	8001f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b22      	cmp	r3, #34	; 0x22
 8007478:	f040 8087 	bne.w	800758a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d117      	bne.n	80074b6 <UART_Receive_IT+0x50>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d113      	bne.n	80074b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	1c9a      	adds	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	629a      	str	r2, [r3, #40]	; 0x28
 80074b4:	e026      	b.n	8007504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c8:	d007      	beq.n	80074da <UART_Receive_IT+0x74>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <UART_Receive_IT+0x82>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d106      	bne.n	80074e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e008      	b.n	80074fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29b      	uxth	r3, r3
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4619      	mov	r1, r3
 8007512:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007514:	2b00      	cmp	r3, #0
 8007516:	d136      	bne.n	8007586 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0220 	bic.w	r2, r2, #32
 8007526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0201 	bic.w	r2, r2, #1
 8007546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b01      	cmp	r3, #1
 8007556:	d10e      	bne.n	8007576 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0210 	bic.w	r2, r2, #16
 8007566:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe8a 	bl	8007288 <HAL_UARTEx_RxEventCallback>
 8007574:	e002      	b.n	800757c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fcee 	bl	8001f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e002      	b.n	800758c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	b09f      	sub	sp, #124	; 0x7c
 800759a:	af00      	add	r7, sp, #0
 800759c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800759e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075aa:	68d9      	ldr	r1, [r3, #12]
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	ea40 0301 	orr.w	r3, r0, r1
 80075b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	431a      	orrs	r2, r3
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075d8:	f021 010c 	bic.w	r1, r1, #12
 80075dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075e2:	430b      	orrs	r3, r1
 80075e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f2:	6999      	ldr	r1, [r3, #24]
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	ea40 0301 	orr.w	r3, r0, r1
 80075fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4bc5      	ldr	r3, [pc, #788]	; (8007918 <UART_SetConfig+0x384>)
 8007604:	429a      	cmp	r2, r3
 8007606:	d004      	beq.n	8007612 <UART_SetConfig+0x7e>
 8007608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4bc3      	ldr	r3, [pc, #780]	; (800791c <UART_SetConfig+0x388>)
 800760e:	429a      	cmp	r2, r3
 8007610:	d103      	bne.n	800761a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007612:	f7fe ff0d 	bl	8006430 <HAL_RCC_GetPCLK2Freq>
 8007616:	6778      	str	r0, [r7, #116]	; 0x74
 8007618:	e002      	b.n	8007620 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800761a:	f7fe fef5 	bl	8006408 <HAL_RCC_GetPCLK1Freq>
 800761e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007628:	f040 80b6 	bne.w	8007798 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800762c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800762e:	461c      	mov	r4, r3
 8007630:	f04f 0500 	mov.w	r5, #0
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	1891      	adds	r1, r2, r2
 800763a:	6439      	str	r1, [r7, #64]	; 0x40
 800763c:	415b      	adcs	r3, r3
 800763e:	647b      	str	r3, [r7, #68]	; 0x44
 8007640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007644:	1912      	adds	r2, r2, r4
 8007646:	eb45 0303 	adc.w	r3, r5, r3
 800764a:	f04f 0000 	mov.w	r0, #0
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	00d9      	lsls	r1, r3, #3
 8007654:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007658:	00d0      	lsls	r0, r2, #3
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	1911      	adds	r1, r2, r4
 8007660:	6639      	str	r1, [r7, #96]	; 0x60
 8007662:	416b      	adcs	r3, r5
 8007664:	667b      	str	r3, [r7, #100]	; 0x64
 8007666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	461a      	mov	r2, r3
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	1891      	adds	r1, r2, r2
 8007672:	63b9      	str	r1, [r7, #56]	; 0x38
 8007674:	415b      	adcs	r3, r3
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800767c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007680:	f7f8 ffe2 	bl	8000648 <__aeabi_uldivmod>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4ba5      	ldr	r3, [pc, #660]	; (8007920 <UART_SetConfig+0x38c>)
 800768a:	fba3 2302 	umull	r2, r3, r3, r2
 800768e:	095b      	lsrs	r3, r3, #5
 8007690:	011e      	lsls	r6, r3, #4
 8007692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007694:	461c      	mov	r4, r3
 8007696:	f04f 0500 	mov.w	r5, #0
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	1891      	adds	r1, r2, r2
 80076a0:	6339      	str	r1, [r7, #48]	; 0x30
 80076a2:	415b      	adcs	r3, r3
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
 80076a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80076aa:	1912      	adds	r2, r2, r4
 80076ac:	eb45 0303 	adc.w	r3, r5, r3
 80076b0:	f04f 0000 	mov.w	r0, #0
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	00d9      	lsls	r1, r3, #3
 80076ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076be:	00d0      	lsls	r0, r2, #3
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	1911      	adds	r1, r2, r4
 80076c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80076c8:	416b      	adcs	r3, r5
 80076ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	461a      	mov	r2, r3
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	1891      	adds	r1, r2, r2
 80076d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80076da:	415b      	adcs	r3, r3
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076e6:	f7f8 ffaf 	bl	8000648 <__aeabi_uldivmod>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4b8c      	ldr	r3, [pc, #560]	; (8007920 <UART_SetConfig+0x38c>)
 80076f0:	fba3 1302 	umull	r1, r3, r3, r2
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	2164      	movs	r1, #100	; 0x64
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	3332      	adds	r3, #50	; 0x32
 8007702:	4a87      	ldr	r2, [pc, #540]	; (8007920 <UART_SetConfig+0x38c>)
 8007704:	fba2 2303 	umull	r2, r3, r2, r3
 8007708:	095b      	lsrs	r3, r3, #5
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007710:	441e      	add	r6, r3
 8007712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007714:	4618      	mov	r0, r3
 8007716:	f04f 0100 	mov.w	r1, #0
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	1894      	adds	r4, r2, r2
 8007720:	623c      	str	r4, [r7, #32]
 8007722:	415b      	adcs	r3, r3
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
 8007726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800772a:	1812      	adds	r2, r2, r0
 800772c:	eb41 0303 	adc.w	r3, r1, r3
 8007730:	f04f 0400 	mov.w	r4, #0
 8007734:	f04f 0500 	mov.w	r5, #0
 8007738:	00dd      	lsls	r5, r3, #3
 800773a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800773e:	00d4      	lsls	r4, r2, #3
 8007740:	4622      	mov	r2, r4
 8007742:	462b      	mov	r3, r5
 8007744:	1814      	adds	r4, r2, r0
 8007746:	653c      	str	r4, [r7, #80]	; 0x50
 8007748:	414b      	adcs	r3, r1
 800774a:	657b      	str	r3, [r7, #84]	; 0x54
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	461a      	mov	r2, r3
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	1891      	adds	r1, r2, r2
 8007758:	61b9      	str	r1, [r7, #24]
 800775a:	415b      	adcs	r3, r3
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007762:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007766:	f7f8 ff6f 	bl	8000648 <__aeabi_uldivmod>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4b6c      	ldr	r3, [pc, #432]	; (8007920 <UART_SetConfig+0x38c>)
 8007770:	fba3 1302 	umull	r1, r3, r3, r2
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	2164      	movs	r1, #100	; 0x64
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	3332      	adds	r3, #50	; 0x32
 8007782:	4a67      	ldr	r2, [pc, #412]	; (8007920 <UART_SetConfig+0x38c>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	f003 0207 	and.w	r2, r3, #7
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4432      	add	r2, r6
 8007794:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007796:	e0b9      	b.n	800790c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779a:	461c      	mov	r4, r3
 800779c:	f04f 0500 	mov.w	r5, #0
 80077a0:	4622      	mov	r2, r4
 80077a2:	462b      	mov	r3, r5
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	6139      	str	r1, [r7, #16]
 80077a8:	415b      	adcs	r3, r3
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077b0:	1912      	adds	r2, r2, r4
 80077b2:	eb45 0303 	adc.w	r3, r5, r3
 80077b6:	f04f 0000 	mov.w	r0, #0
 80077ba:	f04f 0100 	mov.w	r1, #0
 80077be:	00d9      	lsls	r1, r3, #3
 80077c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077c4:	00d0      	lsls	r0, r2, #3
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	eb12 0804 	adds.w	r8, r2, r4
 80077ce:	eb43 0905 	adc.w	r9, r3, r5
 80077d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f04f 0100 	mov.w	r1, #0
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	008b      	lsls	r3, r1, #2
 80077e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077ea:	0082      	lsls	r2, r0, #2
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 ff2a 	bl	8000648 <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4b49      	ldr	r3, [pc, #292]	; (8007920 <UART_SetConfig+0x38c>)
 80077fa:	fba3 2302 	umull	r2, r3, r3, r2
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	011e      	lsls	r6, r3, #4
 8007802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007804:	4618      	mov	r0, r3
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	1894      	adds	r4, r2, r2
 8007810:	60bc      	str	r4, [r7, #8]
 8007812:	415b      	adcs	r3, r3
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800781a:	1812      	adds	r2, r2, r0
 800781c:	eb41 0303 	adc.w	r3, r1, r3
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	f04f 0500 	mov.w	r5, #0
 8007828:	00dd      	lsls	r5, r3, #3
 800782a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800782e:	00d4      	lsls	r4, r2, #3
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	1814      	adds	r4, r2, r0
 8007836:	64bc      	str	r4, [r7, #72]	; 0x48
 8007838:	414b      	adcs	r3, r1
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800783c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	f04f 0100 	mov.w	r1, #0
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	f04f 0300 	mov.w	r3, #0
 800784e:	008b      	lsls	r3, r1, #2
 8007850:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007854:	0082      	lsls	r2, r0, #2
 8007856:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800785a:	f7f8 fef5 	bl	8000648 <__aeabi_uldivmod>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <UART_SetConfig+0x38c>)
 8007864:	fba3 1302 	umull	r1, r3, r3, r2
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	2164      	movs	r1, #100	; 0x64
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	3332      	adds	r3, #50	; 0x32
 8007876:	4a2a      	ldr	r2, [pc, #168]	; (8007920 <UART_SetConfig+0x38c>)
 8007878:	fba2 2303 	umull	r2, r3, r2, r3
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007882:	441e      	add	r6, r3
 8007884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007886:	4618      	mov	r0, r3
 8007888:	f04f 0100 	mov.w	r1, #0
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	1894      	adds	r4, r2, r2
 8007892:	603c      	str	r4, [r7, #0]
 8007894:	415b      	adcs	r3, r3
 8007896:	607b      	str	r3, [r7, #4]
 8007898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789c:	1812      	adds	r2, r2, r0
 800789e:	eb41 0303 	adc.w	r3, r1, r3
 80078a2:	f04f 0400 	mov.w	r4, #0
 80078a6:	f04f 0500 	mov.w	r5, #0
 80078aa:	00dd      	lsls	r5, r3, #3
 80078ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078b0:	00d4      	lsls	r4, r2, #3
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	eb12 0a00 	adds.w	sl, r2, r0
 80078ba:	eb43 0b01 	adc.w	fp, r3, r1
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f04f 0100 	mov.w	r1, #0
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	008b      	lsls	r3, r1, #2
 80078d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078d6:	0082      	lsls	r2, r0, #2
 80078d8:	4650      	mov	r0, sl
 80078da:	4659      	mov	r1, fp
 80078dc:	f7f8 feb4 	bl	8000648 <__aeabi_uldivmod>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <UART_SetConfig+0x38c>)
 80078e6:	fba3 1302 	umull	r1, r3, r3, r2
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	2164      	movs	r1, #100	; 0x64
 80078ee:	fb01 f303 	mul.w	r3, r1, r3
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	3332      	adds	r3, #50	; 0x32
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <UART_SetConfig+0x38c>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4432      	add	r2, r6
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	377c      	adds	r7, #124	; 0x7c
 8007910:	46bd      	mov	sp, r7
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	bf00      	nop
 8007918:	40011000 	.word	0x40011000
 800791c:	40011400 	.word	0x40011400
 8007920:	51eb851f 	.word	0x51eb851f

08007924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007924:	b084      	sub	sp, #16
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	f107 001c 	add.w	r0, r7, #28
 8007932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	2b01      	cmp	r3, #1
 800793a:	d122      	bne.n	8007982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d105      	bne.n	8007976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fac6 	bl	8008f08 <USB_CoreReset>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e01a      	b.n	80079b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 faba 	bl	8008f08 <USB_CoreReset>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	639a      	str	r2, [r3, #56]	; 0x38
 80079aa:	e005      	b.n	80079b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d10b      	bne.n	80079d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f043 0206 	orr.w	r2, r3, #6
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f043 0220 	orr.w	r2, r3, #32
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079e2:	b004      	add	sp, #16
 80079e4:	4770      	bx	lr
	...

080079e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d165      	bne.n	8007ac8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4a41      	ldr	r2, [pc, #260]	; (8007b04 <USB_SetTurnaroundTime+0x11c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d906      	bls.n	8007a12 <USB_SetTurnaroundTime+0x2a>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4a40      	ldr	r2, [pc, #256]	; (8007b08 <USB_SetTurnaroundTime+0x120>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d202      	bcs.n	8007a12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a0c:	230f      	movs	r3, #15
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e062      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4a3c      	ldr	r2, [pc, #240]	; (8007b08 <USB_SetTurnaroundTime+0x120>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d306      	bcc.n	8007a28 <USB_SetTurnaroundTime+0x40>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a3b      	ldr	r2, [pc, #236]	; (8007b0c <USB_SetTurnaroundTime+0x124>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d202      	bcs.n	8007a28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a22:	230e      	movs	r3, #14
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e057      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4a38      	ldr	r2, [pc, #224]	; (8007b0c <USB_SetTurnaroundTime+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d306      	bcc.n	8007a3e <USB_SetTurnaroundTime+0x56>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4a37      	ldr	r2, [pc, #220]	; (8007b10 <USB_SetTurnaroundTime+0x128>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d202      	bcs.n	8007a3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a38:	230d      	movs	r3, #13
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e04c      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4a33      	ldr	r2, [pc, #204]	; (8007b10 <USB_SetTurnaroundTime+0x128>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d306      	bcc.n	8007a54 <USB_SetTurnaroundTime+0x6c>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4a32      	ldr	r2, [pc, #200]	; (8007b14 <USB_SetTurnaroundTime+0x12c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d802      	bhi.n	8007a54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a4e:	230c      	movs	r3, #12
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e041      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <USB_SetTurnaroundTime+0x12c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d906      	bls.n	8007a6a <USB_SetTurnaroundTime+0x82>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4a2e      	ldr	r2, [pc, #184]	; (8007b18 <USB_SetTurnaroundTime+0x130>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d802      	bhi.n	8007a6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a64:	230b      	movs	r3, #11
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e036      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <USB_SetTurnaroundTime+0x130>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d906      	bls.n	8007a80 <USB_SetTurnaroundTime+0x98>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <USB_SetTurnaroundTime+0x134>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d802      	bhi.n	8007a80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	e02b      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <USB_SetTurnaroundTime+0x134>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d906      	bls.n	8007a96 <USB_SetTurnaroundTime+0xae>
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4a25      	ldr	r2, [pc, #148]	; (8007b20 <USB_SetTurnaroundTime+0x138>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d202      	bcs.n	8007a96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a90:	2309      	movs	r3, #9
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e020      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4a21      	ldr	r2, [pc, #132]	; (8007b20 <USB_SetTurnaroundTime+0x138>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d306      	bcc.n	8007aac <USB_SetTurnaroundTime+0xc4>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a20      	ldr	r2, [pc, #128]	; (8007b24 <USB_SetTurnaroundTime+0x13c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d802      	bhi.n	8007aac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e015      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <USB_SetTurnaroundTime+0x13c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d906      	bls.n	8007ac2 <USB_SetTurnaroundTime+0xda>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <USB_SetTurnaroundTime+0x140>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d202      	bcs.n	8007ac2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007abc:	2307      	movs	r3, #7
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e00a      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007ac2:	2306      	movs	r3, #6
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	e007      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007ace:	2309      	movs	r3, #9
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e001      	b.n	8007ad8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ad4:	2309      	movs	r3, #9
 8007ad6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	029b      	lsls	r3, r3, #10
 8007aec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007af0:	431a      	orrs	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	00d8acbf 	.word	0x00d8acbf
 8007b08:	00e4e1c0 	.word	0x00e4e1c0
 8007b0c:	00f42400 	.word	0x00f42400
 8007b10:	01067380 	.word	0x01067380
 8007b14:	011a499f 	.word	0x011a499f
 8007b18:	01312cff 	.word	0x01312cff
 8007b1c:	014ca43f 	.word	0x014ca43f
 8007b20:	016e3600 	.word	0x016e3600
 8007b24:	01a6ab1f 	.word	0x01a6ab1f
 8007b28:	01e84800 	.word	0x01e84800

08007b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f043 0201 	orr.w	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0201 	bic.w	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d106      	bne.n	8007b9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e00b      	b.n	8007bb4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	e001      	b.n	8007bb4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e003      	b.n	8007bbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007bb4:	2032      	movs	r0, #50	; 0x32
 8007bb6:	f7fb f913 	bl	8002de0 <HAL_Delay>

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bde:	2300      	movs	r3, #0
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	e009      	b.n	8007bf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3340      	adds	r3, #64	; 0x40
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	2200      	movs	r2, #0
 8007bf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b0e      	cmp	r3, #14
 8007bfc:	d9f2      	bls.n	8007be4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11c      	bne.n	8007c3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c12:	f043 0302 	orr.w	r3, r3, #2
 8007c16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3c:	e00b      	b.n	8007c56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	4619      	mov	r1, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c70:	461a      	mov	r2, r3
 8007c72:	680b      	ldr	r3, [r1, #0]
 8007c74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10c      	bne.n	8007c96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c82:	2100      	movs	r1, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f949 	bl	8007f1c <USB_SetDevSpeed>
 8007c8a:	e008      	b.n	8007c9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f944 	bl	8007f1c <USB_SetDevSpeed>
 8007c94:	e003      	b.n	8007c9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c96:	2103      	movs	r1, #3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f93f 	bl	8007f1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c9e:	2110      	movs	r1, #16
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8f3 	bl	8007e8c <USB_FlushTxFifo>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f911 	bl	8007ed8 <USB_FlushRxFifo>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	e043      	b.n	8007d72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d00:	d118      	bne.n	8007d34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	461a      	mov	r2, r3
 8007d16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e013      	b.n	8007d46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e008      	b.n	8007d46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	461a      	mov	r2, r3
 8007d42:	2300      	movs	r3, #0
 8007d44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d52:	461a      	mov	r2, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	461a      	mov	r2, r3
 8007d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3b7      	bcc.n	8007cea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e043      	b.n	8007e08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d96:	d118      	bne.n	8007dca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	461a      	mov	r2, r3
 8007dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e013      	b.n	8007ddc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	e008      	b.n	8007ddc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	461a      	mov	r2, r3
 8007dea:	2300      	movs	r3, #0
 8007dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d3b7      	bcc.n	8007d80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f043 0210 	orr.w	r2, r3, #16
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <USB_DevInit+0x2c4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d107      	bne.n	8007e78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e70:	f043 0304 	orr.w	r3, r3, #4
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e84:	b004      	add	sp, #16
 8007e86:	4770      	bx	lr
 8007e88:	803c3800 	.word	0x803c3800

08007e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	019b      	lsls	r3, r3, #6
 8007e9e:	f043 0220 	orr.w	r2, r3, #32
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <USB_FlushTxFifo+0x48>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d901      	bls.n	8007eb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e006      	b.n	8007ec6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d0f0      	beq.n	8007ea6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	00030d40 	.word	0x00030d40

08007ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2210      	movs	r2, #16
 8007ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3301      	adds	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <USB_FlushRxFifo+0x40>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d901      	bls.n	8007efc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e006      	b.n	8007f0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b10      	cmp	r3, #16
 8007f06:	d0f0      	beq.n	8007eea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	00030d40 	.word	0x00030d40

08007f1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	68f9      	ldr	r1, [r7, #12]
 8007f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b087      	sub	sp, #28
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0306 	and.w	r3, r3, #6
 8007f66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]
 8007f72:	e00a      	b.n	8007f8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d002      	beq.n	8007f80 <USB_GetDevSpeed+0x32>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b06      	cmp	r3, #6
 8007f7e:	d102      	bne.n	8007f86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f80:	2302      	movs	r3, #2
 8007f82:	75fb      	strb	r3, [r7, #23]
 8007f84:	e001      	b.n	8007f8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f86:	230f      	movs	r3, #15
 8007f88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d13a      	bne.n	800802a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	68f9      	ldr	r1, [r7, #12]
 8007fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d155      	bne.n	8008098 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	78db      	ldrb	r3, [r3, #3]
 8008006:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008008:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	059b      	lsls	r3, r3, #22
 800800e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008010:	4313      	orrs	r3, r2
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	440a      	add	r2, r1
 800801a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800801e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e036      	b.n	8008098 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008030:	69da      	ldr	r2, [r3, #28]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	2101      	movs	r1, #1
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	041b      	lsls	r3, r3, #16
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008048:	4313      	orrs	r3, r2
 800804a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11a      	bne.n	8008098 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	78db      	ldrb	r3, [r3, #3]
 800807c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800807e:	430b      	orrs	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008096:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d161      	bne.n	8008188 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080da:	d11f      	bne.n	800811c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	440a      	add	r2, r1
 8008112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800811a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 030f 	and.w	r3, r3, #15
 800812c:	2101      	movs	r1, #1
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	43db      	mvns	r3, r3
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813c:	4013      	ands	r3, r2
 800813e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	2101      	movs	r1, #1
 8008152:	fa01 f303 	lsl.w	r3, r1, r3
 8008156:	b29b      	uxth	r3, r3
 8008158:	43db      	mvns	r3, r3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008160:	4013      	ands	r3, r2
 8008162:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	0159      	lsls	r1, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	440b      	add	r3, r1
 800817a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817e:	4619      	mov	r1, r3
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <USB_DeactivateEndpoint+0x1b0>)
 8008182:	4013      	ands	r3, r2
 8008184:	600b      	str	r3, [r1, #0]
 8008186:	e060      	b.n	800824a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800819a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800819e:	d11f      	bne.n	80081e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	2101      	movs	r1, #1
 80081f2:	fa01 f303 	lsl.w	r3, r1, r3
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	43db      	mvns	r3, r3
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008200:	4013      	ands	r3, r2
 8008202:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	2101      	movs	r1, #1
 8008216:	fa01 f303 	lsl.w	r3, r1, r3
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	43db      	mvns	r3, r3
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008224:	4013      	ands	r3, r2
 8008226:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	0159      	lsls	r1, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	440b      	add	r3, r1
 800823e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008242:	4619      	mov	r1, r3
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <USB_DeactivateEndpoint+0x1b4>)
 8008246:	4013      	ands	r3, r2
 8008248:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	ec337800 	.word	0xec337800
 800825c:	eff37800 	.word	0xeff37800

08008260 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 815c 	bne.w	800853a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d132      	bne.n	80082f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	0151      	lsls	r1, r2, #5
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	440a      	add	r2, r1
 80082e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e8:	0cdb      	lsrs	r3, r3, #19
 80082ea:	04db      	lsls	r3, r3, #19
 80082ec:	6113      	str	r3, [r2, #16]
 80082ee:	e074      	b.n	80083da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830a:	0cdb      	lsrs	r3, r3, #19
 800830c:	04db      	lsls	r3, r3, #19
 800830e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800832e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	691a      	ldr	r2, [r3, #16]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6959      	ldr	r1, [r3, #20]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	440b      	add	r3, r1
 800834c:	1e59      	subs	r1, r3, #1
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	fbb1 f3f3 	udiv	r3, r1, r3
 8008356:	04d9      	lsls	r1, r3, #19
 8008358:	4b9d      	ldr	r3, [pc, #628]	; (80085d0 <USB_EPStartXfer+0x370>)
 800835a:	400b      	ands	r3, r1
 800835c:	69b9      	ldr	r1, [r7, #24]
 800835e:	0148      	lsls	r0, r1, #5
 8008360:	69f9      	ldr	r1, [r7, #28]
 8008362:	4401      	add	r1, r0
 8008364:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008368:	4313      	orrs	r3, r2
 800836a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	0148      	lsls	r0, r1, #5
 8008386:	69f9      	ldr	r1, [r7, #28]
 8008388:	4401      	add	r1, r0
 800838a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800838e:	4313      	orrs	r3, r2
 8008390:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d11f      	bne.n	80083da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d14b      	bne.n	8008478 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f4:	461a      	mov	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d128      	bne.n	8008456 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d110      	bne.n	8008436 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	69fa      	ldr	r2, [r7, #28]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e00f      	b.n	8008456 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	0151      	lsls	r1, r2, #5
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	440a      	add	r2, r1
 800844c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008454:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	440a      	add	r2, r1
 800846c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e12f      	b.n	80086d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	440a      	add	r2, r1
 800848e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008496:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	78db      	ldrb	r3, [r3, #3]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d015      	beq.n	80084cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8117 	beq.w	80086d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	2101      	movs	r1, #1
 80084bc:	fa01 f303 	lsl.w	r3, r1, r3
 80084c0:	69f9      	ldr	r1, [r7, #28]
 80084c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084c6:	4313      	orrs	r3, r2
 80084c8:	634b      	str	r3, [r1, #52]	; 0x34
 80084ca:	e105      	b.n	80086d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d110      	bne.n	80084fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	0151      	lsls	r1, r2, #5
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	440a      	add	r2, r1
 80084f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	e00f      	b.n	800851e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	68d9      	ldr	r1, [r3, #12]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	b298      	uxth	r0, r3
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4603      	mov	r3, r0
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fa2b 	bl	800898e <USB_WritePacket>
 8008538:	e0ce      	b.n	80086d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	440a      	add	r2, r1
 8008550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008554:	0cdb      	lsrs	r3, r3, #19
 8008556:	04db      	lsls	r3, r3, #19
 8008558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800857c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d126      	bne.n	80085d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800859c:	69b9      	ldr	r1, [r7, #24]
 800859e:	0148      	lsls	r0, r1, #5
 80085a0:	69f9      	ldr	r1, [r7, #28]
 80085a2:	4401      	add	r1, r0
 80085a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085a8:	4313      	orrs	r3, r2
 80085aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ca:	6113      	str	r3, [r2, #16]
 80085cc:	e036      	b.n	800863c <USB_EPStartXfer+0x3dc>
 80085ce:	bf00      	nop
 80085d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	695a      	ldr	r2, [r3, #20]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	4413      	add	r3, r2
 80085de:	1e5a      	subs	r2, r3, #1
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	8afb      	ldrh	r3, [r7, #22]
 80085fa:	04d9      	lsls	r1, r3, #19
 80085fc:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <USB_EPStartXfer+0x484>)
 80085fe:	400b      	ands	r3, r1
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	0148      	lsls	r0, r1, #5
 8008604:	69f9      	ldr	r1, [r7, #28]
 8008606:	4401      	add	r1, r0
 8008608:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800860c:	4313      	orrs	r3, r2
 800860e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861c:	691a      	ldr	r2, [r3, #16]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	8af9      	ldrh	r1, [r7, #22]
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800862c:	69b9      	ldr	r1, [r7, #24]
 800862e:	0148      	lsls	r0, r1, #5
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	4401      	add	r1, r0
 8008634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008638:	4313      	orrs	r3, r2
 800863a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d10d      	bne.n	800865e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	68d9      	ldr	r1, [r3, #12]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865a:	460a      	mov	r2, r1
 800865c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	78db      	ldrb	r3, [r3, #3]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d128      	bne.n	80086b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d110      	bne.n	8008698 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	69fa      	ldr	r2, [r7, #28]
 800868a:	440a      	add	r2, r1
 800868c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e00f      	b.n	80086b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3720      	adds	r7, #32
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	1ff80000 	.word	0x1ff80000

080086e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	4613      	mov	r3, r2
 80086f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	2b01      	cmp	r3, #1
 8008706:	f040 80cd 	bne.w	80088a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d132      	bne.n	8008778 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	0151      	lsls	r1, r2, #5
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	440a      	add	r2, r1
 800876c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008770:	0cdb      	lsrs	r3, r3, #19
 8008772:	04db      	lsls	r3, r3, #19
 8008774:	6113      	str	r3, [r2, #16]
 8008776:	e04e      	b.n	8008816 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	440a      	add	r2, r1
 800878e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008792:	0cdb      	lsrs	r3, r3, #19
 8008794:	04db      	lsls	r3, r3, #19
 8008796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	695a      	ldr	r2, [r3, #20]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d903      	bls.n	80087d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008806:	6939      	ldr	r1, [r7, #16]
 8008808:	0148      	lsls	r0, r1, #5
 800880a:	6979      	ldr	r1, [r7, #20]
 800880c:	4401      	add	r1, r0
 800880e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008812:	4313      	orrs	r3, r2
 8008814:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11e      	bne.n	800885a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008830:	461a      	mov	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	0151      	lsls	r1, r2, #5
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	440a      	add	r2, r1
 800884e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e092      	b.n	8008980 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008878:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d07e      	beq.n	8008980 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	2101      	movs	r1, #1
 8008894:	fa01 f303 	lsl.w	r3, r1, r3
 8008898:	6979      	ldr	r1, [r7, #20]
 800889a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800889e:	4313      	orrs	r3, r2
 80088a0:	634b      	str	r3, [r1, #52]	; 0x34
 80088a2:	e06d      	b.n	8008980 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	0151      	lsls	r1, r2, #5
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	440a      	add	r2, r1
 80088ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088be:	0cdb      	lsrs	r3, r3, #19
 80088c0:	04db      	lsls	r3, r3, #19
 80088c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800892e:	6939      	ldr	r1, [r7, #16]
 8008930:	0148      	lsls	r0, r1, #5
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	4401      	add	r1, r0
 8008936:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800893a:	4313      	orrs	r3, r2
 800893c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d10d      	bne.n	8008960 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	68d9      	ldr	r1, [r3, #12]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	460a      	mov	r2, r1
 800895e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800897a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800897e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800898e:	b480      	push	{r7}
 8008990:	b089      	sub	sp, #36	; 0x24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	4611      	mov	r1, r2
 800899a:	461a      	mov	r2, r3
 800899c:	460b      	mov	r3, r1
 800899e:	71fb      	strb	r3, [r7, #7]
 80089a0:	4613      	mov	r3, r2
 80089a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80089ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d11a      	bne.n	80089ea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089b4:	88bb      	ldrh	r3, [r7, #4]
 80089b6:	3303      	adds	r3, #3
 80089b8:	089b      	lsrs	r3, r3, #2
 80089ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089bc:	2300      	movs	r3, #0
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	e00f      	b.n	80089e2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	031a      	lsls	r2, r3, #12
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ce:	461a      	mov	r2, r3
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	3304      	adds	r3, #4
 80089da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	3301      	adds	r3, #1
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d3eb      	bcc.n	80089c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3724      	adds	r7, #36	; 0x24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b089      	sub	sp, #36	; 0x24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	3303      	adds	r3, #3
 8008a12:	089b      	lsrs	r3, r3, #2
 8008a14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]
 8008a1a:	e00b      	b.n	8008a34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	3301      	adds	r3, #1
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d3ef      	bcc.n	8008a1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3724      	adds	r7, #36	; 0x24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d12c      	bne.n	8008ac0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	db12      	blt.n	8008a9e <USB_EPSetStall+0x54>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00f      	beq.n	8008a9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	e02b      	b.n	8008b18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	db12      	blt.n	8008af8 <USB_EPSetStall+0xae>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00f      	beq.n	8008af8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	0151      	lsls	r1, r2, #5
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	440a      	add	r2, r1
 8008aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008af6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d128      	bne.n	8008b94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	78db      	ldrb	r3, [r3, #3]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d003      	beq.n	8008b72 <USB_EPClearStall+0x4c>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	78db      	ldrb	r3, [r3, #3]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d138      	bne.n	8008be4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e027      	b.n	8008be4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d003      	beq.n	8008bc4 <USB_EPClearStall+0x9e>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d10f      	bne.n	8008be4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c26:	68f9      	ldr	r1, [r7, #12]
 8008c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6c:	f023 0302 	bic.w	r3, r3, #2
 8008c70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cae:	f043 0302 	orr.w	r3, r3, #2
 8008cb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cda:	68fb      	ldr	r3, [r7, #12]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	0c1b      	lsrs	r3, r3, #16
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	b29b      	uxth	r3, r3
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dbc:	01db      	lsls	r3, r3, #7
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dda:	68bb      	ldr	r3, [r7, #8]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	f003 0301 	and.w	r3, r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	460b      	mov	r3, r1
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	333c      	adds	r3, #60	; 0x3c
 8008e62:	3304      	adds	r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4a26      	ldr	r2, [pc, #152]	; (8008f04 <USB_EP0_OutStart+0xb8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d90a      	bls.n	8008e86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e80:	d101      	bne.n	8008e86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e037      	b.n	8008ef6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eb4:	f043 0318 	orr.w	r3, r3, #24
 8008eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008ecc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d10f      	bne.n	8008ef4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008ef2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	4f54300a 	.word	0x4f54300a

08008f08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4a13      	ldr	r2, [pc, #76]	; (8008f6c <USB_CoreReset+0x64>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e01b      	b.n	8008f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	daf2      	bge.n	8008f14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f043 0201 	orr.w	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <USB_CoreReset+0x64>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d901      	bls.n	8008f50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e006      	b.n	8008f5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d0f0      	beq.n	8008f3e <USB_CoreReset+0x36>

  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	00030d40 	.word	0x00030d40

08008f70 <checkCrc>:


static void SGP40_delay(uint32_t time_);

static uint8_t checkCrc(uint8_t data1,uint8_t data2)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	460a      	mov	r2, r1
 8008f7a:	71fb      	strb	r3, [r7, #7]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	71bb      	strb	r3, [r7, #6]
  uint8_t crc = 0xFF;
 8008f80:	23ff      	movs	r3, #255	; 0xff
 8008f82:	75fb      	strb	r3, [r7, #23]
  uint8_t data[2];
  data[0]=data1;
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	733b      	strb	r3, [r7, #12]
  data[1]=data2;
 8008f88:	79bb      	ldrb	r3, [r7, #6]
 8008f8a:	737b      	strb	r3, [r7, #13]
  for(int i =0; i<2;i++){
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
 8008f90:	e021      	b.n	8008fd6 <checkCrc+0x66>
    crc ^= data[i];
 8008f92:	f107 020c 	add.w	r2, r7, #12
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	781a      	ldrb	r2, [r3, #0]
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	4053      	eors	r3, r2
 8008fa0:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 8008fa2:	2308      	movs	r3, #8
 8008fa4:	73fb      	strb	r3, [r7, #15]
 8008fa6:	e010      	b.n	8008fca <checkCrc+0x5a>
      if(crc & 0x80){
 8008fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da06      	bge.n	8008fbe <checkCrc+0x4e>
        crc = (crc << 1)^0x31u;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8008fba:	75fb      	strb	r3, [r7, #23]
 8008fbc:	e002      	b.n	8008fc4 <checkCrc+0x54>
      }else{
        crc = (crc << 1);
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	005b      	lsls	r3, r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
    for(uint8_t bit = 8;bit>0;--bit){
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	73fb      	strb	r3, [r7, #15]
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1eb      	bne.n	8008fa8 <checkCrc+0x38>
  for(int i =0; i<2;i++){
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	613b      	str	r3, [r7, #16]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	ddda      	ble.n	8008f92 <checkCrc+0x22>
      }
    }
  }
  return crc;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <SGP40_write>:

SGP40_status SGP40_write(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af02      	add	r7, sp, #8
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Transmit(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	7e1b      	ldrb	r3, [r3, #24]
 8009000:	b299      	uxth	r1, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	b29a      	uxth	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4613      	mov	r3, r2
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	f7fa fcd9 	bl	80039c4 <HAL_I2C_Master_Transmit>
 8009012:	4603      	mov	r3, r0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <SGP40_read>:

SGP40_status SGP40_read(SGP40_var *var, uint8_t* pData, uint32_t len, uint32_t timeout_)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
	return (SGP40_status) HAL_I2C_Master_Receive(var->i2c_ch, var->_deviceAddr, pData, len, timeout_);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	7e1b      	ldrb	r3, [r3, #24]
 8009032:	b299      	uxth	r1, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	b29a      	uxth	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4613      	mov	r3, r2
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	f7fa fdbe 	bl	8003bc0 <HAL_I2C_Master_Receive>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <SGP40_readRAW>:

SGP40_status SGP40_readRAW(SGP40_var *var, uint16_t* raw, uint32_t timeout_)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
	uint8_t data[3]={0,0,0};
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <SGP40_readRAW+0x60>)
 800905e:	f107 0310 	add.w	r3, r7, #16
 8009062:	6812      	ldr	r2, [r2, #0]
 8009064:	4611      	mov	r1, r2
 8009066:	8019      	strh	r1, [r3, #0]
 8009068:	3302      	adds	r3, #2
 800906a:	0c12      	lsrs	r2, r2, #16
 800906c:	701a      	strb	r2, [r3, #0]
	uint16_t value=0;
 800906e:	2300      	movs	r3, #0
 8009070:	82fb      	strh	r3, [r7, #22]
	*raw = 0;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2200      	movs	r2, #0
 8009076:	801a      	strh	r2, [r3, #0]
	if ( SGP40_read(var, data, 3, timeout_) == SGP40_OK )
 8009078:	f107 0110 	add.w	r1, r7, #16
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2203      	movs	r2, #3
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff ffcb 	bl	800901c <SGP40_read>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10c      	bne.n	80090a6 <SGP40_readRAW+0x56>
	{
		value=(data[0]<<8)|data[1];
 800908c:	7c3b      	ldrb	r3, [r7, #16]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	b21a      	sxth	r2, r3
 8009092:	7c7b      	ldrb	r3, [r7, #17]
 8009094:	b21b      	sxth	r3, r3
 8009096:	4313      	orrs	r3, r2
 8009098:	b21b      	sxth	r3, r3
 800909a:	82fb      	strh	r3, [r7, #22]
		*raw = value;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	8afa      	ldrh	r2, [r7, #22]
 80090a0:	801a      	strh	r2, [r3, #0]
		return SGP40_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e000      	b.n	80090a8 <SGP40_readRAW+0x58>
	}
	return SGP40_ERROR;
 80090a6:	2301      	movs	r3, #1
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	0800d004 	.word	0x0800d004

080090b4 <SGP40_isDevice>:


SGP40_status SGP40_isDevice(SGP40_var *var)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	if ( var->i2c_ch == NULL )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <SGP40_isDevice+0x14>
		return SGP40_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e00b      	b.n	80090e0 <SGP40_isDevice+0x2c>
	else
		return (SGP40_status)HAL_I2C_IsDeviceReady(var->i2c_ch, var->_deviceAddr, 10, 500);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7e1b      	ldrb	r3, [r3, #24]
 80090d0:	b299      	uxth	r1, r3
 80090d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80090d6:	220a      	movs	r2, #10
 80090d8:	f7fa ff98 	bl	800400c <HAL_I2C_IsDeviceReady>
 80090dc:	4603      	mov	r3, r0
 80090de:	bf00      	nop
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <SGP40_begin>:

SGP40_status SGP40_begin(SGP40_var *var, I2C_HandleTypeDef *i2c_ch, uint8_t addr, uint32_t duration)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	71fb      	strb	r3, [r7, #7]
	var->i2c_ch 		= i2c_ch;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	601a      	str	r2, [r3, #0]
	var->_deviceAddr 	= addr << 1;
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	b2da      	uxtb	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	761a      	strb	r2, [r3, #24]
	var->_relativeHumidity	=	50.f;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a1b      	ldr	r2, [pc, #108]	; (8009178 <SGP40_begin+0x90>)
 800910c:	609a      	str	r2, [r3, #8]
	var->_temperatureC		= 	25.f;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a1a      	ldr	r2, [pc, #104]	; (800917c <SGP40_begin+0x94>)
 8009112:	60da      	str	r2, [r3, #12]
	SGP40_status ret = SGP40_isDevice(var);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff ffcd 	bl	80090b4 <SGP40_isDevice>
 800911a:	4603      	mov	r3, r0
 800911c:	76fb      	strb	r3, [r7, #27]
	if ( ret != SGP40_OK )
 800911e:	7efb      	ldrb	r3, [r7, #27]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <SGP40_begin+0x40>
		return ret;
 8009124:	7efb      	ldrb	r3, [r7, #27]
 8009126:	e023      	b.n	8009170 <SGP40_begin+0x88>
	VocAlgorithm_init(&var->_vocaAgorithmParams);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	331c      	adds	r3, #28
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fb41 	bl	80097b4 <VocAlgorithm_init>
	uint32_t t_ = HAL_GetTick();
 8009132:	f7f9 fe49 	bl	8002dc8 <HAL_GetTick>
 8009136:	61f8      	str	r0, [r7, #28]
	while( HAL_GetTick() - t_ <= duration )
 8009138:	e00e      	b.n	8009158 <SGP40_begin+0x70>
	{
		uint32_t rol_ov = HAL_GetTick();
 800913a:	f7f9 fe45 	bl	8002dc8 <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]
		if ( t_ > rol_ov )	// perventive action for roll-over counting in system-ticks
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	429a      	cmp	r2, r3
 8009146:	d901      	bls.n	800914c <SGP40_begin+0x64>
			t_ = rol_ov;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	61fb      	str	r3, [r7, #28]
		// get voc - index
		uint16_t voc_index;
		SGP40_getVOCIndex(var, NULL, 500UL);
 800914c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009150:	2100      	movs	r1, #0
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f86c 	bl	8009230 <SGP40_getVOCIndex>
	while( HAL_GetTick() - t_ <= duration )
 8009158:	f7f9 fe36 	bl	8002dc8 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d2e8      	bcs.n	800913a <SGP40_begin+0x52>
	}
	// need to measurement test
	return SGP40_measurementTest(var);
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f8b3 	bl	80092d4 <SGP40_measurementTest>
 800916e:	4603      	mov	r3, r0
//	return SGP40_OK;
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	42480000 	.word	0x42480000
 800917c:	41c80000 	.word	0x41c80000

08009180 <SGP40_setRhT>:

SGP40_status SGP40_setRhT(SGP40_var *var, float relativeHumidity, float temperatureC, uint32_t timeout_)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	ed87 0a02 	vstr	s0, [r7, #8]
 800918c:	edc7 0a01 	vstr	s1, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
	var->_relativeHumidity = relativeHumidity;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	609a      	str	r2, [r3, #8]
	var->_temperatureC = temperatureC;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	60da      	str	r2, [r3, #12]
	SGP40_dataTransform(var);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f8ce 	bl	8009340 <SGP40_dataTransform>
	return SGP40_write(var, var->_rhTemData,6, timeout_);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f103 0110 	add.w	r1, r3, #16
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2206      	movs	r2, #6
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff ff1b 	bl	8008fea <SGP40_write>
 80091b4:	4603      	mov	r3, r0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <SGP40_heaterOff>:

SGP40_status SGP40_heaterOff(SGP40_var *var, uint32_t timeout_)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
	uint8_t testCommand[CMD_HEATER_OFF_SIZE]={CMD_HEATER_OFF_H,CMD_HEATER_OFF_L};
 80091c8:	f241 5336 	movw	r3, #5430	; 0x1536
 80091cc:	81bb      	strh	r3, [r7, #12]
	return SGP40_write(var, testCommand,CMD_HEATER_OFF_SIZE, timeout_);
 80091ce:	f107 010c 	add.w	r1, r7, #12
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2202      	movs	r2, #2
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff ff07 	bl	8008fea <SGP40_write>
 80091dc:	4603      	mov	r3, r0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <SGP40_softReset>:

SGP40_status SGP40_softReset(SGP40_var *var)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	uint8_t testCommand[CMD_SOFT_RESET_SIZE]={CMD_SOFT_RESET_H,CMD_SOFT_RESET_L};
 80091f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80091f4:	81bb      	strh	r3, [r7, #12]
	SGP40_status ret = SGP40_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
	ret = SGP40_write(var, testCommand, CMD_SOFT_RESET_SIZE, 100);
 80091fa:	f107 010c 	add.w	r1, r7, #12
 80091fe:	2364      	movs	r3, #100	; 0x64
 8009200:	2202      	movs	r2, #2
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fef1 	bl	8008fea <SGP40_write>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d105      	bne.n	800921e <SGP40_softReset+0x36>
	{
		var->_relativeHumidity = 50;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a04      	ldr	r2, [pc, #16]	; (8009228 <SGP40_softReset+0x40>)
 8009216:	609a      	str	r2, [r3, #8]
		var->_temperatureC = 25.f;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a04      	ldr	r2, [pc, #16]	; (800922c <SGP40_softReset+0x44>)
 800921c:	60da      	str	r2, [r3, #12]
	}
	return ret;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	42480000 	.word	0x42480000
 800922c:	41c80000 	.word	0x41c80000

08009230 <SGP40_getVOCIndex>:

SGP40_status SGP40_getVOCIndex(SGP40_var *var, uint16_t *VOC_index, uint32_t timeout_)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b088      	sub	sp, #32
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
	*VOC_index = 0;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	801a      	strh	r2, [r3, #0]
	uint8_t data[3]={0,0,0};
 8009242:	4a23      	ldr	r2, [pc, #140]	; (80092d0 <SGP40_getVOCIndex+0xa0>)
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	4611      	mov	r1, r2
 800924c:	8019      	strh	r1, [r3, #0]
 800924e:	3302      	adds	r3, #2
 8009250:	0c12      	lsrs	r2, r2, #16
 8009252:	701a      	strb	r2, [r3, #0]
	int32_t value;
	int32_t vocIndex=0;
 8009254:	2300      	movs	r3, #0
 8009256:	613b      	str	r3, [r7, #16]
	SGP40_dataTransform(var);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f871 	bl	8009340 <SGP40_dataTransform>
	SGP40_status ret = SGP40_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	77fb      	strb	r3, [r7, #31]
	ret = SGP40_write(var, var->_rhTemData,8, timeout_);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f103 0110 	add.w	r1, r3, #16
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2208      	movs	r2, #8
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff febc 	bl	8008fea <SGP40_write>
 8009272:	4603      	mov	r3, r0
 8009274:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 8009276:	7ffb      	ldrb	r3, [r7, #31]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <SGP40_getVOCIndex+0x50>
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	e022      	b.n	80092c6 <SGP40_getVOCIndex+0x96>
	SGP40_delay(DURATION_READ_RAW_VOC);
 8009280:	201e      	movs	r0, #30
 8009282:	f000 f8d9 	bl	8009438 <SGP40_delay>
	ret = SGP40_read(var, data, 3, timeout_);
 8009286:	f107 0114 	add.w	r1, r7, #20
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2203      	movs	r2, #3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fec4 	bl	800901c <SGP40_read>
 8009294:	4603      	mov	r3, r0
 8009296:	77fb      	strb	r3, [r7, #31]
	if ( ret != SGP40_OK ) return ret;
 8009298:	7ffb      	ldrb	r3, [r7, #31]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <SGP40_getVOCIndex+0x72>
 800929e:	7ffb      	ldrb	r3, [r7, #31]
 80092a0:	e011      	b.n	80092c6 <SGP40_getVOCIndex+0x96>
	value=(data[0]<<8)|data[1];
 80092a2:	7d3b      	ldrb	r3, [r7, #20]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	7d7a      	ldrb	r2, [r7, #21]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	61bb      	str	r3, [r7, #24]
	VocAlgorithm_process(&var->_vocaAgorithmParams, value, &vocIndex);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	331c      	adds	r3, #28
 80092b0:	f107 0210 	add.w	r2, r7, #16
 80092b4:	69b9      	ldr	r1, [r7, #24]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fad3 	bl	8009862 <VocAlgorithm_process>
	*VOC_index = vocIndex;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	801a      	strh	r2, [r3, #0]
	return ret;
 80092c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3720      	adds	r7, #32
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	0800d004 	.word	0x0800d004

080092d4 <SGP40_measurementTest>:

SGP40_status SGP40_measurementTest(SGP40_var *var)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	SGP40_status ret = SGP40_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
	uint8_t testCommand[CMD_MEASURE_TEST_SIZE]={CMD_MEASURE_TEST_H,CMD_MEASURE_TEST_L};
 80092e0:	f640 6328 	movw	r3, #3624	; 0xe28
 80092e4:	81bb      	strh	r3, [r7, #12]
	uint16_t value=0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	817b      	strh	r3, [r7, #10]
	ret = SGP40_write(var, testCommand, CMD_MEASURE_TEST_SIZE, 200UL);
 80092ea:	f107 010c 	add.w	r1, r7, #12
 80092ee:	23c8      	movs	r3, #200	; 0xc8
 80092f0:	2202      	movs	r2, #2
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fe79 	bl	8008fea <SGP40_write>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
	if ( ret != SGP40_OK )
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <SGP40_measurementTest+0x32>
		return ret;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	e018      	b.n	8009338 <SGP40_measurementTest+0x64>
	SGP40_delay(DURATION_WAIT_MEASURE_TEST);
 8009306:	20fa      	movs	r0, #250	; 0xfa
 8009308:	f000 f896 	bl	8009438 <SGP40_delay>
	ret = SGP40_readRAW(var, &value, 500UL);
 800930c:	f107 030a 	add.w	r3, r7, #10
 8009310:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fe9a 	bl	8009050 <SGP40_readRAW>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
	if ( ret == SGP40_OK )
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d107      	bne.n	8009336 <SGP40_measurementTest+0x62>
	{
		if ( value == TEST_OK )
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	f5b3 4f54 	cmp.w	r3, #54272	; 0xd400
 800932c:	d101      	bne.n	8009332 <SGP40_measurementTest+0x5e>
			return SGP40_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e002      	b.n	8009338 <SGP40_measurementTest+0x64>
		else
			return SGP40_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <SGP40_measurementTest+0x64>
	}
	else
		return ret;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SGP40_dataTransform>:

void SGP40_dataTransform(SGP40_var *var)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	uint16_t RH = (uint16_t)((var->_relativeHumidity*65535)/100+0.5);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	edd3 7a02 	vldr	s15, [r3, #8]
 800934e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009424 <SGP40_dataTransform+0xe4>
 8009352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009356:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009428 <SGP40_dataTransform+0xe8>
 800935a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800935e:	ee16 0a90 	vmov	r0, s13
 8009362:	f7f7 f8f9 	bl	8000558 <__aeabi_f2d>
 8009366:	f04f 0200 	mov.w	r2, #0
 800936a:	4b30      	ldr	r3, [pc, #192]	; (800942c <SGP40_dataTransform+0xec>)
 800936c:	f7f6 ff96 	bl	800029c <__adddf3>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4610      	mov	r0, r2
 8009376:	4619      	mov	r1, r3
 8009378:	f7f7 f946 	bl	8000608 <__aeabi_d2uiz>
 800937c:	4603      	mov	r3, r0
 800937e:	81fb      	strh	r3, [r7, #14]
	uint16_t TemC = (uint16_t)((var->_temperatureC+45)*(65535/175)+0.5);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	edd3 7a03 	vldr	s15, [r3, #12]
 8009386:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009430 <SGP40_dataTransform+0xf0>
 800938a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800938e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8009434 <SGP40_dataTransform+0xf4>
 8009392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009396:	ee17 0a90 	vmov	r0, s15
 800939a:	f7f7 f8dd 	bl	8000558 <__aeabi_f2d>
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <SGP40_dataTransform+0xec>)
 80093a4:	f7f6 ff7a 	bl	800029c <__adddf3>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	f7f7 f92a 	bl	8000608 <__aeabi_d2uiz>
 80093b4:	4603      	mov	r3, r0
 80093b6:	81bb      	strh	r3, [r7, #12]
	var->_rhTemData[INDEX_MEASURE_RAW_H]=CMD_MEASURE_RAW_H;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2226      	movs	r2, #38	; 0x26
 80093bc:	741a      	strb	r2, [r3, #16]
	var->_rhTemData[INDEX_MEASURE_RAW_L]=CMD_MEASURE_RAW_L;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	220f      	movs	r2, #15
 80093c2:	745a      	strb	r2, [r3, #17]
	var->_rhTemData[INDEX_RH_H]=RH>>8;
 80093c4:	89fb      	ldrh	r3, [r7, #14]
 80093c6:	0a1b      	lsrs	r3, r3, #8
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	749a      	strb	r2, [r3, #18]
	var->_rhTemData[INDEX_RH_L]=RH&0x00FF;
 80093d0:	89fb      	ldrh	r3, [r7, #14]
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	74da      	strb	r2, [r3, #19]
	var->_rhTemData[INDEX_RH_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_RH_H],var->_rhTemData[INDEX_RH_L]);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7c9a      	ldrb	r2, [r3, #18]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	7cdb      	ldrb	r3, [r3, #19]
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7ff fdc4 	bl	8008f70 <checkCrc>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	751a      	strb	r2, [r3, #20]
	var->_rhTemData[INDEX_TEM_H]=TemC>>8;
 80093f0:	89bb      	ldrh	r3, [r7, #12]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	755a      	strb	r2, [r3, #21]
	var->_rhTemData[INDEX_TEM_L]=TemC&0x00FF;
 80093fc:	89bb      	ldrh	r3, [r7, #12]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	759a      	strb	r2, [r3, #22]
	var->_rhTemData[INDEX_TEM_CHECK_CRC]=checkCrc(var->_rhTemData[INDEX_TEM_H],var->_rhTemData[INDEX_TEM_L]);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7d5a      	ldrb	r2, [r3, #21]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d9b      	ldrb	r3, [r3, #22]
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7ff fdae 	bl	8008f70 <checkCrc>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	75da      	strb	r2, [r3, #23]
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	477fff00 	.word	0x477fff00
 8009428:	42c80000 	.word	0x42c80000
 800942c:	3fe00000 	.word	0x3fe00000
 8009430:	42340000 	.word	0x42340000
 8009434:	43bb0000 	.word	0x43bb0000

08009438 <SGP40_delay>:
		.getVOCIndex	= SGP40_getVOCIndex,
};


static void SGP40_delay(uint32_t time_)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	if ( SGP40.halt == NULL )
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <SGP40_delay+0x28>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d103      	bne.n	8009450 <SGP40_delay+0x18>
		HAL_Delay(time_);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7f9 fcc9 	bl	8002de0 <HAL_Delay>
	else
		SGP40.halt(time_);
}
 800944e:	e003      	b.n	8009458 <SGP40_delay+0x20>
		SGP40.halt(time_);
 8009450:	4b03      	ldr	r3, [pc, #12]	; (8009460 <SGP40_delay+0x28>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	200002c0 	.word	0x200002c0

08009464 <fix16_from_int>:
 * specified */
#define FIX16_OVERFLOW 0x80000000
/*!< fix16_t value of 1 */
#define FIX16_ONE 0x00010000

static __inline__ fix16_t fix16_from_int(int32_t a) {
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
    return a * FIX16_ONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	041b      	lsls	r3, r3, #16
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <fix16_cast_to_int>:

static __inline__ int32_t fix16_cast_to_int(fix16_t a) {
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
    return (a >> 16);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	141b      	asrs	r3, r3, #16
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <fix16_mul>:
static fix16_t fix16_sqrt(fix16_t inValue);

/*! Returns the exponent (e^) of the given fix16_t. */
static fix16_t fix16_exp(fix16_t inValue);

static fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1) {
 8009494:	b480      	push	{r7}
 8009496:	b08f      	sub	sp, #60	; 0x3c
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
    //					BD	16 * 16 -> 32 bit products
    //				 CB
    //				 AD
    //				AC
    //			 |----| 64 bit product
    int32_t A = (inArg0 >> 16), C = (inArg1 >> 16);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	141b      	asrs	r3, r3, #16
 80094a2:	633b      	str	r3, [r7, #48]	; 0x30
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	141b      	asrs	r3, r3, #16
 80094a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t B = (inArg0 & 0xFFFF), D = (inArg1 & 0xFFFF);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t AC = A * C;
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	623b      	str	r3, [r7, #32]
    int32_t AD_CB = A * D + C * B;
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c4:	fb02 f203 	mul.w	r2, r2, r3
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	4413      	add	r3, r2
 80094d2:	61fb      	str	r3, [r7, #28]
    uint32_t BD = B * D;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	61bb      	str	r3, [r7, #24]

    int32_t product_hi = AC + (AD_CB >> 16);
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	141b      	asrs	r3, r3, #16
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	4413      	add	r3, r2
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34

    // Handle carry from lower 32 bits to upper part of result.
    uint32_t ad_cb_temp = AD_CB << 16;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	041b      	lsls	r3, r3, #16
 80094ec:	617b      	str	r3, [r7, #20]
    uint32_t product_lo = BD + ad_cb_temp;
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4413      	add	r3, r2
 80094f4:	613b      	str	r3, [r7, #16]
    if (product_lo < BD)
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d202      	bcs.n	8009504 <fix16_mul+0x70>
        product_hi++;
 80094fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009500:	3301      	adds	r3, #1
 8009502:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef FIXMATH_NO_OVERFLOW
    // The upper 17 bits should all be the same (the sign).
    if (product_hi >> 31 != product_hi >> 15)
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	17da      	asrs	r2, r3, #31
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950a:	13db      	asrs	r3, r3, #15
 800950c:	429a      	cmp	r2, r3
 800950e:	d002      	beq.n	8009516 <fix16_mul+0x82>
        return FIX16_OVERFLOW;
 8009510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009514:	e01d      	b.n	8009552 <fix16_mul+0xbe>
#else
    // Subtracting 0x8000 (= 0.5) and then using signed right shift
    // achieves proper rounding to result-1, except in the corner
    // case of negative numbers and lowest word = 0x8000.
    // To handle that, we also have to subtract 1 for negative numbers.
    uint32_t product_lo_tmp = product_lo;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	60fb      	str	r3, [r7, #12]
    product_lo -= 0x8000;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009520:	613b      	str	r3, [r7, #16]
    product_lo -= (uint32_t)product_hi >> 31;
 8009522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009524:	17db      	asrs	r3, r3, #31
 8009526:	461a      	mov	r2, r3
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	4413      	add	r3, r2
 800952c:	613b      	str	r3, [r7, #16]
    if (product_lo > product_lo_tmp)
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d902      	bls.n	800953c <fix16_mul+0xa8>
        product_hi--;
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	3b01      	subs	r3, #1
 800953a:	637b      	str	r3, [r7, #52]	; 0x34

    // Discard the lowest 16 bits. Note that this is not exactly the same
    // as dividing by 0x10000. For example if product = -1, result will
    // also be -1 and not 0. This is compensated by adding +1 to the result
    // and compensating this in turn in the rounding above.
    fix16_t result = (product_hi << 16) | (product_lo >> 16);
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	461a      	mov	r2, r3
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	0c1b      	lsrs	r3, r3, #16
 8009546:	4313      	orrs	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]
    result += 1;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	3301      	adds	r3, #1
 800954e:	60bb      	str	r3, [r7, #8]
    return result;
 8009550:	68bb      	ldr	r3, [r7, #8]
#endif
}
 8009552:	4618      	mov	r0, r3
 8009554:	373c      	adds	r7, #60	; 0x3c
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <fix16_div>:

static fix16_t fix16_div(fix16_t a, fix16_t b) {
 800955e:	b480      	push	{r7}
 8009560:	b089      	sub	sp, #36	; 0x24
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
    // This uses the basic binary restoring division algorithm.
    // It appears to be faster to do the whole division manually than
    // trying to compose a 64-bit divide out of 32-bit divisions on
    // platforms without hardware divide.

    if (b == 0)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <fix16_div+0x16>
        return FIX16_MINIMUM;
 800956e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009572:	e066      	b.n	8009642 <fix16_div+0xe4>

    uint32_t remainder = (a >= 0) ? a : (-a);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	425b      	neglt	r3, r3
 800957c:	61fb      	str	r3, [r7, #28]
    uint32_t divider = (b >= 0) ? b : (-b);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfb8      	it	lt
 8009584:	425b      	neglt	r3, r3
 8009586:	61bb      	str	r3, [r7, #24]

    uint32_t quotient = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]
    uint32_t bit = 0x10000;
 800958c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009590:	613b      	str	r3, [r7, #16]

    /* The algorithm requires D >= R */
    while (divider < remainder) {
 8009592:	e005      	b.n	80095a0 <fix16_div+0x42>
        divider <<= 1;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	61bb      	str	r3, [r7, #24]
        bit <<= 1;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	613b      	str	r3, [r7, #16]
    while (divider < remainder) {
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3f5      	bcc.n	8009594 <fix16_div+0x36>
    }

#ifndef FIXMATH_NO_OVERFLOW
    if (!bit)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <fix16_div+0x56>
        return FIX16_OVERFLOW;
 80095ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095b2:	e046      	b.n	8009642 <fix16_div+0xe4>
#endif

    if (divider & 0x80000000) {
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	da24      	bge.n	8009604 <fix16_div+0xa6>
        // Perform one step manually to avoid overflows later.
        // We know that divider's bottom bit is 0 here.
        if (remainder >= divider) {
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d307      	bcc.n	80095d2 <fix16_div+0x74>
            quotient |= bit;
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	61fb      	str	r3, [r7, #28]
        }
        divider >>= 1;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	085b      	lsrs	r3, r3, #1
 80095d6:	61bb      	str	r3, [r7, #24]
        bit >>= 1;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	085b      	lsrs	r3, r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
    }

    /* Main division loop */
    while (bit && remainder) {
 80095de:	e011      	b.n	8009604 <fix16_div+0xa6>
        if (remainder >= divider) {
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d307      	bcc.n	80095f8 <fix16_div+0x9a>
            quotient |= bit;
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	617b      	str	r3, [r7, #20]
            remainder -= divider;
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	61fb      	str	r3, [r7, #28]
        }

        remainder <<= 1;
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	61fb      	str	r3, [r7, #28]
        bit >>= 1;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	085b      	lsrs	r3, r3, #1
 8009602:	613b      	str	r3, [r7, #16]
    while (bit && remainder) {
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <fix16_div+0xb2>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e7      	bne.n	80095e0 <fix16_div+0x82>
    }

#ifndef FIXMATH_NO_ROUNDING
    if (remainder >= divider) {
 8009610:	69fa      	ldr	r2, [r7, #28]
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	429a      	cmp	r2, r3
 8009616:	d302      	bcc.n	800961e <fix16_div+0xc0>
        quotient++;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	3301      	adds	r3, #1
 800961c:	617b      	str	r3, [r7, #20]
    }
#endif

    fix16_t result = quotient;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	60fb      	str	r3, [r7, #12]

    /* Figure out the sign of result */
    if ((a ^ b) & 0x80000000) {
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	4053      	eors	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	da09      	bge.n	8009640 <fix16_div+0xe2>
#ifndef FIXMATH_NO_OVERFLOW
        if (result == FIX16_MINIMUM)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009632:	d102      	bne.n	800963a <fix16_div+0xdc>
            return FIX16_OVERFLOW;
 8009634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009638:	e003      	b.n	8009642 <fix16_div+0xe4>
#endif

        result = -result;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	425b      	negs	r3, r3
 800963e:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8009640:	68fb      	ldr	r3, [r7, #12]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3724      	adds	r7, #36	; 0x24
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <fix16_sqrt>:

static fix16_t fix16_sqrt(fix16_t x) {
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
    // It is assumed that x is not negative

    uint32_t num = x;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	617b      	str	r3, [r7, #20]
    uint32_t result = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
    uint32_t bit;
    uint8_t n;

    bit = (uint32_t)1 << 30;
 800965e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009662:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 8009664:	e002      	b.n	800966c <fix16_sqrt+0x1e>
        bit >>= 2;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	089b      	lsrs	r3, r3, #2
 800966a:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	429a      	cmp	r2, r3
 8009672:	d8f8      	bhi.n	8009666 <fix16_sqrt+0x18>

    // The main part is executed twice, in order to avoid
    // using 64 bit values in computations.
    for (n = 0; n < 2; n++) {
 8009674:	2300      	movs	r3, #0
 8009676:	72fb      	strb	r3, [r7, #11]
 8009678:	e03c      	b.n	80096f4 <fix16_sqrt+0xa6>
        // First we get the top 24 bits of the answer.
        while (bit) {
            if (num >= result + bit) {
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	429a      	cmp	r2, r3
 8009684:	d30b      	bcc.n	800969e <fix16_sqrt+0x50>
                num -= result + bit;
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	617b      	str	r3, [r7, #20]
                result = (result >> 1) + bit;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4413      	add	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	e002      	b.n	80096a4 <fix16_sqrt+0x56>
            } else {
                result = (result >> 1);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	085b      	lsrs	r3, r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
            }
            bit >>= 2;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	089b      	lsrs	r3, r3, #2
 80096a8:	60fb      	str	r3, [r7, #12]
        while (bit) {
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e4      	bne.n	800967a <fix16_sqrt+0x2c>
        }

        if (n == 0) {
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d11b      	bne.n	80096ee <fix16_sqrt+0xa0>
            // Then process it again to get the lowest 8 bits.
            if (num > 65535) {
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096bc:	d30e      	bcc.n	80096dc <fix16_sqrt+0x8e>
                // by 16, so we have to add 1 to result manually and
                // adjust 'num' accordingly.
                // num = a - (result + 0.5)^2
                //	 = num + result^2 - (result + 0.5)^2
                //	 = num - result - 0.5
                num -= result;
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	617b      	str	r3, [r7, #20]
                num = (num << 16) - 0x8000;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80096ce:	617b      	str	r3, [r7, #20]
                result = (result << 16) + 0x8000;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	041b      	lsls	r3, r3, #16
 80096d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80096d8:	613b      	str	r3, [r7, #16]
 80096da:	e005      	b.n	80096e8 <fix16_sqrt+0x9a>
            } else {
                num <<= 16;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	041b      	lsls	r3, r3, #16
 80096e0:	617b      	str	r3, [r7, #20]
                result <<= 16;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	613b      	str	r3, [r7, #16]
            }

            bit = 1 << 14;
 80096e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80096ec:	60fb      	str	r3, [r7, #12]
    for (n = 0; n < 2; n++) {
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	3301      	adds	r3, #1
 80096f2:	72fb      	strb	r3, [r7, #11]
 80096f4:	7afb      	ldrb	r3, [r7, #11]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d9d7      	bls.n	80096aa <fix16_sqrt+0x5c>
        }
    }

#ifndef FIXMATH_NO_ROUNDING
    // Finally, if next bit would have been 1, round the result upwards.
    if (num > result) {
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d902      	bls.n	8009708 <fix16_sqrt+0xba>
        result++;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3301      	adds	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
    }
#endif

    return (fix16_t)result;
 8009708:	693b      	ldr	r3, [r7, #16]
}
 800970a:	4618      	mov	r0, r3
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <fix16_exp>:

static fix16_t fix16_exp(fix16_t x) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    const fix16_t* exp_values;

    fix16_t res, arg;
    uint16_t i;

    if (x >= F16(10.3972))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a20      	ldr	r2, [pc, #128]	; (80097a4 <fix16_exp+0x8c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	dd02      	ble.n	800972e <fix16_exp+0x16>
        return FIX16_MAXIMUM;
 8009728:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800972c:	e035      	b.n	800979a <fix16_exp+0x82>
    if (x <= F16(-11.7835))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <fix16_exp+0x90>)
 8009732:	4293      	cmp	r3, r2
 8009734:	da01      	bge.n	800973a <fix16_exp+0x22>
        return 0;
 8009736:	2300      	movs	r3, #0
 8009738:	e02f      	b.n	800979a <fix16_exp+0x82>

    if (x < 0) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	da05      	bge.n	800974c <fix16_exp+0x34>
        x = -x;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	425b      	negs	r3, r3
 8009744:	607b      	str	r3, [r7, #4]
        exp_values = exp_neg_values;
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <fix16_exp+0x94>)
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	e001      	b.n	8009750 <fix16_exp+0x38>
    } else {
        exp_values = exp_pos_values;
 800974c:	4b18      	ldr	r3, [pc, #96]	; (80097b0 <fix16_exp+0x98>)
 800974e:	617b      	str	r3, [r7, #20]
    }

    res = FIX16_ONE;
 8009750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009754:	613b      	str	r3, [r7, #16]
    arg = FIX16_ONE;
 8009756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800975a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800975c:	2300      	movs	r3, #0
 800975e:	817b      	strh	r3, [r7, #10]
 8009760:	e017      	b.n	8009792 <fix16_exp+0x7a>
        while (x >= arg) {
            res = fix16_mul(res, exp_values[i]);
 8009762:	897b      	ldrh	r3, [r7, #10]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4413      	add	r3, r2
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f7ff fe90 	bl	8009494 <fix16_mul>
 8009774:	6138      	str	r0, [r7, #16]
            x -= arg;
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	607b      	str	r3, [r7, #4]
        while (x >= arg) {
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	429a      	cmp	r2, r3
 8009784:	daed      	bge.n	8009762 <fix16_exp+0x4a>
        }
        arg >>= 3;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	10db      	asrs	r3, r3, #3
 800978a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < NUM_EXP_VALUES; i++) {
 800978c:	897b      	ldrh	r3, [r7, #10]
 800978e:	3301      	adds	r3, #1
 8009790:	817b      	strh	r3, [r7, #10]
 8009792:	897b      	ldrh	r3, [r7, #10]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d9f2      	bls.n	800977e <fix16_exp+0x66>
    }
    return res;
 8009798:	693b      	ldr	r3, [r7, #16]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	000a65ae 	.word	0x000a65ae
 80097a8:	fff4376e 	.word	0xfff4376e
 80097ac:	0800d074 	.word	0x0800d074
 80097b0:	0800d084 	.word	0x0800d084

080097b4 <VocAlgorithm_init>:
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params);
static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample);

void VocAlgorithm_init(VocAlgorithmParams* params) {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

    params->mVoc_Index_Offset = F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 80097c2:	601a      	str	r2, [r3, #0]
    params->mTau_Mean_Variance_Hours =
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80097ca:	605a      	str	r2, [r3, #4]
        F16(VocAlgorithm_TAU_MEAN_VARIANCE_HOURS);
    params->mGating_Max_Duration_Minutes =
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 80097d2:	609a      	str	r2, [r3, #8]
        F16(VocAlgorithm_GATING_MAX_DURATION_MINUTES);
    params->mSraw_Std_Initial = F16(VocAlgorithm_SRAW_STD_INITIAL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f44f 1248 	mov.w	r2, #3276800	; 0x320000
 80097da:	60da      	str	r2, [r3, #12]
    params->mUptime = F16(0.);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	611a      	str	r2, [r3, #16]
    params->mSraw = F16(0.);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	615a      	str	r2, [r3, #20]
    params->mVoc_Index = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	619a      	str	r2, [r3, #24]
    VocAlgorithm__init_instances(params);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f804 	bl	80097fc <VocAlgorithm__init_instances>
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <VocAlgorithm__init_instances>:

static void VocAlgorithm__init_instances(VocAlgorithmParams* params) {
 80097fc:	b590      	push	{r4, r7, lr}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__init(params);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f8ac 	bl	8009962 <VocAlgorithm__mean_variance_estimator__init>
    VocAlgorithm__mean_variance_estimator__set_parameters(
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68d9      	ldr	r1, [r3, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f8c0 	bl	800999c <VocAlgorithm__mean_variance_estimator__set_parameters>
        params, params->mSraw_Std_Initial, params->mTau_Mean_Variance_Hours,
        params->mGating_Max_Duration_Minutes);
    VocAlgorithm__mox_model__init(params);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fae2 	bl	8009de6 <VocAlgorithm__mox_model__init>
    VocAlgorithm__mox_model__set_parameters(
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f8f8 	bl	8009a18 <VocAlgorithm__mean_variance_estimator__get_std>
 8009828:	4604      	mov	r4, r0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f900 	bl	8009a30 <VocAlgorithm__mean_variance_estimator__get_mean>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	4621      	mov	r1, r4
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fae3 	bl	8009e02 <VocAlgorithm__mox_model__set_parameters>
        params, VocAlgorithm__mean_variance_estimator__get_std(params),
        VocAlgorithm__mean_variance_estimator__get_mean(params));
    VocAlgorithm__sigmoid_scaled__init(params);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fb10 	bl	8009e62 <VocAlgorithm__sigmoid_scaled__init>
    VocAlgorithm__sigmoid_scaled__set_parameters(params,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fb16 	bl	8009e7a <VocAlgorithm__sigmoid_scaled__set_parameters>
                                                 params->mVoc_Index_Offset);
    VocAlgorithm__adaptive_lowpass__init(params);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb80 	bl	8009f54 <VocAlgorithm__adaptive_lowpass__init>
    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fb88 	bl	8009f6a <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bd90      	pop	{r4, r7, pc}

08009862 <VocAlgorithm_process>:
    params->mSraw_Std_Initial = (fix16_from_int(std_initial));
    VocAlgorithm__init_instances(params);
}

void VocAlgorithm_process(VocAlgorithmParams* params, int32_t sraw,
                          int32_t* voc_index) {
 8009862:	b590      	push	{r4, r7, lr}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= F16(VocAlgorithm_INITIAL_BLACKOUT))) {
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f5b3 1f34 	cmp.w	r3, #2949120	; 0x2d0000
 8009876:	dc06      	bgt.n	8009886 <VocAlgorithm_process+0x24>
        params->mUptime =
            (params->mUptime + F16(VocAlgorithm_SAMPLING_INTERVAL));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->mUptime =
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	611a      	str	r2, [r3, #16]
 8009884:	e05f      	b.n	8009946 <VocAlgorithm_process+0xe4>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	dd1f      	ble.n	80098cc <VocAlgorithm_process+0x6a>
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8009892:	4293      	cmp	r3, r2
 8009894:	dc1a      	bgt.n	80098cc <VocAlgorithm_process+0x6a>
            if ((sraw < 20001)) {
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f644 6220 	movw	r2, #20000	; 0x4e20
 800989c:	4293      	cmp	r3, r2
 800989e:	dc03      	bgt.n	80098a8 <VocAlgorithm_process+0x46>
                sraw = 20001;
 80098a0:	f644 6321 	movw	r3, #20001	; 0x4e21
 80098a4:	60bb      	str	r3, [r7, #8]
 80098a6:	e007      	b.n	80098b8 <VocAlgorithm_process+0x56>
            } else if ((sraw > 52767)) {
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f64c 621f 	movw	r2, #52767	; 0xce1f
 80098ae:	4293      	cmp	r3, r2
 80098b0:	dd02      	ble.n	80098b8 <VocAlgorithm_process+0x56>
                sraw = 52767;
 80098b2:	f64c 631f 	movw	r3, #52767	; 0xce1f
 80098b6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = (fix16_from_int((sraw - 20000)));
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80098be:	3b20      	subs	r3, #32
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fdcf 	bl	8009464 <fix16_from_int>
 80098c6:	4602      	mov	r2, r0
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	615a      	str	r2, [r3, #20]
        }
        params->mVoc_Index =
            VocAlgorithm__mox_model__process(params, params->mSraw);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	4619      	mov	r1, r3
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 faa7 	bl	8009e26 <VocAlgorithm__mox_model__process>
 80098d8:	4602      	mov	r2, r0
        params->mVoc_Index =
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__sigmoid_scaled__process(params, params->mVoc_Index);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	4619      	mov	r1, r3
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fad7 	bl	8009e98 <VocAlgorithm__sigmoid_scaled__process>
 80098ea:	4602      	mov	r2, r0
        params->mVoc_Index =
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	619a      	str	r2, [r3, #24]
        params->mVoc_Index =
            VocAlgorithm__adaptive_lowpass__process(params, params->mVoc_Index);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	4619      	mov	r1, r3
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fb4c 	bl	8009f94 <VocAlgorithm__adaptive_lowpass__process>
 80098fc:	4602      	mov	r2, r0
        params->mVoc_Index =
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	619a      	str	r2, [r3, #24]
        if ((params->mVoc_Index < F16(0.5))) {
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800990a:	da03      	bge.n	8009914 <VocAlgorithm_process+0xb2>
            params->mVoc_Index = F16(0.5);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009912:	619a      	str	r2, [r3, #24]
        }
        if ((params->mSraw > F16(0.))) {
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	dd14      	ble.n	8009946 <VocAlgorithm_process+0xe4>
            VocAlgorithm__mean_variance_estimator__process(
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6959      	ldr	r1, [r3, #20]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	461a      	mov	r2, r3
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 f966 	bl	8009bf8 <VocAlgorithm__mean_variance_estimator__process>
                params, params->mSraw, params->mVoc_Index);
            VocAlgorithm__mox_model__set_parameters(
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f873 	bl	8009a18 <VocAlgorithm__mean_variance_estimator__get_std>
 8009932:	4604      	mov	r4, r0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f87b 	bl	8009a30 <VocAlgorithm__mean_variance_estimator__get_mean>
 800993a:	4603      	mov	r3, r0
 800993c:	461a      	mov	r2, r3
 800993e:	4621      	mov	r1, r4
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fa5e 	bl	8009e02 <VocAlgorithm__mox_model__set_parameters>
                params, VocAlgorithm__mean_variance_estimator__get_std(params),
                VocAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *voc_index = (fix16_cast_to_int((params->mVoc_Index + F16(0.5))));
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fd94 	bl	800947c <fix16_cast_to_int>
 8009954:	4602      	mov	r2, r0
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
	return ;
 800995a:	bf00      	nop
}
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	bd90      	pop	{r4, r7, pc}

08009962 <VocAlgorithm__mean_variance_estimator__init>:

static void
VocAlgorithm__mean_variance_estimator__init(VocAlgorithmParams* params) {
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator__set_parameters(params, F16(0.),
 800996a:	2300      	movs	r3, #0
 800996c:	2200      	movs	r2, #0
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f813 	bl	800999c <VocAlgorithm__mean_variance_estimator__set_parameters>
                                                          F16(0.), F16(0.));
    VocAlgorithm__mean_variance_estimator___init_instances(params);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f804 	bl	8009984 <VocAlgorithm__mean_variance_estimator___init_instances>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <VocAlgorithm__mean_variance_estimator___init_instances>:

static void VocAlgorithm__mean_variance_estimator___init_instances(
    VocAlgorithmParams* params) {
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__init(params);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9d9 	bl	8009d44 <VocAlgorithm__mean_variance_estimator___sigmoid__init>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <VocAlgorithm__mean_variance_estimator__set_parameters>:

static void VocAlgorithm__mean_variance_estimator__set_parameters(
    VocAlgorithmParams* params, fix16_t std_initial,
    fix16_t tau_mean_variance_hours, fix16_t gating_max_duration_minutes) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes =
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	61da      	str	r2, [r3, #28]
        gating_max_duration_minutes;
    params->m_Mean_Variance_Estimator___Initialized = false;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2020 	strb.w	r2, [r3, #32]
    params->m_Mean_Variance_Estimator___Mean = F16(0.);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24
    params->m_Mean_Variance_Estimator___Sraw_Offset = F16(0.);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	629a      	str	r2, [r3, #40]	; 0x28
    params->m_Mean_Variance_Estimator___Std = std_initial;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c
    params->m_Mean_Variance_Estimator___Gamma =
        (fix16_div(F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3312      	adds	r3, #18
 80099ce:	4619      	mov	r1, r3
 80099d0:	f240 408d 	movw	r0, #1165	; 0x48d
 80099d4:	f7ff fdc3 	bl	800955e <fix16_div>
 80099d8:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator___Gamma =
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	631a      	str	r2, [r3, #48]	; 0x30
                        (VocAlgorithm_SAMPLING_INTERVAL / 3600.))),
                   (tau_mean_variance_hours +
                    F16((VocAlgorithm_SAMPLING_INTERVAL / 3600.)))));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4a0c      	ldr	r2, [pc, #48]	; (8009a14 <VocAlgorithm__mean_variance_estimator__set_parameters+0x78>)
 80099e2:	635a      	str	r2, [r3, #52]	; 0x34
        F16(((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
              VocAlgorithm_SAMPLING_INTERVAL) /
             (VocAlgorithm_TAU_INITIAL_MEAN + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance = F16(
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f240 628d 	movw	r2, #1677	; 0x68d
 80099ea:	639a      	str	r2, [r3, #56]	; 0x38
        ((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          VocAlgorithm_SAMPLING_INTERVAL) /
         (VocAlgorithm_TAU_INITIAL_VARIANCE + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Mean_Variance_Estimator__Gamma_Mean = F16(0.);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	63da      	str	r2, [r3, #60]	; 0x3c
    params->m_Mean_Variance_Estimator__Gamma_Variance = F16(0.);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Uptime_Gamma = F16(0.);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	645a      	str	r2, [r3, #68]	; 0x44
    params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	649a      	str	r2, [r3, #72]	; 0x48
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009a0a:	bf00      	nop
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	00030c31 	.word	0x00030c31

08009a18 <VocAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static fix16_t
VocAlgorithm__mean_variance_estimator__get_std(VocAlgorithmParams* params) {
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <VocAlgorithm__mean_variance_estimator__get_mean>:

static fix16_t
VocAlgorithm__mean_variance_estimator__get_mean(VocAlgorithmParams* params) {
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    return (params->m_Mean_Variance_Estimator___Mean +
 8009a40:	4413      	add	r3, r2
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
	...

08009a50 <VocAlgorithm__mean_variance_estimator___calculate_gamma>:

static void VocAlgorithm__mean_variance_estimator___calculate_gamma(
    VocAlgorithmParams* params, fix16_t voc_index_from_prior) {
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b08d      	sub	sp, #52	; 0x34
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
    fix16_t sigmoid_gamma_variance;
    fix16_t gamma_variance;
    fix16_t gating_threshold_variance;
    fix16_t sigmoid_gating_variance;

    uptime_limit = F16((VocAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8009a5a:	4b63      	ldr	r3, [pc, #396]	; (8009be8 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x198>)
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        VocAlgorithm_SAMPLING_INTERVAL));
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	dd05      	ble.n	8009a74 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x24>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	645a      	str	r2, [r3, #68]	; 0x44
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	dd05      	ble.n	8009a8a <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x3a>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	649a      	str	r2, [r3, #72]	; 0x48
             F16(VocAlgorithm_SAMPLING_INTERVAL));
    }
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009a8a:	f240 238f 	movw	r3, #655	; 0x28f
 8009a8e:	4a57      	ldr	r2, [pc, #348]	; (8009bec <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x19c>)
 8009a90:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f963 	bl	8009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_MEAN),
        F16(VocAlgorithm_INIT_TRANSITION_MEAN));
    sigmoid_gamma_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f973 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009aa6:	62b8      	str	r0, [r7, #40]	; 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean =
        (params->m_Mean_Variance_Estimator___Gamma +
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                     params->m_Mean_Variance_Estimator___Gamma),
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff fceb 	bl	8009494 <fix16_mul>
 8009abe:	4603      	mov	r3, r0
    gamma_mean =
 8009ac0:	4423      	add	r3, r4
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
                    sigmoid_gamma_mean)));
    gating_threshold_mean =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f95e 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 8009ad8:	f7ff fcdc 	bl	8009494 <fix16_mul>
 8009adc:	4603      	mov	r3, r0
    gating_threshold_mean =
 8009ade:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 8009ae2:	623b      	str	r3, [r7, #32]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009ae4:	f241 730a 	movw	r3, #5898	; 0x170a
 8009ae8:	6a3a      	ldr	r2, [r7, #32]
 8009aea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f936 	bl	8009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_mean,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_mean =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f948 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009afc:	61f8      	str	r0, [r7, #28]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (fix16_mul(sigmoid_gating_mean, gamma_mean));
 8009afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b00:	69f8      	ldr	r0, [r7, #28]
 8009b02:	f7ff fcc7 	bl	8009494 <fix16_mul>
 8009b06:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009b0c:	f240 238f 	movw	r3, #655	; 0x28f
 8009b10:	4a37      	ldr	r2, [pc, #220]	; (8009bf0 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a0>)
 8009b12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f922 	bl	8009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), F16(VocAlgorithm_INIT_DURATION_VARIANCE),
        F16(VocAlgorithm_INIT_TRANSITION_VARIANCE));
    sigmoid_gamma_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f932 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b28:	61b8      	str	r0, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma +
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
         (fix16_mul(
             (params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
              params->m_Mean_Variance_Estimator___Gamma),
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
         (fix16_mul(
 8009b36:	1ad0      	subs	r0, r2, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	4619      	mov	r1, r3
 8009b40:	f7ff fca8 	bl	8009494 <fix16_mul>
 8009b44:	4603      	mov	r3, r0
    gamma_variance =
 8009b46:	4423      	add	r3, r4
 8009b48:	617b      	str	r3, [r7, #20]
             (sigmoid_gamma_variance - sigmoid_gamma_mean))));
    gating_threshold_variance =
        (F16(VocAlgorithm_GATING_THRESHOLD) +
         (fix16_mul(
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f91b 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4619      	mov	r1, r3
 8009b5a:	f44f 002a 	mov.w	r0, #11141120	; 0xaa0000
 8009b5e:	f7ff fc99 	bl	8009494 <fix16_mul>
 8009b62:	4603      	mov	r3, r0
    gating_threshold_variance =
 8009b64:	f103 73aa 	add.w	r3, r3, #22282240	; 0x1540000
 8009b68:	613b      	str	r3, [r7, #16]
             F16((VocAlgorithm_GATING_THRESHOLD_INITIAL -
                  VocAlgorithm_GATING_THRESHOLD)),
             VocAlgorithm__mean_variance_estimator___sigmoid__process(
                 params, params->m_Mean_Variance_Estimator___Uptime_Gating))));
    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009b6a:	f241 730a 	movw	r3, #5898	; 0x170a
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8f3 	bl	8009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(1.), gating_threshold_variance,
        F16(VocAlgorithm_GATING_THRESHOLD_TRANSITION));
    sigmoid_gating_variance =
        VocAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f905 	bl	8009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b82:	60f8      	str	r0, [r7, #12]
            params, voc_index_from_prior);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (fix16_mul(sigmoid_gating_variance, gamma_variance));
 8009b84:	6979      	ldr	r1, [r7, #20]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f7ff fc84 	bl	8009494 <fix16_mul>
 8009b8c:	4602      	mov	r2, r0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	641a      	str	r2, [r3, #64]	; 0x40
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
                    ((fix16_mul((F16(1.) - sigmoid_gating_mean),
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8009b9c:	4915      	ldr	r1, [pc, #84]	; (8009bf4 <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x1a4>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fc78 	bl	8009494 <fix16_mul>
 8009ba4:	4603      	mov	r3, r0
         (fix16_mul(F16((VocAlgorithm_SAMPLING_INTERVAL / 60.)),
 8009ba6:	f5a3 4399 	sub.w	r3, r3, #19584	; 0x4c80
 8009baa:	3b4d      	subs	r3, #77	; 0x4d
 8009bac:	4619      	mov	r1, r3
 8009bae:	f240 4044 	movw	r0, #1092	; 0x444
 8009bb2:	f7ff fc6f 	bl	8009494 <fix16_mul>
 8009bb6:	4603      	mov	r3, r0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009bb8:	18e2      	adds	r2, r4, r3
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	64da      	str	r2, [r3, #76]	; 0x4c
                                F16((1. + VocAlgorithm_GATING_MAX_RATIO)))) -
                     F16(VocAlgorithm_GATING_MAX_RATIO)))));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes <
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	da02      	bge.n	8009bcc <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x17c>
         F16(0.))) {
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = F16(0.);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
         params->m_Mean_Variance_Estimator__Gating_Max_Duration_Minutes)) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	69db      	ldr	r3, [r3, #28]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	dd02      	ble.n	8009bde <VocAlgorithm__mean_variance_estimator___calculate_gamma+0x18e>
        params->m_Mean_Variance_Estimator___Uptime_Gating = F16(0.);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 8009bde:	bf00      	nop
 8009be0:	3734      	adds	r7, #52	; 0x34
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd90      	pop	{r4, r7, pc}
 8009be6:	bf00      	nop
 8009be8:	7ffe0000 	.word	0x7ffe0000
 8009bec:	0a8c0000 	.word	0x0a8c0000
 8009bf0:	14640000 	.word	0x14640000
 8009bf4:	00014ccd 	.word	0x00014ccd

08009bf8 <VocAlgorithm__mean_variance_estimator__process>:

static void VocAlgorithm__mean_variance_estimator__process(
    VocAlgorithmParams* params, fix16_t sraw, fix16_t voc_index_from_prior) {
 8009bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfa:	b089      	sub	sp, #36	; 0x24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]

    fix16_t delta_sgp;
    fix16_t c;
    fix16_t additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c0a:	f083 0301 	eor.w	r3, r3, #1
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00a      	beq.n	8009c2a <VocAlgorithm__mean_variance_estimator__process+0x32>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2020 	strb.w	r2, [r3, #32]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	629a      	str	r2, [r3, #40]	; 0x28
        params->m_Mean_Variance_Estimator___Mean = F16(0.);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	625a      	str	r2, [r3, #36]	; 0x24
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
                        delta_sgp)));
    }
}
 8009c28:	e088      	b.n	8009d3c <VocAlgorithm__mean_variance_estimator__process+0x144>
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8009c32:	da04      	bge.n	8009c3e <VocAlgorithm__mean_variance_estimator__process+0x46>
             (params->m_Mean_Variance_Estimator___Mean <= F16(-100.)))) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (((params->m_Mean_Variance_Estimator___Mean >= F16(100.)) ||
 8009c38:	f513 0fc8 	cmn.w	r3, #6553600	; 0x640000
 8009c3c:	dc09      	bgt.n	8009c52 <VocAlgorithm__mean_variance_estimator__process+0x5a>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                 params->m_Mean_Variance_Estimator___Mean);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009c46:	441a      	add	r2, r3
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	629a      	str	r2, [r3, #40]	; 0x28
            params->m_Mean_Variance_Estimator___Mean = F16(0.);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	625a      	str	r2, [r3, #36]	; 0x24
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	60bb      	str	r3, [r7, #8]
        VocAlgorithm__mean_variance_estimator___calculate_gamma(
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff fef6 	bl	8009a50 <VocAlgorithm__mean_variance_estimator___calculate_gamma>
            (sraw - params->m_Mean_Variance_Estimator___Mean),
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        delta_sgp = (fix16_div(
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff fc74 	bl	800955e <fix16_div>
 8009c76:	6178      	str	r0, [r7, #20]
        if ((delta_sgp < F16(0.))) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	da05      	bge.n	8009c8a <VocAlgorithm__mean_variance_estimator__process+0x92>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	e004      	b.n	8009c94 <VocAlgorithm__mean_variance_estimator__process+0x9c>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	4413      	add	r3, r2
 8009c92:	61fb      	str	r3, [r7, #28]
        additional_scaling = F16(1.);
 8009c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c98:	61bb      	str	r3, [r7, #24]
        if ((c > F16(1440.))) {
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f1b3 6fb4 	cmp.w	r3, #94371840	; 0x5a00000
 8009ca0:	dd02      	ble.n	8009ca8 <VocAlgorithm__mean_variance_estimator__process+0xb0>
            additional_scaling = F16(4.);
 8009ca2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ca6:	61bb      	str	r3, [r7, #24]
                 params->m_Mean_Variance_Estimator__Gamma_Variance)))),
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 8009cac:	f5c3 0380 	rsb	r3, r3, #4194304	; 0x400000
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	69b8      	ldr	r0, [r7, #24]
 8009cb4:	f7ff fbee 	bl	8009494 <fix16_mul>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fcc7 	bl	800964e <fix16_sqrt>
 8009cc0:	4606      	mov	r6, r0
                (fix16_mul(
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8009cca:	69b9      	ldr	r1, [r7, #24]
 8009ccc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8009cd0:	f7ff fbe0 	bl	8009494 <fix16_mul>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7ff fc40 	bl	800955e <fix16_div>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff fbd6 	bl	8009494 <fix16_mul>
 8009ce8:	4604      	mov	r4, r0
                (fix16_mul(
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	6979      	ldr	r1, [r7, #20]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fbcf 	bl	8009494 <fix16_mul>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	69b9      	ldr	r1, [r7, #24]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff fc2f 	bl	800955e <fix16_div>
 8009d00:	4603      	mov	r3, r0
 8009d02:	6979      	ldr	r1, [r7, #20]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff fbc5 	bl	8009494 <fix16_mul>
 8009d0a:	4603      	mov	r3, r0
        params->m_Mean_Variance_Estimator___Std = (fix16_mul(
 8009d0c:	4423      	add	r3, r4
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fc9d 	bl	800964e <fix16_sqrt>
 8009d14:	4603      	mov	r3, r0
 8009d16:	4619      	mov	r1, r3
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff fbbb 	bl	8009494 <fix16_mul>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	62da      	str	r2, [r3, #44]	; 0x2c
            (params->m_Mean_Variance_Estimator___Mean +
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
             (fix16_mul(params->m_Mean_Variance_Estimator__Gamma_Mean,
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff fbb0 	bl	8009494 <fix16_mul>
 8009d34:	4603      	mov	r3, r0
            (params->m_Mean_Variance_Estimator___Mean +
 8009d36:	18e2      	adds	r2, r4, r3
        params->m_Mean_Variance_Estimator___Mean =
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d3c:	bf00      	nop
 8009d3e:	3724      	adds	r7, #36	; 0x24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d44 <VocAlgorithm__mean_variance_estimator___sigmoid__init>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__init(
    VocAlgorithmParams* params) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2100      	movs	r1, #0
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f804 	bl	8009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, F16(0.), F16(0.), F16(0.));
}
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void VocAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    VocAlgorithmParams* params, fix16_t L, fix16_t X0, fix16_t K) {
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]

    params->m_Mean_Variance_Estimator___Sigmoid__L = L;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	651a      	str	r2, [r3, #80]	; 0x50
    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009d80:	bf00      	nop
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <VocAlgorithm__mean_variance_estimator___sigmoid__process>:

static fix16_t VocAlgorithm__mean_variance_estimator___sigmoid__process(
    VocAlgorithmParams* params, fix16_t sample) {
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]

    fix16_t x;

    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d58      	ldr	r0, [r3, #84]	; 0x54
                   (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0)));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    x = (fix16_mul(params->m_Mean_Variance_Estimator___Sigmoid__K,
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	f7ff fb76 	bl	8009494 <fix16_mul>
 8009da8:	60f8      	str	r0, [r7, #12]
    if ((x < F16(-50.))) {
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 8009db0:	da02      	bge.n	8009db8 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x2c>
        return params->m_Mean_Variance_Estimator___Sigmoid__L;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db6:	e012      	b.n	8009dde <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else if ((x > F16(50.))) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8009dbe:	dd01      	ble.n	8009dc4 <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x38>
        return F16(0.);
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e00c      	b.n	8009dde <VocAlgorithm__mean_variance_estimator___sigmoid__process+0x52>
    } else {
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
                          (F16(1.) + fix16_exp(x))));
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7ff fca5 	bl	8009718 <fix16_exp>
 8009dce:	4603      	mov	r3, r0
        return (fix16_div(params->m_Mean_Variance_Estimator___Sigmoid__L,
 8009dd0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff fbc1 	bl	800955e <fix16_div>
 8009ddc:	4603      	mov	r3, r0
    }
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd90      	pop	{r4, r7, pc}

08009de6 <VocAlgorithm__mox_model__init>:

static void VocAlgorithm__mox_model__init(VocAlgorithmParams* params) {
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]

    VocAlgorithm__mox_model__set_parameters(params, F16(1.), F16(0.));
 8009dee:	2200      	movs	r2, #0
 8009df0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f804 	bl	8009e02 <VocAlgorithm__mox_model__set_parameters>
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <VocAlgorithm__mox_model__set_parameters>:

static void VocAlgorithm__mox_model__set_parameters(VocAlgorithmParams* params,
                                                    fix16_t SRAW_STD,
                                                    fix16_t SRAW_MEAN) {
 8009e02:	b480      	push	{r7}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	65da      	str	r2, [r3, #92]	; 0x5c
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <VocAlgorithm__mox_model__process>:

static fix16_t VocAlgorithm__mox_model__process(VocAlgorithmParams* params,
                                                fix16_t sraw) {
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b082      	sub	sp, #8
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]

    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	1ad2      	subs	r2, r2, r3
                                 (-(params->m_Mox_Model__Sraw_Std +
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    return (fix16_mul((fix16_div((sraw - params->m_Mox_Model__Sraw_Mean),
 8009e3c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009e40:	f503 1310 	add.w	r3, r3, #2359296	; 0x240000
 8009e44:	4619      	mov	r1, r3
 8009e46:	4610      	mov	r0, r2
 8009e48:	f7ff fb89 	bl	800955e <fix16_div>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f44f 0166 	mov.w	r1, #15073280	; 0xe60000
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7ff fb1e 	bl	8009494 <fix16_mul>
 8009e58:	4603      	mov	r3, r0
                                    F16(VocAlgorithm_SRAW_STD_BONUS))))),
                      F16(VocAlgorithm_VOC_INDEX_GAIN)));
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <VocAlgorithm__sigmoid_scaled__init>:

static void VocAlgorithm__sigmoid_scaled__init(VocAlgorithmParams* params) {
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]

    VocAlgorithm__sigmoid_scaled__set_parameters(params, F16(0.));
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f804 	bl	8009e7a <VocAlgorithm__sigmoid_scaled__set_parameters>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <VocAlgorithm__sigmoid_scaled__set_parameters>:

static void
VocAlgorithm__sigmoid_scaled__set_parameters(VocAlgorithmParams* params,
                                             fix16_t offset) {
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]

    params->m_Sigmoid_Scaled__Offset = offset;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <VocAlgorithm__sigmoid_scaled__process>:

static fix16_t VocAlgorithm__sigmoid_scaled__process(VocAlgorithmParams* params,
                                                     fix16_t sample) {
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]

    fix16_t x;
    fix16_t shift;

    x = (fix16_mul(F16(VocAlgorithm_SIGMOID_K),
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	f5a3 0355 	sub.w	r3, r3, #13959168	; 0xd50000
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4829      	ldr	r0, [pc, #164]	; (8009f50 <VocAlgorithm__sigmoid_scaled__process+0xb8>)
 8009eac:	f7ff faf2 	bl	8009494 <fix16_mul>
 8009eb0:	60f8      	str	r0, [r7, #12]
                   (sample - F16(VocAlgorithm_SIGMOID_X0))));
    if ((x < F16(-50.))) {
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f513 1f48 	cmn.w	r3, #3276800	; 0x320000
 8009eb8:	da02      	bge.n	8009ec0 <VocAlgorithm__sigmoid_scaled__process+0x28>
        return F16(VocAlgorithm_SIGMOID_L);
 8009eba:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 8009ebe:	e042      	b.n	8009f46 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else if ((x > F16(50.))) {
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8009ec6:	dd01      	ble.n	8009ecc <VocAlgorithm__sigmoid_scaled__process+0x34>
        return F16(0.);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e03c      	b.n	8009f46 <VocAlgorithm__sigmoid_scaled__process+0xae>
    } else {
        if ((sample >= F16(0.))) {
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	db20      	blt.n	8009f14 <VocAlgorithm__sigmoid_scaled__process+0x7c>
            shift = (fix16_div(
                (F16(VocAlgorithm_SIGMOID_L) -
                 (fix16_mul(F16(5.), params->m_Sigmoid_Scaled__Offset))),
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 8009edc:	f7ff fada 	bl	8009494 <fix16_mul>
 8009ee0:	4603      	mov	r3, r0
            shift = (fix16_div(
 8009ee2:	f1c3 73fa 	rsb	r3, r3, #32768000	; 0x1f40000
 8009ee6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fb37 	bl	800955e <fix16_div>
 8009ef0:	60b8      	str	r0, [r7, #8]
                F16(4.)));
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	f103 74fa 	add.w	r4, r3, #32768000	; 0x1f40000
                               (F16(1.) + fix16_exp(x)))) -
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7ff fc0d 	bl	8009718 <fix16_exp>
 8009efe:	4603      	mov	r3, r0
            return ((fix16_div((F16(VocAlgorithm_SIGMOID_L) + shift),
 8009f00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009f04:	4619      	mov	r1, r3
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff fb29 	bl	800955e <fix16_div>
 8009f0c:	4602      	mov	r2, r0
                               (F16(1.) + fix16_exp(x)))) -
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	e018      	b.n	8009f46 <VocAlgorithm__sigmoid_scaled__process+0xae>
                    shift);
        } else {
            return (fix16_mul(
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f18:	f44f 01c8 	mov.w	r1, #6553600	; 0x640000
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff fb1e 	bl	800955e <fix16_div>
 8009f22:	4604      	mov	r4, r0
                (fix16_div(params->m_Sigmoid_Scaled__Offset,
                           F16(VocAlgorithm_VOC_INDEX_OFFSET_DEFAULT))),
                (fix16_div(F16(VocAlgorithm_SIGMOID_L),
                           (F16(1.) + fix16_exp(x))))));
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7ff fbf7 	bl	8009718 <fix16_exp>
 8009f2a:	4603      	mov	r3, r0
            return (fix16_mul(
 8009f2c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009f30:	4619      	mov	r1, r3
 8009f32:	f04f 70fa 	mov.w	r0, #32768000	; 0x1f40000
 8009f36:	f7ff fb12 	bl	800955e <fix16_div>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff faa8 	bl	8009494 <fix16_mul>
 8009f44:	4603      	mov	r3, r0
        }
    }
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd90      	pop	{r4, r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	fffffe56 	.word	0xfffffe56

08009f54 <VocAlgorithm__adaptive_lowpass__init>:

static void VocAlgorithm__adaptive_lowpass__init(VocAlgorithmParams* params) {
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

    VocAlgorithm__adaptive_lowpass__set_parameters(params);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f804 	bl	8009f6a <VocAlgorithm__adaptive_lowpass__set_parameters>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <VocAlgorithm__adaptive_lowpass__set_parameters>:

static void
VocAlgorithm__adaptive_lowpass__set_parameters(VocAlgorithmParams* params) {
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f640 4231 	movw	r2, #3121	; 0xc31
 8009f78:	669a      	str	r2, [r3, #104]	; 0x68
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_FAST + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass__A2 =
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2283      	movs	r2, #131	; 0x83
 8009f7e:	66da      	str	r2, [r3, #108]	; 0x6c
        F16((VocAlgorithm_SAMPLING_INTERVAL /
             (VocAlgorithm_LP_TAU_SLOW + VocAlgorithm_SAMPLING_INTERVAL)));
    params->m_Adaptive_Lowpass___Initialized = false;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <VocAlgorithm__adaptive_lowpass__process>:

static fix16_t
VocAlgorithm__adaptive_lowpass__process(VocAlgorithmParams* params,
                                        fix16_t sample) {
 8009f94:	b590      	push	{r4, r7, lr}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
    fix16_t abs_delta;
    fix16_t F1;
    fix16_t tau_a;
    fix16_t a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009fa4:	f083 0301 	eor.w	r3, r3, #1
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <VocAlgorithm__adaptive_lowpass__process+0x34>
        params->m_Adaptive_Lowpass___X1 = sample;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	675a      	str	r2, [r3, #116]	; 0x74
        params->m_Adaptive_Lowpass___X2 = sample;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	679a      	str	r2, [r3, #120]	; 0x78
        params->m_Adaptive_Lowpass___X3 = sample;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	67da      	str	r2, [r3, #124]	; 0x7c
        params->m_Adaptive_Lowpass___Initialized = true;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    }
    params->m_Adaptive_Lowpass___X1 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A1),
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fcc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7ff fa5c 	bl	8009494 <fix16_mul>
 8009fdc:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X1)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A1, sample)));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff fa55 	bl	8009494 <fix16_mul>
 8009fea:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X1)) +
 8009fec:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X1 =
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	675a      	str	r2, [r3, #116]	; 0x74
    params->m_Adaptive_Lowpass___X2 =
        ((fix16_mul((F16(1.) - params->m_Adaptive_Lowpass__A2),
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff6:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7ff fa47 	bl	8009494 <fix16_mul>
 800a006:	4604      	mov	r4, r0
                    params->m_Adaptive_Lowpass___X2)) +
         (fix16_mul(params->m_Adaptive_Lowpass__A2, sample)));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fa40 	bl	8009494 <fix16_mul>
 800a014:	4603      	mov	r3, r0
                    params->m_Adaptive_Lowpass___X2)) +
 800a016:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X2 =
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	679a      	str	r2, [r3, #120]	; 0x78
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    abs_delta =
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	617b      	str	r3, [r7, #20]
    if ((abs_delta < F16(0.))) {
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	da02      	bge.n	800a034 <VocAlgorithm__adaptive_lowpass__process+0xa0>
        abs_delta = (-abs_delta);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	425b      	negs	r3, r3
 800a032:	617b      	str	r3, [r7, #20]
    }
    F1 = fix16_exp((fix16_mul(F16(VocAlgorithm_LP_ALPHA), abs_delta)));
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	4819      	ldr	r0, [pc, #100]	; (800a09c <VocAlgorithm__adaptive_lowpass__process+0x108>)
 800a038:	f7ff fa2c 	bl	8009494 <fix16_mul>
 800a03c:	4603      	mov	r3, r0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff fb6a 	bl	8009718 <fix16_exp>
 800a044:	6138      	str	r0, [r7, #16]
    tau_a =
        ((fix16_mul(F16((VocAlgorithm_LP_TAU_SLOW - VocAlgorithm_LP_TAU_FAST)),
 800a046:	6939      	ldr	r1, [r7, #16]
 800a048:	f04f 70f0 	mov.w	r0, #31457280	; 0x1e00000
 800a04c:	f7ff fa22 	bl	8009494 <fix16_mul>
 800a050:	4603      	mov	r3, r0
    tau_a =
 800a052:	f503 13a0 	add.w	r3, r3, #1310720	; 0x140000
 800a056:	60fb      	str	r3, [r7, #12]
                    F1)) +
         F16(VocAlgorithm_LP_TAU_FAST));
    a3 = (fix16_div(F16(VocAlgorithm_SAMPLING_INTERVAL),
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a05e:	4619      	mov	r1, r3
 800a060:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a064:	f7ff fa7b 	bl	800955e <fix16_div>
 800a068:	60b8      	str	r0, [r7, #8]
                    (F16(VocAlgorithm_SAMPLING_INTERVAL) + tau_a)));
    params->m_Adaptive_Lowpass___X3 =
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7ff fa0c 	bl	8009494 <fix16_mul>
 800a07c:	4604      	mov	r4, r0
         (fix16_mul(a3, sample)));
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	68b8      	ldr	r0, [r7, #8]
 800a082:	f7ff fa07 	bl	8009494 <fix16_mul>
 800a086:	4603      	mov	r3, r0
        ((fix16_mul((F16(1.) - a3), params->m_Adaptive_Lowpass___X3)) +
 800a088:	18e2      	adds	r2, r4, r3
    params->m_Adaptive_Lowpass___X3 =
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	67da      	str	r2, [r3, #124]	; 0x7c
    return params->m_Adaptive_Lowpass___X3;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
}
 800a092:	4618      	mov	r0, r3
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	bd90      	pop	{r4, r7, pc}
 800a09a:	bf00      	nop
 800a09c:	ffffcccd 	.word	0xffffcccd

0800a0a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a0b0:	f002 fa68 	bl	800c584 <USBD_static_malloc>
 800a0b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d105      	bne.n	800a0c8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e066      	b.n	800a196 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7c1b      	ldrb	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d119      	bne.n	800a10c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0dc:	2202      	movs	r2, #2
 800a0de:	2181      	movs	r1, #129	; 0x81
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f002 f92c 	bl	800c33e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 f922 	bl	800c33e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2210      	movs	r2, #16
 800a106:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a10a:	e016      	b.n	800a13a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	2202      	movs	r2, #2
 800a110:	2181      	movs	r1, #129	; 0x81
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f002 f913 	bl	800c33e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a11e:	2340      	movs	r3, #64	; 0x40
 800a120:	2202      	movs	r2, #2
 800a122:	2101      	movs	r1, #1
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f002 f90a 	bl	800c33e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2210      	movs	r2, #16
 800a136:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a13a:	2308      	movs	r3, #8
 800a13c:	2203      	movs	r2, #3
 800a13e:	2182      	movs	r1, #130	; 0x82
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 f8fc 	bl	800c33e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	7c1b      	ldrb	r3, [r3, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a17a:	2101      	movs	r1, #1
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f002 f9cd 	bl	800c51c <USBD_LL_PrepareReceive>
 800a182:	e007      	b.n	800a194 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a18a:	2340      	movs	r3, #64	; 0x40
 800a18c:	2101      	movs	r1, #1
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f002 f9c4 	bl	800c51c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1aa:	2181      	movs	r1, #129	; 0x81
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 f8ec 	bl	800c38a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f002 f8e5 	bl	800c38a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a1c8:	2182      	movs	r1, #130	; 0x82
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f002 f8dd 	bl	800c38a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 f9d0 	bl	800c5a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a224:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0af      	b.n	800a39c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a244:	2b00      	cmp	r3, #0
 800a246:	d03f      	beq.n	800a2c8 <USBD_CDC_Setup+0xb4>
 800a248:	2b20      	cmp	r3, #32
 800a24a:	f040 809f 	bne.w	800a38c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d02e      	beq.n	800a2b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da16      	bge.n	800a28e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a26c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	88d2      	ldrh	r2, [r2, #6]
 800a272:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	2b07      	cmp	r3, #7
 800a27a:	bf28      	it	cs
 800a27c:	2307      	movcs	r3, #7
 800a27e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	89fa      	ldrh	r2, [r7, #14]
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fb19 	bl	800b8be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a28c:	e085      	b.n	800a39a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	785a      	ldrb	r2, [r3, #1]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	88db      	ldrh	r3, [r3, #6]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a2a4:	6939      	ldr	r1, [r7, #16]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	88db      	ldrh	r3, [r3, #6]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f001 fb32 	bl	800b916 <USBD_CtlPrepareRx>
      break;
 800a2b2:	e072      	b.n	800a39a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	7850      	ldrb	r0, [r2, #1]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	4798      	blx	r3
      break;
 800a2c6:	e068      	b.n	800a39a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	785b      	ldrb	r3, [r3, #1]
 800a2cc:	2b0b      	cmp	r3, #11
 800a2ce:	d852      	bhi.n	800a376 <USBD_CDC_Setup+0x162>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <USBD_CDC_Setup+0xc4>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a309 	.word	0x0800a309
 800a2dc:	0800a385 	.word	0x0800a385
 800a2e0:	0800a377 	.word	0x0800a377
 800a2e4:	0800a377 	.word	0x0800a377
 800a2e8:	0800a377 	.word	0x0800a377
 800a2ec:	0800a377 	.word	0x0800a377
 800a2f0:	0800a377 	.word	0x0800a377
 800a2f4:	0800a377 	.word	0x0800a377
 800a2f8:	0800a377 	.word	0x0800a377
 800a2fc:	0800a377 	.word	0x0800a377
 800a300:	0800a333 	.word	0x0800a333
 800a304:	0800a35d 	.word	0x0800a35d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b03      	cmp	r3, #3
 800a312:	d107      	bne.n	800a324 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a314:	f107 030a 	add.w	r3, r7, #10
 800a318:	2202      	movs	r2, #2
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 face 	bl	800b8be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a322:	e032      	b.n	800a38a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 fa58 	bl	800b7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800a32c:	2303      	movs	r3, #3
 800a32e:	75fb      	strb	r3, [r7, #23]
          break;
 800a330:	e02b      	b.n	800a38a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d107      	bne.n	800a34e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a33e:	f107 030d 	add.w	r3, r7, #13
 800a342:	2201      	movs	r2, #1
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fab9 	bl	800b8be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a34c:	e01d      	b.n	800a38a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f001 fa43 	bl	800b7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800a356:	2303      	movs	r3, #3
 800a358:	75fb      	strb	r3, [r7, #23]
          break;
 800a35a:	e016      	b.n	800a38a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b03      	cmp	r3, #3
 800a366:	d00f      	beq.n	800a388 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 fa36 	bl	800b7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800a370:	2303      	movs	r3, #3
 800a372:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a374:	e008      	b.n	800a388 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fa2f 	bl	800b7dc <USBD_CtlError>
          ret = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	75fb      	strb	r3, [r7, #23]
          break;
 800a382:	e002      	b.n	800a38a <USBD_CDC_Setup+0x176>
          break;
 800a384:	bf00      	nop
 800a386:	e008      	b.n	800a39a <USBD_CDC_Setup+0x186>
          break;
 800a388:	bf00      	nop
      }
      break;
 800a38a:	e006      	b.n	800a39a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 fa24 	bl	800b7dc <USBD_CtlError>
      ret = USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	75fb      	strb	r3, [r7, #23]
      break;
 800a398:	bf00      	nop
  }

  return (uint8_t)ret;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e04f      	b.n	800a466 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a3ce:	78fa      	ldrb	r2, [r7, #3]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	3318      	adds	r3, #24
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d029      	beq.n	800a438 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3e4:	78fa      	ldrb	r2, [r7, #3]
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	3318      	adds	r3, #24
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	78f9      	ldrb	r1, [r7, #3]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	1a5b      	subs	r3, r3, r1
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4403      	add	r3, r0
 800a404:	3344      	adds	r3, #68	; 0x44
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	fbb2 f1f3 	udiv	r1, r2, r3
 800a40c:	fb03 f301 	mul.w	r3, r3, r1
 800a410:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	6879      	ldr	r1, [r7, #4]
 800a41a:	4613      	mov	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	440b      	add	r3, r1
 800a424:	3318      	adds	r3, #24
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a42a:	78f9      	ldrb	r1, [r7, #3]
 800a42c:	2300      	movs	r3, #0
 800a42e:	2200      	movs	r2, #0
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f002 f852 	bl	800c4da <USBD_LL_Transmit>
 800a436:	e015      	b.n	800a464 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a460:	78fa      	ldrb	r2, [r7, #3]
 800a462:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a480:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a48c:	2303      	movs	r3, #3
 800a48e:	e015      	b.n	800a4bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a490:	78fb      	ldrb	r3, [r7, #3]
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f002 f862 	bl	800c55e <USBD_LL_GetRxDataSize>
 800a49a:	4602      	mov	r2, r0
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e01b      	b.n	800a516 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d015      	beq.n	800a514 <USBD_CDC_EP0_RxReady+0x50>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4ee:	2bff      	cmp	r3, #255	; 0xff
 800a4f0:	d010      	beq.n	800a514 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a500:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a508:	b292      	uxth	r2, r2
 800a50a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	22ff      	movs	r2, #255	; 0xff
 800a510:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2243      	movs	r2, #67	; 0x43
 800a52c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a52e:	4b03      	ldr	r3, [pc, #12]	; (800a53c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20000364 	.word	0x20000364

0800a540 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2243      	movs	r2, #67	; 0x43
 800a54c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a54e:	4b03      	ldr	r3, [pc, #12]	; (800a55c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	20000320 	.word	0x20000320

0800a560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2243      	movs	r2, #67	; 0x43
 800a56c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a56e:	4b03      	ldr	r3, [pc, #12]	; (800a57c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200003a8 	.word	0x200003a8

0800a580 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	220a      	movs	r2, #10
 800a58c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a58e:	4b03      	ldr	r3, [pc, #12]	; (800a59c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	200002dc 	.word	0x200002dc

0800a5a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e004      	b.n	800a5be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b087      	sub	sp, #28
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e008      	b.n	800a5fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a606:	b480      	push	{r7}
 800a608:	b085      	sub	sp, #20
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a616:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a61e:	2303      	movs	r3, #3
 800a620:	e004      	b.n	800a62c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a646:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a648:	2301      	movs	r3, #1
 800a64a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	e01a      	b.n	800a690 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a660:	2b00      	cmp	r3, #0
 800a662:	d114      	bne.n	800a68e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2201      	movs	r2, #1
 800a668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a682:	2181      	movs	r1, #129	; 0x81
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 ff28 	bl	800c4da <USBD_LL_Transmit>

    ret = USBD_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e016      	b.n	800a6e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	7c1b      	ldrb	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d109      	bne.n	800a6d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 ff26 	bl	800c51c <USBD_LL_PrepareReceive>
 800a6d0:	e007      	b.n	800a6e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6d8:	2340      	movs	r3, #64	; 0x40
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 ff1d 	bl	800c51c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a700:	2303      	movs	r3, #3
 800a702:	e01f      	b.n	800a744 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	79fa      	ldrb	r2, [r7, #7]
 800a736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f001 fd99 	bl	800c270 <USBD_LL_Init>
 800a73e:	4603      	mov	r3, r0
 800a740:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a742:	7dfb      	ldrb	r3, [r7, #23]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a756:	2300      	movs	r3, #0
 800a758:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a760:	2303      	movs	r3, #3
 800a762:	e016      	b.n	800a792 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a780:	f107 020e 	add.w	r2, r7, #14
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3
 800a788:	4602      	mov	r2, r0
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 fdb0 	bl	800c308 <USBD_LL_Start>
 800a7a8:	4603      	mov	r3, r0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d009      	beq.n	800a7f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	78fa      	ldrb	r2, [r7, #3]
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	4611      	mov	r1, r2
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
  }

  return USBD_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f000 ff90 	bl	800b768 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a864:	f003 031f 	and.w	r3, r3, #31
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d01a      	beq.n	800a8a2 <USBD_LL_SetupStage+0x72>
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d822      	bhi.n	800a8b6 <USBD_LL_SetupStage+0x86>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <USBD_LL_SetupStage+0x4a>
 800a874:	2b01      	cmp	r3, #1
 800a876:	d00a      	beq.n	800a88e <USBD_LL_SetupStage+0x5e>
 800a878:	e01d      	b.n	800a8b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa62 	bl	800ad4c <USBD_StdDevReq>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
      break;
 800a88c:	e020      	b.n	800a8d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fac6 	bl	800ae28 <USBD_StdItfReq>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a0:	e016      	b.n	800a8d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb05 	bl	800aeba <USBD_StdEPReq>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b4:	e00c      	b.n	800a8d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 fd7f 	bl	800c3c8 <USBD_LL_StallEP>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ce:	bf00      	nop
  }

  return ret;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d138      	bne.n	800a960 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d14a      	bne.n	800a996 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d913      	bls.n	800a934 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	689a      	ldr	r2, [r3, #8]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	1ad2      	subs	r2, r2, r3
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	4293      	cmp	r3, r2
 800a924:	bf28      	it	cs
 800a926:	4613      	movcs	r3, r2
 800a928:	461a      	mov	r2, r3
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f001 f80f 	bl	800b950 <USBD_CtlContinueRx>
 800a932:	e030      	b.n	800a996 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d10b      	bne.n	800a958 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f001 f80a 	bl	800b972 <USBD_CtlSendStatus>
 800a95e:	e01a      	b.n	800a996 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d114      	bne.n	800a996 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00e      	beq.n	800a996 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	7afa      	ldrb	r2, [r7, #11]
 800a982:	4611      	mov	r1, r2
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	4798      	blx	r3
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	e000      	b.n	800a998 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d16b      	bne.n	800aa8c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3314      	adds	r3, #20
 800a9b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d156      	bne.n	800aa72 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d914      	bls.n	800a9fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 ff84 	bl	800b8f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f001 fd92 	bl	800c51c <USBD_LL_PrepareReceive>
 800a9f8:	e03b      	b.n	800aa72 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d11c      	bne.n	800aa40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d316      	bcc.n	800aa40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d20f      	bcs.n	800aa40 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa20:	2200      	movs	r2, #0
 800aa22:	2100      	movs	r1, #0
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 ff65 	bl	800b8f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa32:	2300      	movs	r3, #0
 800aa34:	2200      	movs	r2, #0
 800aa36:	2100      	movs	r1, #0
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f001 fd6f 	bl	800c51c <USBD_LL_PrepareReceive>
 800aa3e:	e018      	b.n	800aa72 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d10b      	bne.n	800aa64 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d005      	beq.n	800aa64 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa64:	2180      	movs	r1, #128	; 0x80
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f001 fcae 	bl	800c3c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 ff93 	bl	800b998 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d122      	bne.n	800aac2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f7ff fe98 	bl	800a7b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa8a:	e01a      	b.n	800aac2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d114      	bne.n	800aac2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	695b      	ldr	r3, [r3, #20]
 800aaac:	7afa      	ldrb	r2, [r7, #11]
 800aaae:	4611      	mov	r1, r2
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	4798      	blx	r3
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	e000      	b.n	800aac4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e02f      	b.n	800ab60 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00f      	beq.n	800ab2a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6852      	ldr	r2, [r2, #4]
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	4611      	mov	r1, r2
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab2a:	2340      	movs	r3, #64	; 0x40
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2100      	movs	r1, #0
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 fc04 	bl	800c33e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2240      	movs	r2, #64	; 0x40
 800ab42:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab46:	2340      	movs	r3, #64	; 0x40
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2180      	movs	r1, #128	; 0x80
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 fbf6 	bl	800c33e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2240      	movs	r2, #64	; 0x40
 800ab5c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2204      	movs	r2, #4
 800aba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d106      	bne.n	800abd6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e012      	b.n	800ac20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d10b      	bne.n	800ac1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e014      	b.n	800ac6c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d10d      	bne.n	800ac6a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	78fa      	ldrb	r2, [r7, #3]
 800ac64:	4611      	mov	r1, r2
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e014      	b.n	800acb8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d10d      	bne.n	800acb6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	4611      	mov	r1, r2
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acec:	2b00      	cmp	r3, #0
 800acee:	d009      	beq.n	800ad04 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6852      	ldr	r2, [r2, #4]
 800acfc:	b2d2      	uxtb	r2, r2
 800acfe:	4611      	mov	r1, r2
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
  }

  return USBD_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b087      	sub	sp, #28
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	3301      	adds	r3, #1
 800ad24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad2c:	8a3b      	ldrh	r3, [r7, #16]
 800ad2e:	021b      	lsls	r3, r3, #8
 800ad30:	b21a      	sxth	r2, r3
 800ad32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	b21b      	sxth	r3, r3
 800ad3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad3c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
	...

0800ad4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad62:	2b40      	cmp	r3, #64	; 0x40
 800ad64:	d005      	beq.n	800ad72 <USBD_StdDevReq+0x26>
 800ad66:	2b40      	cmp	r3, #64	; 0x40
 800ad68:	d853      	bhi.n	800ae12 <USBD_StdDevReq+0xc6>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00b      	beq.n	800ad86 <USBD_StdDevReq+0x3a>
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d14f      	bne.n	800ae12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
      break;
 800ad84:	e04a      	b.n	800ae1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	785b      	ldrb	r3, [r3, #1]
 800ad8a:	2b09      	cmp	r3, #9
 800ad8c:	d83b      	bhi.n	800ae06 <USBD_StdDevReq+0xba>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <USBD_StdDevReq+0x48>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ade9 	.word	0x0800ade9
 800ad98:	0800adfd 	.word	0x0800adfd
 800ad9c:	0800ae07 	.word	0x0800ae07
 800ada0:	0800adf3 	.word	0x0800adf3
 800ada4:	0800ae07 	.word	0x0800ae07
 800ada8:	0800adc7 	.word	0x0800adc7
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800ae07 	.word	0x0800ae07
 800adb4:	0800addf 	.word	0x0800addf
 800adb8:	0800add1 	.word	0x0800add1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9de 	bl	800b180 <USBD_GetDescriptor>
          break;
 800adc4:	e024      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fb43 	bl	800b454 <USBD_SetAddress>
          break;
 800adce:	e01f      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fb82 	bl	800b4dc <USBD_SetConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
          break;
 800addc:	e018      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fc21 	bl	800b628 <USBD_GetConfig>
          break;
 800ade6:	e013      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fc52 	bl	800b694 <USBD_GetStatus>
          break;
 800adf0:	e00e      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fc81 	bl	800b6fc <USBD_SetFeature>
          break;
 800adfa:	e009      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fc90 	bl	800b724 <USBD_ClrFeature>
          break;
 800ae04:	e004      	b.n	800ae10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fce7 	bl	800b7dc <USBD_CtlError>
          break;
 800ae0e:	bf00      	nop
      }
      break;
 800ae10:	e004      	b.n	800ae1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fce1 	bl	800b7dc <USBD_CtlError>
      break;
 800ae1a:	bf00      	nop
  }

  return ret;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop

0800ae28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae3e:	2b40      	cmp	r3, #64	; 0x40
 800ae40:	d005      	beq.n	800ae4e <USBD_StdItfReq+0x26>
 800ae42:	2b40      	cmp	r3, #64	; 0x40
 800ae44:	d82f      	bhi.n	800aea6 <USBD_StdItfReq+0x7e>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <USBD_StdItfReq+0x26>
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d12b      	bne.n	800aea6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	3b01      	subs	r3, #1
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d81d      	bhi.n	800ae98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	889b      	ldrh	r3, [r3, #4]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d813      	bhi.n	800ae8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	88db      	ldrh	r3, [r3, #6]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d110      	bne.n	800aea2 <USBD_StdItfReq+0x7a>
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10d      	bne.n	800aea2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fd73 	bl	800b972 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae8c:	e009      	b.n	800aea2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fca3 	bl	800b7dc <USBD_CtlError>
          break;
 800ae96:	e004      	b.n	800aea2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fc9e 	bl	800b7dc <USBD_CtlError>
          break;
 800aea0:	e000      	b.n	800aea4 <USBD_StdItfReq+0x7c>
          break;
 800aea2:	bf00      	nop
      }
      break;
 800aea4:	e004      	b.n	800aeb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fc97 	bl	800b7dc <USBD_CtlError>
      break;
 800aeae:	bf00      	nop
  }

  return ret;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b084      	sub	sp, #16
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	889b      	ldrh	r3, [r3, #4]
 800aecc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aed6:	2b40      	cmp	r3, #64	; 0x40
 800aed8:	d007      	beq.n	800aeea <USBD_StdEPReq+0x30>
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	f200 8145 	bhi.w	800b16a <USBD_StdEPReq+0x2b0>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00c      	beq.n	800aefe <USBD_StdEPReq+0x44>
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	f040 8140 	bne.w	800b16a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	e13a      	b.n	800b174 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d007      	beq.n	800af16 <USBD_StdEPReq+0x5c>
 800af06:	2b03      	cmp	r3, #3
 800af08:	f300 8129 	bgt.w	800b15e <USBD_StdEPReq+0x2a4>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d07f      	beq.n	800b010 <USBD_StdEPReq+0x156>
 800af10:	2b01      	cmp	r3, #1
 800af12:	d03c      	beq.n	800af8e <USBD_StdEPReq+0xd4>
 800af14:	e123      	b.n	800b15e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d002      	beq.n	800af28 <USBD_StdEPReq+0x6e>
 800af22:	2b03      	cmp	r3, #3
 800af24:	d016      	beq.n	800af54 <USBD_StdEPReq+0x9a>
 800af26:	e02c      	b.n	800af82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00d      	beq.n	800af4a <USBD_StdEPReq+0x90>
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b80      	cmp	r3, #128	; 0x80
 800af32:	d00a      	beq.n	800af4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fa45 	bl	800c3c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af3e:	2180      	movs	r1, #128	; 0x80
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f001 fa41 	bl	800c3c8 <USBD_LL_StallEP>
 800af46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af48:	e020      	b.n	800af8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fc45 	bl	800b7dc <USBD_CtlError>
              break;
 800af52:	e01b      	b.n	800af8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	885b      	ldrh	r3, [r3, #2]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10e      	bne.n	800af7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00b      	beq.n	800af7a <USBD_StdEPReq+0xc0>
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	2b80      	cmp	r3, #128	; 0x80
 800af66:	d008      	beq.n	800af7a <USBD_StdEPReq+0xc0>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	88db      	ldrh	r3, [r3, #6]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d104      	bne.n	800af7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fa27 	bl	800c3c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fcf9 	bl	800b972 <USBD_CtlSendStatus>

              break;
 800af80:	e004      	b.n	800af8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fc29 	bl	800b7dc <USBD_CtlError>
              break;
 800af8a:	bf00      	nop
          }
          break;
 800af8c:	e0ec      	b.n	800b168 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b02      	cmp	r3, #2
 800af98:	d002      	beq.n	800afa0 <USBD_StdEPReq+0xe6>
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d016      	beq.n	800afcc <USBD_StdEPReq+0x112>
 800af9e:	e030      	b.n	800b002 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00d      	beq.n	800afc2 <USBD_StdEPReq+0x108>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b80      	cmp	r3, #128	; 0x80
 800afaa:	d00a      	beq.n	800afc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 fa09 	bl	800c3c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afb6:	2180      	movs	r1, #128	; 0x80
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fa05 	bl	800c3c8 <USBD_LL_StallEP>
 800afbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afc0:	e025      	b.n	800b00e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc09 	bl	800b7dc <USBD_CtlError>
              break;
 800afca:	e020      	b.n	800b00e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d11b      	bne.n	800b00c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d004      	beq.n	800afe8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f001 fa0f 	bl	800c406 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fcc2 	bl	800b972 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b000:	e004      	b.n	800b00c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fbe9 	bl	800b7dc <USBD_CtlError>
              break;
 800b00a:	e000      	b.n	800b00e <USBD_StdEPReq+0x154>
              break;
 800b00c:	bf00      	nop
          }
          break;
 800b00e:	e0ab      	b.n	800b168 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d002      	beq.n	800b022 <USBD_StdEPReq+0x168>
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d032      	beq.n	800b086 <USBD_StdEPReq+0x1cc>
 800b020:	e097      	b.n	800b152 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d007      	beq.n	800b038 <USBD_StdEPReq+0x17e>
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	2b80      	cmp	r3, #128	; 0x80
 800b02c:	d004      	beq.n	800b038 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fbd3 	bl	800b7dc <USBD_CtlError>
                break;
 800b036:	e091      	b.n	800b15c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	da0b      	bge.n	800b058 <USBD_StdEPReq+0x19e>
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	3310      	adds	r3, #16
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	4413      	add	r3, r2
 800b054:	3304      	adds	r3, #4
 800b056:	e00b      	b.n	800b070 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	3304      	adds	r3, #4
 800b070:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2202      	movs	r2, #2
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fc1d 	bl	800b8be <USBD_CtlSendData>
              break;
 800b084:	e06a      	b.n	800b15c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da11      	bge.n	800b0b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3324      	adds	r3, #36	; 0x24
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d117      	bne.n	800b0d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fb96 	bl	800b7dc <USBD_CtlError>
                  break;
 800b0b0:	e054      	b.n	800b15c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0b2:	7bbb      	ldrb	r3, [r7, #14]
 800b0b4:	f003 020f 	and.w	r2, r3, #15
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fb83 	bl	800b7dc <USBD_CtlError>
                  break;
 800b0d6:	e041      	b.n	800b15c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	da0b      	bge.n	800b0f8 <USBD_StdEPReq+0x23e>
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	3310      	adds	r3, #16
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	e00b      	b.n	800b110 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	3304      	adds	r3, #4
 800b110:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <USBD_StdEPReq+0x264>
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	2b80      	cmp	r3, #128	; 0x80
 800b11c:	d103      	bne.n	800b126 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e00e      	b.n	800b144 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 f98a 	bl	800c444 <USBD_LL_IsStallEP>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2201      	movs	r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	e002      	b.n	800b144 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2202      	movs	r2, #2
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fbb7 	bl	800b8be <USBD_CtlSendData>
              break;
 800b150:	e004      	b.n	800b15c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fb41 	bl	800b7dc <USBD_CtlError>
              break;
 800b15a:	bf00      	nop
          }
          break;
 800b15c:	e004      	b.n	800b168 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fb3b 	bl	800b7dc <USBD_CtlError>
          break;
 800b166:	bf00      	nop
      }
      break;
 800b168:	e004      	b.n	800b174 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fb35 	bl	800b7dc <USBD_CtlError>
      break;
 800b172:	bf00      	nop
  }

  return ret;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b192:	2300      	movs	r3, #0
 800b194:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	885b      	ldrh	r3, [r3, #2]
 800b19a:	0a1b      	lsrs	r3, r3, #8
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	2b06      	cmp	r3, #6
 800b1a2:	f200 8128 	bhi.w	800b3f6 <USBD_GetDescriptor+0x276>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <USBD_GetDescriptor+0x2c>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1c9 	.word	0x0800b1c9
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b221 	.word	0x0800b221
 800b1b8:	0800b3f7 	.word	0x0800b3f7
 800b1bc:	0800b3f7 	.word	0x0800b3f7
 800b1c0:	0800b397 	.word	0x0800b397
 800b1c4:	0800b3c3 	.word	0x0800b3c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	7c12      	ldrb	r2, [r2, #16]
 800b1d4:	f107 0108 	add.w	r1, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
      break;
 800b1de:	e112      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7c1b      	ldrb	r3, [r3, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10d      	bne.n	800b204 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f0:	f107 0208 	add.w	r2, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	2202      	movs	r2, #2
 800b200:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b202:	e100      	b.n	800b406 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20c:	f107 0208 	add.w	r2, r7, #8
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
 800b214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	2202      	movs	r2, #2
 800b21c:	701a      	strb	r2, [r3, #0]
      break;
 800b21e:	e0f2      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	885b      	ldrh	r3, [r3, #2]
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b05      	cmp	r3, #5
 800b228:	f200 80ac 	bhi.w	800b384 <USBD_GetDescriptor+0x204>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <USBD_GetDescriptor+0xb4>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b24d 	.word	0x0800b24d
 800b238:	0800b281 	.word	0x0800b281
 800b23c:	0800b2b5 	.word	0x0800b2b5
 800b240:	0800b2e9 	.word	0x0800b2e9
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	0800b351 	.word	0x0800b351
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	7c12      	ldrb	r2, [r2, #16]
 800b264:	f107 0108 	add.w	r1, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b26e:	e091      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fab2 	bl	800b7dc <USBD_CtlError>
            err++;
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	3301      	adds	r3, #1
 800b27c:	72fb      	strb	r3, [r7, #11]
          break;
 800b27e:	e089      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00b      	beq.n	800b2a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	7c12      	ldrb	r2, [r2, #16]
 800b298:	f107 0108 	add.w	r1, r7, #8
 800b29c:	4610      	mov	r0, r2
 800b29e:	4798      	blx	r3
 800b2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2a2:	e077      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fa98 	bl	800b7dc <USBD_CtlError>
            err++;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2b2:	e06f      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d6:	e05d      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa7e 	bl	800b7dc <USBD_CtlError>
            err++;
 800b2e0:	7afb      	ldrb	r3, [r7, #11]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e6:	e055      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7c12      	ldrb	r2, [r2, #16]
 800b300:	f107 0108 	add.w	r1, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30a:	e043      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa64 	bl	800b7dc <USBD_CtlError>
            err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
          break;
 800b31a:	e03b      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33e:	e029      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa4a 	bl	800b7dc <USBD_CtlError>
            err++;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	3301      	adds	r3, #1
 800b34c:	72fb      	strb	r3, [r7, #11]
          break;
 800b34e:	e021      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b372:	e00f      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa30 	bl	800b7dc <USBD_CtlError>
            err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
          break;
 800b382:	e007      	b.n	800b394 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa28 	bl	800b7dc <USBD_CtlError>
          err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b392:	bf00      	nop
      }
      break;
 800b394:	e037      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	7c1b      	ldrb	r3, [r3, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	f107 0208 	add.w	r2, r7, #8
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4798      	blx	r3
 800b3ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3b0:	e029      	b.n	800b406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fa11 	bl	800b7dc <USBD_CtlError>
        err++;
 800b3ba:	7afb      	ldrb	r3, [r7, #11]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	72fb      	strb	r3, [r7, #11]
      break;
 800b3c0:	e021      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	7c1b      	ldrb	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10d      	bne.n	800b3e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	f107 0208 	add.w	r2, r7, #8
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	4798      	blx	r3
 800b3da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3e4:	e00f      	b.n	800b406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f9f7 	bl	800b7dc <USBD_CtlError>
        err++;
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b3f4:	e007      	b.n	800b406 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f9ef 	bl	800b7dc <USBD_CtlError>
      err++;
 800b3fe:	7afb      	ldrb	r3, [r7, #11]
 800b400:	3301      	adds	r3, #1
 800b402:	72fb      	strb	r3, [r7, #11]
      break;
 800b404:	bf00      	nop
  }

  if (err != 0U)
 800b406:	7afb      	ldrb	r3, [r7, #11]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d11e      	bne.n	800b44a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	88db      	ldrh	r3, [r3, #6]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d016      	beq.n	800b442 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b414:	893b      	ldrh	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00e      	beq.n	800b438 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	88da      	ldrh	r2, [r3, #6]
 800b41e:	893b      	ldrh	r3, [r7, #8]
 800b420:	4293      	cmp	r3, r2
 800b422:	bf28      	it	cs
 800b424:	4613      	movcs	r3, r2
 800b426:	b29b      	uxth	r3, r3
 800b428:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b42a:	893b      	ldrh	r3, [r7, #8]
 800b42c:	461a      	mov	r2, r3
 800b42e:	68f9      	ldr	r1, [r7, #12]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa44 	bl	800b8be <USBD_CtlSendData>
 800b436:	e009      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f9ce 	bl	800b7dc <USBD_CtlError>
 800b440:	e004      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa95 	bl	800b972 <USBD_CtlSendStatus>
 800b448:	e000      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    return;
 800b44a:	bf00      	nop
  }
}
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop

0800b454 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	889b      	ldrh	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d131      	bne.n	800b4ca <USBD_SetAddress+0x76>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	88db      	ldrh	r3, [r3, #6]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d12d      	bne.n	800b4ca <USBD_SetAddress+0x76>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	2b7f      	cmp	r3, #127	; 0x7f
 800b474:	d829      	bhi.n	800b4ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	885b      	ldrh	r3, [r3, #2]
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d104      	bne.n	800b498 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f9a3 	bl	800b7dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b496:	e01d      	b.n	800b4d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7bfa      	ldrb	r2, [r7, #15]
 800b49c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fff9 	bl	800c49c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa61 	bl	800b972 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4be:	e009      	b.n	800b4d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c8:	e004      	b.n	800b4d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f985 	bl	800b7dc <USBD_CtlError>
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	4b4c      	ldr	r3, [pc, #304]	; (800b624 <USBD_SetConfig+0x148>)
 800b4f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4f4:	4b4b      	ldr	r3, [pc, #300]	; (800b624 <USBD_SetConfig+0x148>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d905      	bls.n	800b508 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f96c 	bl	800b7dc <USBD_CtlError>
    return USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	e088      	b.n	800b61a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d002      	beq.n	800b51a <USBD_SetConfig+0x3e>
 800b514:	2b03      	cmp	r3, #3
 800b516:	d025      	beq.n	800b564 <USBD_SetConfig+0x88>
 800b518:	e071      	b.n	800b5fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b51a:	4b42      	ldr	r3, [pc, #264]	; (800b624 <USBD_SetConfig+0x148>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d01c      	beq.n	800b55c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b522:	4b40      	ldr	r3, [pc, #256]	; (800b624 <USBD_SetConfig+0x148>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b52c:	4b3d      	ldr	r3, [pc, #244]	; (800b624 <USBD_SetConfig+0x148>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff f948 	bl	800a7c8 <USBD_SetClassConfig>
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f949 	bl	800b7dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b54a:	e065      	b.n	800b618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fa10 	bl	800b972 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2203      	movs	r2, #3
 800b556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b55a:	e05d      	b.n	800b618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fa08 	bl	800b972 <USBD_CtlSendStatus>
      break;
 800b562:	e059      	b.n	800b618 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b564:	4b2f      	ldr	r3, [pc, #188]	; (800b624 <USBD_SetConfig+0x148>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d112      	bne.n	800b592 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b574:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <USBD_SetConfig+0x148>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b57e:	4b29      	ldr	r3, [pc, #164]	; (800b624 <USBD_SetConfig+0x148>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff f93b 	bl	800a800 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f9f1 	bl	800b972 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b590:	e042      	b.n	800b618 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <USBD_SetConfig+0x148>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d02a      	beq.n	800b5f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff f929 	bl	800a800 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <USBD_SetConfig+0x148>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5b8:	4b1a      	ldr	r3, [pc, #104]	; (800b624 <USBD_SetConfig+0x148>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff f902 	bl	800a7c8 <USBD_SetClassConfig>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f903 	bl	800b7dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7ff f90e 	bl	800a800 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5ec:	e014      	b.n	800b618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f9bf 	bl	800b972 <USBD_CtlSendStatus>
      break;
 800b5f4:	e010      	b.n	800b618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9bb 	bl	800b972 <USBD_CtlSendStatus>
      break;
 800b5fc:	e00c      	b.n	800b618 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f8eb 	bl	800b7dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b606:	4b07      	ldr	r3, [pc, #28]	; (800b624 <USBD_SetConfig+0x148>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff f8f7 	bl	800a800 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b612:	2303      	movs	r3, #3
 800b614:	73fb      	strb	r3, [r7, #15]
      break;
 800b616:	bf00      	nop
  }

  return ret;
 800b618:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	200004dc 	.word	0x200004dc

0800b628 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	88db      	ldrh	r3, [r3, #6]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d004      	beq.n	800b644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f8cd 	bl	800b7dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b642:	e023      	b.n	800b68c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	dc02      	bgt.n	800b656 <USBD_GetConfig+0x2e>
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc03      	bgt.n	800b65c <USBD_GetConfig+0x34>
 800b654:	e015      	b.n	800b682 <USBD_GetConfig+0x5a>
 800b656:	2b03      	cmp	r3, #3
 800b658:	d00b      	beq.n	800b672 <USBD_GetConfig+0x4a>
 800b65a:	e012      	b.n	800b682 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3308      	adds	r3, #8
 800b666:	2201      	movs	r2, #1
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f927 	bl	800b8be <USBD_CtlSendData>
        break;
 800b670:	e00c      	b.n	800b68c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3304      	adds	r3, #4
 800b676:	2201      	movs	r2, #1
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f91f 	bl	800b8be <USBD_CtlSendData>
        break;
 800b680:	e004      	b.n	800b68c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f8a9 	bl	800b7dc <USBD_CtlError>
        break;
 800b68a:	bf00      	nop
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d81e      	bhi.n	800b6ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	88db      	ldrh	r3, [r3, #6]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d004      	beq.n	800b6be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f890 	bl	800b7dc <USBD_CtlError>
        break;
 800b6bc:	e01a      	b.n	800b6f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f043 0202 	orr.w	r2, r3, #2
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	330c      	adds	r3, #12
 800b6de:	2202      	movs	r2, #2
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 f8eb 	bl	800b8be <USBD_CtlSendData>
      break;
 800b6e8:	e004      	b.n	800b6f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f875 	bl	800b7dc <USBD_CtlError>
      break;
 800b6f2:	bf00      	nop
  }
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	885b      	ldrh	r3, [r3, #2]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d106      	bne.n	800b71c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f92b 	bl	800b972 <USBD_CtlSendStatus>
  }
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d80b      	bhi.n	800b754 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	885b      	ldrh	r3, [r3, #2]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d10c      	bne.n	800b75e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f910 	bl	800b972 <USBD_CtlSendStatus>
      }
      break;
 800b752:	e004      	b.n	800b75e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f840 	bl	800b7dc <USBD_CtlError>
      break;
 800b75c:	e000      	b.n	800b760 <USBD_ClrFeature+0x3c>
      break;
 800b75e:	bf00      	nop
  }
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	781a      	ldrb	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	781a      	ldrb	r2, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3301      	adds	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f7ff fabb 	bl	800ad0e <SWAPBYTE>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff faae 	bl	800ad0e <SWAPBYTE>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f7ff faa1 	bl	800ad0e <SWAPBYTE>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	80da      	strh	r2, [r3, #6]
}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7e6:	2180      	movs	r1, #128	; 0x80
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fded 	bl	800c3c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fde9 	bl	800c3c8 <USBD_LL_StallEP>
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b086      	sub	sp, #24
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d036      	beq.n	800b882 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b818:	6938      	ldr	r0, [r7, #16]
 800b81a:	f000 f836 	bl	800b88a <USBD_GetLen>
 800b81e:	4603      	mov	r3, r0
 800b820:	3301      	adds	r3, #1
 800b822:	b29b      	uxth	r3, r3
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	b29a      	uxth	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	4413      	add	r3, r2
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	7812      	ldrb	r2, [r2, #0]
 800b836:	701a      	strb	r2, [r3, #0]
  idx++;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	3301      	adds	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	4413      	add	r3, r2
 800b844:	2203      	movs	r2, #3
 800b846:	701a      	strb	r2, [r3, #0]
  idx++;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	3301      	adds	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b84e:	e013      	b.n	800b878 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	4413      	add	r3, r2
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	7812      	ldrb	r2, [r2, #0]
 800b85a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3301      	adds	r3, #1
 800b860:	613b      	str	r3, [r7, #16]
    idx++;
 800b862:	7dfb      	ldrb	r3, [r7, #23]
 800b864:	3301      	adds	r3, #1
 800b866:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b868:	7dfb      	ldrb	r3, [r7, #23]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
    idx++;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
 800b874:	3301      	adds	r3, #1
 800b876:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1e7      	bne.n	800b850 <USBD_GetString+0x52>
 800b880:	e000      	b.n	800b884 <USBD_GetString+0x86>
    return;
 800b882:	bf00      	nop
  }
}
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b085      	sub	sp, #20
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b89a:	e005      	b.n	800b8a8 <USBD_GetLen+0x1e>
  {
    len++;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f5      	bne.n	800b89c <USBD_GetLen+0x12>
  }

  return len;
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 fdf8 	bl	800c4da <USBD_LL_Transmit>

  return USBD_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	2100      	movs	r1, #0
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f000 fde7 	bl	800c4da <USBD_LL_Transmit>

  return USBD_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2203      	movs	r2, #3
 800b926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	2100      	movs	r1, #0
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fdeb 	bl	800c51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	2100      	movs	r1, #0
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f000 fdda 	bl	800c51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b082      	sub	sp, #8
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2204      	movs	r2, #4
 800b97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b982:	2300      	movs	r3, #0
 800b984:	2200      	movs	r2, #0
 800b986:	2100      	movs	r1, #0
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fda6 	bl	800c4da <USBD_LL_Transmit>

  return USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2205      	movs	r2, #5
 800b9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fdb4 	bl	800c51c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
	...

0800b9c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4912      	ldr	r1, [pc, #72]	; (800ba10 <MX_USB_DEVICE_Init+0x50>)
 800b9c8:	4812      	ldr	r0, [pc, #72]	; (800ba14 <MX_USB_DEVICE_Init+0x54>)
 800b9ca:	f7fe fe8f 	bl	800a6ec <USBD_Init>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d001      	beq.n	800b9d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b9d4:	f7f5 fc10 	bl	80011f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b9d8:	490f      	ldr	r1, [pc, #60]	; (800ba18 <MX_USB_DEVICE_Init+0x58>)
 800b9da:	480e      	ldr	r0, [pc, #56]	; (800ba14 <MX_USB_DEVICE_Init+0x54>)
 800b9dc:	f7fe feb6 	bl	800a74c <USBD_RegisterClass>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b9e6:	f7f5 fc07 	bl	80011f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b9ea:	490c      	ldr	r1, [pc, #48]	; (800ba1c <MX_USB_DEVICE_Init+0x5c>)
 800b9ec:	4809      	ldr	r0, [pc, #36]	; (800ba14 <MX_USB_DEVICE_Init+0x54>)
 800b9ee:	f7fe fdd7 	bl	800a5a0 <USBD_CDC_RegisterInterface>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d001      	beq.n	800b9fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b9f8:	f7f5 fbfe 	bl	80011f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9fc:	4805      	ldr	r0, [pc, #20]	; (800ba14 <MX_USB_DEVICE_Init+0x54>)
 800b9fe:	f7fe fecc 	bl	800a79a <USBD_Start>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ba08:	f7f5 fbf6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba0c:	bf00      	nop
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20000408 	.word	0x20000408
 800ba14:	20000914 	.word	0x20000914
 800ba18:	200002e8 	.word	0x200002e8
 800ba1c:	200003f4 	.word	0x200003f4

0800ba20 <USBD_CDC_ClearBuffer>:
/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
bool CDC_connected();
void CDC_continue_transmit(void);
bool CDC_resume_receive(void);
uint8_t USBD_CDC_ClearBuffer(USBD_HandleTypeDef *pdev)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL) {
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d007      	beq.n	800ba42 <USBD_CDC_ClearBuffer+0x22>
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, 0, 0);
 800ba32:	2300      	movs	r3, #0
 800ba34:	2200      	movs	r2, #0
 800ba36:	2101      	movs	r1, #1
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fd6f 	bl	800c51c <USBD_LL_PrepareReceive>
    return USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e000      	b.n	800ba44 <USBD_CDC_ClearBuffer+0x24>
  } else {
    return USBD_FAIL;
 800ba42:	2303      	movs	r3, #3
  }
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  CDC_TransmitQueue_Init(&TransmitQueue);
 800ba50:	480e      	ldr	r0, [pc, #56]	; (800ba8c <CDC_Init_FS+0x40>)
 800ba52:	f7f6 fe33 	bl	80026bc <CDC_TransmitQueue_Init>
  CDC_ReceiveQueue_Init(&ReceiveQueue);
 800ba56:	480e      	ldr	r0, [pc, #56]	; (800ba90 <CDC_Init_FS+0x44>)
 800ba58:	f7f6 ff10 	bl	800287c <CDC_ReceiveQueue_Init>
  receivePended = true;
 800ba5c:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <CDC_Init_FS+0x48>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue));
 800ba62:	480b      	ldr	r0, [pc, #44]	; (800ba90 <CDC_Init_FS+0x44>)
 800ba64:	f7f6 ff20 	bl	80028a8 <CDC_ReceiveQueue_ReserveBlock>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	480a      	ldr	r0, [pc, #40]	; (800ba98 <CDC_Init_FS+0x4c>)
 800ba6e:	f7fe fdca 	bl	800a606 <USBD_CDC_SetRxBuffer>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ba72:	2200      	movs	r2, #0
 800ba74:	4909      	ldr	r1, [pc, #36]	; (800ba9c <CDC_Init_FS+0x50>)
 800ba76:	4808      	ldr	r0, [pc, #32]	; (800ba98 <CDC_Init_FS+0x4c>)
 800ba78:	f7fe fda7 	bl	800a5ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba7c:	4908      	ldr	r1, [pc, #32]	; (800baa0 <CDC_Init_FS+0x54>)
 800ba7e:	4806      	ldr	r0, [pc, #24]	; (800ba98 <CDC_Init_FS+0x4c>)
 800ba80:	f7fe fdc1 	bl	800a606 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba84:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000be4 	.word	0x20000be4
 800ba90:	20001c6c 	.word	0x20001c6c
 800ba94:	200003eb 	.word	0x200003eb
 800ba98:	20000914 	.word	0x20000914
 800ba9c:	2000146c 	.word	0x2000146c
 800baa0:	20000c6c 	.word	0x20000c6c

0800baa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800baa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800baaa:	4618      	mov	r0, r3
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	4603      	mov	r3, r0
 800babc:	6039      	str	r1, [r7, #0]
 800babe:	71fb      	strb	r3, [r7, #7]
 800bac0:	4613      	mov	r3, r2
 800bac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b23      	cmp	r3, #35	; 0x23
 800bac8:	f200 80ac 	bhi.w	800bc24 <CDC_Control_FS+0x170>
 800bacc:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <CDC_Control_FS+0x20>)
 800bace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad2:	bf00      	nop
 800bad4:	0800bc25 	.word	0x0800bc25
 800bad8:	0800bc25 	.word	0x0800bc25
 800badc:	0800bc25 	.word	0x0800bc25
 800bae0:	0800bc25 	.word	0x0800bc25
 800bae4:	0800bc25 	.word	0x0800bc25
 800bae8:	0800bc25 	.word	0x0800bc25
 800baec:	0800bc25 	.word	0x0800bc25
 800baf0:	0800bc25 	.word	0x0800bc25
 800baf4:	0800bc25 	.word	0x0800bc25
 800baf8:	0800bc25 	.word	0x0800bc25
 800bafc:	0800bc25 	.word	0x0800bc25
 800bb00:	0800bc25 	.word	0x0800bc25
 800bb04:	0800bc25 	.word	0x0800bc25
 800bb08:	0800bc25 	.word	0x0800bc25
 800bb0c:	0800bc25 	.word	0x0800bc25
 800bb10:	0800bc25 	.word	0x0800bc25
 800bb14:	0800bc25 	.word	0x0800bc25
 800bb18:	0800bc25 	.word	0x0800bc25
 800bb1c:	0800bc25 	.word	0x0800bc25
 800bb20:	0800bc25 	.word	0x0800bc25
 800bb24:	0800bc25 	.word	0x0800bc25
 800bb28:	0800bc25 	.word	0x0800bc25
 800bb2c:	0800bc25 	.word	0x0800bc25
 800bb30:	0800bc25 	.word	0x0800bc25
 800bb34:	0800bc25 	.word	0x0800bc25
 800bb38:	0800bc25 	.word	0x0800bc25
 800bb3c:	0800bc25 	.word	0x0800bc25
 800bb40:	0800bc25 	.word	0x0800bc25
 800bb44:	0800bc25 	.word	0x0800bc25
 800bb48:	0800bc25 	.word	0x0800bc25
 800bb4c:	0800bc25 	.word	0x0800bc25
 800bb50:	0800bc25 	.word	0x0800bc25
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bba9 	.word	0x0800bba9
 800bb5c:	0800bbfd 	.word	0x0800bbfd
 800bb60:	0800bc25 	.word	0x0800bc25
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	021b      	lsls	r3, r3, #8
 800bb72:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	3302      	adds	r3, #2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800bb7c:	431a      	orrs	r2, r3
					(pbuf[2] << 16) | (pbuf[3] << 24));
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	3303      	adds	r3, #3
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	061b      	lsls	r3, r3, #24
 800bb86:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b2b      	ldr	r3, [pc, #172]	; (800bc38 <CDC_Control_FS+0x184>)
 800bb8c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	791a      	ldrb	r2, [r3, #4]
 800bb92:	4b29      	ldr	r3, [pc, #164]	; (800bc38 <CDC_Control_FS+0x184>)
 800bb94:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	795a      	ldrb	r2, [r3, #5]
 800bb9a:	4b27      	ldr	r3, [pc, #156]	; (800bc38 <CDC_Control_FS+0x184>)
 800bb9c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	799a      	ldrb	r2, [r3, #6]
 800bba2:	4b25      	ldr	r3, [pc, #148]	; (800bc38 <CDC_Control_FS+0x184>)
 800bba4:	719a      	strb	r2, [r3, #6]
    break;
 800bba6:	e040      	b.n	800bc2a <CDC_Control_FS+0x176>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800bba8:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800bbb2:	4b21      	ldr	r3, [pc, #132]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	0a1a      	lsrs	r2, r3, #8
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	b2d2      	uxtb	r2, r2
 800bbbe:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800bbc0:	4b1d      	ldr	r3, [pc, #116]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	0c1a      	lsrs	r2, r3, #16
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	3302      	adds	r3, #2
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800bbce:	4b1a      	ldr	r3, [pc, #104]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	0e1a      	lsrs	r2, r3, #24
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	3303      	adds	r3, #3
 800bbd8:	b2d2      	uxtb	r2, r2
 800bbda:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbe2:	7912      	ldrb	r2, [r2, #4]
 800bbe4:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	3305      	adds	r3, #5
 800bbea:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbec:	7952      	ldrb	r2, [r2, #5]
 800bbee:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	3306      	adds	r3, #6
 800bbf4:	4a10      	ldr	r2, [pc, #64]	; (800bc38 <CDC_Control_FS+0x184>)
 800bbf6:	7992      	ldrb	r2, [r2, #6]
 800bbf8:	701a      	strb	r2, [r3, #0]
    break;
 800bbfa:	e016      	b.n	800bc2a <CDC_Control_FS+0x176>

    case CDC_SET_CONTROL_LINE_STATE:
      lineState =
              (((USBD_SetupReqTypedef *)pbuf)->wValue & 0x01) != 0; // Check DTR state
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bf14      	ite	ne
 800bc08:	2301      	movne	r3, #1
 800bc0a:	2300      	moveq	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	461a      	mov	r2, r3
      lineState =
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <CDC_Control_FS+0x188>)
 800bc12:	601a      	str	r2, [r3, #0]
            if (lineState) { // Reset the transmit timeout when the port is connected
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <CDC_Control_FS+0x188>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d005      	beq.n	800bc28 <CDC_Control_FS+0x174>
              transmitStart = 0;
 800bc1c:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <CDC_Control_FS+0x18c>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
            }
      #ifdef DTR_TOGGLING_SEQ
            dtr_toggling++; /* Count DTR toggling */
      #endif

    break;
 800bc22:	e001      	b.n	800bc28 <CDC_Control_FS+0x174>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc24:	bf00      	nop
 800bc26:	e000      	b.n	800bc2a <CDC_Control_FS+0x176>
    break;
 800bc28:	bf00      	nop
  }

  return (USBD_OK);
 800bc2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	200003ec 	.word	0x200003ec
 800bc3c:	200004e0 	.word	0x200004e0
 800bc40:	200004e4 	.word	0x200004e4

0800bc44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(Buf);
#endif
  /* It always contains required amount of free space for writing */
  CDC_ReceiveQueue_CommitBlock(&ReceiveQueue, (uint16_t)(*Len));
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4619      	mov	r1, r3
 800bc56:	480b      	ldr	r0, [pc, #44]	; (800bc84 <CDC_Receive_FS+0x40>)
 800bc58:	f7f6 fe7b 	bl	8002952 <CDC_ReceiveQueue_CommitBlock>
  receivePended = false;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <CDC_Receive_FS+0x44>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	701a      	strb	r2, [r3, #0]
  /* If enough space in the queue for a full buffer then continue receive */
  if (!CDC_resume_receive()) {
 800bc62:	f000 f86f 	bl	800bd44 <CDC_resume_receive>
 800bc66:	4603      	mov	r3, r0
 800bc68:	f083 0301 	eor.w	r3, r3, #1
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <CDC_Receive_FS+0x34>
    USBD_CDC_ClearBuffer(&hUsbDeviceFS);
 800bc72:	4806      	ldr	r0, [pc, #24]	; (800bc8c <CDC_Receive_FS+0x48>)
 800bc74:	f7ff fed4 	bl	800ba20 <USBD_CDC_ClearBuffer>
  }

//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
 800bc78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20001c6c 	.word	0x20001c6c
 800bc88:	200003eb 	.word	0x200003eb
 800bc8c:	20000914 	.word	0x20000914

0800bc90 <CDC_connected>:
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool CDC_connected()
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
  /* Save the transmitStart value in a local variable to avoid twice reading - fix #478 */
  uint32_t transmitTime = transmitStart;
 800bc96:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <CDC_connected+0x4c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	607b      	str	r3, [r7, #4]
  if (transmitTime) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <CDC_connected+0x1e>
    transmitTime = HAL_GetTick() - transmitTime;
 800bca2:	f7f7 f891 	bl	8002dc8 <HAL_GetTick>
 800bca6:	4602      	mov	r2, r0
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	607b      	str	r3, [r7, #4]
  }
  return hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED
 800bcae:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <CDC_connected+0x50>)
 800bcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcb4:	b2db      	uxtb	r3, r3
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
         && lineState;
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d108      	bne.n	800bccc <CDC_connected+0x3c>
         && transmitTime < USB_CDC_TRANSMIT_TIMEOUT
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d805      	bhi.n	800bccc <CDC_connected+0x3c>
         && lineState;
 800bcc0:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <CDC_connected+0x54>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <CDC_connected+0x3c>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e000      	b.n	800bcce <CDC_connected+0x3e>
 800bccc:	2300      	movs	r3, #0
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	b2db      	uxtb	r3, r3
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	200004e4 	.word	0x200004e4
 800bce0:	20000914 	.word	0x20000914
 800bce4:	200004e0 	.word	0x200004e0

0800bce8 <CDC_continue_transmit>:

void CDC_continue_transmit(void)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
  uint16_t size;
  uint8_t *buffer;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 800bcee:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <CDC_continue_transmit+0x50>)
 800bcf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcf4:	60fb      	str	r3, [r7, #12]
   * BUT the main thread cannot pass this condition while waiting for a IRQ!
   * This is not possible because TxState is not zero while waiting for data
   * transfer ending! The IRQ thread is uninterrupted, since its priority
   * is higher than that of the main thread. So this method is thread safe.
   */
  if (hcdc->TxState == 0U) {
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d116      	bne.n	800bd2e <CDC_continue_transmit+0x46>
    buffer = CDC_TransmitQueue_ReadBlock(&TransmitQueue, &size);
 800bd00:	1dbb      	adds	r3, r7, #6
 800bd02:	4619      	mov	r1, r3
 800bd04:	480d      	ldr	r0, [pc, #52]	; (800bd3c <CDC_continue_transmit+0x54>)
 800bd06:	f7f6 fd68 	bl	80027da <CDC_TransmitQueue_ReadBlock>
 800bd0a:	60b8      	str	r0, [r7, #8]
    if (size > 0) {
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00d      	beq.n	800bd2e <CDC_continue_transmit+0x46>
      transmitStart = HAL_GetTick();
 800bd12:	f7f7 f859 	bl	8002dc8 <HAL_GetTick>
 800bd16:	4603      	mov	r3, r0
 800bd18:	4a09      	ldr	r2, [pc, #36]	; (800bd40 <CDC_continue_transmit+0x58>)
 800bd1a:	6013      	str	r3, [r2, #0]
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, size);
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	4805      	ldr	r0, [pc, #20]	; (800bd38 <CDC_continue_transmit+0x50>)
 800bd24:	f7fe fc51 	bl	800a5ca <USBD_CDC_SetTxBuffer>
      /*
       * size never exceed PMA buffer and USBD_CDC_TransmitPacket make full
       * copy of block in PMA, so no need to worry about buffer damage
       */
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd28:	4803      	ldr	r0, [pc, #12]	; (800bd38 <CDC_continue_transmit+0x50>)
 800bd2a:	f7fe fc85 	bl	800a638 <USBD_CDC_TransmitPacket>
    }
  }
}
 800bd2e:	bf00      	nop
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20000914 	.word	0x20000914
 800bd3c:	20000be4 	.word	0x20000be4
 800bd40:	200004e4 	.word	0x200004e4

0800bd44 <CDC_resume_receive>:


bool CDC_resume_receive(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
  /*
   * TS: main and IRQ threads can't pass it at same time, because
   * IRQ may occur only if receivePended is true. So it is thread-safe!
   */
  if (!receivePended) {
 800bd4a:	4b10      	ldr	r3, [pc, #64]	; (800bd8c <CDC_resume_receive+0x48>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	f083 0301 	eor.w	r3, r3, #1
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d012      	beq.n	800bd80 <CDC_resume_receive+0x3c>
    uint8_t *block = CDC_ReceiveQueue_ReserveBlock(&ReceiveQueue);
 800bd5a:	480d      	ldr	r0, [pc, #52]	; (800bd90 <CDC_resume_receive+0x4c>)
 800bd5c:	f7f6 fda4 	bl	80028a8 <CDC_ReceiveQueue_ReserveBlock>
 800bd60:	6078      	str	r0, [r7, #4]
    if (block != NULL) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <CDC_resume_receive+0x3c>
      receivePended = true;
 800bd68:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <CDC_resume_receive+0x48>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	701a      	strb	r2, [r3, #0]
      /* Set new buffer */
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, block);
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4808      	ldr	r0, [pc, #32]	; (800bd94 <CDC_resume_receive+0x50>)
 800bd72:	f7fe fc48 	bl	800a606 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd76:	4807      	ldr	r0, [pc, #28]	; (800bd94 <CDC_resume_receive+0x50>)
 800bd78:	f7fe fc8e 	bl	800a698 <USBD_CDC_ReceivePacket>
      return true;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <CDC_resume_receive+0x3e>
    }
  }
  return false;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200003eb 	.word	0x200003eb
 800bd90:	20001c6c 	.word	0x20001c6c
 800bd94:	20000914 	.word	0x20000914

0800bd98 <CDC_init>:

int8_t CDC_init(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
  return CDC_Init_FS();
 800bd9c:	f7ff fe56 	bl	800ba4c <CDC_Init_FS>
 800bda0:	4603      	mov	r3, r0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <CDC_DeInit>:

int8_t CDC_DeInit(void)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	af00      	add	r7, sp, #0
  return CDC_DeInit_FS();
 800bdaa:	f7ff fe7b 	bl	800baa4 <CDC_DeInit_FS>
 800bdae:	4603      	mov	r3, r0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_CDC_Transferred>:

int8_t USBD_CDC_Transferred(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	af00      	add	r7, sp, #0
  transmitStart = 0;
 800bdb8:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <USBD_CDC_Transferred+0x1c>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
  CDC_TransmitQueue_CommitRead(&TransmitQueue);
 800bdbe:	4805      	ldr	r0, [pc, #20]	; (800bdd4 <USBD_CDC_Transferred+0x20>)
 800bdc0:	f7f6 fd42 	bl	8002848 <CDC_TransmitQueue_CommitRead>
  CDC_continue_transmit();
 800bdc4:	f7ff ff90 	bl	800bce8 <CDC_continue_transmit>
  return (USBD_OK);
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	200004e4 	.word	0x200004e4
 800bdd4:	20000be4 	.word	0x20000be4

0800bdd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2212      	movs	r2, #18
 800bde8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	20000424 	.word	0x20000424

0800bdfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2204      	movs	r2, #4
 800be0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be0e:	4b03      	ldr	r3, [pc, #12]	; (800be1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	20000438 	.word	0x20000438

0800be20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d105      	bne.n	800be3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4907      	ldr	r1, [pc, #28]	; (800be54 <USBD_FS_ProductStrDescriptor+0x34>)
 800be36:	4808      	ldr	r0, [pc, #32]	; (800be58 <USBD_FS_ProductStrDescriptor+0x38>)
 800be38:	f7ff fce1 	bl	800b7fe <USBD_GetString>
 800be3c:	e004      	b.n	800be48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	4904      	ldr	r1, [pc, #16]	; (800be54 <USBD_FS_ProductStrDescriptor+0x34>)
 800be42:	4805      	ldr	r0, [pc, #20]	; (800be58 <USBD_FS_ProductStrDescriptor+0x38>)
 800be44:	f7ff fcdb 	bl	800b7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800be48:	4b02      	ldr	r3, [pc, #8]	; (800be54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20001d34 	.word	0x20001d34
 800be58:	0800d008 	.word	0x0800d008

0800be5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	4603      	mov	r3, r0
 800be64:	6039      	str	r1, [r7, #0]
 800be66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	4904      	ldr	r1, [pc, #16]	; (800be7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be6c:	4804      	ldr	r0, [pc, #16]	; (800be80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be6e:	f7ff fcc6 	bl	800b7fe <USBD_GetString>
  return USBD_StrDesc;
 800be72:	4b02      	ldr	r3, [pc, #8]	; (800be7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20001d34 	.word	0x20001d34
 800be80:	0800d01c 	.word	0x0800d01c

0800be84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	4603      	mov	r3, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	221a      	movs	r2, #26
 800be94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be96:	f000 f843 	bl	800bf20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be9a:	4b02      	ldr	r3, [pc, #8]	; (800bea4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	2000043c 	.word	0x2000043c

0800bea8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <USBD_FS_ConfigStrDescriptor+0x34>)
 800bebe:	4808      	ldr	r0, [pc, #32]	; (800bee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bec0:	f7ff fc9d 	bl	800b7fe <USBD_GetString>
 800bec4:	e004      	b.n	800bed0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4904      	ldr	r1, [pc, #16]	; (800bedc <USBD_FS_ConfigStrDescriptor+0x34>)
 800beca:	4805      	ldr	r0, [pc, #20]	; (800bee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800becc:	f7ff fc97 	bl	800b7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20001d34 	.word	0x20001d34
 800bee0:	0800d02c 	.word	0x0800d02c

0800bee4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bef0:	79fb      	ldrb	r3, [r7, #7]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d105      	bne.n	800bf02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4907      	ldr	r1, [pc, #28]	; (800bf18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800befa:	4808      	ldr	r0, [pc, #32]	; (800bf1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800befc:	f7ff fc7f 	bl	800b7fe <USBD_GetString>
 800bf00:	e004      	b.n	800bf0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	4904      	ldr	r1, [pc, #16]	; (800bf18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf06:	4805      	ldr	r0, [pc, #20]	; (800bf1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf08:	f7ff fc79 	bl	800b7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf0c:	4b02      	ldr	r3, [pc, #8]	; (800bf18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20001d34 	.word	0x20001d34
 800bf1c:	0800d038 	.word	0x0800d038

0800bf20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <Get_SerialNum+0x44>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf2c:	4b0e      	ldr	r3, [pc, #56]	; (800bf68 <Get_SerialNum+0x48>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf32:	4b0e      	ldr	r3, [pc, #56]	; (800bf6c <Get_SerialNum+0x4c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d009      	beq.n	800bf5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf46:	2208      	movs	r2, #8
 800bf48:	4909      	ldr	r1, [pc, #36]	; (800bf70 <Get_SerialNum+0x50>)
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 f814 	bl	800bf78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf50:	2204      	movs	r2, #4
 800bf52:	4908      	ldr	r1, [pc, #32]	; (800bf74 <Get_SerialNum+0x54>)
 800bf54:	68b8      	ldr	r0, [r7, #8]
 800bf56:	f000 f80f 	bl	800bf78 <IntToUnicode>
  }
}
 800bf5a:	bf00      	nop
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	1fff7a10 	.word	0x1fff7a10
 800bf68:	1fff7a14 	.word	0x1fff7a14
 800bf6c:	1fff7a18 	.word	0x1fff7a18
 800bf70:	2000043e 	.word	0x2000043e
 800bf74:	2000044e 	.word	0x2000044e

0800bf78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	4613      	mov	r3, r2
 800bf84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	75fb      	strb	r3, [r7, #23]
 800bf8e:	e027      	b.n	800bfe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	0f1b      	lsrs	r3, r3, #28
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d80b      	bhi.n	800bfb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	0f1b      	lsrs	r3, r3, #28
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3230      	adds	r2, #48	; 0x30
 800bfaa:	b2d2      	uxtb	r2, r2
 800bfac:	701a      	strb	r2, [r3, #0]
 800bfae:	e00a      	b.n	800bfc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	0f1b      	lsrs	r3, r3, #28
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3237      	adds	r2, #55	; 0x37
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	011b      	lsls	r3, r3, #4
 800bfca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	005b      	lsls	r3, r3, #1
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	75fb      	strb	r3, [r7, #23]
 800bfe0:	7dfa      	ldrb	r2, [r7, #23]
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d3d3      	bcc.n	800bf90 <IntToUnicode+0x18>
  }
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
	...

0800bff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08a      	sub	sp, #40	; 0x28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c000:	f107 0314 	add.w	r3, r7, #20
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	609a      	str	r2, [r3, #8]
 800c00c:	60da      	str	r2, [r3, #12]
 800c00e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c018:	d13a      	bne.n	800c090 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c01a:	2300      	movs	r3, #0
 800c01c:	613b      	str	r3, [r7, #16]
 800c01e:	4b1e      	ldr	r3, [pc, #120]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c022:	4a1d      	ldr	r2, [pc, #116]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c024:	f043 0301 	orr.w	r3, r3, #1
 800c028:	6313      	str	r3, [r2, #48]	; 0x30
 800c02a:	4b1b      	ldr	r3, [pc, #108]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	613b      	str	r3, [r7, #16]
 800c034:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c036:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c03a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c03c:	2302      	movs	r3, #2
 800c03e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c040:	2300      	movs	r3, #0
 800c042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c044:	2303      	movs	r3, #3
 800c046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c048:	230a      	movs	r3, #10
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c04c:	f107 0314 	add.w	r3, r7, #20
 800c050:	4619      	mov	r1, r3
 800c052:	4812      	ldr	r0, [pc, #72]	; (800c09c <HAL_PCD_MspInit+0xa4>)
 800c054:	f7f7 f8be 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c058:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05c:	4a0e      	ldr	r2, [pc, #56]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c062:	6353      	str	r3, [r2, #52]	; 0x34
 800c064:	2300      	movs	r3, #0
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06c:	4a0a      	ldr	r2, [pc, #40]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c06e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c072:	6453      	str	r3, [r2, #68]	; 0x44
 800c074:	4b08      	ldr	r3, [pc, #32]	; (800c098 <HAL_PCD_MspInit+0xa0>)
 800c076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c080:	2200      	movs	r2, #0
 800c082:	2100      	movs	r1, #0
 800c084:	2043      	movs	r0, #67	; 0x43
 800c086:	f7f6 ffce 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c08a:	2043      	movs	r0, #67	; 0x43
 800c08c:	f7f6 ffe7 	bl	800305e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c090:	bf00      	nop
 800c092:	3728      	adds	r7, #40	; 0x28
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	40023800 	.word	0x40023800
 800c09c:	40020000 	.word	0x40020000

0800c0a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fe fbba 	bl	800a830 <USBD_LL_SetupStage>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	6879      	ldr	r1, [r7, #4]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	00db      	lsls	r3, r3, #3
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	78fb      	ldrb	r3, [r7, #3]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f7fe fbf4 	bl	800a8da <USBD_LL_DataOutStage>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	460b      	mov	r3, r1
 800c104:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c10c:	78fa      	ldrb	r2, [r7, #3]
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4613      	mov	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	440b      	add	r3, r1
 800c11a:	3348      	adds	r3, #72	; 0x48
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	4619      	mov	r1, r3
 800c122:	f7fe fc3d 	bl	800a9a0 <USBD_LL_DataInStage>
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fe fd51 	bl	800abe4 <USBD_LL_SOF>
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b084      	sub	sp, #16
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c152:	2301      	movs	r3, #1
 800c154:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d001      	beq.n	800c162 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c15e:	f7f5 f84b 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c168:	7bfa      	ldrb	r2, [r7, #15]
 800c16a:	4611      	mov	r1, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fcfb 	bl	800ab68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe fca7 	bl	800aacc <USBD_LL_Reset>
}
 800c17e:	bf00      	nop
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fcf6 	bl	800ab88 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6812      	ldr	r2, [r2, #0]
 800c1aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1ae:	f043 0301 	orr.w	r3, r3, #1
 800c1b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1bc:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <HAL_PCD_SuspendCallback+0x48>)
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	4a03      	ldr	r2, [pc, #12]	; (800c1d0 <HAL_PCD_SuspendCallback+0x48>)
 800c1c2:	f043 0306 	orr.w	r3, r3, #6
 800c1c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	e000ed00 	.word	0xe000ed00

0800c1d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fce6 	bl	800abb4 <USBD_LL_Resume>
}
 800c1e8:	bf00      	nop
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe fd34 	bl	800ac74 <USBD_LL_IsoOUTIncomplete>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fcfc 	bl	800ac28 <USBD_LL_IsoINIncomplete>
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fd3a 	bl	800acc0 <USBD_LL_DevConnected>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fd37 	bl	800acd6 <USBD_LL_DevDisconnected>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d13c      	bne.n	800c2fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c280:	4a20      	ldr	r2, [pc, #128]	; (800c304 <USBD_LL_Init+0x94>)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a1e      	ldr	r2, [pc, #120]	; (800c304 <USBD_LL_Init+0x94>)
 800c28c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c290:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <USBD_LL_Init+0x94>)
 800c292:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c296:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c298:	4b1a      	ldr	r3, [pc, #104]	; (800c304 <USBD_LL_Init+0x94>)
 800c29a:	2204      	movs	r2, #4
 800c29c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c29e:	4b19      	ldr	r3, [pc, #100]	; (800c304 <USBD_LL_Init+0x94>)
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2a4:	4b17      	ldr	r3, [pc, #92]	; (800c304 <USBD_LL_Init+0x94>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2aa:	4b16      	ldr	r3, [pc, #88]	; (800c304 <USBD_LL_Init+0x94>)
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2b0:	4b14      	ldr	r3, [pc, #80]	; (800c304 <USBD_LL_Init+0x94>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2b6:	4b13      	ldr	r3, [pc, #76]	; (800c304 <USBD_LL_Init+0x94>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2bc:	4b11      	ldr	r3, [pc, #68]	; (800c304 <USBD_LL_Init+0x94>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2c2:	4b10      	ldr	r3, [pc, #64]	; (800c304 <USBD_LL_Init+0x94>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	; (800c304 <USBD_LL_Init+0x94>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2ce:	480d      	ldr	r0, [pc, #52]	; (800c304 <USBD_LL_Init+0x94>)
 800c2d0:	f7f8 faf7 	bl	80048c2 <HAL_PCD_Init>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2da:	f7f4 ff8d 	bl	80011f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2de:	2180      	movs	r1, #128	; 0x80
 800c2e0:	4808      	ldr	r0, [pc, #32]	; (800c304 <USBD_LL_Init+0x94>)
 800c2e2:	f7f9 fc54 	bl	8005b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2e6:	2240      	movs	r2, #64	; 0x40
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	4806      	ldr	r0, [pc, #24]	; (800c304 <USBD_LL_Init+0x94>)
 800c2ec:	f7f9 fc08 	bl	8005b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2f0:	2280      	movs	r2, #128	; 0x80
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	4803      	ldr	r0, [pc, #12]	; (800c304 <USBD_LL_Init+0x94>)
 800c2f6:	f7f9 fc03 	bl	8005b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20001f34 	.word	0x20001f34

0800c308 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c314:	2300      	movs	r3, #0
 800c316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f8 fbec 	bl	8004afc <HAL_PCD_Start>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 f942 	bl	800c5b4 <USBD_Get_USB_Status>
 800c330:	4603      	mov	r3, r0
 800c332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c334:	7bbb      	ldrb	r3, [r7, #14]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	4608      	mov	r0, r1
 800c348:	4611      	mov	r1, r2
 800c34a:	461a      	mov	r2, r3
 800c34c:	4603      	mov	r3, r0
 800c34e:	70fb      	strb	r3, [r7, #3]
 800c350:	460b      	mov	r3, r1
 800c352:	70bb      	strb	r3, [r7, #2]
 800c354:	4613      	mov	r3, r2
 800c356:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c366:	78bb      	ldrb	r3, [r7, #2]
 800c368:	883a      	ldrh	r2, [r7, #0]
 800c36a:	78f9      	ldrb	r1, [r7, #3]
 800c36c:	f7f8 ffd0 	bl	8005310 <HAL_PCD_EP_Open>
 800c370:	4603      	mov	r3, r0
 800c372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	4618      	mov	r0, r3
 800c378:	f000 f91c 	bl	800c5b4 <USBD_Get_USB_Status>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c380:	7bbb      	ldrb	r3, [r7, #14]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	460b      	mov	r3, r1
 800c394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3a4:	78fa      	ldrb	r2, [r7, #3]
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7f9 f819 	bl	80053e0 <HAL_PCD_EP_Close>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f8fd 	bl	800c5b4 <USBD_Get_USB_Status>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3e2:	78fa      	ldrb	r2, [r7, #3]
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7f9 f8f1 	bl	80055ce <HAL_PCD_EP_SetStall>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f0:	7bfb      	ldrb	r3, [r7, #15]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 f8de 	bl	800c5b4 <USBD_Get_USB_Status>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	460b      	mov	r3, r1
 800c410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c420:	78fa      	ldrb	r2, [r7, #3]
 800c422:	4611      	mov	r1, r2
 800c424:	4618      	mov	r0, r3
 800c426:	f7f9 f936 	bl	8005696 <HAL_PCD_EP_ClrStall>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	4618      	mov	r0, r3
 800c432:	f000 f8bf 	bl	800c5b4 <USBD_Get_USB_Status>
 800c436:	4603      	mov	r3, r0
 800c438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	460b      	mov	r3, r1
 800c44e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c456:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	da0b      	bge.n	800c478 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c460:	78fb      	ldrb	r3, [r7, #3]
 800c462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	4613      	mov	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	1a9b      	subs	r3, r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	440b      	add	r3, r1
 800c472:	333e      	adds	r3, #62	; 0x3e
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	e00b      	b.n	800c490 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	4613      	mov	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	1a9b      	subs	r3, r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c48e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4b6:	78fa      	ldrb	r2, [r7, #3]
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7f8 ff03 	bl	80052c6 <HAL_PCD_SetAddress>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f874 	bl	800c5b4 <USBD_Get_USB_Status>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b086      	sub	sp, #24
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	60f8      	str	r0, [r7, #12]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4f8:	7af9      	ldrb	r1, [r7, #11]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	f7f9 f81c 	bl	800553a <HAL_PCD_EP_Transmit>
 800c502:	4603      	mov	r3, r0
 800c504:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c506:	7dfb      	ldrb	r3, [r7, #23]
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 f853 	bl	800c5b4 <USBD_Get_USB_Status>
 800c50e:	4603      	mov	r3, r0
 800c510:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c512:	7dbb      	ldrb	r3, [r7, #22]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	607a      	str	r2, [r7, #4]
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	460b      	mov	r3, r1
 800c52a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c53a:	7af9      	ldrb	r1, [r7, #11]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	f7f8 ff98 	bl	8005474 <HAL_PCD_EP_Receive>
 800c544:	4603      	mov	r3, r0
 800c546:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c548:	7dfb      	ldrb	r3, [r7, #23]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 f832 	bl	800c5b4 <USBD_Get_USB_Status>
 800c550:	4603      	mov	r3, r0
 800c552:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c554:	7dbb      	ldrb	r3, [r7, #22]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b082      	sub	sp, #8
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	460b      	mov	r3, r1
 800c568:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c570:	78fa      	ldrb	r2, [r7, #3]
 800c572:	4611      	mov	r1, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f7f8 ffc8 	bl	800550a <HAL_PCD_EP_GetRxCount>
 800c57a:	4603      	mov	r3, r0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c58c:	4b03      	ldr	r3, [pc, #12]	; (800c59c <USBD_static_malloc+0x18>)
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	200004e8 	.word	0x200004e8

0800c5a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]

}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d817      	bhi.n	800c5f8 <USBD_Get_USB_Status+0x44>
 800c5c8:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <USBD_Get_USB_Status+0x1c>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c5e1 	.word	0x0800c5e1
 800c5d4:	0800c5e7 	.word	0x0800c5e7
 800c5d8:	0800c5ed 	.word	0x0800c5ed
 800c5dc:	0800c5f3 	.word	0x0800c5f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e4:	e00b      	b.n	800c5fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ea:	e008      	b.n	800c5fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f0:	e005      	b.n	800c5fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f6:	e002      	b.n	800c5fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5fc:	bf00      	nop
  }
  return usb_status;
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <__errno>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	; (800c614 <__errno+0x8>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000458 	.word	0x20000458

0800c618 <__libc_init_array>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	4d0d      	ldr	r5, [pc, #52]	; (800c650 <__libc_init_array+0x38>)
 800c61c:	4c0d      	ldr	r4, [pc, #52]	; (800c654 <__libc_init_array+0x3c>)
 800c61e:	1b64      	subs	r4, r4, r5
 800c620:	10a4      	asrs	r4, r4, #2
 800c622:	2600      	movs	r6, #0
 800c624:	42a6      	cmp	r6, r4
 800c626:	d109      	bne.n	800c63c <__libc_init_array+0x24>
 800c628:	4d0b      	ldr	r5, [pc, #44]	; (800c658 <__libc_init_array+0x40>)
 800c62a:	4c0c      	ldr	r4, [pc, #48]	; (800c65c <__libc_init_array+0x44>)
 800c62c:	f000 fc98 	bl	800cf60 <_init>
 800c630:	1b64      	subs	r4, r4, r5
 800c632:	10a4      	asrs	r4, r4, #2
 800c634:	2600      	movs	r6, #0
 800c636:	42a6      	cmp	r6, r4
 800c638:	d105      	bne.n	800c646 <__libc_init_array+0x2e>
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c640:	4798      	blx	r3
 800c642:	3601      	adds	r6, #1
 800c644:	e7ee      	b.n	800c624 <__libc_init_array+0xc>
 800c646:	f855 3b04 	ldr.w	r3, [r5], #4
 800c64a:	4798      	blx	r3
 800c64c:	3601      	adds	r6, #1
 800c64e:	e7f2      	b.n	800c636 <__libc_init_array+0x1e>
 800c650:	0800d0d0 	.word	0x0800d0d0
 800c654:	0800d0d0 	.word	0x0800d0d0
 800c658:	0800d0d0 	.word	0x0800d0d0
 800c65c:	0800d0d4 	.word	0x0800d0d4

0800c660 <malloc>:
 800c660:	4b02      	ldr	r3, [pc, #8]	; (800c66c <malloc+0xc>)
 800c662:	4601      	mov	r1, r0
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	f000 b871 	b.w	800c74c <_malloc_r>
 800c66a:	bf00      	nop
 800c66c:	20000458 	.word	0x20000458

0800c670 <free>:
 800c670:	4b02      	ldr	r3, [pc, #8]	; (800c67c <free+0xc>)
 800c672:	4601      	mov	r1, r0
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	f000 b819 	b.w	800c6ac <_free_r>
 800c67a:	bf00      	nop
 800c67c:	20000458 	.word	0x20000458

0800c680 <memcpy>:
 800c680:	440a      	add	r2, r1
 800c682:	4291      	cmp	r1, r2
 800c684:	f100 33ff 	add.w	r3, r0, #4294967295
 800c688:	d100      	bne.n	800c68c <memcpy+0xc>
 800c68a:	4770      	bx	lr
 800c68c:	b510      	push	{r4, lr}
 800c68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c696:	4291      	cmp	r1, r2
 800c698:	d1f9      	bne.n	800c68e <memcpy+0xe>
 800c69a:	bd10      	pop	{r4, pc}

0800c69c <memset>:
 800c69c:	4402      	add	r2, r0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d100      	bne.n	800c6a6 <memset+0xa>
 800c6a4:	4770      	bx	lr
 800c6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6aa:	e7f9      	b.n	800c6a0 <memset+0x4>

0800c6ac <_free_r>:
 800c6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	d048      	beq.n	800c744 <_free_r+0x98>
 800c6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b6:	9001      	str	r0, [sp, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c6be:	bfb8      	it	lt
 800c6c0:	18e4      	addlt	r4, r4, r3
 800c6c2:	f000 f907 	bl	800c8d4 <__malloc_lock>
 800c6c6:	4a20      	ldr	r2, [pc, #128]	; (800c748 <_free_r+0x9c>)
 800c6c8:	9801      	ldr	r0, [sp, #4]
 800c6ca:	6813      	ldr	r3, [r2, #0]
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	b933      	cbnz	r3, 800c6de <_free_r+0x32>
 800c6d0:	6063      	str	r3, [r4, #4]
 800c6d2:	6014      	str	r4, [r2, #0]
 800c6d4:	b003      	add	sp, #12
 800c6d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6da:	f000 b901 	b.w	800c8e0 <__malloc_unlock>
 800c6de:	42a3      	cmp	r3, r4
 800c6e0:	d90b      	bls.n	800c6fa <_free_r+0x4e>
 800c6e2:	6821      	ldr	r1, [r4, #0]
 800c6e4:	1862      	adds	r2, r4, r1
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	bf04      	itt	eq
 800c6ea:	681a      	ldreq	r2, [r3, #0]
 800c6ec:	685b      	ldreq	r3, [r3, #4]
 800c6ee:	6063      	str	r3, [r4, #4]
 800c6f0:	bf04      	itt	eq
 800c6f2:	1852      	addeq	r2, r2, r1
 800c6f4:	6022      	streq	r2, [r4, #0]
 800c6f6:	602c      	str	r4, [r5, #0]
 800c6f8:	e7ec      	b.n	800c6d4 <_free_r+0x28>
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b10b      	cbz	r3, 800c704 <_free_r+0x58>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d9fa      	bls.n	800c6fa <_free_r+0x4e>
 800c704:	6811      	ldr	r1, [r2, #0]
 800c706:	1855      	adds	r5, r2, r1
 800c708:	42a5      	cmp	r5, r4
 800c70a:	d10b      	bne.n	800c724 <_free_r+0x78>
 800c70c:	6824      	ldr	r4, [r4, #0]
 800c70e:	4421      	add	r1, r4
 800c710:	1854      	adds	r4, r2, r1
 800c712:	42a3      	cmp	r3, r4
 800c714:	6011      	str	r1, [r2, #0]
 800c716:	d1dd      	bne.n	800c6d4 <_free_r+0x28>
 800c718:	681c      	ldr	r4, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	6053      	str	r3, [r2, #4]
 800c71e:	4421      	add	r1, r4
 800c720:	6011      	str	r1, [r2, #0]
 800c722:	e7d7      	b.n	800c6d4 <_free_r+0x28>
 800c724:	d902      	bls.n	800c72c <_free_r+0x80>
 800c726:	230c      	movs	r3, #12
 800c728:	6003      	str	r3, [r0, #0]
 800c72a:	e7d3      	b.n	800c6d4 <_free_r+0x28>
 800c72c:	6825      	ldr	r5, [r4, #0]
 800c72e:	1961      	adds	r1, r4, r5
 800c730:	428b      	cmp	r3, r1
 800c732:	bf04      	itt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	bf04      	itt	eq
 800c73c:	1949      	addeq	r1, r1, r5
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	6054      	str	r4, [r2, #4]
 800c742:	e7c7      	b.n	800c6d4 <_free_r+0x28>
 800c744:	b003      	add	sp, #12
 800c746:	bd30      	pop	{r4, r5, pc}
 800c748:	20000708 	.word	0x20000708

0800c74c <_malloc_r>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	1ccd      	adds	r5, r1, #3
 800c750:	f025 0503 	bic.w	r5, r5, #3
 800c754:	3508      	adds	r5, #8
 800c756:	2d0c      	cmp	r5, #12
 800c758:	bf38      	it	cc
 800c75a:	250c      	movcc	r5, #12
 800c75c:	2d00      	cmp	r5, #0
 800c75e:	4606      	mov	r6, r0
 800c760:	db01      	blt.n	800c766 <_malloc_r+0x1a>
 800c762:	42a9      	cmp	r1, r5
 800c764:	d903      	bls.n	800c76e <_malloc_r+0x22>
 800c766:	230c      	movs	r3, #12
 800c768:	6033      	str	r3, [r6, #0]
 800c76a:	2000      	movs	r0, #0
 800c76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c76e:	f000 f8b1 	bl	800c8d4 <__malloc_lock>
 800c772:	4921      	ldr	r1, [pc, #132]	; (800c7f8 <_malloc_r+0xac>)
 800c774:	680a      	ldr	r2, [r1, #0]
 800c776:	4614      	mov	r4, r2
 800c778:	b99c      	cbnz	r4, 800c7a2 <_malloc_r+0x56>
 800c77a:	4f20      	ldr	r7, [pc, #128]	; (800c7fc <_malloc_r+0xb0>)
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	b923      	cbnz	r3, 800c78a <_malloc_r+0x3e>
 800c780:	4621      	mov	r1, r4
 800c782:	4630      	mov	r0, r6
 800c784:	f000 f83c 	bl	800c800 <_sbrk_r>
 800c788:	6038      	str	r0, [r7, #0]
 800c78a:	4629      	mov	r1, r5
 800c78c:	4630      	mov	r0, r6
 800c78e:	f000 f837 	bl	800c800 <_sbrk_r>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d123      	bne.n	800c7de <_malloc_r+0x92>
 800c796:	230c      	movs	r3, #12
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 f8a0 	bl	800c8e0 <__malloc_unlock>
 800c7a0:	e7e3      	b.n	800c76a <_malloc_r+0x1e>
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	1b5b      	subs	r3, r3, r5
 800c7a6:	d417      	bmi.n	800c7d8 <_malloc_r+0x8c>
 800c7a8:	2b0b      	cmp	r3, #11
 800c7aa:	d903      	bls.n	800c7b4 <_malloc_r+0x68>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	441c      	add	r4, r3
 800c7b0:	6025      	str	r5, [r4, #0]
 800c7b2:	e004      	b.n	800c7be <_malloc_r+0x72>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	42a2      	cmp	r2, r4
 800c7b8:	bf0c      	ite	eq
 800c7ba:	600b      	streq	r3, [r1, #0]
 800c7bc:	6053      	strne	r3, [r2, #4]
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f000 f88e 	bl	800c8e0 <__malloc_unlock>
 800c7c4:	f104 000b 	add.w	r0, r4, #11
 800c7c8:	1d23      	adds	r3, r4, #4
 800c7ca:	f020 0007 	bic.w	r0, r0, #7
 800c7ce:	1ac2      	subs	r2, r0, r3
 800c7d0:	d0cc      	beq.n	800c76c <_malloc_r+0x20>
 800c7d2:	1a1b      	subs	r3, r3, r0
 800c7d4:	50a3      	str	r3, [r4, r2]
 800c7d6:	e7c9      	b.n	800c76c <_malloc_r+0x20>
 800c7d8:	4622      	mov	r2, r4
 800c7da:	6864      	ldr	r4, [r4, #4]
 800c7dc:	e7cc      	b.n	800c778 <_malloc_r+0x2c>
 800c7de:	1cc4      	adds	r4, r0, #3
 800c7e0:	f024 0403 	bic.w	r4, r4, #3
 800c7e4:	42a0      	cmp	r0, r4
 800c7e6:	d0e3      	beq.n	800c7b0 <_malloc_r+0x64>
 800c7e8:	1a21      	subs	r1, r4, r0
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f000 f808 	bl	800c800 <_sbrk_r>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d1dd      	bne.n	800c7b0 <_malloc_r+0x64>
 800c7f4:	e7cf      	b.n	800c796 <_malloc_r+0x4a>
 800c7f6:	bf00      	nop
 800c7f8:	20000708 	.word	0x20000708
 800c7fc:	2000070c 	.word	0x2000070c

0800c800 <_sbrk_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4d06      	ldr	r5, [pc, #24]	; (800c81c <_sbrk_r+0x1c>)
 800c804:	2300      	movs	r3, #0
 800c806:	4604      	mov	r4, r0
 800c808:	4608      	mov	r0, r1
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	f7f4 fe52 	bl	80014b4 <_sbrk>
 800c810:	1c43      	adds	r3, r0, #1
 800c812:	d102      	bne.n	800c81a <_sbrk_r+0x1a>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	b103      	cbz	r3, 800c81a <_sbrk_r+0x1a>
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
 800c81c:	2000233c 	.word	0x2000233c

0800c820 <siprintf>:
 800c820:	b40e      	push	{r1, r2, r3}
 800c822:	b500      	push	{lr}
 800c824:	b09c      	sub	sp, #112	; 0x70
 800c826:	ab1d      	add	r3, sp, #116	; 0x74
 800c828:	9002      	str	r0, [sp, #8]
 800c82a:	9006      	str	r0, [sp, #24]
 800c82c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c830:	4809      	ldr	r0, [pc, #36]	; (800c858 <siprintf+0x38>)
 800c832:	9107      	str	r1, [sp, #28]
 800c834:	9104      	str	r1, [sp, #16]
 800c836:	4909      	ldr	r1, [pc, #36]	; (800c85c <siprintf+0x3c>)
 800c838:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83c:	9105      	str	r1, [sp, #20]
 800c83e:	6800      	ldr	r0, [r0, #0]
 800c840:	9301      	str	r3, [sp, #4]
 800c842:	a902      	add	r1, sp, #8
 800c844:	f000 f8ae 	bl	800c9a4 <_svfiprintf_r>
 800c848:	9b02      	ldr	r3, [sp, #8]
 800c84a:	2200      	movs	r2, #0
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	b01c      	add	sp, #112	; 0x70
 800c850:	f85d eb04 	ldr.w	lr, [sp], #4
 800c854:	b003      	add	sp, #12
 800c856:	4770      	bx	lr
 800c858:	20000458 	.word	0x20000458
 800c85c:	ffff0208 	.word	0xffff0208

0800c860 <_vsniprintf_r>:
 800c860:	b530      	push	{r4, r5, lr}
 800c862:	1e14      	subs	r4, r2, #0
 800c864:	4605      	mov	r5, r0
 800c866:	b09b      	sub	sp, #108	; 0x6c
 800c868:	4618      	mov	r0, r3
 800c86a:	da05      	bge.n	800c878 <_vsniprintf_r+0x18>
 800c86c:	238b      	movs	r3, #139	; 0x8b
 800c86e:	602b      	str	r3, [r5, #0]
 800c870:	f04f 30ff 	mov.w	r0, #4294967295
 800c874:	b01b      	add	sp, #108	; 0x6c
 800c876:	bd30      	pop	{r4, r5, pc}
 800c878:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c87c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c880:	bf14      	ite	ne
 800c882:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c886:	4623      	moveq	r3, r4
 800c888:	9302      	str	r3, [sp, #8]
 800c88a:	9305      	str	r3, [sp, #20]
 800c88c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c890:	9100      	str	r1, [sp, #0]
 800c892:	9104      	str	r1, [sp, #16]
 800c894:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c898:	4602      	mov	r2, r0
 800c89a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c89c:	4669      	mov	r1, sp
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f000 f880 	bl	800c9a4 <_svfiprintf_r>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	bfbc      	itt	lt
 800c8a8:	238b      	movlt	r3, #139	; 0x8b
 800c8aa:	602b      	strlt	r3, [r5, #0]
 800c8ac:	2c00      	cmp	r4, #0
 800c8ae:	d0e1      	beq.n	800c874 <_vsniprintf_r+0x14>
 800c8b0:	9b00      	ldr	r3, [sp, #0]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	701a      	strb	r2, [r3, #0]
 800c8b6:	e7dd      	b.n	800c874 <_vsniprintf_r+0x14>

0800c8b8 <vsniprintf>:
 800c8b8:	b507      	push	{r0, r1, r2, lr}
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	460a      	mov	r2, r1
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	4803      	ldr	r0, [pc, #12]	; (800c8d0 <vsniprintf+0x18>)
 800c8c4:	6800      	ldr	r0, [r0, #0]
 800c8c6:	f7ff ffcb 	bl	800c860 <_vsniprintf_r>
 800c8ca:	b003      	add	sp, #12
 800c8cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8d0:	20000458 	.word	0x20000458

0800c8d4 <__malloc_lock>:
 800c8d4:	4801      	ldr	r0, [pc, #4]	; (800c8dc <__malloc_lock+0x8>)
 800c8d6:	f000 baf9 	b.w	800cecc <__retarget_lock_acquire_recursive>
 800c8da:	bf00      	nop
 800c8dc:	20002344 	.word	0x20002344

0800c8e0 <__malloc_unlock>:
 800c8e0:	4801      	ldr	r0, [pc, #4]	; (800c8e8 <__malloc_unlock+0x8>)
 800c8e2:	f000 baf4 	b.w	800cece <__retarget_lock_release_recursive>
 800c8e6:	bf00      	nop
 800c8e8:	20002344 	.word	0x20002344

0800c8ec <__ssputs_r>:
 800c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	688e      	ldr	r6, [r1, #8]
 800c8f2:	429e      	cmp	r6, r3
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4690      	mov	r8, r2
 800c8fa:	461f      	mov	r7, r3
 800c8fc:	d838      	bhi.n	800c970 <__ssputs_r+0x84>
 800c8fe:	898a      	ldrh	r2, [r1, #12]
 800c900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c904:	d032      	beq.n	800c96c <__ssputs_r+0x80>
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	6909      	ldr	r1, [r1, #16]
 800c90a:	eba5 0901 	sub.w	r9, r5, r1
 800c90e:	6965      	ldr	r5, [r4, #20]
 800c910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c918:	3301      	adds	r3, #1
 800c91a:	444b      	add	r3, r9
 800c91c:	106d      	asrs	r5, r5, #1
 800c91e:	429d      	cmp	r5, r3
 800c920:	bf38      	it	cc
 800c922:	461d      	movcc	r5, r3
 800c924:	0553      	lsls	r3, r2, #21
 800c926:	d531      	bpl.n	800c98c <__ssputs_r+0xa0>
 800c928:	4629      	mov	r1, r5
 800c92a:	f7ff ff0f 	bl	800c74c <_malloc_r>
 800c92e:	4606      	mov	r6, r0
 800c930:	b950      	cbnz	r0, 800c948 <__ssputs_r+0x5c>
 800c932:	230c      	movs	r3, #12
 800c934:	f8ca 3000 	str.w	r3, [sl]
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c948:	6921      	ldr	r1, [r4, #16]
 800c94a:	464a      	mov	r2, r9
 800c94c:	f7ff fe98 	bl	800c680 <memcpy>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c95a:	81a3      	strh	r3, [r4, #12]
 800c95c:	6126      	str	r6, [r4, #16]
 800c95e:	6165      	str	r5, [r4, #20]
 800c960:	444e      	add	r6, r9
 800c962:	eba5 0509 	sub.w	r5, r5, r9
 800c966:	6026      	str	r6, [r4, #0]
 800c968:	60a5      	str	r5, [r4, #8]
 800c96a:	463e      	mov	r6, r7
 800c96c:	42be      	cmp	r6, r7
 800c96e:	d900      	bls.n	800c972 <__ssputs_r+0x86>
 800c970:	463e      	mov	r6, r7
 800c972:	4632      	mov	r2, r6
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	4641      	mov	r1, r8
 800c978:	f000 faaa 	bl	800ced0 <memmove>
 800c97c:	68a3      	ldr	r3, [r4, #8]
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	1b9b      	subs	r3, r3, r6
 800c982:	4432      	add	r2, r6
 800c984:	60a3      	str	r3, [r4, #8]
 800c986:	6022      	str	r2, [r4, #0]
 800c988:	2000      	movs	r0, #0
 800c98a:	e7db      	b.n	800c944 <__ssputs_r+0x58>
 800c98c:	462a      	mov	r2, r5
 800c98e:	f000 fab9 	bl	800cf04 <_realloc_r>
 800c992:	4606      	mov	r6, r0
 800c994:	2800      	cmp	r0, #0
 800c996:	d1e1      	bne.n	800c95c <__ssputs_r+0x70>
 800c998:	6921      	ldr	r1, [r4, #16]
 800c99a:	4650      	mov	r0, sl
 800c99c:	f7ff fe86 	bl	800c6ac <_free_r>
 800c9a0:	e7c7      	b.n	800c932 <__ssputs_r+0x46>
	...

0800c9a4 <_svfiprintf_r>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4698      	mov	r8, r3
 800c9aa:	898b      	ldrh	r3, [r1, #12]
 800c9ac:	061b      	lsls	r3, r3, #24
 800c9ae:	b09d      	sub	sp, #116	; 0x74
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	d50e      	bpl.n	800c9d6 <_svfiprintf_r+0x32>
 800c9b8:	690b      	ldr	r3, [r1, #16]
 800c9ba:	b963      	cbnz	r3, 800c9d6 <_svfiprintf_r+0x32>
 800c9bc:	2140      	movs	r1, #64	; 0x40
 800c9be:	f7ff fec5 	bl	800c74c <_malloc_r>
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	6128      	str	r0, [r5, #16]
 800c9c6:	b920      	cbnz	r0, 800c9d2 <_svfiprintf_r+0x2e>
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	603b      	str	r3, [r7, #0]
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	e0d1      	b.n	800cb76 <_svfiprintf_r+0x1d2>
 800c9d2:	2340      	movs	r3, #64	; 0x40
 800c9d4:	616b      	str	r3, [r5, #20]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9da:	2320      	movs	r3, #32
 800c9dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e4:	2330      	movs	r3, #48	; 0x30
 800c9e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb90 <_svfiprintf_r+0x1ec>
 800c9ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ee:	f04f 0901 	mov.w	r9, #1
 800c9f2:	4623      	mov	r3, r4
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fa:	b10a      	cbz	r2, 800ca00 <_svfiprintf_r+0x5c>
 800c9fc:	2a25      	cmp	r2, #37	; 0x25
 800c9fe:	d1f9      	bne.n	800c9f4 <_svfiprintf_r+0x50>
 800ca00:	ebba 0b04 	subs.w	fp, sl, r4
 800ca04:	d00b      	beq.n	800ca1e <_svfiprintf_r+0x7a>
 800ca06:	465b      	mov	r3, fp
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff ff6d 	bl	800c8ec <__ssputs_r>
 800ca12:	3001      	adds	r0, #1
 800ca14:	f000 80aa 	beq.w	800cb6c <_svfiprintf_r+0x1c8>
 800ca18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca1a:	445a      	add	r2, fp
 800ca1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ca1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 80a2 	beq.w	800cb6c <_svfiprintf_r+0x1c8>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca32:	f10a 0a01 	add.w	sl, sl, #1
 800ca36:	9304      	str	r3, [sp, #16]
 800ca38:	9307      	str	r3, [sp, #28]
 800ca3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ca40:	4654      	mov	r4, sl
 800ca42:	2205      	movs	r2, #5
 800ca44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca48:	4851      	ldr	r0, [pc, #324]	; (800cb90 <_svfiprintf_r+0x1ec>)
 800ca4a:	f7f3 fbd1 	bl	80001f0 <memchr>
 800ca4e:	9a04      	ldr	r2, [sp, #16]
 800ca50:	b9d8      	cbnz	r0, 800ca8a <_svfiprintf_r+0xe6>
 800ca52:	06d0      	lsls	r0, r2, #27
 800ca54:	bf44      	itt	mi
 800ca56:	2320      	movmi	r3, #32
 800ca58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca5c:	0711      	lsls	r1, r2, #28
 800ca5e:	bf44      	itt	mi
 800ca60:	232b      	movmi	r3, #43	; 0x2b
 800ca62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca66:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca6c:	d015      	beq.n	800ca9a <_svfiprintf_r+0xf6>
 800ca6e:	9a07      	ldr	r2, [sp, #28]
 800ca70:	4654      	mov	r4, sl
 800ca72:	2000      	movs	r0, #0
 800ca74:	f04f 0c0a 	mov.w	ip, #10
 800ca78:	4621      	mov	r1, r4
 800ca7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7e:	3b30      	subs	r3, #48	; 0x30
 800ca80:	2b09      	cmp	r3, #9
 800ca82:	d94e      	bls.n	800cb22 <_svfiprintf_r+0x17e>
 800ca84:	b1b0      	cbz	r0, 800cab4 <_svfiprintf_r+0x110>
 800ca86:	9207      	str	r2, [sp, #28]
 800ca88:	e014      	b.n	800cab4 <_svfiprintf_r+0x110>
 800ca8a:	eba0 0308 	sub.w	r3, r0, r8
 800ca8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca92:	4313      	orrs	r3, r2
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	46a2      	mov	sl, r4
 800ca98:	e7d2      	b.n	800ca40 <_svfiprintf_r+0x9c>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	1d19      	adds	r1, r3, #4
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	9103      	str	r1, [sp, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bfbb      	ittet	lt
 800caa6:	425b      	neglt	r3, r3
 800caa8:	f042 0202 	orrlt.w	r2, r2, #2
 800caac:	9307      	strge	r3, [sp, #28]
 800caae:	9307      	strlt	r3, [sp, #28]
 800cab0:	bfb8      	it	lt
 800cab2:	9204      	strlt	r2, [sp, #16]
 800cab4:	7823      	ldrb	r3, [r4, #0]
 800cab6:	2b2e      	cmp	r3, #46	; 0x2e
 800cab8:	d10c      	bne.n	800cad4 <_svfiprintf_r+0x130>
 800caba:	7863      	ldrb	r3, [r4, #1]
 800cabc:	2b2a      	cmp	r3, #42	; 0x2a
 800cabe:	d135      	bne.n	800cb2c <_svfiprintf_r+0x188>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	9203      	str	r2, [sp, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	bfb8      	it	lt
 800cacc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cad0:	3402      	adds	r4, #2
 800cad2:	9305      	str	r3, [sp, #20]
 800cad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cba0 <_svfiprintf_r+0x1fc>
 800cad8:	7821      	ldrb	r1, [r4, #0]
 800cada:	2203      	movs	r2, #3
 800cadc:	4650      	mov	r0, sl
 800cade:	f7f3 fb87 	bl	80001f0 <memchr>
 800cae2:	b140      	cbz	r0, 800caf6 <_svfiprintf_r+0x152>
 800cae4:	2340      	movs	r3, #64	; 0x40
 800cae6:	eba0 000a 	sub.w	r0, r0, sl
 800caea:	fa03 f000 	lsl.w	r0, r3, r0
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	4303      	orrs	r3, r0
 800caf2:	3401      	adds	r4, #1
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cafa:	4826      	ldr	r0, [pc, #152]	; (800cb94 <_svfiprintf_r+0x1f0>)
 800cafc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb00:	2206      	movs	r2, #6
 800cb02:	f7f3 fb75 	bl	80001f0 <memchr>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d038      	beq.n	800cb7c <_svfiprintf_r+0x1d8>
 800cb0a:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <_svfiprintf_r+0x1f4>)
 800cb0c:	bb1b      	cbnz	r3, 800cb56 <_svfiprintf_r+0x1b2>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	3307      	adds	r3, #7
 800cb12:	f023 0307 	bic.w	r3, r3, #7
 800cb16:	3308      	adds	r3, #8
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1c:	4433      	add	r3, r6
 800cb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb20:	e767      	b.n	800c9f2 <_svfiprintf_r+0x4e>
 800cb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb26:	460c      	mov	r4, r1
 800cb28:	2001      	movs	r0, #1
 800cb2a:	e7a5      	b.n	800ca78 <_svfiprintf_r+0xd4>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	3401      	adds	r4, #1
 800cb30:	9305      	str	r3, [sp, #20]
 800cb32:	4619      	mov	r1, r3
 800cb34:	f04f 0c0a 	mov.w	ip, #10
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3e:	3a30      	subs	r2, #48	; 0x30
 800cb40:	2a09      	cmp	r2, #9
 800cb42:	d903      	bls.n	800cb4c <_svfiprintf_r+0x1a8>
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0c5      	beq.n	800cad4 <_svfiprintf_r+0x130>
 800cb48:	9105      	str	r1, [sp, #20]
 800cb4a:	e7c3      	b.n	800cad4 <_svfiprintf_r+0x130>
 800cb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb50:	4604      	mov	r4, r0
 800cb52:	2301      	movs	r3, #1
 800cb54:	e7f0      	b.n	800cb38 <_svfiprintf_r+0x194>
 800cb56:	ab03      	add	r3, sp, #12
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <_svfiprintf_r+0x1f8>)
 800cb5e:	a904      	add	r1, sp, #16
 800cb60:	4638      	mov	r0, r7
 800cb62:	f3af 8000 	nop.w
 800cb66:	1c42      	adds	r2, r0, #1
 800cb68:	4606      	mov	r6, r0
 800cb6a:	d1d6      	bne.n	800cb1a <_svfiprintf_r+0x176>
 800cb6c:	89ab      	ldrh	r3, [r5, #12]
 800cb6e:	065b      	lsls	r3, r3, #25
 800cb70:	f53f af2c 	bmi.w	800c9cc <_svfiprintf_r+0x28>
 800cb74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb76:	b01d      	add	sp, #116	; 0x74
 800cb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <_svfiprintf_r+0x1f8>)
 800cb84:	a904      	add	r1, sp, #16
 800cb86:	4638      	mov	r0, r7
 800cb88:	f000 f87a 	bl	800cc80 <_printf_i>
 800cb8c:	e7eb      	b.n	800cb66 <_svfiprintf_r+0x1c2>
 800cb8e:	bf00      	nop
 800cb90:	0800d094 	.word	0x0800d094
 800cb94:	0800d09e 	.word	0x0800d09e
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	0800c8ed 	.word	0x0800c8ed
 800cba0:	0800d09a 	.word	0x0800d09a

0800cba4 <_printf_common>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	4616      	mov	r6, r2
 800cbaa:	4699      	mov	r9, r3
 800cbac:	688a      	ldr	r2, [r1, #8]
 800cbae:	690b      	ldr	r3, [r1, #16]
 800cbb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	bfb8      	it	lt
 800cbb8:	4613      	movlt	r3, r2
 800cbba:	6033      	str	r3, [r6, #0]
 800cbbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	b10a      	cbz	r2, 800cbca <_printf_common+0x26>
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	6033      	str	r3, [r6, #0]
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	0699      	lsls	r1, r3, #26
 800cbce:	bf42      	ittt	mi
 800cbd0:	6833      	ldrmi	r3, [r6, #0]
 800cbd2:	3302      	addmi	r3, #2
 800cbd4:	6033      	strmi	r3, [r6, #0]
 800cbd6:	6825      	ldr	r5, [r4, #0]
 800cbd8:	f015 0506 	ands.w	r5, r5, #6
 800cbdc:	d106      	bne.n	800cbec <_printf_common+0x48>
 800cbde:	f104 0a19 	add.w	sl, r4, #25
 800cbe2:	68e3      	ldr	r3, [r4, #12]
 800cbe4:	6832      	ldr	r2, [r6, #0]
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	dc26      	bgt.n	800cc3a <_printf_common+0x96>
 800cbec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbf0:	1e13      	subs	r3, r2, #0
 800cbf2:	6822      	ldr	r2, [r4, #0]
 800cbf4:	bf18      	it	ne
 800cbf6:	2301      	movne	r3, #1
 800cbf8:	0692      	lsls	r2, r2, #26
 800cbfa:	d42b      	bmi.n	800cc54 <_printf_common+0xb0>
 800cbfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc00:	4649      	mov	r1, r9
 800cc02:	4638      	mov	r0, r7
 800cc04:	47c0      	blx	r8
 800cc06:	3001      	adds	r0, #1
 800cc08:	d01e      	beq.n	800cc48 <_printf_common+0xa4>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	68e5      	ldr	r5, [r4, #12]
 800cc0e:	6832      	ldr	r2, [r6, #0]
 800cc10:	f003 0306 	and.w	r3, r3, #6
 800cc14:	2b04      	cmp	r3, #4
 800cc16:	bf08      	it	eq
 800cc18:	1aad      	subeq	r5, r5, r2
 800cc1a:	68a3      	ldr	r3, [r4, #8]
 800cc1c:	6922      	ldr	r2, [r4, #16]
 800cc1e:	bf0c      	ite	eq
 800cc20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc24:	2500      	movne	r5, #0
 800cc26:	4293      	cmp	r3, r2
 800cc28:	bfc4      	itt	gt
 800cc2a:	1a9b      	subgt	r3, r3, r2
 800cc2c:	18ed      	addgt	r5, r5, r3
 800cc2e:	2600      	movs	r6, #0
 800cc30:	341a      	adds	r4, #26
 800cc32:	42b5      	cmp	r5, r6
 800cc34:	d11a      	bne.n	800cc6c <_printf_common+0xc8>
 800cc36:	2000      	movs	r0, #0
 800cc38:	e008      	b.n	800cc4c <_printf_common+0xa8>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	4652      	mov	r2, sl
 800cc3e:	4649      	mov	r1, r9
 800cc40:	4638      	mov	r0, r7
 800cc42:	47c0      	blx	r8
 800cc44:	3001      	adds	r0, #1
 800cc46:	d103      	bne.n	800cc50 <_printf_common+0xac>
 800cc48:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc50:	3501      	adds	r5, #1
 800cc52:	e7c6      	b.n	800cbe2 <_printf_common+0x3e>
 800cc54:	18e1      	adds	r1, r4, r3
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	2030      	movs	r0, #48	; 0x30
 800cc5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc5e:	4422      	add	r2, r4
 800cc60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc68:	3302      	adds	r3, #2
 800cc6a:	e7c7      	b.n	800cbfc <_printf_common+0x58>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4649      	mov	r1, r9
 800cc72:	4638      	mov	r0, r7
 800cc74:	47c0      	blx	r8
 800cc76:	3001      	adds	r0, #1
 800cc78:	d0e6      	beq.n	800cc48 <_printf_common+0xa4>
 800cc7a:	3601      	adds	r6, #1
 800cc7c:	e7d9      	b.n	800cc32 <_printf_common+0x8e>
	...

0800cc80 <_printf_i>:
 800cc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc84:	460c      	mov	r4, r1
 800cc86:	4691      	mov	r9, r2
 800cc88:	7e27      	ldrb	r7, [r4, #24]
 800cc8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc8c:	2f78      	cmp	r7, #120	; 0x78
 800cc8e:	4680      	mov	r8, r0
 800cc90:	469a      	mov	sl, r3
 800cc92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc96:	d807      	bhi.n	800cca8 <_printf_i+0x28>
 800cc98:	2f62      	cmp	r7, #98	; 0x62
 800cc9a:	d80a      	bhi.n	800ccb2 <_printf_i+0x32>
 800cc9c:	2f00      	cmp	r7, #0
 800cc9e:	f000 80d8 	beq.w	800ce52 <_printf_i+0x1d2>
 800cca2:	2f58      	cmp	r7, #88	; 0x58
 800cca4:	f000 80a3 	beq.w	800cdee <_printf_i+0x16e>
 800cca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccb0:	e03a      	b.n	800cd28 <_printf_i+0xa8>
 800ccb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccb6:	2b15      	cmp	r3, #21
 800ccb8:	d8f6      	bhi.n	800cca8 <_printf_i+0x28>
 800ccba:	a001      	add	r0, pc, #4	; (adr r0, 800ccc0 <_printf_i+0x40>)
 800ccbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ccc0:	0800cd19 	.word	0x0800cd19
 800ccc4:	0800cd2d 	.word	0x0800cd2d
 800ccc8:	0800cca9 	.word	0x0800cca9
 800cccc:	0800cca9 	.word	0x0800cca9
 800ccd0:	0800cca9 	.word	0x0800cca9
 800ccd4:	0800cca9 	.word	0x0800cca9
 800ccd8:	0800cd2d 	.word	0x0800cd2d
 800ccdc:	0800cca9 	.word	0x0800cca9
 800cce0:	0800cca9 	.word	0x0800cca9
 800cce4:	0800cca9 	.word	0x0800cca9
 800cce8:	0800cca9 	.word	0x0800cca9
 800ccec:	0800ce39 	.word	0x0800ce39
 800ccf0:	0800cd5d 	.word	0x0800cd5d
 800ccf4:	0800ce1b 	.word	0x0800ce1b
 800ccf8:	0800cca9 	.word	0x0800cca9
 800ccfc:	0800cca9 	.word	0x0800cca9
 800cd00:	0800ce5b 	.word	0x0800ce5b
 800cd04:	0800cca9 	.word	0x0800cca9
 800cd08:	0800cd5d 	.word	0x0800cd5d
 800cd0c:	0800cca9 	.word	0x0800cca9
 800cd10:	0800cca9 	.word	0x0800cca9
 800cd14:	0800ce23 	.word	0x0800ce23
 800cd18:	680b      	ldr	r3, [r1, #0]
 800cd1a:	1d1a      	adds	r2, r3, #4
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	600a      	str	r2, [r1, #0]
 800cd20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e0a3      	b.n	800ce74 <_printf_i+0x1f4>
 800cd2c:	6825      	ldr	r5, [r4, #0]
 800cd2e:	6808      	ldr	r0, [r1, #0]
 800cd30:	062e      	lsls	r6, r5, #24
 800cd32:	f100 0304 	add.w	r3, r0, #4
 800cd36:	d50a      	bpl.n	800cd4e <_printf_i+0xce>
 800cd38:	6805      	ldr	r5, [r0, #0]
 800cd3a:	600b      	str	r3, [r1, #0]
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	da03      	bge.n	800cd48 <_printf_i+0xc8>
 800cd40:	232d      	movs	r3, #45	; 0x2d
 800cd42:	426d      	negs	r5, r5
 800cd44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd48:	485e      	ldr	r0, [pc, #376]	; (800cec4 <_printf_i+0x244>)
 800cd4a:	230a      	movs	r3, #10
 800cd4c:	e019      	b.n	800cd82 <_printf_i+0x102>
 800cd4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd52:	6805      	ldr	r5, [r0, #0]
 800cd54:	600b      	str	r3, [r1, #0]
 800cd56:	bf18      	it	ne
 800cd58:	b22d      	sxthne	r5, r5
 800cd5a:	e7ef      	b.n	800cd3c <_printf_i+0xbc>
 800cd5c:	680b      	ldr	r3, [r1, #0]
 800cd5e:	6825      	ldr	r5, [r4, #0]
 800cd60:	1d18      	adds	r0, r3, #4
 800cd62:	6008      	str	r0, [r1, #0]
 800cd64:	0628      	lsls	r0, r5, #24
 800cd66:	d501      	bpl.n	800cd6c <_printf_i+0xec>
 800cd68:	681d      	ldr	r5, [r3, #0]
 800cd6a:	e002      	b.n	800cd72 <_printf_i+0xf2>
 800cd6c:	0669      	lsls	r1, r5, #25
 800cd6e:	d5fb      	bpl.n	800cd68 <_printf_i+0xe8>
 800cd70:	881d      	ldrh	r5, [r3, #0]
 800cd72:	4854      	ldr	r0, [pc, #336]	; (800cec4 <_printf_i+0x244>)
 800cd74:	2f6f      	cmp	r7, #111	; 0x6f
 800cd76:	bf0c      	ite	eq
 800cd78:	2308      	moveq	r3, #8
 800cd7a:	230a      	movne	r3, #10
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd82:	6866      	ldr	r6, [r4, #4]
 800cd84:	60a6      	str	r6, [r4, #8]
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	bfa2      	ittt	ge
 800cd8a:	6821      	ldrge	r1, [r4, #0]
 800cd8c:	f021 0104 	bicge.w	r1, r1, #4
 800cd90:	6021      	strge	r1, [r4, #0]
 800cd92:	b90d      	cbnz	r5, 800cd98 <_printf_i+0x118>
 800cd94:	2e00      	cmp	r6, #0
 800cd96:	d04d      	beq.n	800ce34 <_printf_i+0x1b4>
 800cd98:	4616      	mov	r6, r2
 800cd9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd9e:	fb03 5711 	mls	r7, r3, r1, r5
 800cda2:	5dc7      	ldrb	r7, [r0, r7]
 800cda4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cda8:	462f      	mov	r7, r5
 800cdaa:	42bb      	cmp	r3, r7
 800cdac:	460d      	mov	r5, r1
 800cdae:	d9f4      	bls.n	800cd9a <_printf_i+0x11a>
 800cdb0:	2b08      	cmp	r3, #8
 800cdb2:	d10b      	bne.n	800cdcc <_printf_i+0x14c>
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	07df      	lsls	r7, r3, #31
 800cdb8:	d508      	bpl.n	800cdcc <_printf_i+0x14c>
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	6861      	ldr	r1, [r4, #4]
 800cdbe:	4299      	cmp	r1, r3
 800cdc0:	bfde      	ittt	le
 800cdc2:	2330      	movle	r3, #48	; 0x30
 800cdc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdcc:	1b92      	subs	r2, r2, r6
 800cdce:	6122      	str	r2, [r4, #16]
 800cdd0:	f8cd a000 	str.w	sl, [sp]
 800cdd4:	464b      	mov	r3, r9
 800cdd6:	aa03      	add	r2, sp, #12
 800cdd8:	4621      	mov	r1, r4
 800cdda:	4640      	mov	r0, r8
 800cddc:	f7ff fee2 	bl	800cba4 <_printf_common>
 800cde0:	3001      	adds	r0, #1
 800cde2:	d14c      	bne.n	800ce7e <_printf_i+0x1fe>
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295
 800cde8:	b004      	add	sp, #16
 800cdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdee:	4835      	ldr	r0, [pc, #212]	; (800cec4 <_printf_i+0x244>)
 800cdf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	680e      	ldr	r6, [r1, #0]
 800cdf8:	061f      	lsls	r7, r3, #24
 800cdfa:	f856 5b04 	ldr.w	r5, [r6], #4
 800cdfe:	600e      	str	r6, [r1, #0]
 800ce00:	d514      	bpl.n	800ce2c <_printf_i+0x1ac>
 800ce02:	07d9      	lsls	r1, r3, #31
 800ce04:	bf44      	itt	mi
 800ce06:	f043 0320 	orrmi.w	r3, r3, #32
 800ce0a:	6023      	strmi	r3, [r4, #0]
 800ce0c:	b91d      	cbnz	r5, 800ce16 <_printf_i+0x196>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	f023 0320 	bic.w	r3, r3, #32
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	2310      	movs	r3, #16
 800ce18:	e7b0      	b.n	800cd7c <_printf_i+0xfc>
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	f043 0320 	orr.w	r3, r3, #32
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	2378      	movs	r3, #120	; 0x78
 800ce24:	4828      	ldr	r0, [pc, #160]	; (800cec8 <_printf_i+0x248>)
 800ce26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce2a:	e7e3      	b.n	800cdf4 <_printf_i+0x174>
 800ce2c:	065e      	lsls	r6, r3, #25
 800ce2e:	bf48      	it	mi
 800ce30:	b2ad      	uxthmi	r5, r5
 800ce32:	e7e6      	b.n	800ce02 <_printf_i+0x182>
 800ce34:	4616      	mov	r6, r2
 800ce36:	e7bb      	b.n	800cdb0 <_printf_i+0x130>
 800ce38:	680b      	ldr	r3, [r1, #0]
 800ce3a:	6826      	ldr	r6, [r4, #0]
 800ce3c:	6960      	ldr	r0, [r4, #20]
 800ce3e:	1d1d      	adds	r5, r3, #4
 800ce40:	600d      	str	r5, [r1, #0]
 800ce42:	0635      	lsls	r5, r6, #24
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	d501      	bpl.n	800ce4c <_printf_i+0x1cc>
 800ce48:	6018      	str	r0, [r3, #0]
 800ce4a:	e002      	b.n	800ce52 <_printf_i+0x1d2>
 800ce4c:	0671      	lsls	r1, r6, #25
 800ce4e:	d5fb      	bpl.n	800ce48 <_printf_i+0x1c8>
 800ce50:	8018      	strh	r0, [r3, #0]
 800ce52:	2300      	movs	r3, #0
 800ce54:	6123      	str	r3, [r4, #16]
 800ce56:	4616      	mov	r6, r2
 800ce58:	e7ba      	b.n	800cdd0 <_printf_i+0x150>
 800ce5a:	680b      	ldr	r3, [r1, #0]
 800ce5c:	1d1a      	adds	r2, r3, #4
 800ce5e:	600a      	str	r2, [r1, #0]
 800ce60:	681e      	ldr	r6, [r3, #0]
 800ce62:	6862      	ldr	r2, [r4, #4]
 800ce64:	2100      	movs	r1, #0
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7f3 f9c2 	bl	80001f0 <memchr>
 800ce6c:	b108      	cbz	r0, 800ce72 <_printf_i+0x1f2>
 800ce6e:	1b80      	subs	r0, r0, r6
 800ce70:	6060      	str	r0, [r4, #4]
 800ce72:	6863      	ldr	r3, [r4, #4]
 800ce74:	6123      	str	r3, [r4, #16]
 800ce76:	2300      	movs	r3, #0
 800ce78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce7c:	e7a8      	b.n	800cdd0 <_printf_i+0x150>
 800ce7e:	6923      	ldr	r3, [r4, #16]
 800ce80:	4632      	mov	r2, r6
 800ce82:	4649      	mov	r1, r9
 800ce84:	4640      	mov	r0, r8
 800ce86:	47d0      	blx	sl
 800ce88:	3001      	adds	r0, #1
 800ce8a:	d0ab      	beq.n	800cde4 <_printf_i+0x164>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	079b      	lsls	r3, r3, #30
 800ce90:	d413      	bmi.n	800ceba <_printf_i+0x23a>
 800ce92:	68e0      	ldr	r0, [r4, #12]
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	4298      	cmp	r0, r3
 800ce98:	bfb8      	it	lt
 800ce9a:	4618      	movlt	r0, r3
 800ce9c:	e7a4      	b.n	800cde8 <_printf_i+0x168>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	4632      	mov	r2, r6
 800cea2:	4649      	mov	r1, r9
 800cea4:	4640      	mov	r0, r8
 800cea6:	47d0      	blx	sl
 800cea8:	3001      	adds	r0, #1
 800ceaa:	d09b      	beq.n	800cde4 <_printf_i+0x164>
 800ceac:	3501      	adds	r5, #1
 800ceae:	68e3      	ldr	r3, [r4, #12]
 800ceb0:	9903      	ldr	r1, [sp, #12]
 800ceb2:	1a5b      	subs	r3, r3, r1
 800ceb4:	42ab      	cmp	r3, r5
 800ceb6:	dcf2      	bgt.n	800ce9e <_printf_i+0x21e>
 800ceb8:	e7eb      	b.n	800ce92 <_printf_i+0x212>
 800ceba:	2500      	movs	r5, #0
 800cebc:	f104 0619 	add.w	r6, r4, #25
 800cec0:	e7f5      	b.n	800ceae <_printf_i+0x22e>
 800cec2:	bf00      	nop
 800cec4:	0800d0a5 	.word	0x0800d0a5
 800cec8:	0800d0b6 	.word	0x0800d0b6

0800cecc <__retarget_lock_acquire_recursive>:
 800cecc:	4770      	bx	lr

0800cece <__retarget_lock_release_recursive>:
 800cece:	4770      	bx	lr

0800ced0 <memmove>:
 800ced0:	4288      	cmp	r0, r1
 800ced2:	b510      	push	{r4, lr}
 800ced4:	eb01 0402 	add.w	r4, r1, r2
 800ced8:	d902      	bls.n	800cee0 <memmove+0x10>
 800ceda:	4284      	cmp	r4, r0
 800cedc:	4623      	mov	r3, r4
 800cede:	d807      	bhi.n	800cef0 <memmove+0x20>
 800cee0:	1e43      	subs	r3, r0, #1
 800cee2:	42a1      	cmp	r1, r4
 800cee4:	d008      	beq.n	800cef8 <memmove+0x28>
 800cee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceee:	e7f8      	b.n	800cee2 <memmove+0x12>
 800cef0:	4402      	add	r2, r0
 800cef2:	4601      	mov	r1, r0
 800cef4:	428a      	cmp	r2, r1
 800cef6:	d100      	bne.n	800cefa <memmove+0x2a>
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf02:	e7f7      	b.n	800cef4 <memmove+0x24>

0800cf04 <_realloc_r>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	4607      	mov	r7, r0
 800cf08:	4614      	mov	r4, r2
 800cf0a:	460e      	mov	r6, r1
 800cf0c:	b921      	cbnz	r1, 800cf18 <_realloc_r+0x14>
 800cf0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cf12:	4611      	mov	r1, r2
 800cf14:	f7ff bc1a 	b.w	800c74c <_malloc_r>
 800cf18:	b922      	cbnz	r2, 800cf24 <_realloc_r+0x20>
 800cf1a:	f7ff fbc7 	bl	800c6ac <_free_r>
 800cf1e:	4625      	mov	r5, r4
 800cf20:	4628      	mov	r0, r5
 800cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf24:	f000 f814 	bl	800cf50 <_malloc_usable_size_r>
 800cf28:	42a0      	cmp	r0, r4
 800cf2a:	d20f      	bcs.n	800cf4c <_realloc_r+0x48>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	4638      	mov	r0, r7
 800cf30:	f7ff fc0c 	bl	800c74c <_malloc_r>
 800cf34:	4605      	mov	r5, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d0f2      	beq.n	800cf20 <_realloc_r+0x1c>
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	f7ff fb9f 	bl	800c680 <memcpy>
 800cf42:	4631      	mov	r1, r6
 800cf44:	4638      	mov	r0, r7
 800cf46:	f7ff fbb1 	bl	800c6ac <_free_r>
 800cf4a:	e7e9      	b.n	800cf20 <_realloc_r+0x1c>
 800cf4c:	4635      	mov	r5, r6
 800cf4e:	e7e7      	b.n	800cf20 <_realloc_r+0x1c>

0800cf50 <_malloc_usable_size_r>:
 800cf50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf54:	1f18      	subs	r0, r3, #4
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bfbc      	itt	lt
 800cf5a:	580b      	ldrlt	r3, [r1, r0]
 800cf5c:	18c0      	addlt	r0, r0, r3
 800cf5e:	4770      	bx	lr

0800cf60 <_init>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr

0800cf6c <_fini>:
 800cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6e:	bf00      	nop
 800cf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf72:	bc08      	pop	{r3}
 800cf74:	469e      	mov	lr, r3
 800cf76:	4770      	bx	lr
